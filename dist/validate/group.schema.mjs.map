{"version":3,"sources":["../../node_modules/uuid/dist/esm-node/rng.js","../../node_modules/uuid/dist/esm-node/stringify.js","../../node_modules/uuid/dist/esm-node/native.js","../../node_modules/uuid/dist/esm-node/v4.js","../../src/validate/group.schema.ts"],"sourcesContent":["import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import crypto from 'crypto';\nexport default {\n  randomUUID: crypto.randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const createGroupSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    subject: { type: 'string' },\n    description: { type: 'string' },\n    profilePicture: { type: 'string' },\n    promoteParticipants: { type: 'boolean', enum: [true, false] },\n    participants: {\n      type: 'array',\n      minItems: 1,\n      uniqueItems: true,\n      items: {\n        type: 'string',\n        minLength: 10,\n        pattern: '\\\\d+',\n        description: '\"participants\" must be an array of numeric strings',\n      },\n    },\n  },\n  required: ['subject', 'participants'],\n  ...isNotEmpty('subject', 'description', 'profilePicture'),\n};\n\nexport const groupJidSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    groupJid: { type: 'string', pattern: '^[\\\\d-]+@g.us$' },\n  },\n  required: ['groupJid'],\n  ...isNotEmpty('groupJid'),\n};\n\nexport const getParticipantsSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    getParticipants: { type: 'string', enum: ['true', 'false'] },\n  },\n  required: ['getParticipants'],\n  ...isNotEmpty('getParticipants'),\n};\n\nexport const groupSendInviteSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    groupJid: { type: 'string' },\n    description: { type: 'string' },\n    numbers: {\n      type: 'array',\n      minItems: 1,\n      uniqueItems: true,\n      items: {\n        type: 'string',\n        minLength: 10,\n        pattern: '\\\\d+',\n        description: '\"numbers\" must be an array of numeric strings',\n      },\n    },\n  },\n  required: ['groupJid', 'description', 'numbers'],\n  ...isNotEmpty('groupJid', 'description', 'numbers'),\n};\n\nexport const groupInviteSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    inviteCode: { type: 'string', pattern: '^[a-zA-Z0-9]{22}$' },\n  },\n  required: ['inviteCode'],\n  ...isNotEmpty('inviteCode'),\n};\n\nexport const AcceptGroupInviteSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    inviteCode: { type: 'string', pattern: '^[a-zA-Z0-9]{22}$' },\n  },\n  required: ['inviteCode'],\n  ...isNotEmpty('inviteCode'),\n};\n\nexport const updateParticipantsSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    groupJid: { type: 'string' },\n    action: {\n      type: 'string',\n      enum: ['add', 'remove', 'promote', 'demote'],\n    },\n    participants: {\n      type: 'array',\n      minItems: 1,\n      uniqueItems: true,\n      items: {\n        type: 'string',\n        minLength: 10,\n        pattern: '\\\\d+',\n        description: '\"participants\" must be an array of numeric strings',\n      },\n    },\n  },\n  required: ['groupJid', 'action', 'participants'],\n  ...isNotEmpty('groupJid', 'action'),\n};\n\nexport const updateSettingsSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    groupJid: { type: 'string' },\n    action: {\n      type: 'string',\n      enum: ['announcement', 'not_announcement', 'locked', 'unlocked'],\n    },\n  },\n  required: ['groupJid', 'action'],\n  ...isNotEmpty('groupJid', 'action'),\n};\n\nexport const toggleEphemeralSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    groupJid: { type: 'string' },\n    expiration: {\n      type: 'number',\n      enum: [0, 86400, 604800, 7776000],\n    },\n  },\n  required: ['groupJid', 'expiration'],\n  ...isNotEmpty('groupJid', 'expiration'),\n};\n\nexport const updateGroupPictureSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    groupJid: { type: 'string' },\n    image: { type: 'string' },\n  },\n  required: ['groupJid', 'image'],\n  ...isNotEmpty('groupJid', 'image'),\n};\n\nexport const updateGroupSubjectSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    groupJid: { type: 'string' },\n    subject: { type: 'string' },\n  },\n  required: ['groupJid', 'subject'],\n  ...isNotEmpty('groupJid', 'subject'),\n};\n\nexport const updateGroupDescriptionSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    groupJid: { type: 'string' },\n    description: { type: 'string' },\n  },\n  required: ['groupJid', 'description'],\n  ...isNotEmpty('groupJid', 'description'),\n};\n"],"mappings":"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","names":["crypto","rnds8Pool","poolPtr","rng","byteToHex","i","unsafeStringify","arr","offset","crypto","native_default","v4","options","buf","offset","native_default","rnds","rng","i","unsafeStringify","v4_default","isNotEmpty","propertyNames","properties","property","createGroupSchema","v4_default","groupJidSchema","getParticipantsSchema","groupSendInviteSchema","groupInviteSchema","AcceptGroupInviteSchema","updateParticipantsSchema","updateSettingsSchema","toggleEphemeralSchema","updateGroupPictureSchema","updateGroupSubjectSchema","updateGroupDescriptionSchema"]}