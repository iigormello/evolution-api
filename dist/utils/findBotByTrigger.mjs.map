{"version":3,"sources":["../../src/utils/advancedOperatorsSearch.ts","../../src/utils/findBotByTrigger.ts"],"sourcesContent":["function normalizeString(str: string): string {\n  return str\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '')\n    .toLowerCase();\n}\n\nexport function advancedOperatorsSearch(data: string, query: string): boolean {\n  const filters = query.split(' ').reduce((acc: Record<string, string[]>, filter) => {\n    const [operator, ...values] = filter.split(':');\n    const value = values.join(':');\n\n    if (!acc[operator]) {\n      acc[operator] = [];\n    }\n    acc[operator].push(value);\n    return acc;\n  }, {});\n\n  const normalizedItem = normalizeString(data);\n\n  return Object.entries(filters).every(([operator, values]) => {\n    return values.some((val) => {\n      const subValues = val.split(',');\n      return subValues.every((subVal) => {\n        const normalizedSubVal = normalizeString(subVal);\n\n        switch (operator.toLowerCase()) {\n          case 'contains':\n            return normalizedItem.includes(normalizedSubVal);\n          case 'notcontains':\n            return !normalizedItem.includes(normalizedSubVal);\n          case 'startswith':\n            return normalizedItem.startsWith(normalizedSubVal);\n          case 'endswith':\n            return normalizedItem.endsWith(normalizedSubVal);\n          case 'exact':\n            return normalizedItem === normalizedSubVal;\n          default:\n            return false;\n        }\n      });\n    });\n  });\n}\n","import { advancedOperatorsSearch } from './advancedOperatorsSearch';\n\nexport const findBotByTrigger = async (botRepository: any, content: string, instanceId: string) => {\n  // Check for triggerType 'all'\n  const findTriggerAll = await botRepository.findFirst({\n    where: {\n      enabled: true,\n      triggerType: 'all',\n      instanceId: instanceId,\n    },\n  });\n\n  if (findTriggerAll) return findTriggerAll;\n\n  const findTriggerAdvanced = await botRepository.findMany({\n    where: {\n      enabled: true,\n      triggerType: 'advanced',\n      instanceId: instanceId,\n    },\n  });\n  for (const advanced of findTriggerAdvanced) {\n    if (advancedOperatorsSearch(content, advanced.triggerValue)) {\n      return advanced;\n    }\n  }\n\n  // Check for exact match\n  const findTriggerEquals = await botRepository.findFirst({\n    where: {\n      enabled: true,\n      triggerType: 'keyword',\n      triggerOperator: 'equals',\n      triggerValue: content,\n      instanceId: instanceId,\n    },\n  });\n\n  if (findTriggerEquals) return findTriggerEquals;\n\n  // Check for regex match\n  const findRegex = await botRepository.findMany({\n    where: {\n      enabled: true,\n      triggerType: 'keyword',\n      triggerOperator: 'regex',\n      instanceId: instanceId,\n    },\n  });\n\n  let findTriggerRegex = null;\n\n  for (const regex of findRegex) {\n    const regexValue = new RegExp(regex.triggerValue);\n\n    if (regexValue.test(content)) {\n      findTriggerRegex = regex;\n      break;\n    }\n  }\n\n  if (findTriggerRegex) return findTriggerRegex;\n\n  // Check for startsWith match\n  const findStartsWith = await botRepository.findMany({\n    where: {\n      enabled: true,\n      triggerType: 'keyword',\n      triggerOperator: 'startsWith',\n      instanceId: instanceId,\n    },\n  });\n\n  let findTriggerStartsWith = null;\n\n  for (const startsWith of findStartsWith) {\n    if (content.startsWith(startsWith.triggerValue)) {\n      findTriggerStartsWith = startsWith;\n      break;\n    }\n  }\n\n  if (findTriggerStartsWith) return findTriggerStartsWith;\n\n  // Check for endsWith match\n  const findEndsWith = await botRepository.findMany({\n    where: {\n      enabled: true,\n      triggerType: 'keyword',\n      triggerOperator: 'endsWith',\n      instanceId: instanceId,\n    },\n  });\n\n  let findTriggerEndsWith = null;\n\n  for (const endsWith of findEndsWith) {\n    if (content.endsWith(endsWith.triggerValue)) {\n      findTriggerEndsWith = endsWith;\n      break;\n    }\n  }\n\n  if (findTriggerEndsWith) return findTriggerEndsWith;\n\n  // Check for contains match\n  const findContains = await botRepository.findMany({\n    where: {\n      enabled: true,\n      triggerType: 'keyword',\n      triggerOperator: 'contains',\n      instanceId: instanceId,\n    },\n  });\n\n  let findTriggerContains = null;\n\n  for (const contains of findContains) {\n    if (content.includes(contains.triggerValue)) {\n      findTriggerContains = contains;\n      break;\n    }\n  }\n\n  if (findTriggerContains) return findTriggerContains;\n\n  return null;\n};\n"],"mappings":"AAAA,SAASA,EAAgBC,EAAqB,CAC5C,OAAOA,EACJ,UAAU,KAAK,EACf,QAAQ,mBAAoB,EAAE,EAC9B,YAAY,CACjB,CAEO,SAASC,EAAwBC,EAAcC,EAAwB,CAC5E,IAAMC,EAAUD,EAAM,MAAM,GAAG,EAAE,OAAO,CAACE,EAA+BC,IAAW,CACjF,GAAM,CAACC,EAAU,GAAGC,CAAM,EAAIF,EAAO,MAAM,GAAG,EACxCG,EAAQD,EAAO,KAAK,GAAG,EAE7B,OAAKH,EAAIE,CAAQ,IACfF,EAAIE,CAAQ,EAAI,CAAC,GAEnBF,EAAIE,CAAQ,EAAE,KAAKE,CAAK,EACjBJ,CACT,EAAG,CAAC,CAAC,EAECK,EAAiBX,EAAgBG,CAAI,EAE3C,OAAO,OAAO,QAAQE,CAAO,EAAE,MAAM,CAAC,CAACG,EAAUC,CAAM,IAC9CA,EAAO,KAAMG,GACAA,EAAI,MAAM,GAAG,EACd,MAAOC,GAAW,CACjC,IAAMC,EAAmBd,EAAgBa,CAAM,EAE/C,OAAQL,EAAS,YAAY,EAAG,CAC9B,IAAK,WACH,OAAOG,EAAe,SAASG,CAAgB,EACjD,IAAK,cACH,MAAO,CAACH,EAAe,SAASG,CAAgB,EAClD,IAAK,aACH,OAAOH,EAAe,WAAWG,CAAgB,EACnD,IAAK,WACH,OAAOH,EAAe,SAASG,CAAgB,EACjD,IAAK,QACH,OAAOH,IAAmBG,EAC5B,QACE,MAAO,EACX,CACF,CAAC,CACF,CACF,CACH,CC1CO,IAAMC,EAAmB,MAAOC,EAAoBC,EAAiBC,IAAuB,CAEjG,IAAMC,EAAiB,MAAMH,EAAc,UAAU,CACnD,MAAO,CACL,QAAS,GACT,YAAa,MACb,WAAYE,CACd,CACF,CAAC,EAED,GAAIC,EAAgB,OAAOA,EAE3B,IAAMC,EAAsB,MAAMJ,EAAc,SAAS,CACvD,MAAO,CACL,QAAS,GACT,YAAa,WACb,WAAYE,CACd,CACF,CAAC,EACD,QAAWG,KAAYD,EACrB,GAAIE,EAAwBL,EAASI,EAAS,YAAY,EACxD,OAAOA,EAKX,IAAME,EAAoB,MAAMP,EAAc,UAAU,CACtD,MAAO,CACL,QAAS,GACT,YAAa,UACb,gBAAiB,SACjB,aAAcC,EACd,WAAYC,CACd,CACF,CAAC,EAED,GAAIK,EAAmB,OAAOA,EAG9B,IAAMC,EAAY,MAAMR,EAAc,SAAS,CAC7C,MAAO,CACL,QAAS,GACT,YAAa,UACb,gBAAiB,QACjB,WAAYE,CACd,CACF,CAAC,EAEGO,EAAmB,KAEvB,QAAWC,KAASF,EAGlB,GAFmB,IAAI,OAAOE,EAAM,YAAY,EAEjC,KAAKT,CAAO,EAAG,CAC5BQ,EAAmBC,EACnB,KACF,CAGF,GAAID,EAAkB,OAAOA,EAG7B,IAAME,EAAiB,MAAMX,EAAc,SAAS,CAClD,MAAO,CACL,QAAS,GACT,YAAa,UACb,gBAAiB,aACjB,WAAYE,CACd,CACF,CAAC,EAEGU,EAAwB,KAE5B,QAAWC,KAAcF,EACvB,GAAIV,EAAQ,WAAWY,EAAW,YAAY,EAAG,CAC/CD,EAAwBC,EACxB,KACF,CAGF,GAAID,EAAuB,OAAOA,EAGlC,IAAME,EAAe,MAAMd,EAAc,SAAS,CAChD,MAAO,CACL,QAAS,GACT,YAAa,UACb,gBAAiB,WACjB,WAAYE,CACd,CACF,CAAC,EAEGa,EAAsB,KAE1B,QAAWC,KAAYF,EACrB,GAAIb,EAAQ,SAASe,EAAS,YAAY,EAAG,CAC3CD,EAAsBC,EACtB,KACF,CAGF,GAAID,EAAqB,OAAOA,EAGhC,IAAME,EAAe,MAAMjB,EAAc,SAAS,CAChD,MAAO,CACL,QAAS,GACT,YAAa,UACb,gBAAiB,WACjB,WAAYE,CACd,CACF,CAAC,EAEGgB,EAAsB,KAE1B,QAAWC,KAAYF,EACrB,GAAIhB,EAAQ,SAASkB,EAAS,YAAY,EAAG,CAC3CD,EAAsBC,EACtB,KACF,CAGF,OAAID,GAEG,IACT","names":["normalizeString","str","advancedOperatorsSearch","data","query","filters","acc","filter","operator","values","value","normalizedItem","val","subVal","normalizedSubVal","findBotByTrigger","botRepository","content","instanceId","findTriggerAll","findTriggerAdvanced","advanced","advancedOperatorsSearch","findTriggerEquals","findRegex","findTriggerRegex","regex","findStartsWith","findTriggerStartsWith","startsWith","findEndsWith","findTriggerEndsWith","endsWith","findContains","findTriggerContains","contains"]}