{"version":3,"sources":["../../../src/utils/sendTelemetry.ts","../../../src/api/guards/telemetry.guard.ts"],"sourcesContent":["import axios from 'axios';\nimport fs from 'fs';\n\nconst packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));\n\nexport interface TelemetryData {\n  route: string;\n  apiVersion: string;\n  timestamp: Date;\n}\n\nexport const sendTelemetry = async (route: string): Promise<void> => {\n  const enabled = process.env.TELEMETRY_ENABLED === undefined || process.env.TELEMETRY_ENABLED === 'true';\n\n  if (!enabled) {\n    return;\n  }\n\n  if (route === '/') {\n    return;\n  }\n\n  const telemetry: TelemetryData = {\n    route,\n    apiVersion: `${packageJson.version}`,\n    timestamp: new Date(),\n  };\n\n  const url =\n    process.env.TELEMETRY_URL && process.env.TELEMETRY_URL !== ''\n      ? process.env.TELEMETRY_URL\n      : 'https://log.evolution-api.com/telemetry';\n\n  axios\n    .post(url, telemetry)\n    .then(() => {})\n    .catch(() => {});\n};\n","import { sendTelemetry } from '@utils/sendTelemetry';\nimport { NextFunction, Request, Response } from 'express';\n\nclass Telemetry {\n  public collectTelemetry(req: Request, res: Response, next: NextFunction): void {\n    sendTelemetry(req.path);\n\n    next();\n  }\n}\n\nexport default Telemetry;\n"],"mappings":"AAAA,OAAOA,MAAW,QAClB,OAAOC,MAAQ,KAEf,IAAMC,EAAc,KAAK,MAAMD,EAAG,aAAa,iBAAkB,MAAM,CAAC,EAQ3DE,EAAgB,MAAOC,GAAiC,CAOnE,GAJI,EAFY,QAAQ,IAAI,oBAAsB,QAAa,QAAQ,IAAI,oBAAsB,SAM7FA,IAAU,IACZ,OAGF,IAAMC,EAA2B,CAC/B,MAAAD,EACA,WAAY,GAAGF,EAAY,OAAO,GAClC,UAAW,IAAI,IACjB,EAEMI,EACJ,QAAQ,IAAI,eAAiB,QAAQ,IAAI,gBAAkB,GACvD,QAAQ,IAAI,cACZ,0CAENN,EACG,KAAKM,EAAKD,CAAS,EACnB,KAAK,IAAM,CAAC,CAAC,EACb,MAAM,IAAM,CAAC,CAAC,CACnB,EClCA,IAAME,EAAN,KAAgB,CACP,iBAAiBC,EAAcC,EAAeC,EAA0B,CAC7EC,EAAcH,EAAI,IAAI,EAEtBE,EAAK,CACP,CACF,EAEOE,EAAQL","names":["axios","fs","packageJson","sendTelemetry","route","telemetry","url","Telemetry","req","res","next","sendTelemetry","telemetry_guard_default"]}