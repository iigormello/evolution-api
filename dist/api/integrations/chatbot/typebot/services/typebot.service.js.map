{"version":3,"sources":["../../../../../../src/api/integrations/chatbot/typebot/services/typebot.service.ts","../../../../../../src/config/logger.config.ts","../../../../../../src/config/env.config.ts","../../../../../../src/utils/getConversationMessage.ts","../../../../../../src/utils/sendTelemetry.ts"],"sourcesContent":["import { PrismaRepository } from '@api/repository/repository.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { Auth, ConfigService, HttpServer, Typebot } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport { Instance, IntegrationSession, Message, Typebot as TypebotModel } from '@prisma/client';\nimport { getConversationMessage } from '@utils/getConversationMessage';\nimport { sendTelemetry } from '@utils/sendTelemetry';\nimport axios from 'axios';\n\nexport class TypebotService {\n  constructor(\n    private readonly waMonitor: WAMonitoringService,\n    private readonly configService: ConfigService,\n    private readonly prismaRepository: PrismaRepository,\n  ) {}\n\n  private readonly logger = new Logger('TypebotService');\n\n  public async createNewSession(instance: Instance, data: any) {\n    if (data.remoteJid === 'status@broadcast') return;\n    const id = Math.floor(Math.random() * 10000000000).toString();\n\n    try {\n      const version = this.configService.get<Typebot>('TYPEBOT').API_VERSION;\n      let url: string;\n      let reqData: {};\n      if (version === 'latest') {\n        url = `${data.url}/api/v1/typebots/${data.typebot}/startChat`;\n\n        reqData = {\n          prefilledVariables: {\n            ...data.prefilledVariables,\n            remoteJid: data.remoteJid,\n            pushName: data.pushName || data.prefilledVariables?.pushName || '',\n            instanceName: instance.name,\n            serverUrl: this.configService.get<HttpServer>('SERVER').URL,\n            apiKey: this.configService.get<Auth>('AUTHENTICATION').API_KEY.KEY,\n            ownerJid: instance.number,\n          },\n        };\n      } else {\n        url = `${data.url}/api/v1/sendMessage`;\n\n        reqData = {\n          startParams: {\n            publicId: data.typebot,\n            prefilledVariables: {\n              ...data.prefilledVariables,\n              remoteJid: data.remoteJid,\n              pushName: data.pushName || data.prefilledVariables?.pushName || '',\n              instanceName: instance.name,\n              serverUrl: this.configService.get<HttpServer>('SERVER').URL,\n              apiKey: this.configService.get<Auth>('AUTHENTICATION').API_KEY.KEY,\n              ownerJid: instance.number,\n            },\n          },\n        };\n      }\n      const request = await axios.post(url, reqData);\n\n      let session = null;\n      if (request?.data?.sessionId) {\n        session = await this.prismaRepository.integrationSession.create({\n          data: {\n            remoteJid: data.remoteJid,\n            pushName: data.pushName || '',\n            sessionId: `${id}-${request.data.sessionId}`,\n            status: 'opened',\n            parameters: {\n              ...data.prefilledVariables,\n              remoteJid: data.remoteJid,\n              pushName: data.pushName || '',\n              instanceName: instance.name,\n              serverUrl: this.configService.get<HttpServer>('SERVER').URL,\n              apiKey: this.configService.get<Auth>('AUTHENTICATION').API_KEY.KEY,\n              ownerJid: instance.number,\n            },\n            awaitUser: false,\n            botId: data.botId,\n            instanceId: instance.id,\n            type: 'typebot',\n          },\n        });\n      }\n      return { ...request.data, session };\n    } catch (error) {\n      this.logger.error(error);\n      return;\n    }\n  }\n\n  public async sendWAMessage(\n    instance: Instance,\n    session: IntegrationSession,\n    settings: {\n      expire: number;\n      keywordFinish: string;\n      delayMessage: number;\n      unknownMessage: string;\n      listeningFromMe: boolean;\n      stopBotFromMe: boolean;\n      keepOpen: boolean;\n    },\n    remoteJid: string,\n    messages: any,\n    input: any,\n    clientSideActions: any,\n  ) {\n    processMessages(\n      this.waMonitor.waInstances[instance.name],\n      session,\n      settings,\n      messages,\n      input,\n      clientSideActions,\n      applyFormatting,\n      this.prismaRepository,\n    ).catch((err) => {\n      console.error('Erro ao processar mensagens:', err);\n    });\n\n    function findItemAndGetSecondsToWait(array, targetId) {\n      if (!array) return null;\n\n      for (const item of array) {\n        if (item.lastBubbleBlockId === targetId) {\n          return item.wait?.secondsToWaitFor;\n        }\n      }\n      return null;\n    }\n\n    function applyFormatting(element) {\n      let text = '';\n\n      if (element.text) {\n        text += element.text;\n      }\n\n      if (element.children && element.type !== 'a') {\n        for (const child of element.children) {\n          text += applyFormatting(child);\n        }\n      }\n\n      if (element.type === 'p' && element.type !== 'inline-variable') {\n        text = text.trim() + '\\n';\n      }\n\n      if (element.type === 'inline-variable') {\n        text = text.trim();\n      }\n\n      if (element.type === 'ol') {\n        text =\n          '\\n' +\n          text\n            .split('\\n')\n            .map((line, index) => (line ? `${index + 1}. ${line}` : ''))\n            .join('\\n');\n      }\n\n      if (element.type === 'li') {\n        text = text\n          .split('\\n')\n          .map((line) => (line ? `  ${line}` : ''))\n          .join('\\n');\n      }\n\n      let formats = '';\n\n      if (element.bold) {\n        formats += '*';\n      }\n\n      if (element.italic) {\n        formats += '_';\n      }\n\n      if (element.underline) {\n        formats += '~';\n      }\n\n      let formattedText = `${formats}${text}${formats.split('').reverse().join('')}`;\n\n      if (element.url) {\n        formattedText = element.children[0]?.text ? `[${formattedText}]\\n(${element.url})` : `${element.url}`;\n      }\n\n      return formattedText;\n    }\n\n    async function processMessages(\n      instance: any,\n      session: IntegrationSession,\n      settings: {\n        expire: number;\n        keywordFinish: string;\n        delayMessage: number;\n        unknownMessage: string;\n        listeningFromMe: boolean;\n        stopBotFromMe: boolean;\n        keepOpen: boolean;\n      },\n      messages: any,\n      input: any,\n      clientSideActions: any,\n      applyFormatting: any,\n      prismaRepository: PrismaRepository,\n    ) {\n      for (const message of messages) {\n        if (message.type === 'text') {\n          let formattedText = '';\n\n          for (const richText of message.content.richText) {\n            for (const element of richText.children) {\n              formattedText += applyFormatting(element);\n            }\n            formattedText += '\\n';\n          }\n\n          formattedText = formattedText.replace(/\\*\\*/g, '').replace(/__/, '').replace(/~~/, '').replace(/\\n$/, '');\n\n          formattedText = formattedText.replace(/\\n$/, '');\n\n          if (formattedText.includes('[list]')) {\n            const listJson = {\n              number: remoteJid.split('@')[0],\n              title: '',\n              description: '',\n              buttonText: '',\n              footerText: '',\n              sections: [],\n            };\n\n            const titleMatch = formattedText.match(/\\[title\\]([\\s\\S]*?)(?=\\[description\\])/);\n            const descriptionMatch = formattedText.match(/\\[description\\]([\\s\\S]*?)(?=\\[buttonText\\])/);\n            const buttonTextMatch = formattedText.match(/\\[buttonText\\]([\\s\\S]*?)(?=\\[footerText\\])/);\n            const footerTextMatch = formattedText.match(/\\[footerText\\]([\\s\\S]*?)(?=\\[menu\\])/);\n\n            if (titleMatch) listJson.title = titleMatch[1].trim();\n            if (descriptionMatch) listJson.description = descriptionMatch[1].trim();\n            if (buttonTextMatch) listJson.buttonText = buttonTextMatch[1].trim();\n            if (footerTextMatch) listJson.footerText = footerTextMatch[1].trim();\n\n            const menuContent = formattedText.match(/\\[menu\\]([\\s\\S]*?)\\[\\/menu\\]/)?.[1];\n            if (menuContent) {\n              const sections = menuContent.match(/\\[section\\]([\\s\\S]*?)(?=\\[section\\]|\\[\\/section\\]|\\[\\/menu\\])/g);\n              if (sections) {\n                sections.forEach((section) => {\n                  const sectionTitle = section.match(/title: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                  const rows = section.match(/\\[row\\]([\\s\\S]*?)(?=\\[row\\]|\\[\\/row\\]|\\[\\/section\\]|\\[\\/menu\\])/g);\n\n                  const sectionData = {\n                    title: sectionTitle,\n                    rows:\n                      rows?.map((row) => ({\n                        title: row.match(/title: (.*?)(?:\\n|$)/)?.[1]?.trim(),\n                        description: row.match(/description: (.*?)(?:\\n|$)/)?.[1]?.trim(),\n                        rowId: row.match(/rowId: (.*?)(?:\\n|$)/)?.[1]?.trim(),\n                      })) || [],\n                  };\n\n                  listJson.sections.push(sectionData);\n                });\n              }\n            }\n\n            await instance.listMessage(listJson);\n          } else if (formattedText.includes('[buttons]')) {\n            const buttonJson = {\n              number: remoteJid.split('@')[0],\n              thumbnailUrl: undefined,\n              title: '',\n              description: '',\n              footer: '',\n              buttons: [],\n            };\n\n            const thumbnailUrlMatch = formattedText.match(/\\[thumbnailUrl\\]([\\s\\S]*?)(?=\\[title\\])/);\n            const titleMatch = formattedText.match(/\\[title\\]([\\s\\S]*?)(?=\\[description\\])/);\n            const descriptionMatch = formattedText.match(/\\[description\\]([\\s\\S]*?)(?=\\[footer\\])/);\n            const footerMatch = formattedText.match(/\\[footer\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url))/);\n\n            if (titleMatch) buttonJson.title = titleMatch[1].trim();\n            if (thumbnailUrlMatch) buttonJson.thumbnailUrl = thumbnailUrlMatch[1].trim();\n            if (descriptionMatch) buttonJson.description = descriptionMatch[1].trim();\n            if (footerMatch) buttonJson.footer = footerMatch[1].trim();\n\n            const buttonTypes = {\n              reply: /\\[reply\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\n              pix: /\\[pix\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\n              copy: /\\[copy\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\n              call: /\\[call\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\n              url: /\\[url\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\n            };\n\n            for (const [type, pattern] of Object.entries(buttonTypes)) {\n              let match;\n              while ((match = pattern.exec(formattedText)) !== null) {\n                const content = match[1].trim();\n                const button: any = { type };\n\n                switch (type) {\n                  case 'pix':\n                    button.currency = content.match(/currency: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.name = content.match(/name: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.keyType = content.match(/keyType: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.key = content.match(/key: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    break;\n\n                  case 'reply':\n                    button.displayText = content.match(/displayText: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.id = content.match(/id: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    break;\n\n                  case 'copy':\n                    button.displayText = content.match(/displayText: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.copyCode = content.match(/copyCode: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    break;\n\n                  case 'call':\n                    button.displayText = content.match(/displayText: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.phoneNumber = content.match(/phone: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    break;\n\n                  case 'url':\n                    button.displayText = content.match(/displayText: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.url = content.match(/url: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    break;\n                }\n\n                if (Object.keys(button).length > 1) {\n                  buttonJson.buttons.push(button);\n                }\n              }\n            }\n\n            await instance.buttonMessage(buttonJson);\n          } else {\n            await instance.textMessage(\n              {\n                number: remoteJid.split('@')[0],\n                delay: settings?.delayMessage || 1000,\n                text: formattedText,\n              },\n              false,\n            );\n          }\n\n          sendTelemetry('/message/sendText');\n        }\n\n        if (message.type === 'image') {\n          await instance.mediaMessage(\n            {\n              number: remoteJid.split('@')[0],\n              delay: settings?.delayMessage || 1000,\n              mediatype: 'image',\n              media: message.content.url,\n            },\n            null,\n            false,\n          );\n\n          sendTelemetry('/message/sendMedia');\n        }\n\n        if (message.type === 'video') {\n          await instance.mediaMessage(\n            {\n              number: remoteJid.split('@')[0],\n              delay: settings?.delayMessage || 1000,\n              mediatype: 'video',\n              media: message.content.url,\n            },\n            null,\n            false,\n          );\n\n          sendTelemetry('/message/sendMedia');\n        }\n\n        if (message.type === 'audio') {\n          await instance.audioWhatsapp(\n            {\n              number: remoteJid.split('@')[0],\n              delay: settings?.delayMessage || 1000,\n              encoding: true,\n              audio: message.content.url,\n            },\n            false,\n          );\n\n          sendTelemetry('/message/sendWhatsAppAudio');\n        }\n\n        const wait = findItemAndGetSecondsToWait(clientSideActions, message.id);\n\n        if (wait) {\n          await new Promise((resolve) => setTimeout(resolve, wait * 1000));\n        }\n      }\n\n      console.log('input', input);\n      if (input) {\n        if (input.type === 'choice input') {\n          let formattedText = '';\n\n          const items = input.items;\n\n          for (const item of items) {\n            formattedText += `▶️ ${item.content}\\n`;\n          }\n\n          formattedText = formattedText.replace(/\\n$/, '');\n\n          if (formattedText.includes('[list]')) {\n            const listJson = {\n              number: remoteJid.split('@')[0],\n              title: '',\n              description: '',\n              buttonText: '',\n              footerText: '',\n              sections: [],\n            };\n\n            const titleMatch = formattedText.match(/\\[title\\]([\\s\\S]*?)(?=\\[description\\])/);\n            const descriptionMatch = formattedText.match(/\\[description\\]([\\s\\S]*?)(?=\\[buttonText\\])/);\n            const buttonTextMatch = formattedText.match(/\\[buttonText\\]([\\s\\S]*?)(?=\\[footerText\\])/);\n            const footerTextMatch = formattedText.match(/\\[footerText\\]([\\s\\S]*?)(?=\\[menu\\])/);\n\n            if (titleMatch) listJson.title = titleMatch[1].trim();\n            if (descriptionMatch) listJson.description = descriptionMatch[1].trim();\n            if (buttonTextMatch) listJson.buttonText = buttonTextMatch[1].trim();\n            if (footerTextMatch) listJson.footerText = footerTextMatch[1].trim();\n\n            const menuContent = formattedText.match(/\\[menu\\]([\\s\\S]*?)\\[\\/menu\\]/)?.[1];\n            if (menuContent) {\n              const sections = menuContent.match(/\\[section\\]([\\s\\S]*?)(?=\\[section\\]|\\[\\/section\\]|\\[\\/menu\\])/g);\n              if (sections) {\n                sections.forEach((section) => {\n                  const sectionTitle = section.match(/title: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                  const rows = section.match(/\\[row\\]([\\s\\S]*?)(?=\\[row\\]|\\[\\/row\\]|\\[\\/section\\]|\\[\\/menu\\])/g);\n\n                  const sectionData = {\n                    title: sectionTitle,\n                    rows:\n                      rows?.map((row) => ({\n                        title: row.match(/title: (.*?)(?:\\n|$)/)?.[1]?.trim(),\n                        description: row.match(/description: (.*?)(?:\\n|$)/)?.[1]?.trim(),\n                        rowId: row.match(/rowId: (.*?)(?:\\n|$)/)?.[1]?.trim(),\n                      })) || [],\n                  };\n\n                  listJson.sections.push(sectionData);\n                });\n              }\n            }\n\n            await instance.listMessage(listJson);\n          } else if (formattedText.includes('[buttons]')) {\n            const buttonJson = {\n              number: remoteJid.split('@')[0],\n              thumbnailUrl: undefined,\n              title: '',\n              description: '',\n              footer: '',\n              buttons: [],\n            };\n\n            const thumbnailUrlMatch = formattedText.match(/\\[thumbnailUrl\\]([\\s\\S]*?)(?=\\[title\\])/);\n            const titleMatch = formattedText.match(/\\[title\\]([\\s\\S]*?)(?=\\[description\\])/);\n            const descriptionMatch = formattedText.match(/\\[description\\]([\\s\\S]*?)(?=\\[footer\\])/);\n            const footerMatch = formattedText.match(/\\[footer\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url))/);\n\n            if (titleMatch) buttonJson.title = titleMatch[1].trim();\n            if (thumbnailUrlMatch) buttonJson.thumbnailUrl = thumbnailUrlMatch[1].trim();\n            if (descriptionMatch) buttonJson.description = descriptionMatch[1].trim();\n            if (footerMatch) buttonJson.footer = footerMatch[1].trim();\n\n            const buttonTypes = {\n              reply: /\\[reply\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\n              pix: /\\[pix\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\n              copy: /\\[copy\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\n              call: /\\[call\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\n              url: /\\[url\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\n            };\n\n            for (const [type, pattern] of Object.entries(buttonTypes)) {\n              let match;\n              while ((match = pattern.exec(formattedText)) !== null) {\n                const content = match[1].trim();\n                const button: any = { type };\n\n                switch (type) {\n                  case 'pix':\n                    button.currency = content.match(/currency: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.name = content.match(/name: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.keyType = content.match(/keyType: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.key = content.match(/key: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    break;\n\n                  case 'reply':\n                    button.displayText = content.match(/displayText: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.id = content.match(/id: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    break;\n\n                  case 'copy':\n                    button.displayText = content.match(/displayText: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.copyCode = content.match(/copyCode: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    break;\n\n                  case 'call':\n                    button.displayText = content.match(/displayText: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.phoneNumber = content.match(/phone: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    break;\n\n                  case 'url':\n                    button.displayText = content.match(/displayText: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.url = content.match(/url: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    break;\n                }\n\n                if (Object.keys(button).length > 1) {\n                  buttonJson.buttons.push(button);\n                }\n              }\n            }\n\n            await instance.buttonMessage(buttonJson);\n          } else {\n            await instance.textMessage(\n              {\n                number: remoteJid.split('@')[0],\n                delay: settings?.delayMessage || 1000,\n                text: formattedText,\n              },\n              false,\n            );\n          }\n\n          sendTelemetry('/message/sendText');\n        }\n\n        await prismaRepository.integrationSession.update({\n          where: {\n            id: session.id,\n          },\n          data: {\n            awaitUser: true,\n          },\n        });\n      } else {\n        if (!settings?.keepOpen) {\n          await prismaRepository.integrationSession.deleteMany({\n            where: {\n              id: session.id,\n            },\n          });\n        } else {\n          await prismaRepository.integrationSession.update({\n            where: {\n              id: session.id,\n            },\n            data: {\n              status: 'closed',\n            },\n          });\n        }\n      }\n    }\n  }\n\n  public async processTypebot(\n    instance: Instance,\n    remoteJid: string,\n    msg: Message,\n    session: IntegrationSession,\n    findTypebot: TypebotModel,\n    url: string,\n    expire: number,\n    typebot: string,\n    keywordFinish: string,\n    delayMessage: number,\n    unknownMessage: string,\n    listeningFromMe: boolean,\n    stopBotFromMe: boolean,\n    keepOpen: boolean,\n    content: string,\n    prefilledVariables?: any,\n  ) {\n    if (session && expire && expire > 0) {\n      const now = Date.now();\n\n      const sessionUpdatedAt = new Date(session.updatedAt).getTime();\n\n      const diff = now - sessionUpdatedAt;\n\n      const diffInMinutes = Math.floor(diff / 1000 / 60);\n\n      if (diffInMinutes > expire) {\n        if (keepOpen) {\n          await this.prismaRepository.integrationSession.update({\n            where: {\n              id: session.id,\n            },\n            data: {\n              status: 'closed',\n            },\n          });\n        } else {\n          await this.prismaRepository.integrationSession.deleteMany({\n            where: {\n              botId: findTypebot.id,\n              remoteJid: remoteJid,\n            },\n          });\n        }\n\n        const data = await this.createNewSession(instance, {\n          enabled: findTypebot?.enabled,\n          url: url,\n          typebot: typebot,\n          expire: expire,\n          keywordFinish: keywordFinish,\n          delayMessage: delayMessage,\n          unknownMessage: unknownMessage,\n          listeningFromMe: listeningFromMe,\n          remoteJid: remoteJid,\n          pushName: msg.pushName,\n          botId: findTypebot.id,\n          prefilledVariables: prefilledVariables,\n        });\n\n        if (data.session) {\n          session = data.session;\n        }\n\n        if (data.messages.length === 0) {\n          const content = getConversationMessage(msg.message);\n\n          if (!content) {\n            if (unknownMessage) {\n              this.waMonitor.waInstances[instance.name].textMessage(\n                {\n                  number: remoteJid.split('@')[0],\n                  delay: delayMessage || 1000,\n                  text: unknownMessage,\n                },\n                false,\n              );\n\n              sendTelemetry('/message/sendText');\n            }\n            return;\n          }\n\n          if (keywordFinish && content.toLowerCase() === keywordFinish.toLowerCase()) {\n            if (keepOpen) {\n              await this.prismaRepository.integrationSession.update({\n                where: {\n                  id: session.id,\n                },\n                data: {\n                  status: 'closed',\n                },\n              });\n            } else {\n              await this.prismaRepository.integrationSession.deleteMany({\n                where: {\n                  botId: findTypebot.id,\n                  remoteJid: remoteJid,\n                },\n              });\n            }\n            return;\n          }\n\n          try {\n            const version = this.configService.get<Typebot>('TYPEBOT').API_VERSION;\n            let urlTypebot: string;\n            let reqData: {};\n            if (version === 'latest') {\n              urlTypebot = `${url}/api/v1/sessions/${data.sessionId}/continueChat`;\n              reqData = {\n                message: content,\n              };\n            } else {\n              urlTypebot = `${url}/api/v1/sendMessage`;\n              reqData = {\n                message: content,\n                sessionId: data.sessionId,\n              };\n            }\n\n            const request = await axios.post(urlTypebot, reqData);\n\n            await this.sendWAMessage(\n              instance,\n              session,\n              {\n                expire: expire,\n                keywordFinish: keywordFinish,\n                delayMessage: delayMessage,\n                unknownMessage: unknownMessage,\n                listeningFromMe: listeningFromMe,\n                stopBotFromMe: stopBotFromMe,\n                keepOpen: keepOpen,\n              },\n              remoteJid,\n              request.data.messages,\n              request.data.input,\n              request.data.clientSideActions,\n            );\n          } catch (error) {\n            this.logger.error(error);\n            return;\n          }\n        }\n\n        await this.sendWAMessage(\n          instance,\n          session,\n          {\n            expire: expire,\n            keywordFinish: keywordFinish,\n            delayMessage: delayMessage,\n            unknownMessage: unknownMessage,\n            listeningFromMe: listeningFromMe,\n            stopBotFromMe: stopBotFromMe,\n            keepOpen: keepOpen,\n          },\n          remoteJid,\n          data.messages,\n          data.input,\n          data.clientSideActions,\n        );\n\n        return;\n      }\n    }\n\n    if (session && session.status !== 'opened') {\n      return;\n    }\n\n    if (!session) {\n      const data = await this.createNewSession(instance, {\n        enabled: findTypebot?.enabled,\n        url: url,\n        typebot: typebot,\n        expire: expire,\n        keywordFinish: keywordFinish,\n        delayMessage: delayMessage,\n        unknownMessage: unknownMessage,\n        listeningFromMe: listeningFromMe,\n        remoteJid: remoteJid,\n        pushName: msg?.pushName,\n        botId: findTypebot.id,\n        prefilledVariables: prefilledVariables,\n      });\n\n      if (data?.session) {\n        session = data.session;\n      }\n\n      await this.sendWAMessage(\n        instance,\n        session,\n        {\n          expire: expire,\n          keywordFinish: keywordFinish,\n          delayMessage: delayMessage,\n          unknownMessage: unknownMessage,\n          listeningFromMe: listeningFromMe,\n          stopBotFromMe: stopBotFromMe,\n          keepOpen: keepOpen,\n        },\n        remoteJid,\n        data?.messages,\n        data?.input,\n        data?.clientSideActions,\n      );\n\n      if (data.messages.length === 0) {\n        if (!content) {\n          if (unknownMessage) {\n            this.waMonitor.waInstances[instance.name].textMessage(\n              {\n                number: remoteJid.split('@')[0],\n                delay: delayMessage || 1000,\n                text: unknownMessage,\n              },\n              false,\n            );\n\n            sendTelemetry('/message/sendText');\n          }\n          return;\n        }\n\n        if (keywordFinish && content.toLowerCase() === keywordFinish.toLowerCase()) {\n          if (keepOpen) {\n            await this.prismaRepository.integrationSession.update({\n              where: {\n                id: session.id,\n              },\n              data: {\n                status: 'closed',\n              },\n            });\n          } else {\n            await this.prismaRepository.integrationSession.deleteMany({\n              where: {\n                botId: findTypebot.id,\n                remoteJid: remoteJid,\n              },\n            });\n          }\n\n          return;\n        }\n\n        let request: any;\n        try {\n          const version = this.configService.get<Typebot>('TYPEBOT').API_VERSION;\n          let urlTypebot: string;\n          let reqData: {};\n          if (version === 'latest') {\n            urlTypebot = `${url}/api/v1/sessions/${data.sessionId}/continueChat`;\n            reqData = {\n              message: content,\n            };\n          } else {\n            urlTypebot = `${url}/api/v1/sendMessage`;\n            reqData = {\n              message: content,\n              sessionId: data.sessionId,\n            };\n          }\n          request = await axios.post(urlTypebot, reqData);\n\n          await this.sendWAMessage(\n            instance,\n            session,\n            {\n              expire: expire,\n              keywordFinish: keywordFinish,\n              delayMessage: delayMessage,\n              unknownMessage: unknownMessage,\n              listeningFromMe: listeningFromMe,\n              stopBotFromMe: stopBotFromMe,\n              keepOpen: keepOpen,\n            },\n            remoteJid,\n            request.data.messages,\n            request.data.input,\n            request.data.clientSideActions,\n          );\n        } catch (error) {\n          this.logger.error(error);\n          return;\n        }\n      }\n      return;\n    }\n\n    await this.prismaRepository.integrationSession.update({\n      where: {\n        id: session.id,\n      },\n      data: {\n        status: 'opened',\n        awaitUser: false,\n      },\n    });\n\n    if (!content) {\n      if (unknownMessage) {\n        this.waMonitor.waInstances[instance.name].textMessage(\n          {\n            number: remoteJid.split('@')[0],\n            delay: delayMessage || 1000,\n            text: unknownMessage,\n          },\n          false,\n        );\n\n        sendTelemetry('/message/sendText');\n      }\n      return;\n    }\n\n    if (keywordFinish && content.toLowerCase() === keywordFinish.toLowerCase()) {\n      if (keepOpen) {\n        await this.prismaRepository.integrationSession.update({\n          where: {\n            id: session.id,\n          },\n          data: {\n            status: 'closed',\n          },\n        });\n      } else {\n        await this.prismaRepository.integrationSession.deleteMany({\n          where: {\n            botId: findTypebot.id,\n            remoteJid: remoteJid,\n          },\n        });\n      }\n      return;\n    }\n\n    const version = this.configService.get<Typebot>('TYPEBOT').API_VERSION;\n    let urlTypebot: string;\n    let reqData: {};\n    if (version === 'latest') {\n      urlTypebot = `${url}/api/v1/sessions/${session.sessionId.split('-')[1]}/continueChat`;\n      reqData = {\n        message: content,\n      };\n    } else {\n      urlTypebot = `${url}/api/v1/sendMessage`;\n      reqData = {\n        message: content,\n        sessionId: session.sessionId.split('-')[1],\n      };\n    }\n    const request = await axios.post(urlTypebot, reqData);\n\n    await this.sendWAMessage(\n      instance,\n      session,\n      {\n        expire: expire,\n        keywordFinish: keywordFinish,\n        delayMessage: delayMessage,\n        unknownMessage: unknownMessage,\n        listeningFromMe: listeningFromMe,\n        stopBotFromMe: stopBotFromMe,\n        keepOpen: keepOpen,\n      },\n      remoteJid,\n      request?.data?.messages,\n      request?.data?.input,\n      request?.data?.clientSideActions,\n    );\n\n    return;\n  }\n}\n","import dayjs from 'dayjs';\nimport fs from 'fs';\n\nimport { configService, Log } from './env.config';\nconst packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));\n\nconst formatDateLog = (timestamp: number) =>\n  dayjs(timestamp)\n    .toDate()\n    .toString()\n    .replace(/\\sGMT.+/, '');\n\nenum Color {\n  LOG = '\\x1b[32m',\n  INFO = '\\x1b[34m',\n  WARN = '\\x1b[33m',\n  ERROR = '\\x1b[31m',\n  DEBUG = '\\x1b[36m',\n  VERBOSE = '\\x1b[37m',\n  DARK = '\\x1b[30m',\n}\n\nenum Command {\n  RESET = '\\x1b[0m',\n  BRIGHT = '\\x1b[1m',\n  UNDERSCORE = '\\x1b[4m',\n}\n\nenum Level {\n  LOG = Color.LOG + '%s' + Command.RESET,\n  DARK = Color.DARK + '%s' + Command.RESET,\n  INFO = Color.INFO + '%s' + Command.RESET,\n  WARN = Color.WARN + '%s' + Command.RESET,\n  ERROR = Color.ERROR + '%s' + Command.RESET,\n  DEBUG = Color.DEBUG + '%s' + Command.RESET,\n  VERBOSE = Color.VERBOSE + '%s' + Command.RESET,\n}\n\nenum Type {\n  LOG = 'LOG',\n  WARN = 'WARN',\n  INFO = 'INFO',\n  DARK = 'DARK',\n  ERROR = 'ERROR',\n  DEBUG = 'DEBUG',\n  VERBOSE = 'VERBOSE',\n}\n\nenum Background {\n  LOG = '\\x1b[42m',\n  INFO = '\\x1b[44m',\n  WARN = '\\x1b[43m',\n  DARK = '\\x1b[40m',\n  ERROR = '\\x1b[41m',\n  DEBUG = '\\x1b[46m',\n  VERBOSE = '\\x1b[47m',\n}\n\nexport class Logger {\n  private readonly configService = configService;\n  private context: string;\n\n  constructor(context = 'Logger') {\n    this.context = context;\n  }\n\n  private instance = null;\n\n  public setContext(value: string) {\n    this.context = value;\n  }\n\n  public setInstance(value: string) {\n    this.instance = value;\n  }\n\n  private console(value: any, type: Type) {\n    const types: Type[] = [];\n\n    this.configService.get<Log>('LOG').LEVEL.forEach((level) => types.push(Type[level]));\n\n    const typeValue = typeof value;\n    if (types.includes(type)) {\n      if (configService.get<Log>('LOG').COLOR) {\n        console.log(\n          /*Command.UNDERSCORE +*/ Command.BRIGHT + Level[type],\n          '[Evolution API]',\n          Command.BRIGHT + Color[type],\n          this.instance ? `[${this.instance}]` : '',\n          Command.BRIGHT + Color[type],\n          `v${packageJson.version}`,\n          Command.BRIGHT + Color[type],\n          process.pid.toString(),\n          Command.RESET,\n          Command.BRIGHT + Color[type],\n          '-',\n          Command.BRIGHT + Color.VERBOSE,\n          `${formatDateLog(Date.now())}  `,\n          Command.RESET,\n          Color[type] + Background[type] + Command.BRIGHT,\n          `${type} ` + Command.RESET,\n          Color.WARN + Command.BRIGHT,\n          `[${this.context}]` + Command.RESET,\n          Color[type] + Command.BRIGHT,\n          `[${typeValue}]` + Command.RESET,\n          Color[type],\n          typeValue !== 'object' ? value : '',\n          Command.RESET,\n        );\n        typeValue === 'object' ? console.log(/*Level.DARK,*/ value, '\\n') : '';\n      } else {\n        console.log(\n          '[Evolution API]',\n          this.instance ? `[${this.instance}]` : '',\n          process.pid.toString(),\n          '-',\n          `${formatDateLog(Date.now())}  `,\n          `${type} `,\n          `[${this.context}]`,\n          `[${typeValue}]`,\n          value,\n        );\n      }\n    }\n  }\n\n  public log(value: any) {\n    this.console(value, Type.LOG);\n  }\n\n  public info(value: any) {\n    this.console(value, Type.INFO);\n  }\n\n  public warn(value: any) {\n    this.console(value, Type.WARN);\n  }\n\n  public error(value: any) {\n    this.console(value, Type.ERROR);\n  }\n\n  public verbose(value: any) {\n    this.console(value, Type.VERBOSE);\n  }\n\n  public debug(value: any) {\n    this.console(value, Type.DEBUG);\n  }\n\n  public dark(value: any) {\n    this.console(value, Type.DARK);\n  }\n}\n","import { isBooleanString } from 'class-validator';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nexport type HttpServer = {\n  TYPE: 'http' | 'https';\n  PORT: number;\n  URL: string;\n  DISABLE_DOCS: boolean;\n  DISABLE_MANAGER: boolean;\n};\n\nexport type HttpMethods = 'POST' | 'GET' | 'PUT' | 'DELETE';\nexport type Cors = {\n  ORIGIN: string[];\n  METHODS: HttpMethods[];\n  CREDENTIALS: boolean;\n};\n\nexport type LogBaileys = 'fatal' | 'error' | 'warn' | 'info' | 'debug' | 'trace';\n\nexport type LogLevel = 'ERROR' | 'WARN' | 'DEBUG' | 'INFO' | 'LOG' | 'VERBOSE' | 'DARK' | 'WEBHOOKS' | 'WEBSOCKET';\n\nexport type Log = {\n  LEVEL: LogLevel[];\n  COLOR: boolean;\n  BAILEYS: LogBaileys;\n};\n\nexport type ProviderSession = {\n  ENABLED: boolean;\n  HOST: string;\n  PORT: string;\n  PREFIX: string;\n};\n\nexport type SaveData = {\n  INSTANCE: boolean;\n  HISTORIC: boolean;\n  NEW_MESSAGE: boolean;\n  MESSAGE_UPDATE: boolean;\n  CONTACTS: boolean;\n  CHATS: boolean;\n  LABELS: boolean;\n  IS_ON_WHATSAPP: boolean;\n  IS_ON_WHATSAPP_DAYS: number;\n};\n\nexport type DBConnection = {\n  URI: string;\n  CLIENT_NAME: string;\n};\nexport type Database = {\n  CONNECTION: DBConnection;\n  PROVIDER: string;\n  SAVE_DATA: SaveData;\n  DELETE_DATA: DeleteData;\n};\n\nexport type DeleteData = {\n  LOGICAL_MESSAGE_DELETE: boolean;\n};\nexport type EventsRabbitmq = {\n  APPLICATION_STARTUP: boolean;\n  INSTANCE_CREATE: boolean;\n  INSTANCE_DELETE: boolean;\n  QRCODE_UPDATED: boolean;\n  MESSAGES_SET: boolean;\n  MESSAGES_UPSERT: boolean;\n  MESSAGES_EDITED: boolean;\n  MESSAGES_UPDATE: boolean;\n  MESSAGES_DELETE: boolean;\n  SEND_MESSAGE: boolean;\n  CONTACTS_SET: boolean;\n  CONTACTS_UPDATE: boolean;\n  CONTACTS_UPSERT: boolean;\n  PRESENCE_UPDATE: boolean;\n  CHATS_SET: boolean;\n  CHATS_UPDATE: boolean;\n  CHATS_DELETE: boolean;\n  CHATS_UPSERT: boolean;\n  CONNECTION_UPDATE: boolean;\n  LABELS_EDIT: boolean;\n  LABELS_ASSOCIATION: boolean;\n  GROUPS_UPSERT: boolean;\n  GROUP_UPDATE: boolean;\n  GROUP_PARTICIPANTS_UPDATE: boolean;\n  CALL: boolean;\n  TYPEBOT_START: boolean;\n  TYPEBOT_CHANGE_STATUS: boolean;\n};\n\nexport type Rabbitmq = {\n  ENABLED: boolean;\n  URI: string;\n  EXCHANGE_NAME: string;\n  GLOBAL_ENABLED: boolean;\n  EVENTS: EventsRabbitmq;\n  PREFIX_KEY: string;\n};\n\nexport type Sqs = {\n  ENABLED: boolean;\n  ACCESS_KEY_ID: string;\n  SECRET_ACCESS_KEY: string;\n  ACCOUNT_ID: string;\n  REGION: string;\n};\n\nexport type Websocket = {\n  ENABLED: boolean;\n  GLOBAL_EVENTS: boolean;\n};\n\nexport type WaBusiness = {\n  TOKEN_WEBHOOK: string;\n  URL: string;\n  VERSION: string;\n  LANGUAGE: string;\n};\n\nexport type EventsWebhook = {\n  APPLICATION_STARTUP: boolean;\n  INSTANCE_CREATE: boolean;\n  INSTANCE_DELETE: boolean;\n  QRCODE_UPDATED: boolean;\n  MESSAGES_SET: boolean;\n  MESSAGES_UPSERT: boolean;\n  MESSAGES_EDITED: boolean;\n  MESSAGES_UPDATE: boolean;\n  MESSAGES_DELETE: boolean;\n  SEND_MESSAGE: boolean;\n  CONTACTS_SET: boolean;\n  CONTACTS_UPDATE: boolean;\n  CONTACTS_UPSERT: boolean;\n  PRESENCE_UPDATE: boolean;\n  CHATS_SET: boolean;\n  CHATS_UPDATE: boolean;\n  CHATS_DELETE: boolean;\n  CHATS_UPSERT: boolean;\n  CONNECTION_UPDATE: boolean;\n  LABELS_EDIT: boolean;\n  LABELS_ASSOCIATION: boolean;\n  GROUPS_UPSERT: boolean;\n  GROUP_UPDATE: boolean;\n  GROUP_PARTICIPANTS_UPDATE: boolean;\n  CALL: boolean;\n  TYPEBOT_START: boolean;\n  TYPEBOT_CHANGE_STATUS: boolean;\n  ERRORS: boolean;\n  ERRORS_WEBHOOK: string;\n};\n\nexport type EventsPusher = {\n  APPLICATION_STARTUP: boolean;\n  INSTANCE_CREATE: boolean;\n  INSTANCE_DELETE: boolean;\n  QRCODE_UPDATED: boolean;\n  MESSAGES_SET: boolean;\n  MESSAGES_UPSERT: boolean;\n  MESSAGES_EDITED: boolean;\n  MESSAGES_UPDATE: boolean;\n  MESSAGES_DELETE: boolean;\n  SEND_MESSAGE: boolean;\n  CONTACTS_SET: boolean;\n  CONTACTS_UPDATE: boolean;\n  CONTACTS_UPSERT: boolean;\n  PRESENCE_UPDATE: boolean;\n  CHATS_SET: boolean;\n  CHATS_UPDATE: boolean;\n  CHATS_DELETE: boolean;\n  CHATS_UPSERT: boolean;\n  CONNECTION_UPDATE: boolean;\n  LABELS_EDIT: boolean;\n  LABELS_ASSOCIATION: boolean;\n  GROUPS_UPSERT: boolean;\n  GROUP_UPDATE: boolean;\n  GROUP_PARTICIPANTS_UPDATE: boolean;\n  CALL: boolean;\n  TYPEBOT_START: boolean;\n  TYPEBOT_CHANGE_STATUS: boolean;\n};\n\nexport type ApiKey = { KEY: string };\n\nexport type Auth = {\n  API_KEY: ApiKey;\n  EXPOSE_IN_FETCH_INSTANCES: boolean;\n};\n\nexport type DelInstance = number | boolean;\n\nexport type Language = string | 'en';\n\nexport type GlobalWebhook = {\n  URL: string;\n  ENABLED: boolean;\n  WEBHOOK_BY_EVENTS: boolean;\n};\n\nexport type GlobalPusher = {\n  ENABLED: boolean;\n  APP_ID: string;\n  KEY: string;\n  SECRET: string;\n  CLUSTER: string;\n  USE_TLS: boolean;\n};\n\nexport type CacheConfRedis = {\n  ENABLED: boolean;\n  URI: string;\n  PREFIX_KEY: string;\n  TTL: number;\n  SAVE_INSTANCES: boolean;\n};\nexport type CacheConfLocal = {\n  ENABLED: boolean;\n  TTL: number;\n};\nexport type SslConf = { PRIVKEY: string; FULLCHAIN: string };\nexport type Webhook = { GLOBAL?: GlobalWebhook; EVENTS: EventsWebhook };\nexport type Pusher = { ENABLED: boolean; GLOBAL?: GlobalPusher; EVENTS: EventsPusher };\nexport type ConfigSessionPhone = { CLIENT: string; NAME: string; VERSION: string };\nexport type QrCode = { LIMIT: number; COLOR: string };\nexport type Typebot = { ENABLED: boolean; API_VERSION: string; SEND_MEDIA_BASE64: boolean };\nexport type Chatwoot = {\n  ENABLED: boolean;\n  MESSAGE_DELETE: boolean;\n  MESSAGE_READ: boolean;\n  BOT_CONTACT: boolean;\n  IMPORT: {\n    DATABASE: {\n      CONNECTION: {\n        URI: string;\n      };\n    };\n    PLACEHOLDER_MEDIA_MESSAGE: boolean;\n  };\n};\nexport type Openai = { ENABLED: boolean; API_KEY_GLOBAL?: string };\nexport type Dify = { ENABLED: boolean };\n\nexport type S3 = {\n  ACCESS_KEY: string;\n  SECRET_KEY: string;\n  ENDPOINT: string;\n  BUCKET_NAME: string;\n  ENABLE: boolean;\n  PORT?: number;\n  USE_SSL?: boolean;\n  REGION?: string;\n};\n\nexport type CacheConf = { REDIS: CacheConfRedis; LOCAL: CacheConfLocal };\nexport type Production = boolean;\n\nexport interface Env {\n  SERVER: HttpServer;\n  CORS: Cors;\n  SSL_CONF: SslConf;\n  PROVIDER: ProviderSession;\n  DATABASE: Database;\n  RABBITMQ: Rabbitmq;\n  SQS: Sqs;\n  WEBSOCKET: Websocket;\n  WA_BUSINESS: WaBusiness;\n  LOG: Log;\n  DEL_INSTANCE: DelInstance;\n  DEL_TEMP_INSTANCES: boolean;\n  LANGUAGE: Language;\n  WEBHOOK: Webhook;\n  PUSHER: Pusher;\n  CONFIG_SESSION_PHONE: ConfigSessionPhone;\n  QRCODE: QrCode;\n  TYPEBOT: Typebot;\n  CHATWOOT: Chatwoot;\n  OPENAI: Openai;\n  DIFY: Dify;\n  CACHE: CacheConf;\n  S3?: S3;\n  AUTHENTICATION: Auth;\n  PRODUCTION?: Production;\n}\n\nexport type Key = keyof Env;\n\nexport class ConfigService {\n  constructor() {\n    this.loadEnv();\n  }\n\n  private env: Env;\n\n  public get<T = any>(key: Key) {\n    return this.env[key] as T;\n  }\n\n  private loadEnv() {\n    this.env = this.envProcess();\n    this.env.PRODUCTION = process.env?.NODE_ENV === 'PROD';\n    if (process.env?.DOCKER_ENV === 'true') {\n      this.env.SERVER.TYPE = process.env.SERVER_TYPE as 'http' | 'http';\n      this.env.SERVER.PORT = Number.parseInt(process.env.SERVER_PORT) || 8080;\n    }\n  }\n\n  private envProcess(): Env {\n    return {\n      SERVER: {\n        TYPE: (process.env.SERVER_TYPE as 'http' | 'https') || 'http',\n        PORT: Number.parseInt(process.env.SERVER_PORT) || 8080,\n        URL: process.env.SERVER_URL,\n        DISABLE_DOCS: process.env?.SERVER_DISABLE_DOCS === 'true',\n        DISABLE_MANAGER: process.env?.SERVER_DISABLE_MANAGER === 'true',\n      },\n      CORS: {\n        ORIGIN: process.env.CORS_ORIGIN?.split(',') || ['*'],\n        METHODS:\n          (process.env.CORS_METHODS?.split(',') as HttpMethods[]) ||\n          (['POST', 'GET', 'PUT', 'DELETE'] as HttpMethods[]),\n        CREDENTIALS: process.env?.CORS_CREDENTIALS === 'true',\n      },\n      SSL_CONF: {\n        PRIVKEY: process.env?.SSL_CONF_PRIVKEY || '',\n        FULLCHAIN: process.env?.SSL_CONF_FULLCHAIN || '',\n      },\n      PROVIDER: {\n        ENABLED: process.env?.PROVIDER_ENABLED === 'true',\n        HOST: process.env.PROVIDER_HOST,\n        PORT: process.env?.PROVIDER_PORT || '5656',\n        PREFIX: process.env?.PROVIDER_PREFIX || 'evolution',\n      },\n      DATABASE: {\n        CONNECTION: {\n          URI: process.env.DATABASE_CONNECTION_URI || '',\n          CLIENT_NAME: process.env.DATABASE_CONNECTION_CLIENT_NAME || 'evolution',\n        },\n        PROVIDER: process.env.DATABASE_PROVIDER || 'postgresql',\n        SAVE_DATA: {\n          INSTANCE: process.env?.DATABASE_SAVE_DATA_INSTANCE === 'true',\n          NEW_MESSAGE: process.env?.DATABASE_SAVE_DATA_NEW_MESSAGE === 'true',\n          MESSAGE_UPDATE: process.env?.DATABASE_SAVE_MESSAGE_UPDATE === 'true',\n          CONTACTS: process.env?.DATABASE_SAVE_DATA_CONTACTS === 'true',\n          CHATS: process.env?.DATABASE_SAVE_DATA_CHATS === 'true',\n          HISTORIC: process.env?.DATABASE_SAVE_DATA_HISTORIC === 'true',\n          LABELS: process.env?.DATABASE_SAVE_DATA_LABELS === 'true',\n          IS_ON_WHATSAPP: process.env?.DATABASE_SAVE_IS_ON_WHATSAPP === 'true',\n          IS_ON_WHATSAPP_DAYS: Number.parseInt(process.env?.DATABASE_SAVE_IS_ON_WHATSAPP_DAYS ?? '7'),\n        },\n        DELETE_DATA: {\n          LOGICAL_MESSAGE_DELETE: process.env?.DATABASE_DELETE_MESSAGE === 'true',\n        },\n      },\n      RABBITMQ: {\n        ENABLED: process.env?.RABBITMQ_ENABLED === 'true',\n        GLOBAL_ENABLED: process.env?.RABBITMQ_GLOBAL_ENABLED === 'true',\n        PREFIX_KEY: process.env?.RABBITMQ_PREFIX_KEY || 'evolution',\n        EXCHANGE_NAME: process.env?.RABBITMQ_EXCHANGE_NAME || 'evolution_exchange',\n        URI: process.env.RABBITMQ_URI || '',\n        EVENTS: {\n          APPLICATION_STARTUP: process.env?.RABBITMQ_EVENTS_APPLICATION_STARTUP === 'true',\n          INSTANCE_CREATE: process.env?.RABBITMQ_EVENTS_INSTANCE_CREATE === 'true',\n          INSTANCE_DELETE: process.env?.RABBITMQ_EVENTS_INSTANCE_DELETE === 'true',\n          QRCODE_UPDATED: process.env?.RABBITMQ_EVENTS_QRCODE_UPDATED === 'true',\n          MESSAGES_SET: process.env?.RABBITMQ_EVENTS_MESSAGES_SET === 'true',\n          MESSAGES_UPSERT: process.env?.RABBITMQ_EVENTS_MESSAGES_UPSERT === 'true',\n          MESSAGES_EDITED: process.env?.RABBITMQ_EVENTS_MESSAGES_EDITED === 'true',\n          MESSAGES_UPDATE: process.env?.RABBITMQ_EVENTS_MESSAGES_UPDATE === 'true',\n          MESSAGES_DELETE: process.env?.RABBITMQ_EVENTS_MESSAGES_DELETE === 'true',\n          SEND_MESSAGE: process.env?.RABBITMQ_EVENTS_SEND_MESSAGE === 'true',\n          CONTACTS_SET: process.env?.RABBITMQ_EVENTS_CONTACTS_SET === 'true',\n          CONTACTS_UPDATE: process.env?.RABBITMQ_EVENTS_CONTACTS_UPDATE === 'true',\n          CONTACTS_UPSERT: process.env?.RABBITMQ_EVENTS_CONTACTS_UPSERT === 'true',\n          PRESENCE_UPDATE: process.env?.RABBITMQ_EVENTS_PRESENCE_UPDATE === 'true',\n          CHATS_SET: process.env?.RABBITMQ_EVENTS_CHATS_SET === 'true',\n          CHATS_UPDATE: process.env?.RABBITMQ_EVENTS_CHATS_UPDATE === 'true',\n          CHATS_UPSERT: process.env?.RABBITMQ_EVENTS_CHATS_UPSERT === 'true',\n          CHATS_DELETE: process.env?.RABBITMQ_EVENTS_CHATS_DELETE === 'true',\n          CONNECTION_UPDATE: process.env?.RABBITMQ_EVENTS_CONNECTION_UPDATE === 'true',\n          LABELS_EDIT: process.env?.RABBITMQ_EVENTS_LABELS_EDIT === 'true',\n          LABELS_ASSOCIATION: process.env?.RABBITMQ_EVENTS_LABELS_ASSOCIATION === 'true',\n          GROUPS_UPSERT: process.env?.RABBITMQ_EVENTS_GROUPS_UPSERT === 'true',\n          GROUP_UPDATE: process.env?.RABBITMQ_EVENTS_GROUPS_UPDATE === 'true',\n          GROUP_PARTICIPANTS_UPDATE: process.env?.RABBITMQ_EVENTS_GROUP_PARTICIPANTS_UPDATE === 'true',\n          CALL: process.env?.RABBITMQ_EVENTS_CALL === 'true',\n          TYPEBOT_START: process.env?.RABBITMQ_EVENTS_TYPEBOT_START === 'true',\n          TYPEBOT_CHANGE_STATUS: process.env?.RABBITMQ_EVENTS_TYPEBOT_CHANGE_STATUS === 'true',\n        },\n      },\n      SQS: {\n        ENABLED: process.env?.SQS_ENABLED === 'true',\n        ACCESS_KEY_ID: process.env.SQS_ACCESS_KEY_ID || '',\n        SECRET_ACCESS_KEY: process.env.SQS_SECRET_ACCESS_KEY || '',\n        ACCOUNT_ID: process.env.SQS_ACCOUNT_ID || '',\n        REGION: process.env.SQS_REGION || '',\n      },\n      WEBSOCKET: {\n        ENABLED: process.env?.WEBSOCKET_ENABLED === 'true',\n        GLOBAL_EVENTS: process.env?.WEBSOCKET_GLOBAL_EVENTS === 'true',\n      },\n      PUSHER: {\n        ENABLED: process.env?.PUSHER_ENABLED === 'true',\n        GLOBAL: {\n          ENABLED: process.env?.PUSHER_GLOBAL_ENABLED === 'true',\n          APP_ID: process.env?.PUSHER_GLOBAL_APP_ID || '',\n          KEY: process.env?.PUSHER_GLOBAL_KEY || '',\n          SECRET: process.env?.PUSHER_GLOBAL_SECRET || '',\n          CLUSTER: process.env?.PUSHER_GLOBAL_CLUSTER || '',\n          USE_TLS: process.env?.PUSHER_GLOBAL_USE_TLS === 'true',\n        },\n        EVENTS: {\n          APPLICATION_STARTUP: process.env?.PUSHER_EVENTS_APPLICATION_STARTUP === 'true',\n          INSTANCE_CREATE: process.env?.PUSHER_EVENTS_INSTANCE_CREATE === 'true',\n          INSTANCE_DELETE: process.env?.PUSHER_EVENTS_INSTANCE_DELETE === 'true',\n          QRCODE_UPDATED: process.env?.PUSHER_EVENTS_QRCODE_UPDATED === 'true',\n          MESSAGES_SET: process.env?.PUSHER_EVENTS_MESSAGES_SET === 'true',\n          MESSAGES_UPSERT: process.env?.PUSHER_EVENTS_MESSAGES_UPSERT === 'true',\n          MESSAGES_EDITED: process.env?.PUSHER_EVENTS_MESSAGES_EDITED === 'true',\n          MESSAGES_UPDATE: process.env?.PUSHER_EVENTS_MESSAGES_UPDATE === 'true',\n          MESSAGES_DELETE: process.env?.PUSHER_EVENTS_MESSAGES_DELETE === 'true',\n          SEND_MESSAGE: process.env?.PUSHER_EVENTS_SEND_MESSAGE === 'true',\n          CONTACTS_SET: process.env?.PUSHER_EVENTS_CONTACTS_SET === 'true',\n          CONTACTS_UPDATE: process.env?.PUSHER_EVENTS_CONTACTS_UPDATE === 'true',\n          CONTACTS_UPSERT: process.env?.PUSHER_EVENTS_CONTACTS_UPSERT === 'true',\n          PRESENCE_UPDATE: process.env?.PUSHER_EVENTS_PRESENCE_UPDATE === 'true',\n          CHATS_SET: process.env?.PUSHER_EVENTS_CHATS_SET === 'true',\n          CHATS_UPDATE: process.env?.PUSHER_EVENTS_CHATS_UPDATE === 'true',\n          CHATS_UPSERT: process.env?.PUSHER_EVENTS_CHATS_UPSERT === 'true',\n          CHATS_DELETE: process.env?.PUSHER_EVENTS_CHATS_DELETE === 'true',\n          CONNECTION_UPDATE: process.env?.PUSHER_EVENTS_CONNECTION_UPDATE === 'true',\n          LABELS_EDIT: process.env?.PUSHER_EVENTS_LABELS_EDIT === 'true',\n          LABELS_ASSOCIATION: process.env?.PUSHER_EVENTS_LABELS_ASSOCIATION === 'true',\n          GROUPS_UPSERT: process.env?.PUSHER_EVENTS_GROUPS_UPSERT === 'true',\n          GROUP_UPDATE: process.env?.PUSHER_EVENTS_GROUPS_UPDATE === 'true',\n          GROUP_PARTICIPANTS_UPDATE: process.env?.PUSHER_EVENTS_GROUP_PARTICIPANTS_UPDATE === 'true',\n          CALL: process.env?.PUSHER_EVENTS_CALL === 'true',\n          TYPEBOT_START: process.env?.PUSHER_EVENTS_TYPEBOT_START === 'true',\n          TYPEBOT_CHANGE_STATUS: process.env?.PUSHER_EVENTS_TYPEBOT_CHANGE_STATUS === 'true',\n        },\n      },\n      WA_BUSINESS: {\n        TOKEN_WEBHOOK: process.env.WA_BUSINESS_TOKEN_WEBHOOK || 'evolution',\n        URL: process.env.WA_BUSINESS_URL || 'https://graph.facebook.com',\n        VERSION: process.env.WA_BUSINESS_VERSION || 'v18.0',\n        LANGUAGE: process.env.WA_BUSINESS_LANGUAGE || 'en',\n      },\n      LOG: {\n        LEVEL:\n          (process.env?.LOG_LEVEL?.split(',') as LogLevel[]) ||\n          (['ERROR', 'WARN', 'DEBUG', 'INFO', 'LOG', 'VERBOSE', 'DARK', 'WEBHOOKS', 'WEBSOCKET'] as LogLevel[]),\n        COLOR: process.env?.LOG_COLOR === 'true',\n        BAILEYS: (process.env?.LOG_BAILEYS as LogBaileys) || 'error',\n      },\n      DEL_INSTANCE: isBooleanString(process.env?.DEL_INSTANCE)\n        ? process.env.DEL_INSTANCE === 'true'\n        : Number.parseInt(process.env.DEL_INSTANCE) || false,\n      DEL_TEMP_INSTANCES: isBooleanString(process.env?.DEL_TEMP_INSTANCES)\n        ? process.env.DEL_TEMP_INSTANCES === 'true'\n        : true,\n      LANGUAGE: process.env?.LANGUAGE || 'en',\n      WEBHOOK: {\n        GLOBAL: {\n          URL: process.env?.WEBHOOK_GLOBAL_URL || '',\n          ENABLED: process.env?.WEBHOOK_GLOBAL_ENABLED === 'true',\n          WEBHOOK_BY_EVENTS: process.env?.WEBHOOK_GLOBAL_WEBHOOK_BY_EVENTS === 'true',\n        },\n        EVENTS: {\n          APPLICATION_STARTUP: process.env?.WEBHOOK_EVENTS_APPLICATION_STARTUP === 'true',\n          INSTANCE_CREATE: process.env?.WEBHOOK_EVENTS_INSTANCE_CREATE === 'true',\n          INSTANCE_DELETE: process.env?.WEBHOOK_EVENTS_INSTANCE_DELETE === 'true',\n          QRCODE_UPDATED: process.env?.WEBHOOK_EVENTS_QRCODE_UPDATED === 'true',\n          MESSAGES_SET: process.env?.WEBHOOK_EVENTS_MESSAGES_SET === 'true',\n          MESSAGES_UPSERT: process.env?.WEBHOOK_EVENTS_MESSAGES_UPSERT === 'true',\n          MESSAGES_EDITED: process.env?.WEBHOOK_EVENTS_MESSAGES_EDITED === 'true',\n          MESSAGES_UPDATE: process.env?.WEBHOOK_EVENTS_MESSAGES_UPDATE === 'true',\n          MESSAGES_DELETE: process.env?.WEBHOOK_EVENTS_MESSAGES_DELETE === 'true',\n          SEND_MESSAGE: process.env?.WEBHOOK_EVENTS_SEND_MESSAGE === 'true',\n          CONTACTS_SET: process.env?.WEBHOOK_EVENTS_CONTACTS_SET === 'true',\n          CONTACTS_UPDATE: process.env?.WEBHOOK_EVENTS_CONTACTS_UPDATE === 'true',\n          CONTACTS_UPSERT: process.env?.WEBHOOK_EVENTS_CONTACTS_UPSERT === 'true',\n          PRESENCE_UPDATE: process.env?.WEBHOOK_EVENTS_PRESENCE_UPDATE === 'true',\n          CHATS_SET: process.env?.WEBHOOK_EVENTS_CHATS_SET === 'true',\n          CHATS_UPDATE: process.env?.WEBHOOK_EVENTS_CHATS_UPDATE === 'true',\n          CHATS_UPSERT: process.env?.WEBHOOK_EVENTS_CHATS_UPSERT === 'true',\n          CHATS_DELETE: process.env?.WEBHOOK_EVENTS_CHATS_DELETE === 'true',\n          CONNECTION_UPDATE: process.env?.WEBHOOK_EVENTS_CONNECTION_UPDATE === 'true',\n          LABELS_EDIT: process.env?.WEBHOOK_EVENTS_LABELS_EDIT === 'true',\n          LABELS_ASSOCIATION: process.env?.WEBHOOK_EVENTS_LABELS_ASSOCIATION === 'true',\n          GROUPS_UPSERT: process.env?.WEBHOOK_EVENTS_GROUPS_UPSERT === 'true',\n          GROUP_UPDATE: process.env?.WEBHOOK_EVENTS_GROUPS_UPDATE === 'true',\n          GROUP_PARTICIPANTS_UPDATE: process.env?.WEBHOOK_EVENTS_GROUP_PARTICIPANTS_UPDATE === 'true',\n          CALL: process.env?.WEBHOOK_EVENTS_CALL === 'true',\n          TYPEBOT_START: process.env?.WEBHOOK_EVENTS_TYPEBOT_START === 'true',\n          TYPEBOT_CHANGE_STATUS: process.env?.WEBHOOK_EVENTS_TYPEBOT_CHANGE_STATUS === 'true',\n          ERRORS: process.env?.WEBHOOK_EVENTS_ERRORS === 'true',\n          ERRORS_WEBHOOK: process.env?.WEBHOOK_EVENTS_ERRORS_WEBHOOK || '',\n        },\n      },\n      CONFIG_SESSION_PHONE: {\n        CLIENT: process.env?.CONFIG_SESSION_PHONE_CLIENT || 'Evolution API',\n        NAME: process.env?.CONFIG_SESSION_PHONE_NAME || 'Chrome',\n        VERSION: process.env?.CONFIG_SESSION_PHONE_VERSION || null,\n      },\n      QRCODE: {\n        LIMIT: Number.parseInt(process.env.QRCODE_LIMIT) || 30,\n        COLOR: process.env.QRCODE_COLOR || '#198754',\n      },\n      TYPEBOT: {\n        ENABLED: process.env?.TYPEBOT_ENABLED === 'true',\n        API_VERSION: process.env?.TYPEBOT_API_VERSION || 'old',\n        SEND_MEDIA_BASE64: process.env?.TYPEBOT_SEND_MEDIA_BASE64 === 'true',\n      },\n      CHATWOOT: {\n        ENABLED: process.env?.CHATWOOT_ENABLED === 'true',\n        MESSAGE_DELETE: process.env.CHATWOOT_MESSAGE_DELETE === 'true',\n        MESSAGE_READ: process.env.CHATWOOT_MESSAGE_READ === 'true',\n        BOT_CONTACT: !process.env.CHATWOOT_BOT_CONTACT || process.env.CHATWOOT_BOT_CONTACT === 'true',\n        IMPORT: {\n          DATABASE: {\n            CONNECTION: {\n              URI: process.env.CHATWOOT_IMPORT_DATABASE_CONNECTION_URI || '',\n            },\n          },\n          PLACEHOLDER_MEDIA_MESSAGE: process.env?.CHATWOOT_IMPORT_PLACEHOLDER_MEDIA_MESSAGE === 'true',\n        },\n      },\n      OPENAI: {\n        ENABLED: process.env?.OPENAI_ENABLED === 'true',\n        API_KEY_GLOBAL: process.env?.OPENAI_API_KEY_GLOBAL || null,\n      },\n      DIFY: {\n        ENABLED: process.env?.DIFY_ENABLED === 'true',\n      },\n      CACHE: {\n        REDIS: {\n          ENABLED: process.env?.CACHE_REDIS_ENABLED === 'true',\n          URI: process.env?.CACHE_REDIS_URI || '',\n          PREFIX_KEY: process.env?.CACHE_REDIS_PREFIX_KEY || 'evolution-cache',\n          TTL: Number.parseInt(process.env?.CACHE_REDIS_TTL) || 604800,\n          SAVE_INSTANCES: process.env?.CACHE_REDIS_SAVE_INSTANCES === 'true',\n        },\n        LOCAL: {\n          ENABLED: process.env?.CACHE_LOCAL_ENABLED === 'true',\n          TTL: Number.parseInt(process.env?.CACHE_REDIS_TTL) || 86400,\n        },\n      },\n      S3: {\n        ACCESS_KEY: process.env?.S3_ACCESS_KEY,\n        SECRET_KEY: process.env?.S3_SECRET_KEY,\n        ENDPOINT: process.env?.S3_ENDPOINT,\n        BUCKET_NAME: process.env?.S3_BUCKET,\n        ENABLE: process.env?.S3_ENABLED === 'true',\n        PORT: Number.parseInt(process.env?.S3_PORT || '9000'),\n        USE_SSL: process.env?.S3_USE_SSL === 'true',\n        REGION: process.env?.S3_REGION,\n      },\n      AUTHENTICATION: {\n        API_KEY: {\n          KEY: process.env.AUTHENTICATION_API_KEY || 'BQYHJGJHJ',\n        },\n        EXPOSE_IN_FETCH_INSTANCES: process.env?.AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES === 'true',\n      },\n    };\n  }\n}\n\nexport const configService = new ConfigService();\n","import { configService, S3 } from '@config/env.config';\n\nconst getTypeMessage = (msg: any) => {\n  let mediaId: string;\n\n  if (configService.get<S3>('S3').ENABLE) mediaId = msg.message.mediaUrl;\n  else mediaId = msg.key.id;\n\n  const types = {\n    conversation: msg?.message?.conversation,\n    extendedTextMessage: msg?.message?.extendedTextMessage?.text,\n    contactMessage: msg?.message?.contactMessage?.displayName,\n    locationMessage: msg?.message?.locationMessage?.degreesLatitude,\n    viewOnceMessageV2:\n      msg?.message?.viewOnceMessageV2?.message?.imageMessage?.url ||\n      msg?.message?.viewOnceMessageV2?.message?.videoMessage?.url ||\n      msg?.message?.viewOnceMessageV2?.message?.audioMessage?.url,\n    listResponseMessage: msg?.message?.listResponseMessage?.title,\n    responseRowId: msg?.message?.listResponseMessage?.singleSelectReply?.selectedRowId,\n    templateButtonReplyMessage:\n      msg?.message?.templateButtonReplyMessage?.selectedId || msg?.message?.buttonsResponseMessage?.selectedButtonId,\n    // Medias\n    audioMessage: msg?.message?.speechToText\n      ? msg?.message?.speechToText\n      : msg?.message?.audioMessage\n        ? `audioMessage|${mediaId}`\n        : undefined,\n    imageMessage: msg?.message?.imageMessage\n      ? `imageMessage|${mediaId}${msg?.message?.imageMessage?.caption ? `|${msg?.message?.imageMessage?.caption}` : ''}`\n      : undefined,\n    videoMessage: msg?.message?.videoMessage\n      ? `videoMessage|${mediaId}${msg?.message?.videoMessage?.caption ? `|${msg?.message?.videoMessage?.caption}` : ''}`\n      : undefined,\n    documentMessage: msg?.message?.documentMessage\n      ? `documentMessage|${mediaId}${\n          msg?.message?.documentMessage?.caption ? `|${msg?.message?.documentMessage?.caption}` : ''\n        }`\n      : undefined,\n    documentWithCaptionMessage: msg?.message?.documentWithCaptionMessage?.message?.documentMessage\n      ? `documentWithCaptionMessage|${mediaId}${\n          msg?.message?.documentWithCaptionMessage?.message?.documentMessage?.caption\n            ? `|${msg?.message?.documentWithCaptionMessage?.message?.documentMessage?.caption}`\n            : ''\n        }`\n      : undefined,\n    externalAdReplyBody: msg?.contextInfo?.externalAdReply?.body\n      ? `externalAdReplyBody|${msg.contextInfo.externalAdReply.body}`\n      : undefined,\n  };\n\n  const messageType = Object.keys(types).find((key) => types[key] !== undefined) || 'unknown';\n\n  return { ...types, messageType };\n};\n\nconst getMessageContent = (types: any) => {\n  const typeKey = Object.keys(types).find((key) => key !== 'externalAdReplyBody' && types[key] !== undefined);\n\n  let result = typeKey ? types[typeKey] : undefined;\n\n  if (types.externalAdReplyBody) {\n    result = result ? `${result}\\n${types.externalAdReplyBody}` : types.externalAdReplyBody;\n  }\n\n  return result;\n};\n\nexport const getConversationMessage = (msg: any) => {\n  const types = getTypeMessage(msg);\n\n  const messageContent = getMessageContent(types);\n\n  return messageContent;\n};\n","import axios from 'axios';\nimport fs from 'fs';\n\nconst packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));\n\nexport interface TelemetryData {\n  route: string;\n  apiVersion: string;\n  timestamp: Date;\n}\n\nexport const sendTelemetry = async (route: string): Promise<void> => {\n  const enabled = process.env.TELEMETRY_ENABLED === undefined || process.env.TELEMETRY_ENABLED === 'true';\n\n  if (!enabled) {\n    return;\n  }\n\n  if (route === '/') {\n    return;\n  }\n\n  const telemetry: TelemetryData = {\n    route,\n    apiVersion: `${packageJson.version}`,\n    timestamp: new Date(),\n  };\n\n  const url =\n    process.env.TELEMETRY_URL && process.env.TELEMETRY_URL !== ''\n      ? process.env.TELEMETRY_URL\n      : 'https://log.evolution-api.com/telemetry';\n\n  axios\n    .post(url, telemetry)\n    .then(() => {})\n    .catch(() => {});\n};\n"],"mappings":"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","names":["typebot_service_exports","__export","TypebotService","__toCommonJS","import_dayjs","import_fs","import_class_validator","import_dotenv","dotenv","ConfigService","key","configService","packageJson","fs","formatDateLog","timestamp","dayjs","Color","Level","Type","Background","Logger","context","configService","value","type","types","level","typeValue","Color","packageJson","formatDateLog","getTypeMessage","msg","mediaId","configService","types","messageType","key","getMessageContent","typeKey","result","getConversationMessage","import_axios","import_fs","packageJson","fs","sendTelemetry","route","telemetry","url","axios","import_axios","TypebotService","waMonitor","configService","prismaRepository","Logger","instance","data","id","version","url","reqData","request","axios","session","error","settings","remoteJid","messages","input","clientSideActions","processMessages","applyFormatting","err","findItemAndGetSecondsToWait","array","targetId","item","element","text","child","line","index","formats","formattedText","message","richText","listJson","titleMatch","descriptionMatch","buttonTextMatch","footerTextMatch","menuContent","sections","section","sectionTitle","rows","sectionData","row","buttonJson","thumbnailUrlMatch","footerMatch","buttonTypes","type","pattern","match","content","button","sendTelemetry","wait","resolve","items","msg","findTypebot","expire","typebot","keywordFinish","delayMessage","unknownMessage","listeningFromMe","stopBotFromMe","keepOpen","prefilledVariables","now","sessionUpdatedAt","diff","getConversationMessage","urlTypebot"]}