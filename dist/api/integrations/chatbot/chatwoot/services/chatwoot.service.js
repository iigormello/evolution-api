var _e=Object.create;var W=Object.defineProperty;var Te=Object.getOwnPropertyDescriptor;var Ae=Object.getOwnPropertyNames;var me=Object.getPrototypeOf,he=Object.prototype.hasOwnProperty;var Ce=(m,e)=>{for(var t in e)W(m,t,{get:e[t],enumerable:!0})},te=(m,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of Ae(e))!he.call(m,o)&&o!==t&&W(m,o,{get:()=>e[o],enumerable:!(n=Te(e,o))||n.enumerable});return m};var I=(m,e,t)=>(t=m!=null?_e(me(m)):{},te(e||!m||!m.__esModule?W(t,"default",{value:m,enumerable:!0}):t,m)),Ie=m=>te(W({},"__esModule",{value:!0}),m);var ve={};Ce(ve,{ChatwootService:()=>ee});module.exports=Ie(ve);var F=require("class-validator"),ne=I(require("dotenv"));ne.default.config();var H=class{constructor(){this.loadEnv()}get(e){return this.env[e]}loadEnv(){this.env=this.envProcess(),this.env.PRODUCTION=process.env?.NODE_ENV==="PROD",process.env?.DOCKER_ENV==="true"&&(this.env.SERVER.TYPE=process.env.SERVER_TYPE,this.env.SERVER.PORT=Number.parseInt(process.env.SERVER_PORT)||8080)}envProcess(){return{SERVER:{TYPE:process.env.SERVER_TYPE||"http",PORT:Number.parseInt(process.env.SERVER_PORT)||8080,URL:process.env.SERVER_URL,DISABLE_DOCS:process.env?.SERVER_DISABLE_DOCS==="true",DISABLE_MANAGER:process.env?.SERVER_DISABLE_MANAGER==="true"},CORS:{ORIGIN:process.env.CORS_ORIGIN?.split(",")||["*"],METHODS:process.env.CORS_METHODS?.split(",")||["POST","GET","PUT","DELETE"],CREDENTIALS:process.env?.CORS_CREDENTIALS==="true"},SSL_CONF:{PRIVKEY:process.env?.SSL_CONF_PRIVKEY||"",FULLCHAIN:process.env?.SSL_CONF_FULLCHAIN||""},PROVIDER:{ENABLED:process.env?.PROVIDER_ENABLED==="true",HOST:process.env.PROVIDER_HOST,PORT:process.env?.PROVIDER_PORT||"5656",PREFIX:process.env?.PROVIDER_PREFIX||"evolution"},DATABASE:{CONNECTION:{URI:process.env.DATABASE_CONNECTION_URI||"",CLIENT_NAME:process.env.DATABASE_CONNECTION_CLIENT_NAME||"evolution"},PROVIDER:process.env.DATABASE_PROVIDER||"postgresql",SAVE_DATA:{INSTANCE:process.env?.DATABASE_SAVE_DATA_INSTANCE==="true",NEW_MESSAGE:process.env?.DATABASE_SAVE_DATA_NEW_MESSAGE==="true",MESSAGE_UPDATE:process.env?.DATABASE_SAVE_MESSAGE_UPDATE==="true",CONTACTS:process.env?.DATABASE_SAVE_DATA_CONTACTS==="true",CHATS:process.env?.DATABASE_SAVE_DATA_CHATS==="true",HISTORIC:process.env?.DATABASE_SAVE_DATA_HISTORIC==="true",LABELS:process.env?.DATABASE_SAVE_DATA_LABELS==="true",IS_ON_WHATSAPP:process.env?.DATABASE_SAVE_IS_ON_WHATSAPP==="true",IS_ON_WHATSAPP_DAYS:Number.parseInt(process.env?.DATABASE_SAVE_IS_ON_WHATSAPP_DAYS??"7")},DELETE_DATA:{LOGICAL_MESSAGE_DELETE:process.env?.DATABASE_DELETE_MESSAGE==="true"}},RABBITMQ:{ENABLED:process.env?.RABBITMQ_ENABLED==="true",GLOBAL_ENABLED:process.env?.RABBITMQ_GLOBAL_ENABLED==="true",PREFIX_KEY:process.env?.RABBITMQ_PREFIX_KEY||"evolution",EXCHANGE_NAME:process.env?.RABBITMQ_EXCHANGE_NAME||"evolution_exchange",URI:process.env.RABBITMQ_URI||"",EVENTS:{APPLICATION_STARTUP:process.env?.RABBITMQ_EVENTS_APPLICATION_STARTUP==="true",INSTANCE_CREATE:process.env?.RABBITMQ_EVENTS_INSTANCE_CREATE==="true",INSTANCE_DELETE:process.env?.RABBITMQ_EVENTS_INSTANCE_DELETE==="true",QRCODE_UPDATED:process.env?.RABBITMQ_EVENTS_QRCODE_UPDATED==="true",MESSAGES_SET:process.env?.RABBITMQ_EVENTS_MESSAGES_SET==="true",MESSAGES_UPSERT:process.env?.RABBITMQ_EVENTS_MESSAGES_UPSERT==="true",MESSAGES_EDITED:process.env?.RABBITMQ_EVENTS_MESSAGES_EDITED==="true",MESSAGES_UPDATE:process.env?.RABBITMQ_EVENTS_MESSAGES_UPDATE==="true",MESSAGES_DELETE:process.env?.RABBITMQ_EVENTS_MESSAGES_DELETE==="true",SEND_MESSAGE:process.env?.RABBITMQ_EVENTS_SEND_MESSAGE==="true",CONTACTS_SET:process.env?.RABBITMQ_EVENTS_CONTACTS_SET==="true",CONTACTS_UPDATE:process.env?.RABBITMQ_EVENTS_CONTACTS_UPDATE==="true",CONTACTS_UPSERT:process.env?.RABBITMQ_EVENTS_CONTACTS_UPSERT==="true",PRESENCE_UPDATE:process.env?.RABBITMQ_EVENTS_PRESENCE_UPDATE==="true",CHATS_SET:process.env?.RABBITMQ_EVENTS_CHATS_SET==="true",CHATS_UPDATE:process.env?.RABBITMQ_EVENTS_CHATS_UPDATE==="true",CHATS_UPSERT:process.env?.RABBITMQ_EVENTS_CHATS_UPSERT==="true",CHATS_DELETE:process.env?.RABBITMQ_EVENTS_CHATS_DELETE==="true",CONNECTION_UPDATE:process.env?.RABBITMQ_EVENTS_CONNECTION_UPDATE==="true",LABELS_EDIT:process.env?.RABBITMQ_EVENTS_LABELS_EDIT==="true",LABELS_ASSOCIATION:process.env?.RABBITMQ_EVENTS_LABELS_ASSOCIATION==="true",GROUPS_UPSERT:process.env?.RABBITMQ_EVENTS_GROUPS_UPSERT==="true",GROUP_UPDATE:process.env?.RABBITMQ_EVENTS_GROUPS_UPDATE==="true",GROUP_PARTICIPANTS_UPDATE:process.env?.RABBITMQ_EVENTS_GROUP_PARTICIPANTS_UPDATE==="true",CALL:process.env?.RABBITMQ_EVENTS_CALL==="true",TYPEBOT_START:process.env?.RABBITMQ_EVENTS_TYPEBOT_START==="true",TYPEBOT_CHANGE_STATUS:process.env?.RABBITMQ_EVENTS_TYPEBOT_CHANGE_STATUS==="true"}},SQS:{ENABLED:process.env?.SQS_ENABLED==="true",ACCESS_KEY_ID:process.env.SQS_ACCESS_KEY_ID||"",SECRET_ACCESS_KEY:process.env.SQS_SECRET_ACCESS_KEY||"",ACCOUNT_ID:process.env.SQS_ACCOUNT_ID||"",REGION:process.env.SQS_REGION||""},WEBSOCKET:{ENABLED:process.env?.WEBSOCKET_ENABLED==="true",GLOBAL_EVENTS:process.env?.WEBSOCKET_GLOBAL_EVENTS==="true"},PUSHER:{ENABLED:process.env?.PUSHER_ENABLED==="true",GLOBAL:{ENABLED:process.env?.PUSHER_GLOBAL_ENABLED==="true",APP_ID:process.env?.PUSHER_GLOBAL_APP_ID||"",KEY:process.env?.PUSHER_GLOBAL_KEY||"",SECRET:process.env?.PUSHER_GLOBAL_SECRET||"",CLUSTER:process.env?.PUSHER_GLOBAL_CLUSTER||"",USE_TLS:process.env?.PUSHER_GLOBAL_USE_TLS==="true"},EVENTS:{APPLICATION_STARTUP:process.env?.PUSHER_EVENTS_APPLICATION_STARTUP==="true",INSTANCE_CREATE:process.env?.PUSHER_EVENTS_INSTANCE_CREATE==="true",INSTANCE_DELETE:process.env?.PUSHER_EVENTS_INSTANCE_DELETE==="true",QRCODE_UPDATED:process.env?.PUSHER_EVENTS_QRCODE_UPDATED==="true",MESSAGES_SET:process.env?.PUSHER_EVENTS_MESSAGES_SET==="true",MESSAGES_UPSERT:process.env?.PUSHER_EVENTS_MESSAGES_UPSERT==="true",MESSAGES_EDITED:process.env?.PUSHER_EVENTS_MESSAGES_EDITED==="true",MESSAGES_UPDATE:process.env?.PUSHER_EVENTS_MESSAGES_UPDATE==="true",MESSAGES_DELETE:process.env?.PUSHER_EVENTS_MESSAGES_DELETE==="true",SEND_MESSAGE:process.env?.PUSHER_EVENTS_SEND_MESSAGE==="true",CONTACTS_SET:process.env?.PUSHER_EVENTS_CONTACTS_SET==="true",CONTACTS_UPDATE:process.env?.PUSHER_EVENTS_CONTACTS_UPDATE==="true",CONTACTS_UPSERT:process.env?.PUSHER_EVENTS_CONTACTS_UPSERT==="true",PRESENCE_UPDATE:process.env?.PUSHER_EVENTS_PRESENCE_UPDATE==="true",CHATS_SET:process.env?.PUSHER_EVENTS_CHATS_SET==="true",CHATS_UPDATE:process.env?.PUSHER_EVENTS_CHATS_UPDATE==="true",CHATS_UPSERT:process.env?.PUSHER_EVENTS_CHATS_UPSERT==="true",CHATS_DELETE:process.env?.PUSHER_EVENTS_CHATS_DELETE==="true",CONNECTION_UPDATE:process.env?.PUSHER_EVENTS_CONNECTION_UPDATE==="true",LABELS_EDIT:process.env?.PUSHER_EVENTS_LABELS_EDIT==="true",LABELS_ASSOCIATION:process.env?.PUSHER_EVENTS_LABELS_ASSOCIATION==="true",GROUPS_UPSERT:process.env?.PUSHER_EVENTS_GROUPS_UPSERT==="true",GROUP_UPDATE:process.env?.PUSHER_EVENTS_GROUPS_UPDATE==="true",GROUP_PARTICIPANTS_UPDATE:process.env?.PUSHER_EVENTS_GROUP_PARTICIPANTS_UPDATE==="true",CALL:process.env?.PUSHER_EVENTS_CALL==="true",TYPEBOT_START:process.env?.PUSHER_EVENTS_TYPEBOT_START==="true",TYPEBOT_CHANGE_STATUS:process.env?.PUSHER_EVENTS_TYPEBOT_CHANGE_STATUS==="true"}},WA_BUSINESS:{TOKEN_WEBHOOK:process.env.WA_BUSINESS_TOKEN_WEBHOOK||"evolution",URL:process.env.WA_BUSINESS_URL||"https://graph.facebook.com",VERSION:process.env.WA_BUSINESS_VERSION||"v18.0",LANGUAGE:process.env.WA_BUSINESS_LANGUAGE||"en"},LOG:{LEVEL:process.env?.LOG_LEVEL?.split(",")||["ERROR","WARN","DEBUG","INFO","LOG","VERBOSE","DARK","WEBHOOKS","WEBSOCKET"],COLOR:process.env?.LOG_COLOR==="true",BAILEYS:process.env?.LOG_BAILEYS||"error"},DEL_INSTANCE:(0,F.isBooleanString)(process.env?.DEL_INSTANCE)?process.env.DEL_INSTANCE==="true":Number.parseInt(process.env.DEL_INSTANCE)||!1,DEL_TEMP_INSTANCES:(0,F.isBooleanString)(process.env?.DEL_TEMP_INSTANCES)?process.env.DEL_TEMP_INSTANCES==="true":!0,LANGUAGE:process.env?.LANGUAGE||"en",WEBHOOK:{GLOBAL:{URL:process.env?.WEBHOOK_GLOBAL_URL||"",ENABLED:process.env?.WEBHOOK_GLOBAL_ENABLED==="true",WEBHOOK_BY_EVENTS:process.env?.WEBHOOK_GLOBAL_WEBHOOK_BY_EVENTS==="true"},EVENTS:{APPLICATION_STARTUP:process.env?.WEBHOOK_EVENTS_APPLICATION_STARTUP==="true",INSTANCE_CREATE:process.env?.WEBHOOK_EVENTS_INSTANCE_CREATE==="true",INSTANCE_DELETE:process.env?.WEBHOOK_EVENTS_INSTANCE_DELETE==="true",QRCODE_UPDATED:process.env?.WEBHOOK_EVENTS_QRCODE_UPDATED==="true",MESSAGES_SET:process.env?.WEBHOOK_EVENTS_MESSAGES_SET==="true",MESSAGES_UPSERT:process.env?.WEBHOOK_EVENTS_MESSAGES_UPSERT==="true",MESSAGES_EDITED:process.env?.WEBHOOK_EVENTS_MESSAGES_EDITED==="true",MESSAGES_UPDATE:process.env?.WEBHOOK_EVENTS_MESSAGES_UPDATE==="true",MESSAGES_DELETE:process.env?.WEBHOOK_EVENTS_MESSAGES_DELETE==="true",SEND_MESSAGE:process.env?.WEBHOOK_EVENTS_SEND_MESSAGE==="true",CONTACTS_SET:process.env?.WEBHOOK_EVENTS_CONTACTS_SET==="true",CONTACTS_UPDATE:process.env?.WEBHOOK_EVENTS_CONTACTS_UPDATE==="true",CONTACTS_UPSERT:process.env?.WEBHOOK_EVENTS_CONTACTS_UPSERT==="true",PRESENCE_UPDATE:process.env?.WEBHOOK_EVENTS_PRESENCE_UPDATE==="true",CHATS_SET:process.env?.WEBHOOK_EVENTS_CHATS_SET==="true",CHATS_UPDATE:process.env?.WEBHOOK_EVENTS_CHATS_UPDATE==="true",CHATS_UPSERT:process.env?.WEBHOOK_EVENTS_CHATS_UPSERT==="true",CHATS_DELETE:process.env?.WEBHOOK_EVENTS_CHATS_DELETE==="true",CONNECTION_UPDATE:process.env?.WEBHOOK_EVENTS_CONNECTION_UPDATE==="true",LABELS_EDIT:process.env?.WEBHOOK_EVENTS_LABELS_EDIT==="true",LABELS_ASSOCIATION:process.env?.WEBHOOK_EVENTS_LABELS_ASSOCIATION==="true",GROUPS_UPSERT:process.env?.WEBHOOK_EVENTS_GROUPS_UPSERT==="true",GROUP_UPDATE:process.env?.WEBHOOK_EVENTS_GROUPS_UPDATE==="true",GROUP_PARTICIPANTS_UPDATE:process.env?.WEBHOOK_EVENTS_GROUP_PARTICIPANTS_UPDATE==="true",CALL:process.env?.WEBHOOK_EVENTS_CALL==="true",TYPEBOT_START:process.env?.WEBHOOK_EVENTS_TYPEBOT_START==="true",TYPEBOT_CHANGE_STATUS:process.env?.WEBHOOK_EVENTS_TYPEBOT_CHANGE_STATUS==="true",ERRORS:process.env?.WEBHOOK_EVENTS_ERRORS==="true",ERRORS_WEBHOOK:process.env?.WEBHOOK_EVENTS_ERRORS_WEBHOOK||""}},CONFIG_SESSION_PHONE:{CLIENT:process.env?.CONFIG_SESSION_PHONE_CLIENT||"Evolution API",NAME:process.env?.CONFIG_SESSION_PHONE_NAME||"Chrome",VERSION:process.env?.CONFIG_SESSION_PHONE_VERSION||null},QRCODE:{LIMIT:Number.parseInt(process.env.QRCODE_LIMIT)||30,COLOR:process.env.QRCODE_COLOR||"#198754"},TYPEBOT:{ENABLED:process.env?.TYPEBOT_ENABLED==="true",API_VERSION:process.env?.TYPEBOT_API_VERSION||"old",SEND_MEDIA_BASE64:process.env?.TYPEBOT_SEND_MEDIA_BASE64==="true"},CHATWOOT:{ENABLED:process.env?.CHATWOOT_ENABLED==="true",MESSAGE_DELETE:process.env.CHATWOOT_MESSAGE_DELETE==="true",MESSAGE_READ:process.env.CHATWOOT_MESSAGE_READ==="true",BOT_CONTACT:!process.env.CHATWOOT_BOT_CONTACT||process.env.CHATWOOT_BOT_CONTACT==="true",IMPORT:{DATABASE:{CONNECTION:{URI:process.env.CHATWOOT_IMPORT_DATABASE_CONNECTION_URI||""}},PLACEHOLDER_MEDIA_MESSAGE:process.env?.CHATWOOT_IMPORT_PLACEHOLDER_MEDIA_MESSAGE==="true"}},OPENAI:{ENABLED:process.env?.OPENAI_ENABLED==="true",API_KEY_GLOBAL:process.env?.OPENAI_API_KEY_GLOBAL||null},DIFY:{ENABLED:process.env?.DIFY_ENABLED==="true"},CACHE:{REDIS:{ENABLED:process.env?.CACHE_REDIS_ENABLED==="true",URI:process.env?.CACHE_REDIS_URI||"",PREFIX_KEY:process.env?.CACHE_REDIS_PREFIX_KEY||"evolution-cache",TTL:Number.parseInt(process.env?.CACHE_REDIS_TTL)||604800,SAVE_INSTANCES:process.env?.CACHE_REDIS_SAVE_INSTANCES==="true"},LOCAL:{ENABLED:process.env?.CACHE_LOCAL_ENABLED==="true",TTL:Number.parseInt(process.env?.CACHE_REDIS_TTL)||86400}},S3:{ACCESS_KEY:process.env?.S3_ACCESS_KEY,SECRET_KEY:process.env?.S3_SECRET_KEY,ENDPOINT:process.env?.S3_ENDPOINT,BUCKET_NAME:process.env?.S3_BUCKET,ENABLE:process.env?.S3_ENABLED==="true",PORT:Number.parseInt(process.env?.S3_PORT||"9000"),USE_SSL:process.env?.S3_USE_SSL==="true",REGION:process.env?.S3_REGION},AUTHENTICATION:{API_KEY:{KEY:process.env.AUTHENTICATION_API_KEY||"BQYHJGJHJ"},EXPOSE_IN_FETCH_INSTANCES:process.env?.AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES==="true"}}}},y=new H;var oe=I(require("dayjs")),ae=I(require("fs"));var Ne=JSON.parse(ae.default.readFileSync("./package.json","utf8")),se=m=>(0,oe.default)(m).toDate().toString().replace(/\sGMT.+/,""),v=(s=>(s.LOG="\x1B[32m",s.INFO="\x1B[34m",s.WARN="\x1B[33m",s.ERROR="\x1B[31m",s.DEBUG="\x1B[36m",s.VERBOSE="\x1B[37m",s.DARK="\x1B[30m",s))(v||{});var re=(s=>(s.LOG="\x1B[32m%s\x1B[0m",s.DARK="\x1B[30m%s\x1B[0m",s.INFO="\x1B[34m%s\x1B[0m",s.WARN="\x1B[33m%s\x1B[0m",s.ERROR="\x1B[31m%s\x1B[0m",s.DEBUG="\x1B[36m%s\x1B[0m",s.VERBOSE="\x1B[37m%s\x1B[0m",s))(re||{}),ie=(s=>(s.LOG="LOG",s.WARN="WARN",s.INFO="INFO",s.DARK="DARK",s.ERROR="ERROR",s.DEBUG="DEBUG",s.VERBOSE="VERBOSE",s))(ie||{}),ce=(s=>(s.LOG="\x1B[42m",s.INFO="\x1B[44m",s.WARN="\x1B[43m",s.DARK="\x1B[40m",s.ERROR="\x1B[41m",s.DEBUG="\x1B[46m",s.VERBOSE="\x1B[47m",s))(ce||{}),w=class{constructor(e="Logger"){this.configService=y;this.instance=null;this.context=e}setContext(e){this.context=e}setInstance(e){this.instance=e}console(e,t){let n=[];this.configService.get("LOG").LEVEL.forEach(c=>n.push(ie[c]));let o=typeof e;n.includes(t)&&(y.get("LOG").COLOR?(console.log("\x1B[1m"+re[t],"[Evolution API]","\x1B[1m"+v[t],this.instance?`[${this.instance}]`:"","\x1B[1m"+v[t],`v${Ne.version}`,"\x1B[1m"+v[t],process.pid.toString(),"\x1B[0m","\x1B[1m"+v[t],"-","\x1B[1m\x1B[37m",`${se(Date.now())}  `,"\x1B[0m",v[t]+ce[t]+"\x1B[1m",`${t} \x1B[0m`,"\x1B[33m\x1B[1m",`[${this.context}]\x1B[0m`,v[t]+"\x1B[1m",`[${o}]\x1B[0m`,v[t],o!=="object"?e:"","\x1B[0m"),o==="object"&&console.log(e,`
`)):console.log("[Evolution API]",this.instance?`[${this.instance}]`:"",process.pid.toString(),"-",`${se(Date.now())}  `,`${t} `,`[${this.context}]`,`[${o}]`,e))}log(e){this.console(e,"LOG")}info(e){this.console(e,"INFO")}warn(e){this.console(e,"WARN")}error(e){this.console(e,"ERROR")}verbose(e){this.console(e,"VERBOSE")}debug(e){this.console(e,"DEBUG")}dark(e){this.console(e,"DARK")}};var Ee=I(require("pg")),{Pool:fe}=Ee.default,Y=class{constructor(){this.logger=new w("Postgres");this.connected=!1}getConnection(e){if(this.connected)return this.pool;this.pool=new fe({connectionString:e,ssl:{rejectUnauthorized:!1}}),this.pool.on("error",()=>{this.logger.error("postgres disconnected"),this.connected=!1});try{this.connected=!0}catch(t){return this.connected=!1,this.logger.error("postgres connect exception caught: "+t),null}return this.pool}getChatwootConnection(){let e=y.get("CHATWOOT").IMPORT.DATABASE.CONNECTION.URI;return this.getConnection(e)}},M=new Y;var q=class{constructor(){this.logger=new w("ChatwootImport");this.repositoryMessagesCache=new Map;this.historyMessages=new Map;this.historyContacts=new Map}getRepositoryMessagesCache(e){return this.repositoryMessagesCache.has(e.instanceName)?this.repositoryMessagesCache.get(e.instanceName):null}setRepositoryMessagesCache(e,t){this.repositoryMessagesCache.set(e.instanceName,t)}deleteRepositoryMessagesCache(e){this.repositoryMessagesCache.delete(e.instanceName)}addHistoryMessages(e,t){let n=this.historyMessages.has(e.instanceName)?this.historyMessages.get(e.instanceName):[];this.historyMessages.set(e.instanceName,[...n,...t])}addHistoryContacts(e,t){let n=this.historyContacts.has(e.instanceName)?this.historyContacts.get(e.instanceName):[];this.historyContacts.set(e.instanceName,n.concat(t))}deleteHistoryMessages(e){this.historyMessages.delete(e.instanceName)}deleteHistoryContacts(e){this.historyContacts.delete(e.instanceName)}clearAll(e){this.deleteRepositoryMessagesCache(e),this.deleteHistoryMessages(e),this.deleteHistoryContacts(e)}getHistoryMessagesLenght(e){return this.historyMessages.get(e.instanceName)?.length??0}async importHistoryContacts(e,t){try{if(this.getHistoryMessagesLenght(e)>0)return;let n=M.getChatwootConnection(),o=0,c=this.historyContacts.get(e.instanceName)||[];if(c.length===0)return 0;let a=this.sliceIntoChunks(c,3e3);for(;a.length>0;){let s=`SELECT id FROM labels WHERE title = '${t.nameInbox}' AND account_id = ${t.accountId} LIMIT 1`,r=(await n.query(s))?.rows[0]?.id;if(!r){let p=`INSERT INTO labels (title, color, show_on_sidebar, account_id, created_at, updated_at) VALUES ('${t.nameInbox}', '#34039B', true, ${t.accountId}, NOW(), NOW()) RETURNING id`;r=(await n.query(p))?.rows[0]?.id}let i=`INSERT INTO contacts
          (name, phone_number, account_id, identifier, created_at, updated_at) VALUES `,E=[t.accountId];for(let p of a){E.push(p.pushName);let _=`$${E.length}`;E.push(`+${p.remoteJid.split("@")[0]}`);let S=`$${E.length}`;E.push(p.remoteJid);let C=`$${E.length}`;i+=`(${_}, ${S}, $1, ${C}, NOW(), NOW()),`}i.slice(-1)===","&&(i=i.slice(0,-1)),i+=` ON CONFLICT (identifier, account_id)
                       DO UPDATE SET
                        name = EXCLUDED.name,
                        phone_number = EXCLUDED.phone_number,
                        identifier = EXCLUDED.identifier`,o+=(await n.query(i,E))?.rowCount??0;let l=`SELECT id FROM tags WHERE name = '${t.nameInbox}' LIMIT 1`,d=(await n.query(l))?.rows[0]?.id,T=`INSERT INTO tags (name, taggings_count) VALUES ('${t.nameInbox}', ${o}) ON CONFLICT (name) DO UPDATE SET taggings_count = tags.taggings_count + ${o} RETURNING id`;d=(await n.query(T))?.rows[0]?.id,await n.query(T);let u="INSERT INTO taggings (tag_id, taggable_type, taggable_id, context, created_at) VALUES ";a.forEach(p=>{let _=`(SELECT id FROM contacts WHERE identifier = '${p.remoteJid}' AND account_id = ${t.accountId})`;u+=`($1, $2, ${_}, $3, NOW()),`}),u.slice(-1)===","&&(u=u.slice(0,-1)),await n.query(u,[d,"Contact","labels"]),a=this.sliceIntoChunks(c,3e3)}return this.deleteHistoryContacts(e),o}catch(n){this.logger.error(`Error on import history contacts: ${n.toString()}`)}}async getExistingSourceIds(e){try{let t=new Set;if(e.length===0)return t;let n=e.map(s=>`WAID:${s.replace("WAID:","")}`),a=await M.getChatwootConnection().query("SELECT source_id FROM messages WHERE source_id = ANY($1)",[n]);for(let s of a.rows)t.add(s.source_id);return t}catch{return null}}async importHistoryMessages(e,t,n,o){try{let c=M.getChatwootConnection(),a=await this.getChatwootUser(o);if(!a)throw new Error("User not found to import messages.");let s=0,r=this.historyMessages.get(e.instanceName)||[];if(r.length===0)return 0;r.sort((u,p)=>{let _=u.key,S=p.key,C=u.messageTimestamp,O=p.messageTimestamp;return parseInt(_.remoteJid)-parseInt(S.remoteJid)||C-O});let i=this.createMessagesMapByPhoneNumber(r),E=new Map;i.forEach((u,p)=>{E.set(p,{first:u[0]?.messageTimestamp,last:u[u.length-1]?.messageTimestamp})});let l=await this.getExistingSourceIds(r.map(u=>u.key.id));r=r.filter(u=>!l.has(u.key.id));let g=4e3,d=this.sliceIntoChunks(r,g);for(;d.length>0;){let u=this.createMessagesMapByPhoneNumber(d);if(u.size>0){let p=await this.selectOrCreateFksFromChatwoot(o,n,E,u),_=`INSERT INTO messages
            (content, processed_message_content, account_id, inbox_id, conversation_id, message_type, private, content_type,
            sender_type, sender_id, source_id, created_at, updated_at) VALUES `,S=[o.accountId,n.id];u.forEach((C,O)=>{let N=p.get(O);C.forEach(h=>{if(!h.message||!N?.conversation_id||!N?.contact_id)return;let D=this.getContentMessage(t,h);if(!D)return;S.push(D);let f=`$${S.length}`;S.push(N.conversation_id);let b=`$${S.length}`;S.push(h.key.fromMe?"1":"0");let P=`$${S.length}`;S.push(h.key.fromMe?a.user_type:"Contact");let L=`$${S.length}`;S.push(h.key.fromMe?a.user_id:N.contact_id);let V=`$${S.length}`;S.push("WAID:"+h.key.id);let B=`$${S.length}`;S.push(h.messageTimestamp);let x=`$${S.length}`;_+=`(${f}, ${f}, $1, $2, ${b}, ${P}, FALSE, 0,
                  ${L},${V},${B}, to_timestamp(${x}), to_timestamp(${x})),`})}),S.length>2&&(_.slice(-1)===","&&(_=_.slice(0,-1)),s+=(await c.query(_,S))?.rowCount??0)}d=this.sliceIntoChunks(r,g)}this.deleteHistoryMessages(e),this.deleteRepositoryMessagesCache(e);let T={...o,ignoreJids:Array.isArray(o.ignoreJids)?o.ignoreJids.map(u=>String(u)):[]};return this.importHistoryContacts(e,T),s}catch(c){this.logger.error(`Error on import history messages: ${c.toString()}`),this.deleteHistoryMessages(e),this.deleteRepositoryMessagesCache(e)}}async selectOrCreateFksFromChatwoot(e,t,n,o){let c=M.getChatwootConnection(),a=[e.accountId,t.id],r=`WITH
              phone_number AS (
                SELECT phone_number, created_at::INTEGER, last_activity_at::INTEGER FROM (
                  VALUES 
                   ${Array.from(o.keys()).map(E=>{let l=n.get(E);if(l){a.push(E);let g=`($${a.length},`;return a.push(l.first),g+=`$${a.length},`,a.push(l.last),`${g}$${a.length})`}}).join(",")}
                 ) as t (phone_number, created_at, last_activity_at)
              ),

              only_new_phone_number AS (
                SELECT * FROM phone_number
                WHERE phone_number NOT IN (
                  SELECT phone_number
                  FROM contacts
                    JOIN contact_inboxes ci ON ci.contact_id = contacts.id AND ci.inbox_id = $2
                    JOIN conversations con ON con.contact_inbox_id = ci.id 
                      AND con.account_id = $1
                      AND con.inbox_id = $2
                      AND con.contact_id = contacts.id
                  WHERE contacts.account_id = $1
                )
              ),

              new_contact AS (
                INSERT INTO contacts (name, phone_number, account_id, identifier, created_at, updated_at)
                SELECT REPLACE(p.phone_number, '+', ''), p.phone_number, $1, CONCAT(REPLACE(p.phone_number, '+', ''),
                  '@s.whatsapp.net'), to_timestamp(p.created_at), to_timestamp(p.last_activity_at)
                FROM only_new_phone_number AS p
                ON CONFLICT(identifier, account_id) DO UPDATE SET updated_at = EXCLUDED.updated_at
                RETURNING id, phone_number, created_at, updated_at
              ),

              new_contact_inbox AS (
                INSERT INTO contact_inboxes (contact_id, inbox_id, source_id, created_at, updated_at)
                SELECT new_contact.id, $2, gen_random_uuid(), new_contact.created_at, new_contact.updated_at
                FROM new_contact 
                RETURNING id, contact_id, created_at, updated_at
              ),

              new_conversation AS (
                INSERT INTO conversations (account_id, inbox_id, status, contact_id,
                  contact_inbox_id, uuid, last_activity_at, created_at, updated_at)
                SELECT $1, $2, 0, new_contact_inbox.contact_id, new_contact_inbox.id, gen_random_uuid(),
                  new_contact_inbox.updated_at, new_contact_inbox.created_at, new_contact_inbox.updated_at
                FROM new_contact_inbox
                RETURNING id, contact_id
              )

              SELECT new_contact.phone_number, new_conversation.contact_id, new_conversation.id AS conversation_id
              FROM new_conversation 
              JOIN new_contact ON new_conversation.contact_id = new_contact.id

              UNION

              SELECT p.phone_number, c.id contact_id, con.id conversation_id
                FROM phone_number p
              JOIN contacts c ON c.phone_number = p.phone_number
              JOIN contact_inboxes ci ON ci.contact_id = c.id AND ci.inbox_id = $2
              JOIN conversations con ON con.contact_inbox_id = ci.id AND con.account_id = $1
                AND con.inbox_id = $2 AND con.contact_id = c.id`,i=await c.query(r,a);return new Map(i.rows.map(E=>[E.phone_number,E]))}async getChatwootUser(e){try{return(await M.getChatwootConnection().query(`SELECT owner_type AS user_type, owner_id AS user_id
                         FROM access_tokens
                       WHERE token = $1`,[e.token]))?.rows[0]||!1}catch(t){this.logger.error(`Error on getChatwootUser: ${t.toString()}`)}}createMessagesMapByPhoneNumber(e){return e.reduce((t,n)=>{let o=n?.key;if(!this.isIgnorePhoneNumber(o?.remoteJid)){let c=o?.remoteJid?.split("@")[0];if(c){let a=`+${c}`,s=t.has(a)?t.get(a):[];s.push(n),t.set(a,s)}}return t},new Map)}async getContactsOrderByRecentConversations(e,t,n=50){try{return(await M.getChatwootConnection().query(`SELECT contacts.id, contacts.identifier, contacts.phone_number
                     FROM conversations
                   JOIN contacts ON contacts.id = conversations.contact_id
                   WHERE conversations.account_id = $1
                     AND inbox_id = $2
                   ORDER BY conversations.last_activity_at DESC
                   LIMIT $3`,[t.accountId,e.id,n]))?.rows}catch(o){this.logger.error(`Error on get recent conversations: ${o.toString()}`)}}getContentMessage(e,t){let n=e.getConversationMessage(t.message);if(n)return n;if(!y.get("CHATWOOT").IMPORT.PLACEHOLDER_MEDIA_MESSAGE)return"";let o={documentMessage:t.message.documentMessage,documentWithCaptionMessage:t.message.documentWithCaptionMessage?.message?.documentMessage,imageMessage:t.message.imageMessage,videoMessage:t.message.videoMessage,audioMessage:t.message.audioMessage,stickerMessage:t.message.stickerMessage,templateMessage:t.message.templateMessage?.hydratedTemplate?.hydratedContentText};switch(Object.keys(o).find(a=>o[a]!==void 0)){case"documentMessage":return`_<File: ${t.message.documentMessage.fileName}${t.message.documentMessage.caption?` ${t.message.documentMessage.caption}`:""}>_`;case"documentWithCaptionMessage":return`_<File: ${t.message.documentWithCaptionMessage.message.documentMessage.fileName}${t.message.documentWithCaptionMessage.message.documentMessage.caption?` ${t.message.documentWithCaptionMessage.message.documentMessage.caption}`:""}>_`;case"templateMessage":return t.message.templateMessage.hydratedTemplate.hydratedTitleText?`*${t.message.templateMessage.hydratedTemplate.hydratedTitleText}*\\n`:""+t.message.templateMessage.hydratedTemplate.hydratedContentText;case"imageMessage":return"_<Image Message>_";case"videoMessage":return"_<Video Message>_";case"audioMessage":return"_<Audio Message>_";case"stickerMessage":return"_<Sticker Message>_";default:return""}}sliceIntoChunks(e,t){return e.splice(0,t)}isGroup(e){return e.includes("@g.us")}isIgnorePhoneNumber(e){return this.isGroup(e)||e==="status@broadcast"||e==="0@s.whatsapp.net"}updateMessageSourceID(e,t){return M.getChatwootConnection().query("UPDATE messages SET source_id = $1, status = 0, created_at = NOW(), updated_at = NOW() WHERE id = $2;",[`WAID:${t}`,e])}},R=new q;var pe=I(require("@figuro/chatwoot-sdk")),k=require("@figuro/chatwoot-sdk/dist/core/request");var ge=I(require("fs")),J=I(require("i18next")),Q=I(require("path")),Oe=["en","pt-BR","es"],Re=Q.default.join(__dirname,"translations"),Me=new H,le={};Oe.forEach(m=>{let e=Q.default.join(Re,`${m}.json`);ge.default.existsSync(e)&&(le[m]={translation:require(e)})});J.default.init({resources:le,fallbackLng:"en",lng:Me.get("LANGUAGE"),debug:!1,interpolation:{escapeValue:!1}});var A=J.default;var ue=I(require("axios")),de=I(require("fs")),be=JSON.parse(de.default.readFileSync("./package.json","utf8")),$=async m=>{if(!(process.env.TELEMETRY_ENABLED===void 0||process.env.TELEMETRY_ENABLED==="true")||m==="/")return;let t={route:m,apiVersion:`${be.version}`,timestamp:new Date},n=process.env.TELEMETRY_URL&&process.env.TELEMETRY_URL!==""?process.env.TELEMETRY_URL:"https://log.evolution-api.com/telemetry";ue.default.post(n,t).then(()=>{}).catch(()=>{})};var G=I(require("axios")),Se=I(require("dayjs")),j=I(require("form-data")),X=I(require("jimp")),z=I(require("long")),U=I(require("mime-types")),Z=I(require("path")),K=require("stream"),ee=class{constructor(e,t,n,o){this.waMonitor=e;this.configService=t;this.prismaRepository=n;this.cache=o;this.logger=new w("ChatwootService");this.pgClient=M.getChatwootConnection()}async getProvider(e){let t=`${e.instanceName}:getProvider`;if(await this.cache.has(t))return await this.cache.get(t);let n=await this.waMonitor.waInstances[e.instanceName]?.findChatwoot();return n?(this.cache.set(t,n),n):(this.logger.warn("provider not found"),null)}async clientCw(e){let t=await this.getProvider(e);return t?(this.provider=t,new pe.default({config:this.getClientCwConfig()})):(this.logger.error("provider not found"),null)}getClientCwConfig(){return{basePath:this.provider.url,with_credentials:!0,credentials:"include",token:this.provider.token,nameInbox:this.provider.nameInbox,mergeBrazilContacts:this.provider.mergeBrazilContacts}}getCache(){return this.cache}async create(e,t){if(await this.waMonitor.waInstances[e.instanceName].setChatwoot(t),t.autoCreate){this.logger.log("Auto create chatwoot instance");let n=this.configService.get("SERVER").URL;await this.initInstanceChatwoot(e,t.nameInbox??e.instanceName.split("-cwId-")[0],`${n}/chatwoot/webhook/${encodeURIComponent(e.instanceName)}`,!0,t.number,t.organization,t.logo)}return t}async find(e){try{return await this.waMonitor.waInstances[e.instanceName].findChatwoot()}catch{return this.logger.error("chatwoot not found"),{enabled:null,url:""}}}async getContact(e,t){let n=await this.clientCw(e);if(!n)return this.logger.warn("client not found"),null;if(!t)return this.logger.warn("id is required"),null;let o=await n.contact.getContactable({accountId:this.provider.accountId,id:t});return o||(this.logger.warn("contact not found"),null)}async initInstanceChatwoot(e,t,n,o,c,a,s){let r=await this.clientCw(e);if(!r)return this.logger.warn("client not found"),null;let i=await r.inboxes.list({accountId:this.provider.accountId}),E=i.payload.map(T=>T.name).includes(t),l;if(this.logger.log("Creating chatwoot inbox"),E){let T=i.payload.find(u=>u.name===t);if(!T)return this.logger.warn("inbox not found"),null;l=T.id}else{let T={type:"api",webhook_url:n},u=await r.inboxes.create({accountId:this.provider.accountId,data:{name:t,channel:T}});if(!u)return this.logger.warn("inbox not found"),null;l=u.id}if(this.logger.log(`Inbox created - inboxId: ${l}`),!this.configService.get("CHATWOOT").BOT_CONTACT)return this.logger.log("Chatwoot bot contact is disabled"),!0;this.logger.log("Creating chatwoot bot contact");let g=await this.findContact(e,"123456")||await this.createContact(e,"123456",l,!1,a||"EvolutionAPI",s||"https://evolution-api.com/files/evolution-api-favicon.png");if(!g)return this.logger.warn("contact not found"),null;let d=g.id||g.payload.contact.id;if(this.logger.log(`Contact created - contactId: ${d}`),o){this.logger.log("QR code enabled");let T={contact_id:d.toString(),inbox_id:l.toString()},u=await r.conversations.create({accountId:this.provider.accountId,data:T});if(!u)return this.logger.warn("conversation not found"),null;let p="init";if(c&&(p=`init:${c}`),!await r.messages.create({accountId:this.provider.accountId,conversationId:u.id,data:{content:p,message_type:"outgoing"}}))return this.logger.warn("conversation not found"),null;this.logger.log("Init message sent")}return!0}async createContact(e,t,n,o,c,a,s){let r=await this.clientCw(e);if(!r)return this.logger.warn("client not found"),null;let i={};o?i={inbox_id:n,name:c||t,identifier:t,avatar_url:a}:(i={inbox_id:n,name:c||t,identifier:s,avatar_url:a},(s&&s.includes("@")||!s)&&(i.phone_number=`+${t}`));let E=await r.contacts.create({accountId:this.provider.accountId,data:i});if(!E)return this.logger.warn("contact not found"),null;let g=(await this.findContact(e,t))?.id;return await this.addLabelToContact(this.provider.nameInbox,g),E}async updateContact(e,t,n){let o=await this.clientCw(e);if(!o)return this.logger.warn("client not found"),null;if(!t)return this.logger.warn("id is required"),null;try{return await o.contacts.update({accountId:this.provider.accountId,id:t,data:n})}catch{return null}}async addLabelToContact(e,t){try{if(!this.configService.get("CHATWOOT").IMPORT.DATABASE.CONNECTION.URI)return!1;let c=(await this.pgClient.query("SELECT id, taggings_count FROM tags WHERE name = $1 LIMIT 1",[e]))?.rows[0],a=c?.id,s=c?.taggings_count||0;return a=(await this.pgClient.query(`INSERT INTO tags (name, taggings_count) 
                      VALUES ($1, $2) 
                      ON CONFLICT (name) 
                      DO UPDATE SET taggings_count = tags.taggings_count + 1 
                      RETURNING id`,[e,s+1]))?.rows[0]?.id,(await this.pgClient.query(`SELECT 1 FROM taggings 
                               WHERE tag_id = $1 AND taggable_type = 'Contact' AND taggable_id = $2 AND context = 'labels' LIMIT 1`,[a,t]))?.rowCount>0||await this.pgClient.query(`INSERT INTO taggings (tag_id, taggable_type, taggable_id, context, created_at) 
                                VALUES ($1, 'Contact', $2, 'labels', NOW())`,[a,t]),!0}catch{return!1}}async findContact(e,t){let n=await this.clientCw(e);if(!n)return this.logger.warn("client not found"),null;let o,c=t.includes("@g.us");c?o=t:o=`+${t}`;let a;return c?a=await n.contacts.search({accountId:this.provider.accountId,q:o}):a=await(0,k.request)(this.getClientCwConfig(),{method:"POST",url:`/api/v1/accounts/${this.provider.accountId}/contacts/filter`,body:{payload:this.getFilterPayload(o)}}),!a&&a?.payload?.length===0?(this.logger.warn("contact not found"),null):c?a.payload.find(s=>s.identifier===o):a.payload.length>1?this.findContactInContactList(a.payload,o):a.payload[0]}async mergeBrazilianContacts(e){try{return await(0,k.request)(this.getClientCwConfig(),{method:"POST",url:`/api/v1/accounts/${this.provider.accountId}/actions/contact_merge`,body:{base_contact_id:e.find(n=>n.phone_number.length===14)?.id,mergee_contact_id:e.find(n=>n.phone_number.length===13)?.id}})}catch{return this.logger.error("Error merging contacts"),null}}findContactInContactList(e,t){let n=this.getNumbers(t),o=this.getSearchableFields();if(e.length===2&&this.getClientCwConfig().mergeBrazilContacts&&t.startsWith("+55")){let s=this.mergeBrazilianContacts(e);if(s)return s}let c=n.reduce((s,r)=>r.length>s.length?r:s,""),a=e.find(s=>s.phone_number===c);if(a)return a;for(let s of e)for(let r of o)if(s[r]&&n.includes(s[r]))return s;return null}getNumbers(e){let t=[];if(t.push(e),e.startsWith("+55")&&e.length===14){let n=e.slice(0,5)+e.slice(6);t.push(n)}else if(e.startsWith("+55")&&e.length===13){let n=e.slice(0,5)+"9"+e.slice(5);t.push(n)}return t}getSearchableFields(){return["phone_number"]}getFilterPayload(e){let t=[],n=this.getNumbers(e),o=this.getSearchableFields();return o.forEach((c,a)=>{n.forEach((s,r)=>{let i=o.length-1===a&&n.length-1===r?null:"OR";t.push({attribute_key:c,filter_operator:"equal_to",values:[s.replace("+","")],query_operator:i})})}),t}async createConversation(e,t){try{this.logger.verbose("--- Start createConversation ---"),this.logger.verbose(`Instance: ${JSON.stringify(e)}`);let n=await this.clientCw(e);if(!n)return this.logger.warn(`Client not found for instance: ${JSON.stringify(e)}`),null;let o=`${e.instanceName}:createConversation-${t.key.remoteJid}`;if(this.logger.verbose(`Cache key: ${o}`),await this.cache.has(o)){this.logger.verbose(`Cache hit for key: ${o}`);let u=await this.cache.get(o);this.logger.verbose(`Cached conversation ID: ${u}`);let p;try{p=await n.conversations.get({accountId:this.provider.accountId,conversationId:u}),this.logger.verbose(`Conversation exists: ${JSON.stringify(p)}`)}catch(_){this.logger.error(`Error getting conversation: ${_}`),p=!1}return p?u:(this.logger.verbose("Conversation does not exist, re-calling createConversation"),this.cache.delete(o),await this.createConversation(e,t))}let c=t.key.remoteJid.includes("@g.us");this.logger.verbose(`Is group: ${c}`);let a=c?t.key.remoteJid:t.key.remoteJid.split("@")[0];this.logger.verbose(`Chat ID: ${a}`);let s;s=t.key.fromMe?a:t.pushName,this.logger.verbose(`Name contact: ${s}`);let r=await this.getInbox(e);if(!r)return this.logger.warn(`Inbox not found for instance: ${JSON.stringify(e)}`),null;if(c){this.logger.verbose("Processing group conversation");let u=await this.waMonitor.waInstances[e.instanceName].client.groupMetadata(a);this.logger.verbose(`Group metadata: ${JSON.stringify(u)}`),s=`${u.subject} (GROUP)`;let p=await this.waMonitor.waInstances[e.instanceName].profilePicture(t.key.participant.split("@")[0]);this.logger.verbose(`Participant profile picture URL: ${JSON.stringify(p)}`);let _=await this.findContact(e,t.key.participant.split("@")[0]);this.logger.verbose(`Found participant: ${JSON.stringify(_)}`),_?(!_.name||_.name===a)&&await this.updateContact(e,_.id,{name:t.pushName,avatar_url:p.profilePictureUrl||null}):await this.createContact(e,t.key.participant.split("@")[0],r.id,!1,t.pushName,p.profilePictureUrl||null,t.key.participant)}let i=await this.waMonitor.waInstances[e.instanceName].profilePicture(a);this.logger.verbose(`Contact profile picture URL: ${JSON.stringify(i)}`);let E=await this.findContact(e,a);if(this.logger.verbose(`Found contact: ${JSON.stringify(E)}`),E){if(!t.key.fromMe){let u=i?.profilePictureUrl?.split("#")[0].split("?")[0].split("/").pop()||"",p=E?.thumbnail?.split("#")[0].split("?")[0].split("/").pop()||"",_=u!==p,S=!E.name||E.name===a||(`+${a}`.startsWith("+55")?this.getNumbers(`+${a}`).some(C=>E.name===C||E.name===C.substring(3)||E.name===C.substring(1)):!1);this.logger.verbose(`Picture needs update: ${_}`),this.logger.verbose(`Name needs update: ${S}`),(_||S)&&(E=await this.updateContact(e,E.id,{...S&&{name:s},...u===""&&{avatar:null},..._&&{avatar_url:i?.profilePictureUrl}}))}}else{let u=t.key.remoteJid;E=await this.createContact(e,a,r.id,c,s,i.profilePictureUrl||null,u)}if(!E)return this.logger.warn("Contact not created or found"),null;let l=E?.payload?.id||E?.payload?.contact?.id||E?.id;this.logger.verbose(`Contact ID: ${l}`);let g=await n.contacts.listConversations({accountId:this.provider.accountId,id:l});if(this.logger.verbose(`Contact conversations: ${JSON.stringify(g)}`),!g||!g.payload)return this.logger.error("No conversations found or payload is undefined"),null;if(g.payload.length){let u;if(this.provider.reopenConversation?(u=g.payload.find(p=>p.inbox_id==r.id),this.logger.verbose(`Found conversation in reopenConversation mode: ${JSON.stringify(u)}`),this.provider.conversationPending&&u.status!=="open"&&u&&await n.conversations.toggleStatus({accountId:this.provider.accountId,conversationId:u.id,data:{status:"pending"}})):(u=g.payload.find(p=>p.status!=="resolved"&&p.inbox_id==r.id),this.logger.verbose(`Found conversation: ${JSON.stringify(u)}`)),u)return this.logger.verbose(`Returning existing conversation ID: ${u.id}`),this.cache.set(o,u.id),u.id}let d={contact_id:l.toString(),inbox_id:r.id.toString()};this.provider.conversationPending&&(d.status="pending");let T=await n.conversations.create({accountId:this.provider.accountId,data:d});return T?(this.logger.verbose(`New conversation created with ID: ${T.id}`),this.cache.set(o,T.id),T.id):(this.logger.warn("Conversation not created or found"),null)}catch(n){this.logger.error(`Error in createConversation: ${n}`)}}async getInbox(e){let t=`${e.instanceName}:getInbox`;if(await this.cache.has(t))return await this.cache.get(t);let n=await this.clientCw(e);if(!n)return this.logger.warn("client not found"),null;let o=await n.inboxes.list({accountId:this.provider.accountId});if(!o)return this.logger.warn("inbox not found"),null;let c=o.payload.find(a=>a.name===this.getClientCwConfig().nameInbox);return c?(this.cache.set(t,c),c):(this.logger.warn("inbox not found"),null)}async createMessage(e,t,n,o,c,a,s,r,i){let E=await this.clientCw(e);if(!E)return this.logger.warn("client not found"),null;let l=await this.getReplyToIds(s,e),g=i?.chatwootMessageId||null,d=await E.messages.create({accountId:this.provider.accountId,conversationId:t,data:{content:n,message_type:o,attachments:a,private:c||!1,source_id:r,content_attributes:{...l},source_reply_id:g?g.toString():null}});return d||(this.logger.warn("message not found"),null)}async getOpenConversationByContact(e,t,n){let o=await this.clientCw(e);return o?(await o.contacts.listConversations({accountId:this.provider.accountId,id:n.id})).payload.find(a=>a.inbox_id===t.id&&a.status==="open")||void 0:(this.logger.warn("client not found"),null)}async createBotMessage(e,t,n,o){let c=await this.clientCw(e);if(!c)return this.logger.warn("client not found"),null;let a=await this.findContact(e,"123456");if(!a)return this.logger.warn("contact not found"),null;let s=await this.getInbox(e);if(!s)return this.logger.warn("inbox not found"),null;let r=await this.getOpenConversationByContact(e,s,a);if(!r){this.logger.warn("conversation not found");return}let i=await c.messages.create({accountId:this.provider.accountId,conversationId:r.id,data:{content:t,message_type:n,attachments:o}});return i||(this.logger.warn("message not found"),null)}async sendData(e,t,n,o,c,a,s,r,i){if(r&&this.isImportHistoryAvailable()){let d=await R.getExistingSourceIds([r]);if(d&&d.size>0)return this.logger.warn("Message already saved on chatwoot"),null}let E=new j.default;c&&E.append("content",c),E.append("message_type",o),E.append("attachments[]",t,{filename:n});let l=i?.chatwootMessageId||null;if(s&&a){let d=await this.getReplyToIds(s,a);if(d.in_reply_to||d.in_reply_to_external_id){let T=JSON.stringify({...d});E.append("content_attributes",T)}}l&&E.append("source_reply_id",l.toString()),r&&E.append("source_id",r);let g={method:"post",maxBodyLength:1/0,url:`${this.provider.url}/api/v1/accounts/${this.provider.accountId}/conversations/${e}/messages`,headers:{api_access_token:this.provider.token,...E.getHeaders()},data:E};try{let{data:d}=await G.default.request(g);return d}catch(d){this.logger.error(d)}}async createBotQr(e,t,n,o,c){if(!await this.clientCw(e))return this.logger.warn("client not found"),null;if(!this.configService.get("CHATWOOT").BOT_CONTACT)return this.logger.log("Chatwoot bot contact is disabled"),!0;let s=await this.findContact(e,"123456");if(!s)return this.logger.warn("contact not found"),null;let r=await this.getInbox(e);if(!r)return this.logger.warn("inbox not found"),null;let i=await this.getOpenConversationByContact(e,r,s);if(!i){this.logger.warn("conversation not found");return}let E=new j.default;t&&E.append("content",t),E.append("message_type",n),o&&c&&E.append("attachments[]",o,{filename:c});let l={method:"post",maxBodyLength:1/0,url:`${this.provider.url}/api/v1/accounts/${this.provider.accountId}/conversations/${i.id}/messages`,headers:{api_access_token:this.provider.token,...E.getHeaders()},data:E};try{let{data:g}=await G.default.request(l);return g}catch(g){this.logger.error(g)}}async sendAttachment(e,t,n,o,c){try{let a=Z.default.parse(decodeURIComponent(n)),s=U.default.lookup(a?.ext)||"",r=a?.name+a?.ext;if(!s){let g=n.split("/");r=decodeURIComponent(g[g.length-1]),s=(await G.default.get(n,{responseType:"arraybuffer"})).headers["content-type"]}let i="document";switch(s.split("/")[0]){case"image":i="image";break;case"video":i="video";break;case"audio":i="audio";break;default:i="document";break}if(i==="audio"){let g={number:t,audio:n,delay:1200,quoted:c?.quoted};return $("/message/sendWhatsAppAudio"),await e?.audioWhatsapp(g,!0)}i==="image"&&a&&a?.ext===".gif"&&(i="document");let E={number:t,mediatype:i,fileName:r,media:n,delay:1200,quoted:c?.quoted};return $("/message/sendMedia"),o&&(E.caption=o),await e?.mediaMessage(E,null,!0)}catch(a){this.logger.error(a)}}async onSendMessageError(e,t,n){this.logger.verbose(`onSendMessageError ${JSON.stringify(n)}`);let o=await this.clientCw(e);if(o){if(n&&n?.status===400&&n?.message[0]?.exists===!1){o.messages.create({accountId:this.provider.accountId,conversationId:t,data:{content:`${A.t("cw.message.numbernotinwhatsapp")}`,message_type:"outgoing",private:!0}});return}o.messages.create({accountId:this.provider.accountId,conversationId:t,data:{content:A.t("cw.message.notsent",{error:n?`_${n.toString()}_`:""}),message_type:"outgoing",private:!0}})}}async receiveWebhook(e,t){try{if(await new Promise(i=>setTimeout(i,500)),!await this.clientCw(e))return this.logger.warn("client not found"),null;if(this.provider.reopenConversation===!1&&t.event==="conversation_status_changed"&&t.status==="resolved"&&t.meta?.sender?.identifier){let i=`${e.instanceName}:createConversation-${t.meta.sender.identifier}`;this.cache.delete(i)}if(!t?.conversation||t.private||t.event==="message_updated"&&!t.content_attributes?.deleted)return{message:"bot"};let o=t.conversation.meta.sender?.identifier||t.conversation.meta.sender?.phone_number.replace("+",""),c=t.content?t.content.replaceAll(/(?<!\*)\*((?!\s)([^\n*]+?)(?<!\s))\*(?!\*)/g,"_$1_").replaceAll(/\*{2}((?!\s)([^\n*]+?)(?<!\s))\*{2}/g,"*$1*").replaceAll(/~{2}((?!\s)([^\n*]+?)(?<!\s))~{2}/g,"~$1~").replaceAll(/(?<!`)`((?!\s)([^`*]+?)(?<!\s))`(?!`)/g,"```$1```"):t.content,a=t?.conversation?.messages[0]?.sender?.available_name||t?.sender?.name,s=this.waMonitor.waInstances[e.instanceName];if(t.event==="message_updated"&&t.content_attributes?.deleted){let i=await this.prismaRepository.message.findFirst({where:{chatwootMessageId:t.id,instanceId:e.instanceId}});if(i){let E=i.key;await s?.client.sendMessage(E.remoteJid,{delete:E}),await this.prismaRepository.message.deleteMany({where:{instanceId:e.instanceId,chatwootMessageId:t.id}})}return{message:"bot"}}let r=this.configService.get("CHATWOOT").BOT_CONTACT;if(o==="123456"&&t.message_type==="outgoing"){let i=c.replace("/","");if(r&&(i.includes("init")||i.includes("iniciar")))if(s?.connectionStatus?.state!=="open"){let l=i.split(":")[1];await s.connectToWhatsapp(l)}else await this.createBotMessage(e,A.t("cw.inbox.alreadyConnected",{inboxName:t.inbox.name}),"incoming");if(i==="clearcache"&&(s.clearCacheChatwoot(),await this.createBotMessage(e,A.t("cw.inbox.clearCache",{inboxName:t.inbox.name}),"incoming")),i==="status"){let E=s?.connectionStatus?.state;E||await this.createBotMessage(e,A.t("cw.inbox.notFound",{inboxName:t.inbox.name}),"incoming"),E&&await this.createBotMessage(e,A.t("cw.inbox.status",{inboxName:t.inbox.name,state:E}),"incoming")}if(r&&(i==="disconnect"||i==="desconectar")){let E=A.t("cw.inbox.disconnect",{inboxName:t.inbox.name});await this.createBotMessage(e,E,"incoming"),await s?.client?.logout("Log out instance: "+e.instanceName),await s?.client?.ws?.close()}}if(t.message_type==="outgoing"&&t?.conversation?.messages?.length&&o!=="123456"){if(t?.conversation?.messages[0]?.source_id?.substring(0,5)==="WAID:")return{message:"bot"};if(!s&&t.conversation?.id)return this.onSendMessageError(e,t.conversation?.id,"Instance not found"),{message:"bot"};let i;if(a==null)i=c;else{let l=this.provider.signDelimiter?this.provider.signDelimiter.replaceAll("\\n",`
`):`
`,g=this.provider.signMsg?[`*${a}:*`]:[];g.push(c),i=g.join(l)}for(let l of t.conversation.messages)if(l.attachments&&l.attachments.length>0)for(let g of l.attachments){c||(i=null);let d={quoted:await this.getQuotedMessage(t,e)},T=await this.sendAttachment(s,o,g.data_url,i,d);!T&&t.conversation?.id&&this.onSendMessageError(e,t.conversation?.id),await this.updateChatwootMessageId({...T,owner:e.instanceName},{messageId:t.id,inboxId:t.inbox?.id,conversationId:t.conversation?.id,contactInboxSourceId:t.conversation?.contact_inbox?.source_id},e)}else{let g={number:o,text:i,delay:1200,quoted:await this.getQuotedMessage(t,e)};$("/message/sendText");let d;try{if(d=await s?.textMessage(g,!0),!d)throw new Error("Message not sent");z.default.isLong(d?.messageTimestamp)&&(d.messageTimestamp=d.messageTimestamp?.toNumber()),await this.updateChatwootMessageId({...d,instanceId:e.instanceId},{messageId:t.id,inboxId:t.inbox?.id,conversationId:t.conversation?.id,contactInboxSourceId:t.conversation?.contact_inbox?.source_id},e)}catch(T){throw!d&&t.conversation?.id&&this.onSendMessageError(e,t.conversation?.id,T),T}}if(this.configService.get("CHATWOOT").MESSAGE_READ){let l=await this.prismaRepository.message.findFirst({where:{key:{path:["fromMe"],equals:!1},instanceId:e.instanceId}});if(l&&!l.chatwootIsRead){let g=l.key;s?.markMessageAsRead({readMessages:[{id:g.id,fromMe:g.fromMe,remoteJid:g.remoteJid}]});let d={chatwootMessageId:l.chatwootMessageId,chatwootConversationId:l.chatwootConversationId,chatwootInboxId:l.chatwootInboxId,chatwootContactInboxSourceId:l.chatwootContactInboxSourceId,chatwootIsRead:!0};await this.prismaRepository.message.updateMany({where:{instanceId:e.instanceId,key:{path:["id"],equals:g.id}},data:d})}}}if(t.message_type==="template"&&t.event==="message_created"){let i={number:o,text:t.content.replace(/\\\r\n|\\\n|\n/g,`
`),delay:1200};$("/message/sendText"),await s?.textMessage(i)}return{message:"bot"}}catch(n){return this.logger.error(n),{message:"bot"}}}async updateChatwootMessageId(e,t,n){let o=e.key;!t.messageId||!o?.id||(await this.prismaRepository.message.updateMany({where:{key:{path:["id"],equals:o.id},instanceId:n.instanceId},data:{chatwootMessageId:t.messageId,chatwootConversationId:t.conversationId,chatwootInboxId:t.inboxId,chatwootContactInboxSourceId:t.contactInboxSourceId,chatwootIsRead:t.isRead}}),this.isImportHistoryAvailable()&&R.updateMessageSourceID(t.messageId,o.id))}async getMessageByKeyId(e,t){return await this.prismaRepository.message.findFirst({where:{key:{path:["id"],equals:t},instanceId:e.instanceId}})||null}async getReplyToIds(e,t){let n=null,o=null;if(e&&(o=e.message?.extendedTextMessage?.contextInfo?.stanzaId??e.contextInfo?.stanzaId,o)){let c=await this.getMessageByKeyId(t,o);c?.chatwootMessageId&&(n=c.chatwootMessageId)}return{in_reply_to:n,in_reply_to_external_id:o}}async getQuotedMessage(e,t){if(e?.content_attributes?.in_reply_to){let n=await this.prismaRepository.message.findFirst({where:{chatwootMessageId:e?.content_attributes?.in_reply_to,instanceId:t.instanceId}}),o=n?.key;if(n&&o?.id)return{key:n.key,message:n.message}}return null}isMediaMessage(e){let t=["imageMessage","documentMessage","documentWithCaptionMessage","audioMessage","videoMessage","stickerMessage","viewOnceMessageV2"];return Object.keys(e).some(c=>t.includes(c))}getAdsMessage(e){return{title:e.extendedTextMessage?.contextInfo?.externalAdReply?.title||e.contextInfo?.externalAdReply?.title,body:e.extendedTextMessage?.contextInfo?.externalAdReply?.body||e.contextInfo?.externalAdReply?.body,thumbnailUrl:e.extendedTextMessage?.contextInfo?.externalAdReply?.thumbnailUrl||e.contextInfo?.externalAdReply?.thumbnailUrl,sourceUrl:e.extendedTextMessage?.contextInfo?.externalAdReply?.sourceUrl||e.contextInfo?.externalAdReply?.sourceUrl}}getReactionMessage(e){return e?.reactionMessage}getTypeMessage(e){return{conversation:e.conversation,imageMessage:e.imageMessage?.caption,videoMessage:e.videoMessage?.caption,extendedTextMessage:e.extendedTextMessage?.text,messageContextInfo:e.messageContextInfo?.stanzaId,stickerMessage:void 0,documentMessage:e.documentMessage?.caption,documentWithCaptionMessage:e.documentWithCaptionMessage?.message?.documentMessage?.caption,audioMessage:e.audioMessage?.caption,contactMessage:e.contactMessage?.vcard,contactsArrayMessage:e.contactsArrayMessage,locationMessage:e.locationMessage,liveLocationMessage:e.liveLocationMessage,listMessage:e.listMessage,listResponseMessage:e.listResponseMessage,viewOnceMessageV2:e?.message?.viewOnceMessageV2?.message?.imageMessage?.url||e?.message?.viewOnceMessageV2?.message?.videoMessage?.url||e?.message?.viewOnceMessageV2?.message?.audioMessage?.url}}getMessageContent(e){let t=Object.keys(e).find(o=>e[o]!==void 0),n=t?e[t]:void 0;if(n&&typeof n=="string"&&n.includes("externalAdReplyBody|")&&(n=n.split("externalAdReplyBody|").filter(Boolean).join("")),t==="locationMessage"||t==="liveLocationMessage"){let o=n.degreesLatitude,c=n.degreesLongitude,a=n?.name,s=n?.address;return`*${A.t("cw.locationMessage.location")}:*

_${A.t("cw.locationMessage.latitude")}:_ ${o} 
_${A.t("cw.locationMessage.longitude")}:_ ${c} 
`+(a?`_${A.t("cw.locationMessage.locationName")}:_ ${a}
`:"")+(s?`_${A.t("cw.locationMessage.locationAddress")}:_ ${s} 
`:"")+`_${A.t("cw.locationMessage.locationUrl")}:_ https://www.google.com/maps/search/?api=1&query=${o},${c}`}if(t==="contactMessage"){let o=n.split(`
`),c={};o.forEach(r=>{let[i,E]=r.split(":");i&&E&&(c[i]=E)});let a=`*${A.t("cw.contactMessage.contact")}:*

_${A.t("cw.contactMessage.name")}:_ ${c.FN}`,s=1;return Object.keys(c).forEach(r=>{if(r.startsWith("item")&&r.includes("TEL")){let i=c[r];a+=`
_${A.t("cw.contactMessage.number")} (${s}):_ ${i}`,s++}else if(r.includes("TEL")){let i=c[r];a+=`
_${A.t("cw.contactMessage.number")} (${s}):_ ${i}`,s++}}),a}if(t==="contactsArrayMessage")return n.contacts.map(a=>{let s=a.vcard.split(`
`),r={};s.forEach(l=>{let[g,d]=l.split(":");g&&d&&(r[g]=d)});let i=`*${A.t("cw.contactMessage.contact")}:*

_${A.t("cw.contactMessage.name")}:_ ${a.displayName}`,E=1;return Object.keys(r).forEach(l=>{if(l.startsWith("item")&&l.includes("TEL")){let g=r[l];i+=`
_${A.t("cw.contactMessage.number")} (${E}):_ ${g}`,E++}else if(l.includes("TEL")){let g=r[l];i+=`
_${A.t("cw.contactMessage.number")} (${E}):_ ${g}`,E++}}),i}).join(`

`);if(t==="listMessage"){let o=n?.title||"Unknown",c=n?.description||"Unknown",a=n?.footerText||"Unknown",s=`*List Menu:*

_Title_: `+o+`
_Description_: `+c+`
_Footer_: `+a;return n.sections&&n.sections.length>0?n.sections.forEach((r,i)=>{s+=`

*Section `+(i+1)+":* "+r.title||`Unknown
`,r.rows&&r.rows.length>0?r.rows.forEach((E,l)=>{s+=`
*Line `+(l+1)+`:*
`,s+="_\u25AA\uFE0F Title:_ "+(E.title||"Unknown")+`
`,s+="_\u25AA\uFE0F Description:_ "+(E.description||"Unknown")+`
`,s+="_\u25AA\uFE0F ID:_ "+(E.rowId||"Unknown")+`
`}):s+=`
No lines found in this section.
`}):s+=`
No sections found.
`,s}if(t==="listResponseMessage"){let o=n?.title||"Unknown",c=n?.description||"Unknown",a=n?.singleSelectReply?.selectedRowId||"Unknown";return`*List Response:*

_Title_: `+o+`
_Description_: `+c+`
_ID_: `+a}return n}getConversationMessage(e){let t=this.getTypeMessage(e);return this.getMessageContent(t)}async eventWhatsapp(e,t,n){try{let o=this.waMonitor.waInstances[t.instanceName];if(!o)return this.logger.warn("wa instance not found"),null;let c=await this.clientCw(t);if(!c)return this.logger.warn("client not found"),null;if(this.provider?.ignoreJids&&this.provider?.ignoreJids.length>0){let a=this.provider?.ignoreJids,s=!1,r=!1;if(a.includes("@g.us")&&(s=!0),a.includes("@s.whatsapp.net")&&(r=!0),s&&n?.key?.remoteJid.endsWith("@g.us")){this.logger.warn("Ignoring message from group: "+n?.key?.remoteJid);return}if(r&&n?.key?.remoteJid.endsWith("@s.whatsapp.net")){this.logger.warn("Ignoring message from contact: "+n?.key?.remoteJid);return}if(a.includes(n?.key?.remoteJid)){this.logger.warn("Ignoring message from jid: "+n?.key?.remoteJid);return}}if(e==="messages.upsert"||e==="send.message"){if(n.key.remoteJid==="status@broadcast")return;n.message?.ephemeralMessage?.message&&(n.message={...n.message?.ephemeralMessage?.message});let a=await this.getConversationMessage(n.message),s=a&&a.replaceAll(/\*((?!\s)([^\n*]+?)(?<!\s))\*/g,"**$1**").replaceAll(/_((?!\s)([^\n_]+?)(?<!\s))_/g,"*$1*").replaceAll(/~((?!\s)([^\n~]+?)(?<!\s))~/g,"~~$1~~");if(s&&s.includes("Por favor, classifique esta conversa, http"))return;let r=n.contextInfo?.stanzaId||n.message?.contextInfo?.stanzaId,i=null;r&&(i=await this.prismaRepository.message.findFirst({where:{key:{path:["id"],equals:r},chatwootMessageId:{not:null}}}));let E=this.isMediaMessage(n.message),l=this.getAdsMessage(n),g=this.getReactionMessage(n.message);if(!s&&!E&&!g){this.logger.warn("no body message found");return}let d=await this.createConversation(t,n);if(!d){this.logger.warn("conversation not found");return}let T=n.key.fromMe?"outgoing":"incoming";if(E){let p=await o?.getBase64FromMediaMessage({message:{...n}}),_,S=n?.message[n?.messageType],C=S?.fileName||S?.filename||S?.message?.documentMessage?.fileName;if(C){let h=Z.default.parse(C);h.name&&h.ext&&(_=`${h.name}-${Math.floor(Math.random()*90+10)}${h.ext}`)}_||(_=`${Math.random().toString(36).substring(7)}.${U.default.extension(p.mimetype)||""}`);let O=Buffer.from(p.base64,"base64"),N=new K.Readable;if(N._read=()=>{},N.push(O),N.push(null),n.key.remoteJid.includes("@g.us")){let h=n.pushName,D=n.key.participant.split("@")[0],f=D.match(/^(\d{2})(\d{2})(\d{4})(\d{4})$/),b;f?b=`+${f[1]} (${f[2]}) ${f[3]}-${f[4]}`:b=`+${D}`;let P;n.key.fromMe?P=`${s}`:P=`**${b} - ${h}:**

${s}`;let L=await this.sendData(d,N,_,T,P,t,n,"WAID:"+n.key.id,i);if(!L){this.logger.warn("message not sent");return}return L}else{let h=await this.sendData(d,N,_,T,s,t,n,"WAID:"+n.key.id,i);if(!h){this.logger.warn("message not sent");return}return h}}if(g){if(g.text&&!await this.createMessage(t,d,g.text,T,!1,[],{message:{extendedTextMessage:{contextInfo:{stanzaId:g.key.id}}}},"WAID:"+n.key.id,i)){this.logger.warn("message not sent");return}return}if(l&&l.title||l.body||l.thumbnailUrl){let p=await G.default.get(l.thumbnailUrl,{responseType:"arraybuffer"}),_=U.default.extension(p.headers["content-type"]),S=_&&U.default.lookup(_);if(!S){this.logger.warn("mimetype of Ads message not found");return}let O=`${Math.random().toString(36).substring(7)}.${U.default.extension(S)}`,N=Buffer.from(p.data,"binary"),h=await X.default.read(N);await h.cover(320,180);let D=await h.getBufferAsync(X.default.MIME_PNG),f=new K.Readable;f._read=()=>{},f.push(D),f.push(null);let b=(B,x)=>B?B.length>x?B.substring(0,x)+"...":B:"",P=b(l.title,40),L=b(l?.body,75),V=await this.sendData(d,f,O,T,`${s}


**${P}**
${L}
${l.sourceUrl}`,t,n,"WAID:"+n.key.id);if(!V){this.logger.warn("message not sent");return}return V}if(n.key.remoteJid.includes("@g.us")){let p=n.pushName,_=n.key.participant.split("@")[0],S=_.match(/^(\d{2})(\d{2})(\d{4})(\d{4})$/),C;S?C=`+${S[1]} (${S[2]}) ${S[3]}-${S[4]}`:C=`+${_}`;let O;n.key.fromMe?O=`${s}`:O=`**${C} - ${p}:**

${s}`;let N=await this.createMessage(t,d,O,T,!1,[],n,"WAID:"+n.key.id,i);if(!N){this.logger.warn("message not sent");return}return N}else{let p=await this.createMessage(t,d,s,T,!1,[],n,"WAID:"+n.key.id,i);if(!p){this.logger.warn("message not sent");return}return p}}if(e==="messages.delete"&&this.configService.get("CHATWOOT").MESSAGE_DELETE===!0){if(!n?.key?.id){this.logger.warn("message id not found");return}let s=await this.getMessageByKeyId(t,n.key.id);if(s?.chatwootMessageId&&s?.chatwootConversationId)return await this.prismaRepository.message.deleteMany({where:{key:{path:["id"],equals:n.key.id},instanceId:t.instanceId}}),await c.messages.delete({accountId:this.provider.accountId,conversationId:s.chatwootConversationId,messageId:s.chatwootMessageId})}if(e==="messages.edit"){let a=`${n?.editedMessage?.conversation||n?.editedMessage?.extendedTextMessage?.text}

_\`${A.t("cw.message.edited")}.\`_`,s=await this.getMessageByKeyId(t,n?.key?.id),r=s.key,i=r?.fromMe?"outgoing":"incoming";if(s&&s.chatwootConversationId&&!await this.createMessage(t,s.chatwootConversationId,a,i,!1,[],{message:{extendedTextMessage:{contextInfo:{stanzaId:r.id}}}},"WAID:"+n.key.id,null)){this.logger.warn("edited message not sent");return}return}if(e==="messages.read"){if(!n?.key?.id||!n?.key?.remoteJid){this.logger.warn("message id not found");return}let a=await this.getMessageByKeyId(t,n.key.id),s=a?.chatwootConversationId,r=a?.chatwootContactInboxSourceId;if(s){let i=r,E=await this.getInbox(t);if(!i&&E&&(i=(await c.conversations.get({accountId:this.provider.accountId,conversationId:s})).last_non_activity_message?.conversation?.contact_inbox?.source_id),i&&E?.inbox_identifier){let l=`/public/api/v1/inboxes/${E.inbox_identifier}/contacts/${i}/conversations/${s}/update_last_seen`;(0,k.request)(this.getClientCwConfig(),{method:"POST",url:l})}}return}if(e==="status.instance"){let a=n,s=await this.getInbox(t);if(!s){this.logger.warn("inbox not found");return}let r=A.t("cw.inbox.status",{inboxName:s.name,state:a.status});await this.createBotMessage(t,r,"incoming")}if(e==="connection.update"&&n.status==="open"&&this.waMonitor.waInstances[t.instanceName].qrCode.count>0){let a=A.t("cw.inbox.connected");await this.createBotMessage(t,a,"incoming"),this.waMonitor.waInstances[t.instanceName].qrCode.count=0,R.clearAll(t)}if(e==="qrcode.updated")if(n.statusCode===500){let a=`\u{1F6A8} ${A.t("qrlimitreached")}`;return await this.createBotMessage(t,a,"incoming")}else{let a=Buffer.from(n?.qrcode.base64.replace("data:image/png;base64,",""),"base64"),s=new K.Readable;s._read=()=>{},s.push(a),s.push(null),await this.createBotQr(t,A.t("qrgeneratedsuccesfully"),"incoming",s,`${t.instanceName}.png`);let r=`\u26A1\uFE0F${A.t("qrgeneratedsuccesfully")}

${A.t("scanqr")}`;n?.qrcode?.pairingCode&&(r=r+`

*Pairing Code:* ${n.qrcode.pairingCode.substring(0,4)}-${n.qrcode.pairingCode.substring(4,8)}`),await this.createBotMessage(t,r,"incoming")}}catch(o){this.logger.error(o)}}getNumberFromRemoteJid(e){return e.replace(/:\d+/,"").split("@")[0]}startImportHistoryMessages(e){this.isImportHistoryAvailable()&&this.createBotMessage(e,A.t("cw.import.startImport"),"incoming")}isImportHistoryAvailable(){let e=this.configService.get("CHATWOOT").IMPORT.DATABASE.CONNECTION.URI;return e&&e!=="postgres://user:password@hostname:port/dbname"}addHistoryMessages(e,t){this.isImportHistoryAvailable()&&R.addHistoryMessages(e,t)}addHistoryContacts(e,t){if(this.isImportHistoryAvailable())return R.addHistoryContacts(e,t)}async importHistoryMessages(e){if(!this.isImportHistoryAvailable())return;this.createBotMessage(e,A.t("cw.import.importingMessages"),"incoming");let t=await R.importHistoryMessages(e,this,await this.getInbox(e),this.provider);this.updateContactAvatarInRecentConversations(e);let n=Number.isInteger(t)?A.t("cw.import.messagesImported",{totalMessagesImported:t}):A.t("cw.import.messagesException");return this.createBotMessage(e,n,"incoming"),t}async updateContactAvatarInRecentConversations(e,t=100){try{if(!this.isImportHistoryAvailable())return;let n=await this.clientCw(e);if(!n)return this.logger.warn("client not found"),null;let o=await this.getInbox(e);if(!o)return this.logger.warn("inbox not found"),null;let c=await R.getContactsOrderByRecentConversations(o,this.provider,t),a=c.map(r=>r.identifier).filter(r=>r!==null),s=(await this.prismaRepository.contact.findMany({where:{instanceId:e.instanceId,id:{in:a},profilePicUrl:{not:null}}})).reduce((r,i)=>r.set(i.id,i),new Map);c.forEach(async r=>{s.has(r.identifier)&&n.contacts.update({accountId:this.provider.accountId,id:r.id,data:{avatar_url:s.get(r.identifier).profilePictureUrl||null}})})}catch(n){this.logger.error(`Error on update avatar in recent conversations: ${n.toString()}`)}}async syncLostMessages(e,t,n){try{if(!this.isImportHistoryAvailable()||!this.configService.get("DATABASE").SAVE_DATA.MESSAGE_UPDATE)return;let o=await this.getInbox(e),c=`select * from messages m
      where account_id = ${t.accountId}
      and inbox_id = ${o.id}
      and created_at >= now() - interval '6h'
      order by created_at desc`,s=((await this.pgClient.query(c))?.rows).filter(g=>!!g.source_id).map(g=>g.source_id.replace("WAID:","")),i=(await this.prismaRepository.message.findMany({where:{Instance:{name:e.instanceName},messageTimestamp:{gte:(0,Se.default)().subtract(6,"hours").unix()},AND:s.map(g=>({key:{path:["id"],not:g}}))}})).filter(g=>!R.isIgnorePhoneNumber(g.key?.remoteJid)),E=[];for(let g of i)!g.message||!g.key||!g.messageTimestamp||(z.default.isLong(g?.messageTimestamp)&&(g.messageTimestamp=g.messageTimestamp?.toNumber()),E.push(n(g)));this.addHistoryMessages(e,E.filter(g=>!R.isIgnorePhoneNumber(g.key?.remoteJid))),await R.importHistoryMessages(e,this,o,this.provider),this.waMonitor.waInstances[e.instanceName].clearCacheChatwoot()}catch{return}}};0&&(module.exports={ChatwootService});
//# sourceMappingURL=chatwoot.service.js.map