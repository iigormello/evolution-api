{"version":3,"sources":["../../../../../../node_modules/uuid/dist/esm-node/rng.js","../../../../../../node_modules/uuid/dist/esm-node/stringify.js","../../../../../../node_modules/uuid/dist/esm-node/native.js","../../../../../../node_modules/uuid/dist/esm-node/v4.js","../../../../../../src/api/integrations/chatbot/chatwoot/validate/chatwoot.schema.ts"],"sourcesContent":["import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import crypto from 'crypto';\nexport default {\n  randomUUID: crypto.randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const chatwootSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    enabled: { type: 'boolean', enum: [true, false] },\n    accountId: { type: 'string' },\n    token: { type: 'string' },\n    url: { type: 'string' },\n    signMsg: { type: 'boolean', enum: [true, false] },\n    signDelimiter: { type: ['string', 'null'] },\n    nameInbox: { type: ['string', 'null'] },\n    reopenConversation: { type: 'boolean', enum: [true, false] },\n    conversationPending: { type: 'boolean', enum: [true, false] },\n    autoCreate: { type: 'boolean', enum: [true, false] },\n    importContacts: { type: 'boolean', enum: [true, false] },\n    mergeBrazilContacts: { type: 'boolean', enum: [true, false] },\n    importMessages: { type: 'boolean', enum: [true, false] },\n    daysLimitImportMessages: { type: 'number' },\n    ignoreJids: { type: 'array', items: { type: 'string' } },\n  },\n  required: ['enabled', 'accountId', 'token', 'url', 'signMsg', 'reopenConversation', 'conversationPending'],\n  ...isNotEmpty('enabled', 'accountId', 'token', 'url', 'signMsg', 'reopenConversation', 'conversationPending'),\n};\n"],"mappings":"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","names":["crypto","rnds8Pool","poolPtr","rng","byteToHex","i","unsafeStringify","arr","offset","crypto","native_default","v4","options","buf","offset","native_default","rnds","rng","unsafeStringify","v4_default","isNotEmpty","propertyNames","properties","property","chatwootSchema","v4_default"]}