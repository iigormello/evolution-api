{"version":3,"sources":["../../../../../../src/api/integrations/chatbot/openai/services/openai.service.ts","../../../../../../src/api/types/wa.types.ts","../../../../../../src/config/logger.config.ts","../../../../../../src/config/env.config.ts","../../../../../../src/utils/sendTelemetry.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { Integration } from '@api/types/wa.types';\nimport { ConfigService, Language } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport { IntegrationSession, OpenaiBot, OpenaiCreds, OpenaiSetting } from '@prisma/client';\nimport { sendTelemetry } from '@utils/sendTelemetry';\nimport axios from 'axios';\nimport { downloadMediaMessage } from 'baileys';\nimport FormData from 'form-data';\nimport OpenAI from 'openai';\nimport P from 'pino';\n\nexport class OpenaiService {\n  constructor(\n    private readonly waMonitor: WAMonitoringService,\n    private readonly configService: ConfigService,\n    private readonly prismaRepository: PrismaRepository,\n  ) {}\n\n  private client: OpenAI;\n\n  private readonly logger = new Logger('OpenaiService');\n\n  private async sendMessageToBot(instance: any, openaiBot: OpenaiBot, remoteJid: string, content: string) {\n    const systemMessages: any = openaiBot.systemMessages;\n\n    const messagesSystem: any[] = systemMessages.map((message) => {\n      return {\n        role: 'system',\n        content: message,\n      };\n    });\n\n    const assistantMessages: any = openaiBot.assistantMessages;\n\n    const messagesAssistant: any[] = assistantMessages.map((message) => {\n      return {\n        role: 'assistant',\n        content: message,\n      };\n    });\n\n    const userMessages: any = openaiBot.userMessages;\n\n    const messagesUser: any[] = userMessages.map((message) => {\n      return {\n        role: 'user',\n        content: message,\n      };\n    });\n\n    const messageData: any = {\n      role: 'user',\n      content: [{ type: 'text', text: content }],\n    };\n\n    if (this.isImageMessage(content)) {\n      const contentSplit = content.split('|');\n\n      const url = contentSplit[1].split('?')[0];\n\n      messageData.content = [\n        { type: 'text', text: contentSplit[2] || content },\n        {\n          type: 'image_url',\n          image_url: {\n            url: url,\n          },\n        },\n      ];\n    }\n\n    const messages: any[] = [...messagesSystem, ...messagesAssistant, ...messagesUser, messageData];\n\n    if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n      await instance.client.presenceSubscribe(remoteJid);\n      await instance.client.sendPresenceUpdate('composing', remoteJid);\n    }\n\n    const completions = await this.client.chat.completions.create({\n      model: openaiBot.model,\n      messages: messages,\n      max_tokens: openaiBot.maxTokens,\n    });\n\n    if (instance.integration === Integration.WHATSAPP_BAILEYS)\n      await instance.client.sendPresenceUpdate('paused', remoteJid);\n\n    const message = completions.choices[0].message.content;\n\n    return message;\n  }\n\n  private async sendMessageToAssistant(\n    instance: any,\n    openaiBot: OpenaiBot,\n    remoteJid: string,\n    pushName: string,\n    fromMe: boolean,\n    content: string,\n    threadId: string,\n  ) {\n    const messageData: any = {\n      role: fromMe ? 'assistant' : 'user',\n      content: [{ type: 'text', text: content }],\n    };\n\n    if (this.isImageMessage(content)) {\n      const contentSplit = content.split('|');\n\n      const url = contentSplit[1].split('?')[0];\n\n      messageData.content = [\n        { type: 'text', text: contentSplit[2] || content },\n        {\n          type: 'image_url',\n          image_url: {\n            url: url,\n          },\n        },\n      ];\n    }\n\n    await this.client.beta.threads.messages.create(threadId, messageData);\n\n    if (fromMe) {\n      sendTelemetry('/message/sendText');\n      return;\n    }\n\n    const runAssistant = await this.client.beta.threads.runs.create(threadId, {\n      assistant_id: openaiBot.assistantId,\n    });\n\n    if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n      await instance.client.presenceSubscribe(remoteJid);\n      await instance.client.sendPresenceUpdate('composing', remoteJid);\n    }\n\n    const response = await this.getAIResponse(threadId, runAssistant.id, openaiBot.functionUrl, remoteJid, pushName);\n\n    if (instance.integration === Integration.WHATSAPP_BAILEYS)\n      await instance.client.sendPresenceUpdate('paused', remoteJid);\n\n    const message = response?.data[0].content[0].text.value;\n\n    return message;\n  }\n\n  private async sendMessageWhatsapp(\n    instance: any,\n    session: IntegrationSession,\n    remoteJid: string,\n    settings: OpenaiSetting,\n    message: string,\n  ) {\n    const linkRegex = /(!?)\\[(.*?)\\]\\((.*?)\\)/g;\n\n    let textBuffer = '';\n    let lastIndex = 0;\n\n    let match: RegExpExecArray | null;\n\n    const getMediaType = (url: string): string | null => {\n      const extension = url.split('.').pop()?.toLowerCase();\n      const imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp'];\n      const audioExtensions = ['mp3', 'wav', 'aac', 'ogg'];\n      const videoExtensions = ['mp4', 'avi', 'mkv', 'mov'];\n      const documentExtensions = ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'txt'];\n\n      if (imageExtensions.includes(extension || '')) return 'image';\n      if (audioExtensions.includes(extension || '')) return 'audio';\n      if (videoExtensions.includes(extension || '')) return 'video';\n      if (documentExtensions.includes(extension || '')) return 'document';\n      return null;\n    };\n\n    while ((match = linkRegex.exec(message)) !== null) {\n      const [fullMatch, exclMark, altText, url] = match;\n      const mediaType = getMediaType(url);\n\n      const beforeText = message.slice(lastIndex, match.index);\n      if (beforeText) {\n        textBuffer += beforeText;\n      }\n\n      if (mediaType) {\n        const splitMessages = settings.splitMessages ?? false;\n        const timePerChar = settings.timePerChar ?? 0;\n        const minDelay = 1000;\n        const maxDelay = 20000;\n\n        if (textBuffer.trim()) {\n          if (splitMessages) {\n            const multipleMessages = textBuffer.trim().split('\\n\\n');\n\n            for (let index = 0; index < multipleMessages.length; index++) {\n              const message = multipleMessages[index];\n\n              const delay = Math.min(Math.max(message.length * timePerChar, minDelay), maxDelay);\n\n              if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n                await instance.client.presenceSubscribe(remoteJid);\n                await instance.client.sendPresenceUpdate('composing', remoteJid);\n              }\n\n              await new Promise<void>((resolve) => {\n                setTimeout(async () => {\n                  await instance.textMessage(\n                    {\n                      number: remoteJid.split('@')[0],\n                      delay: settings?.delayMessage || 1000,\n                      text: message,\n                    },\n                    false,\n                  );\n                  resolve();\n                }, delay);\n              });\n\n              if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n                await instance.client.sendPresenceUpdate('paused', remoteJid);\n              }\n            }\n          } else {\n            await instance.textMessage(\n              {\n                number: remoteJid.split('@')[0],\n                delay: settings?.delayMessage || 1000,\n                text: textBuffer.trim(),\n              },\n              false,\n            );\n          }\n          textBuffer = '';\n        }\n\n        if (mediaType === 'audio') {\n          await instance.audioWhatsapp({\n            number: remoteJid.split('@')[0],\n            delay: settings?.delayMessage || 1000,\n            audio: url,\n            caption: altText,\n          });\n        } else {\n          await instance.mediaMessage(\n            {\n              number: remoteJid.split('@')[0],\n              delay: settings?.delayMessage || 1000,\n              mediatype: mediaType,\n              media: url,\n              caption: altText,\n            },\n            null,\n            false,\n          );\n        }\n      } else {\n        textBuffer += `[${altText}](${url})`;\n      }\n\n      lastIndex = linkRegex.lastIndex;\n    }\n\n    if (lastIndex < message.length) {\n      const remainingText = message.slice(lastIndex);\n      if (remainingText.trim()) {\n        textBuffer += remainingText;\n      }\n    }\n\n    const splitMessages = settings.splitMessages ?? false;\n    const timePerChar = settings.timePerChar ?? 0;\n    const minDelay = 1000;\n    const maxDelay = 20000;\n\n    if (textBuffer.trim()) {\n      if (splitMessages) {\n        const multipleMessages = textBuffer.trim().split('\\n\\n');\n\n        for (let index = 0; index < multipleMessages.length; index++) {\n          const message = multipleMessages[index];\n\n          const delay = Math.min(Math.max(message.length * timePerChar, minDelay), maxDelay);\n\n          if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n            await instance.client.presenceSubscribe(remoteJid);\n            await instance.client.sendPresenceUpdate('composing', remoteJid);\n          }\n\n          await new Promise<void>((resolve) => {\n            setTimeout(async () => {\n              await instance.textMessage(\n                {\n                  number: remoteJid.split('@')[0],\n                  delay: settings?.delayMessage || 1000,\n                  text: message,\n                },\n                false,\n              );\n              resolve();\n            }, delay);\n          });\n\n          if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n            await instance.client.sendPresenceUpdate('paused', remoteJid);\n          }\n        }\n      } else {\n        await instance.textMessage(\n          {\n            number: remoteJid.split('@')[0],\n            delay: settings?.delayMessage || 1000,\n            text: textBuffer.trim(),\n          },\n          false,\n        );\n      }\n      textBuffer = '';\n    }\n\n    sendTelemetry('/message/sendText');\n\n    await this.prismaRepository.integrationSession.update({\n      where: {\n        id: session.id,\n      },\n      data: {\n        status: 'opened',\n        awaitUser: true,\n      },\n    });\n  }\n\n  public async createAssistantNewSession(instance: InstanceDto, data: any) {\n    if (data.remoteJid === 'status@broadcast') return;\n\n    const creds = await this.prismaRepository.openaiCreds.findFirst({\n      where: {\n        id: data.openaiCredsId,\n      },\n    });\n\n    if (!creds) throw new Error('Openai Creds not found');\n\n    try {\n      this.client = new OpenAI({\n        apiKey: creds.apiKey,\n      });\n\n      const threadId = (await this.client.beta.threads.create({})).id;\n\n      let session = null;\n      if (threadId) {\n        session = await this.prismaRepository.integrationSession.create({\n          data: {\n            remoteJid: data.remoteJid,\n            pushName: data.pushName,\n            sessionId: threadId,\n            status: 'opened',\n            awaitUser: false,\n            botId: data.botId,\n            instanceId: instance.instanceId,\n            type: 'openai',\n          },\n        });\n      }\n      return { session };\n    } catch (error) {\n      this.logger.error(error);\n      return;\n    }\n  }\n\n  private async initAssistantNewSession(\n    instance: any,\n    remoteJid: string,\n    pushName: string,\n    fromMe: boolean,\n    openaiBot: OpenaiBot,\n    settings: OpenaiSetting,\n    session: IntegrationSession,\n    content: string,\n  ) {\n    const data = await this.createAssistantNewSession(instance, {\n      remoteJid,\n      pushName,\n      openaiCredsId: openaiBot.openaiCredsId,\n      botId: openaiBot.id,\n    });\n\n    if (data.session) {\n      session = data.session;\n    }\n\n    const message = await this.sendMessageToAssistant(\n      instance,\n      openaiBot,\n      remoteJid,\n      pushName,\n      fromMe,\n      content,\n      session.sessionId,\n    );\n\n    await this.sendMessageWhatsapp(instance, session, remoteJid, settings, message);\n\n    return;\n  }\n\n  private isJSON(str: string): boolean {\n    try {\n      JSON.parse(str);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  private async getAIResponse(\n    threadId: string,\n    runId: string,\n    functionUrl: string,\n    remoteJid: string,\n    pushName: string,\n  ) {\n    const getRun = await this.client.beta.threads.runs.retrieve(threadId, runId);\n    let toolCalls;\n    switch (getRun.status) {\n      case 'requires_action':\n        toolCalls = getRun?.required_action?.submit_tool_outputs?.tool_calls;\n\n        if (toolCalls) {\n          for (const toolCall of toolCalls) {\n            const id = toolCall.id;\n            const functionName = toolCall?.function?.name;\n            const functionArgument = this.isJSON(toolCall?.function?.arguments)\n              ? JSON.parse(toolCall?.function?.arguments)\n              : toolCall?.function?.arguments;\n\n            let output = null;\n\n            try {\n              const { data } = await axios.post(functionUrl, {\n                name: functionName,\n                arguments: { ...functionArgument, remoteJid, pushName },\n              });\n\n              output = JSON.stringify(data)\n                .replace(/\\\\/g, '\\\\\\\\')\n                .replace(/\"/g, '\\\\\"')\n                .replace(/\\n/g, '\\\\n')\n                .replace(/\\r/g, '\\\\r')\n                .replace(/\\t/g, '\\\\t');\n            } catch (error) {\n              output = JSON.stringify(error)\n                .replace(/\\\\/g, '\\\\\\\\')\n                .replace(/\"/g, '\\\\\"')\n                .replace(/\\n/g, '\\\\n')\n                .replace(/\\r/g, '\\\\r')\n                .replace(/\\t/g, '\\\\t');\n            }\n\n            await this.client.beta.threads.runs.submitToolOutputs(threadId, runId, {\n              tool_outputs: [\n                {\n                  tool_call_id: id,\n                  output,\n                },\n              ],\n            });\n          }\n        }\n\n        return this.getAIResponse(threadId, runId, functionUrl, remoteJid, pushName);\n      case 'queued':\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n        return this.getAIResponse(threadId, runId, functionUrl, remoteJid, pushName);\n      case 'in_progress':\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n        return this.getAIResponse(threadId, runId, functionUrl, remoteJid, pushName);\n      case 'completed':\n        return await this.client.beta.threads.messages.list(threadId, {\n          run_id: runId,\n          limit: 1,\n        });\n    }\n  }\n\n  private isImageMessage(content: string) {\n    return content.includes('imageMessage');\n  }\n\n  public async processOpenaiAssistant(\n    instance: any,\n    remoteJid: string,\n    pushName: string,\n    fromMe: boolean,\n    openaiBot: OpenaiBot,\n    session: IntegrationSession,\n    settings: OpenaiSetting,\n    content: string,\n  ) {\n    if (session && session.status === 'closed') {\n      return;\n    }\n\n    if (session && settings.expire && settings.expire > 0) {\n      const now = Date.now();\n\n      const sessionUpdatedAt = new Date(session.updatedAt).getTime();\n\n      const diff = now - sessionUpdatedAt;\n\n      const diffInMinutes = Math.floor(diff / 1000 / 60);\n\n      if (diffInMinutes > settings.expire) {\n        if (settings.keepOpen) {\n          await this.prismaRepository.integrationSession.update({\n            where: {\n              id: session.id,\n            },\n            data: {\n              status: 'closed',\n            },\n          });\n        } else {\n          await this.prismaRepository.integrationSession.deleteMany({\n            where: {\n              botId: openaiBot.id,\n              remoteJid: remoteJid,\n            },\n          });\n        }\n\n        await this.initAssistantNewSession(\n          instance,\n          remoteJid,\n          pushName,\n          fromMe,\n          openaiBot,\n          settings,\n          session,\n          content,\n        );\n        return;\n      }\n    }\n\n    if (!session) {\n      await this.initAssistantNewSession(instance, remoteJid, pushName, fromMe, openaiBot, settings, session, content);\n      return;\n    }\n\n    if (session.status !== 'paused')\n      await this.prismaRepository.integrationSession.update({\n        where: {\n          id: session.id,\n        },\n        data: {\n          status: 'opened',\n          awaitUser: false,\n        },\n      });\n\n    if (!content) {\n      if (settings.unknownMessage) {\n        this.waMonitor.waInstances[instance.instanceName].textMessage(\n          {\n            number: remoteJid.split('@')[0],\n            delay: settings.delayMessage || 1000,\n            text: settings.unknownMessage,\n          },\n          false,\n        );\n\n        sendTelemetry('/message/sendText');\n      }\n      return;\n    }\n\n    if (settings.keywordFinish && content.toLowerCase() === settings.keywordFinish.toLowerCase()) {\n      if (settings.keepOpen) {\n        await this.prismaRepository.integrationSession.update({\n          where: {\n            id: session.id,\n          },\n          data: {\n            status: 'closed',\n          },\n        });\n      } else {\n        await this.prismaRepository.integrationSession.deleteMany({\n          where: {\n            botId: openaiBot.id,\n            remoteJid: remoteJid,\n          },\n        });\n      }\n      return;\n    }\n\n    const creds = await this.prismaRepository.openaiCreds.findFirst({\n      where: {\n        id: openaiBot.openaiCredsId,\n      },\n    });\n\n    if (!creds) throw new Error('Openai Creds not found');\n\n    this.client = new OpenAI({\n      apiKey: creds.apiKey,\n    });\n\n    const threadId = session.sessionId;\n\n    const message = await this.sendMessageToAssistant(\n      instance,\n      openaiBot,\n      remoteJid,\n      pushName,\n      fromMe,\n      content,\n      threadId,\n    );\n\n    await this.sendMessageWhatsapp(instance, session, remoteJid, settings, message);\n\n    return;\n  }\n\n  public async createChatCompletionNewSession(instance: InstanceDto, data: any) {\n    if (data.remoteJid === 'status@broadcast') return;\n\n    const id = Math.floor(Math.random() * 10000000000).toString();\n\n    const creds = await this.prismaRepository.openaiCreds.findFirst({\n      where: {\n        id: data.openaiCredsId,\n      },\n    });\n\n    if (!creds) throw new Error('Openai Creds not found');\n\n    try {\n      const session = await this.prismaRepository.integrationSession.create({\n        data: {\n          remoteJid: data.remoteJid,\n          pushName: data.pushName,\n          sessionId: id,\n          status: 'opened',\n          awaitUser: false,\n          botId: data.botId,\n          instanceId: instance.instanceId,\n          type: 'openai',\n        },\n      });\n\n      return { session, creds };\n    } catch (error) {\n      this.logger.error(error);\n      return;\n    }\n  }\n\n  private async initChatCompletionNewSession(\n    instance: any,\n    remoteJid: string,\n    pushName: string,\n    openaiBot: OpenaiBot,\n    settings: OpenaiSetting,\n    session: IntegrationSession,\n    content: string,\n  ) {\n    const data = await this.createChatCompletionNewSession(instance, {\n      remoteJid,\n      pushName,\n      openaiCredsId: openaiBot.openaiCredsId,\n      botId: openaiBot.id,\n    });\n\n    session = data.session;\n\n    const creds = data.creds;\n\n    this.client = new OpenAI({\n      apiKey: creds.apiKey,\n    });\n\n    const message = await this.sendMessageToBot(instance, openaiBot, remoteJid, content);\n\n    await this.sendMessageWhatsapp(instance, session, remoteJid, settings, message);\n\n    return;\n  }\n\n  public async processOpenaiChatCompletion(\n    instance: any,\n    remoteJid: string,\n    pushName: string,\n    openaiBot: OpenaiBot,\n    session: IntegrationSession,\n    settings: OpenaiSetting,\n    content: string,\n  ) {\n    if (session && session.status !== 'opened') {\n      return;\n    }\n\n    if (session && settings.expire && settings.expire > 0) {\n      const now = Date.now();\n\n      const sessionUpdatedAt = new Date(session.updatedAt).getTime();\n\n      const diff = now - sessionUpdatedAt;\n\n      const diffInMinutes = Math.floor(diff / 1000 / 60);\n\n      if (diffInMinutes > settings.expire) {\n        if (settings.keepOpen) {\n          await this.prismaRepository.integrationSession.update({\n            where: {\n              id: session.id,\n            },\n            data: {\n              status: 'closed',\n            },\n          });\n        } else {\n          await this.prismaRepository.integrationSession.deleteMany({\n            where: {\n              botId: openaiBot.id,\n              remoteJid: remoteJid,\n            },\n          });\n        }\n\n        await this.initChatCompletionNewSession(instance, remoteJid, pushName, openaiBot, settings, session, content);\n        return;\n      }\n    }\n\n    if (!session) {\n      await this.initChatCompletionNewSession(instance, remoteJid, pushName, openaiBot, settings, session, content);\n      return;\n    }\n\n    await this.prismaRepository.integrationSession.update({\n      where: {\n        id: session.id,\n      },\n      data: {\n        status: 'opened',\n        awaitUser: false,\n      },\n    });\n\n    if (!content) {\n      if (settings.unknownMessage) {\n        this.waMonitor.waInstances[instance.instanceName].textMessage(\n          {\n            number: remoteJid.split('@')[0],\n            delay: settings.delayMessage || 1000,\n            text: settings.unknownMessage,\n          },\n          false,\n        );\n\n        sendTelemetry('/message/sendText');\n      }\n      return;\n    }\n\n    if (settings.keywordFinish && content.toLowerCase() === settings.keywordFinish.toLowerCase()) {\n      if (settings.keepOpen) {\n        await this.prismaRepository.integrationSession.update({\n          where: {\n            id: session.id,\n          },\n          data: {\n            status: 'closed',\n          },\n        });\n      } else {\n        await this.prismaRepository.integrationSession.deleteMany({\n          where: {\n            botId: openaiBot.id,\n            remoteJid: remoteJid,\n          },\n        });\n      }\n      return;\n    }\n\n    const creds = await this.prismaRepository.openaiCreds.findFirst({\n      where: {\n        id: openaiBot.openaiCredsId,\n      },\n    });\n\n    if (!creds) throw new Error('Openai Creds not found');\n\n    this.client = new OpenAI({\n      apiKey: creds.apiKey,\n    });\n\n    const message = await this.sendMessageToBot(instance, openaiBot, remoteJid, content);\n\n    await this.sendMessageWhatsapp(instance, session, remoteJid, settings, message);\n\n    return;\n  }\n\n  public async speechToText(creds: OpenaiCreds, msg: any, updateMediaMessage: any) {\n    let audio;\n\n    if (msg?.message?.mediaUrl) {\n      audio = await axios.get(msg.message.mediaUrl, { responseType: 'arraybuffer' }).then((response) => {\n        return Buffer.from(response.data, 'binary');\n      });\n    } else {\n      audio = await downloadMediaMessage(\n        { key: msg.key, message: msg?.message },\n        'buffer',\n        {},\n        {\n          logger: P({ level: 'error' }) as any,\n          reuploadRequest: updateMediaMessage,\n        },\n      );\n    }\n\n    const lang = this.configService.get<Language>('LANGUAGE').includes('pt')\n      ? 'pt'\n      : this.configService.get<Language>('LANGUAGE');\n\n    const formData = new FormData();\n\n    formData.append('file', audio, 'audio.ogg');\n    formData.append('model', 'whisper-1');\n    formData.append('language', lang);\n\n    const response = await axios.post('https://api.openai.com/v1/audio/transcriptions', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        Authorization: `Bearer ${creds.apiKey}`,\n      },\n    });\n\n    return response?.data?.text;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-namespace */\nimport { JsonValue } from '@prisma/client/runtime/library';\nimport { AuthenticationState, WAConnectionState } from 'baileys';\n\nexport enum Events {\n  APPLICATION_STARTUP = 'application.startup',\n  INSTANCE_CREATE = 'instance.create',\n  INSTANCE_DELETE = 'instance.delete',\n  QRCODE_UPDATED = 'qrcode.updated',\n  CONNECTION_UPDATE = 'connection.update',\n  STATUS_INSTANCE = 'status.instance',\n  MESSAGES_SET = 'messages.set',\n  MESSAGES_UPSERT = 'messages.upsert',\n  MESSAGES_EDITED = 'messages.edited',\n  MESSAGES_UPDATE = 'messages.update',\n  MESSAGES_DELETE = 'messages.delete',\n  SEND_MESSAGE = 'send.message',\n  CONTACTS_SET = 'contacts.set',\n  CONTACTS_UPSERT = 'contacts.upsert',\n  CONTACTS_UPDATE = 'contacts.update',\n  PRESENCE_UPDATE = 'presence.update',\n  CHATS_SET = 'chats.set',\n  CHATS_UPDATE = 'chats.update',\n  CHATS_UPSERT = 'chats.upsert',\n  CHATS_DELETE = 'chats.delete',\n  GROUPS_UPSERT = 'groups.upsert',\n  GROUPS_UPDATE = 'groups.update',\n  GROUP_PARTICIPANTS_UPDATE = 'group-participants.update',\n  CALL = 'call',\n  TYPEBOT_START = 'typebot.start',\n  TYPEBOT_CHANGE_STATUS = 'typebot.change-status',\n  LABELS_EDIT = 'labels.edit',\n  LABELS_ASSOCIATION = 'labels.association',\n  CREDS_UPDATE = 'creds.update',\n  MESSAGING_HISTORY_SET = 'messaging-history.set',\n  REMOVE_INSTANCE = 'remove.instance',\n  LOGOUT_INSTANCE = 'logout.instance',\n}\n\nexport declare namespace wa {\n  export type QrCode = {\n    count?: number;\n    pairingCode?: string;\n    base64?: string;\n    code?: string;\n  };\n\n  export type Instance = {\n    id?: string;\n    qrcode?: QrCode;\n    pairingCode?: string;\n    authState?: { state: AuthenticationState; saveCreds: () => void };\n    name?: string;\n    wuid?: string;\n    profileName?: string;\n    profilePictureUrl?: string;\n    token?: string;\n    number?: string;\n    integration?: string;\n    businessId?: string;\n  };\n\n  export type LocalChatwoot = {\n    enabled?: boolean;\n    accountId?: string;\n    token?: string;\n    url?: string;\n    nameInbox?: string;\n    signMsg?: boolean;\n    signDelimiter?: string;\n    number?: string;\n    reopenConversation?: boolean;\n    conversationPending?: boolean;\n    mergeBrazilContacts?: boolean;\n    importContacts?: boolean;\n    importMessages?: boolean;\n    daysLimitImportMessages?: number;\n  };\n\n  export type LocalSettings = {\n    rejectCall?: boolean;\n    msgCall?: string;\n    groupsIgnore?: boolean;\n    alwaysOnline?: boolean;\n    readMessages?: boolean;\n    readStatus?: boolean;\n    syncFullHistory?: boolean;\n    wavoipToken?: string;\n  };\n\n  export type LocalEvent = {\n    enabled?: boolean;\n    events?: JsonValue;\n  };\n\n  export type LocalWebHook = LocalEvent & {\n    url?: string;\n    headers?: JsonValue;\n    webhookByEvents?: boolean;\n    webhookBase64?: boolean;\n  };\n\n  export type LocalPusher = LocalEvent & {\n    appId?: string;\n    key?: string;\n    secret?: string;\n    cluster?: string;\n    useTLS?: boolean;\n  };\n\n  type Session = {\n    remoteJid?: string;\n    sessionId?: string;\n    createdAt?: number;\n  };\n\n  export type LocalProxy = {\n    enabled?: boolean;\n    host?: string;\n    port?: string;\n    protocol?: string;\n    username?: string;\n    password?: string;\n  };\n\n  export type StateConnection = {\n    instance?: string;\n    state?: WAConnectionState | 'refused';\n    statusReason?: number;\n  };\n\n  export type StatusMessage = 'ERROR' | 'PENDING' | 'SERVER_ACK' | 'DELIVERY_ACK' | 'READ' | 'DELETED' | 'PLAYED';\n}\n\nexport const TypeMediaMessage = [\n  'imageMessage',\n  'documentMessage',\n  'audioMessage',\n  'videoMessage',\n  'stickerMessage',\n  'ptvMessage',\n];\n\nexport const MessageSubtype = [\n  'ephemeralMessage',\n  'documentWithCaptionMessage',\n  'viewOnceMessage',\n  'viewOnceMessageV2',\n];\n\nexport const Integration = {\n  WHATSAPP_BUSINESS: 'WHATSAPP-BUSINESS',\n  WHATSAPP_BAILEYS: 'WHATSAPP-BAILEYS',\n  EVOLUTION: 'EVOLUTION',\n};\n","import dayjs from 'dayjs';\nimport fs from 'fs';\n\nimport { configService, Log } from './env.config';\nconst packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));\n\nconst formatDateLog = (timestamp: number) =>\n  dayjs(timestamp)\n    .toDate()\n    .toString()\n    .replace(/\\sGMT.+/, '');\n\nenum Color {\n  LOG = '\\x1b[32m',\n  INFO = '\\x1b[34m',\n  WARN = '\\x1b[33m',\n  ERROR = '\\x1b[31m',\n  DEBUG = '\\x1b[36m',\n  VERBOSE = '\\x1b[37m',\n  DARK = '\\x1b[30m',\n}\n\nenum Command {\n  RESET = '\\x1b[0m',\n  BRIGHT = '\\x1b[1m',\n  UNDERSCORE = '\\x1b[4m',\n}\n\nenum Level {\n  LOG = Color.LOG + '%s' + Command.RESET,\n  DARK = Color.DARK + '%s' + Command.RESET,\n  INFO = Color.INFO + '%s' + Command.RESET,\n  WARN = Color.WARN + '%s' + Command.RESET,\n  ERROR = Color.ERROR + '%s' + Command.RESET,\n  DEBUG = Color.DEBUG + '%s' + Command.RESET,\n  VERBOSE = Color.VERBOSE + '%s' + Command.RESET,\n}\n\nenum Type {\n  LOG = 'LOG',\n  WARN = 'WARN',\n  INFO = 'INFO',\n  DARK = 'DARK',\n  ERROR = 'ERROR',\n  DEBUG = 'DEBUG',\n  VERBOSE = 'VERBOSE',\n}\n\nenum Background {\n  LOG = '\\x1b[42m',\n  INFO = '\\x1b[44m',\n  WARN = '\\x1b[43m',\n  DARK = '\\x1b[40m',\n  ERROR = '\\x1b[41m',\n  DEBUG = '\\x1b[46m',\n  VERBOSE = '\\x1b[47m',\n}\n\nexport class Logger {\n  private readonly configService = configService;\n  private context: string;\n\n  constructor(context = 'Logger') {\n    this.context = context;\n  }\n\n  private instance = null;\n\n  public setContext(value: string) {\n    this.context = value;\n  }\n\n  public setInstance(value: string) {\n    this.instance = value;\n  }\n\n  private console(value: any, type: Type) {\n    const types: Type[] = [];\n\n    this.configService.get<Log>('LOG').LEVEL.forEach((level) => types.push(Type[level]));\n\n    const typeValue = typeof value;\n    if (types.includes(type)) {\n      if (configService.get<Log>('LOG').COLOR) {\n        console.log(\n          /*Command.UNDERSCORE +*/ Command.BRIGHT + Level[type],\n          '[Evolution API]',\n          Command.BRIGHT + Color[type],\n          this.instance ? `[${this.instance}]` : '',\n          Command.BRIGHT + Color[type],\n          `v${packageJson.version}`,\n          Command.BRIGHT + Color[type],\n          process.pid.toString(),\n          Command.RESET,\n          Command.BRIGHT + Color[type],\n          '-',\n          Command.BRIGHT + Color.VERBOSE,\n          `${formatDateLog(Date.now())}  `,\n          Command.RESET,\n          Color[type] + Background[type] + Command.BRIGHT,\n          `${type} ` + Command.RESET,\n          Color.WARN + Command.BRIGHT,\n          `[${this.context}]` + Command.RESET,\n          Color[type] + Command.BRIGHT,\n          `[${typeValue}]` + Command.RESET,\n          Color[type],\n          typeValue !== 'object' ? value : '',\n          Command.RESET,\n        );\n        typeValue === 'object' ? console.log(/*Level.DARK,*/ value, '\\n') : '';\n      } else {\n        console.log(\n          '[Evolution API]',\n          this.instance ? `[${this.instance}]` : '',\n          process.pid.toString(),\n          '-',\n          `${formatDateLog(Date.now())}  `,\n          `${type} `,\n          `[${this.context}]`,\n          `[${typeValue}]`,\n          value,\n        );\n      }\n    }\n  }\n\n  public log(value: any) {\n    this.console(value, Type.LOG);\n  }\n\n  public info(value: any) {\n    this.console(value, Type.INFO);\n  }\n\n  public warn(value: any) {\n    this.console(value, Type.WARN);\n  }\n\n  public error(value: any) {\n    this.console(value, Type.ERROR);\n  }\n\n  public verbose(value: any) {\n    this.console(value, Type.VERBOSE);\n  }\n\n  public debug(value: any) {\n    this.console(value, Type.DEBUG);\n  }\n\n  public dark(value: any) {\n    this.console(value, Type.DARK);\n  }\n}\n","import { isBooleanString } from 'class-validator';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nexport type HttpServer = {\n  TYPE: 'http' | 'https';\n  PORT: number;\n  URL: string;\n  DISABLE_DOCS: boolean;\n  DISABLE_MANAGER: boolean;\n};\n\nexport type HttpMethods = 'POST' | 'GET' | 'PUT' | 'DELETE';\nexport type Cors = {\n  ORIGIN: string[];\n  METHODS: HttpMethods[];\n  CREDENTIALS: boolean;\n};\n\nexport type LogBaileys = 'fatal' | 'error' | 'warn' | 'info' | 'debug' | 'trace';\n\nexport type LogLevel = 'ERROR' | 'WARN' | 'DEBUG' | 'INFO' | 'LOG' | 'VERBOSE' | 'DARK' | 'WEBHOOKS' | 'WEBSOCKET';\n\nexport type Log = {\n  LEVEL: LogLevel[];\n  COLOR: boolean;\n  BAILEYS: LogBaileys;\n};\n\nexport type ProviderSession = {\n  ENABLED: boolean;\n  HOST: string;\n  PORT: string;\n  PREFIX: string;\n};\n\nexport type SaveData = {\n  INSTANCE: boolean;\n  HISTORIC: boolean;\n  NEW_MESSAGE: boolean;\n  MESSAGE_UPDATE: boolean;\n  CONTACTS: boolean;\n  CHATS: boolean;\n  LABELS: boolean;\n  IS_ON_WHATSAPP: boolean;\n  IS_ON_WHATSAPP_DAYS: number;\n};\n\nexport type DBConnection = {\n  URI: string;\n  CLIENT_NAME: string;\n};\nexport type Database = {\n  CONNECTION: DBConnection;\n  PROVIDER: string;\n  SAVE_DATA: SaveData;\n  DELETE_DATA: DeleteData;\n};\n\nexport type DeleteData = {\n  LOGICAL_MESSAGE_DELETE: boolean;\n};\nexport type EventsRabbitmq = {\n  APPLICATION_STARTUP: boolean;\n  INSTANCE_CREATE: boolean;\n  INSTANCE_DELETE: boolean;\n  QRCODE_UPDATED: boolean;\n  MESSAGES_SET: boolean;\n  MESSAGES_UPSERT: boolean;\n  MESSAGES_EDITED: boolean;\n  MESSAGES_UPDATE: boolean;\n  MESSAGES_DELETE: boolean;\n  SEND_MESSAGE: boolean;\n  CONTACTS_SET: boolean;\n  CONTACTS_UPDATE: boolean;\n  CONTACTS_UPSERT: boolean;\n  PRESENCE_UPDATE: boolean;\n  CHATS_SET: boolean;\n  CHATS_UPDATE: boolean;\n  CHATS_DELETE: boolean;\n  CHATS_UPSERT: boolean;\n  CONNECTION_UPDATE: boolean;\n  LABELS_EDIT: boolean;\n  LABELS_ASSOCIATION: boolean;\n  GROUPS_UPSERT: boolean;\n  GROUP_UPDATE: boolean;\n  GROUP_PARTICIPANTS_UPDATE: boolean;\n  CALL: boolean;\n  TYPEBOT_START: boolean;\n  TYPEBOT_CHANGE_STATUS: boolean;\n};\n\nexport type Rabbitmq = {\n  ENABLED: boolean;\n  URI: string;\n  EXCHANGE_NAME: string;\n  GLOBAL_ENABLED: boolean;\n  EVENTS: EventsRabbitmq;\n  PREFIX_KEY: string;\n};\n\nexport type Sqs = {\n  ENABLED: boolean;\n  ACCESS_KEY_ID: string;\n  SECRET_ACCESS_KEY: string;\n  ACCOUNT_ID: string;\n  REGION: string;\n};\n\nexport type Websocket = {\n  ENABLED: boolean;\n  GLOBAL_EVENTS: boolean;\n};\n\nexport type WaBusiness = {\n  TOKEN_WEBHOOK: string;\n  URL: string;\n  VERSION: string;\n  LANGUAGE: string;\n};\n\nexport type EventsWebhook = {\n  APPLICATION_STARTUP: boolean;\n  INSTANCE_CREATE: boolean;\n  INSTANCE_DELETE: boolean;\n  QRCODE_UPDATED: boolean;\n  MESSAGES_SET: boolean;\n  MESSAGES_UPSERT: boolean;\n  MESSAGES_EDITED: boolean;\n  MESSAGES_UPDATE: boolean;\n  MESSAGES_DELETE: boolean;\n  SEND_MESSAGE: boolean;\n  CONTACTS_SET: boolean;\n  CONTACTS_UPDATE: boolean;\n  CONTACTS_UPSERT: boolean;\n  PRESENCE_UPDATE: boolean;\n  CHATS_SET: boolean;\n  CHATS_UPDATE: boolean;\n  CHATS_DELETE: boolean;\n  CHATS_UPSERT: boolean;\n  CONNECTION_UPDATE: boolean;\n  LABELS_EDIT: boolean;\n  LABELS_ASSOCIATION: boolean;\n  GROUPS_UPSERT: boolean;\n  GROUP_UPDATE: boolean;\n  GROUP_PARTICIPANTS_UPDATE: boolean;\n  CALL: boolean;\n  TYPEBOT_START: boolean;\n  TYPEBOT_CHANGE_STATUS: boolean;\n  ERRORS: boolean;\n  ERRORS_WEBHOOK: string;\n};\n\nexport type EventsPusher = {\n  APPLICATION_STARTUP: boolean;\n  INSTANCE_CREATE: boolean;\n  INSTANCE_DELETE: boolean;\n  QRCODE_UPDATED: boolean;\n  MESSAGES_SET: boolean;\n  MESSAGES_UPSERT: boolean;\n  MESSAGES_EDITED: boolean;\n  MESSAGES_UPDATE: boolean;\n  MESSAGES_DELETE: boolean;\n  SEND_MESSAGE: boolean;\n  CONTACTS_SET: boolean;\n  CONTACTS_UPDATE: boolean;\n  CONTACTS_UPSERT: boolean;\n  PRESENCE_UPDATE: boolean;\n  CHATS_SET: boolean;\n  CHATS_UPDATE: boolean;\n  CHATS_DELETE: boolean;\n  CHATS_UPSERT: boolean;\n  CONNECTION_UPDATE: boolean;\n  LABELS_EDIT: boolean;\n  LABELS_ASSOCIATION: boolean;\n  GROUPS_UPSERT: boolean;\n  GROUP_UPDATE: boolean;\n  GROUP_PARTICIPANTS_UPDATE: boolean;\n  CALL: boolean;\n  TYPEBOT_START: boolean;\n  TYPEBOT_CHANGE_STATUS: boolean;\n};\n\nexport type ApiKey = { KEY: string };\n\nexport type Auth = {\n  API_KEY: ApiKey;\n  EXPOSE_IN_FETCH_INSTANCES: boolean;\n};\n\nexport type DelInstance = number | boolean;\n\nexport type Language = string | 'en';\n\nexport type GlobalWebhook = {\n  URL: string;\n  ENABLED: boolean;\n  WEBHOOK_BY_EVENTS: boolean;\n};\n\nexport type GlobalPusher = {\n  ENABLED: boolean;\n  APP_ID: string;\n  KEY: string;\n  SECRET: string;\n  CLUSTER: string;\n  USE_TLS: boolean;\n};\n\nexport type CacheConfRedis = {\n  ENABLED: boolean;\n  URI: string;\n  PREFIX_KEY: string;\n  TTL: number;\n  SAVE_INSTANCES: boolean;\n};\nexport type CacheConfLocal = {\n  ENABLED: boolean;\n  TTL: number;\n};\nexport type SslConf = { PRIVKEY: string; FULLCHAIN: string };\nexport type Webhook = { GLOBAL?: GlobalWebhook; EVENTS: EventsWebhook };\nexport type Pusher = { ENABLED: boolean; GLOBAL?: GlobalPusher; EVENTS: EventsPusher };\nexport type ConfigSessionPhone = { CLIENT: string; NAME: string; VERSION: string };\nexport type QrCode = { LIMIT: number; COLOR: string };\nexport type Typebot = { ENABLED: boolean; API_VERSION: string; SEND_MEDIA_BASE64: boolean };\nexport type Chatwoot = {\n  ENABLED: boolean;\n  MESSAGE_DELETE: boolean;\n  MESSAGE_READ: boolean;\n  BOT_CONTACT: boolean;\n  IMPORT: {\n    DATABASE: {\n      CONNECTION: {\n        URI: string;\n      };\n    };\n    PLACEHOLDER_MEDIA_MESSAGE: boolean;\n  };\n};\nexport type Openai = { ENABLED: boolean; API_KEY_GLOBAL?: string };\nexport type Dify = { ENABLED: boolean };\n\nexport type S3 = {\n  ACCESS_KEY: string;\n  SECRET_KEY: string;\n  ENDPOINT: string;\n  BUCKET_NAME: string;\n  ENABLE: boolean;\n  PORT?: number;\n  USE_SSL?: boolean;\n  REGION?: string;\n};\n\nexport type CacheConf = { REDIS: CacheConfRedis; LOCAL: CacheConfLocal };\nexport type Production = boolean;\n\nexport interface Env {\n  SERVER: HttpServer;\n  CORS: Cors;\n  SSL_CONF: SslConf;\n  PROVIDER: ProviderSession;\n  DATABASE: Database;\n  RABBITMQ: Rabbitmq;\n  SQS: Sqs;\n  WEBSOCKET: Websocket;\n  WA_BUSINESS: WaBusiness;\n  LOG: Log;\n  DEL_INSTANCE: DelInstance;\n  DEL_TEMP_INSTANCES: boolean;\n  LANGUAGE: Language;\n  WEBHOOK: Webhook;\n  PUSHER: Pusher;\n  CONFIG_SESSION_PHONE: ConfigSessionPhone;\n  QRCODE: QrCode;\n  TYPEBOT: Typebot;\n  CHATWOOT: Chatwoot;\n  OPENAI: Openai;\n  DIFY: Dify;\n  CACHE: CacheConf;\n  S3?: S3;\n  AUTHENTICATION: Auth;\n  PRODUCTION?: Production;\n}\n\nexport type Key = keyof Env;\n\nexport class ConfigService {\n  constructor() {\n    this.loadEnv();\n  }\n\n  private env: Env;\n\n  public get<T = any>(key: Key) {\n    return this.env[key] as T;\n  }\n\n  private loadEnv() {\n    this.env = this.envProcess();\n    this.env.PRODUCTION = process.env?.NODE_ENV === 'PROD';\n    if (process.env?.DOCKER_ENV === 'true') {\n      this.env.SERVER.TYPE = process.env.SERVER_TYPE as 'http' | 'http';\n      this.env.SERVER.PORT = Number.parseInt(process.env.SERVER_PORT) || 8080;\n    }\n  }\n\n  private envProcess(): Env {\n    return {\n      SERVER: {\n        TYPE: (process.env.SERVER_TYPE as 'http' | 'https') || 'http',\n        PORT: Number.parseInt(process.env.SERVER_PORT) || 8080,\n        URL: process.env.SERVER_URL,\n        DISABLE_DOCS: process.env?.SERVER_DISABLE_DOCS === 'true',\n        DISABLE_MANAGER: process.env?.SERVER_DISABLE_MANAGER === 'true',\n      },\n      CORS: {\n        ORIGIN: process.env.CORS_ORIGIN?.split(',') || ['*'],\n        METHODS:\n          (process.env.CORS_METHODS?.split(',') as HttpMethods[]) ||\n          (['POST', 'GET', 'PUT', 'DELETE'] as HttpMethods[]),\n        CREDENTIALS: process.env?.CORS_CREDENTIALS === 'true',\n      },\n      SSL_CONF: {\n        PRIVKEY: process.env?.SSL_CONF_PRIVKEY || '',\n        FULLCHAIN: process.env?.SSL_CONF_FULLCHAIN || '',\n      },\n      PROVIDER: {\n        ENABLED: process.env?.PROVIDER_ENABLED === 'true',\n        HOST: process.env.PROVIDER_HOST,\n        PORT: process.env?.PROVIDER_PORT || '5656',\n        PREFIX: process.env?.PROVIDER_PREFIX || 'evolution',\n      },\n      DATABASE: {\n        CONNECTION: {\n          URI: process.env.DATABASE_CONNECTION_URI || '',\n          CLIENT_NAME: process.env.DATABASE_CONNECTION_CLIENT_NAME || 'evolution',\n        },\n        PROVIDER: process.env.DATABASE_PROVIDER || 'postgresql',\n        SAVE_DATA: {\n          INSTANCE: process.env?.DATABASE_SAVE_DATA_INSTANCE === 'true',\n          NEW_MESSAGE: process.env?.DATABASE_SAVE_DATA_NEW_MESSAGE === 'true',\n          MESSAGE_UPDATE: process.env?.DATABASE_SAVE_MESSAGE_UPDATE === 'true',\n          CONTACTS: process.env?.DATABASE_SAVE_DATA_CONTACTS === 'true',\n          CHATS: process.env?.DATABASE_SAVE_DATA_CHATS === 'true',\n          HISTORIC: process.env?.DATABASE_SAVE_DATA_HISTORIC === 'true',\n          LABELS: process.env?.DATABASE_SAVE_DATA_LABELS === 'true',\n          IS_ON_WHATSAPP: process.env?.DATABASE_SAVE_IS_ON_WHATSAPP === 'true',\n          IS_ON_WHATSAPP_DAYS: Number.parseInt(process.env?.DATABASE_SAVE_IS_ON_WHATSAPP_DAYS ?? '7'),\n        },\n        DELETE_DATA: {\n          LOGICAL_MESSAGE_DELETE: process.env?.DATABASE_DELETE_MESSAGE === 'true',\n        },\n      },\n      RABBITMQ: {\n        ENABLED: process.env?.RABBITMQ_ENABLED === 'true',\n        GLOBAL_ENABLED: process.env?.RABBITMQ_GLOBAL_ENABLED === 'true',\n        PREFIX_KEY: process.env?.RABBITMQ_PREFIX_KEY || 'evolution',\n        EXCHANGE_NAME: process.env?.RABBITMQ_EXCHANGE_NAME || 'evolution_exchange',\n        URI: process.env.RABBITMQ_URI || '',\n        EVENTS: {\n          APPLICATION_STARTUP: process.env?.RABBITMQ_EVENTS_APPLICATION_STARTUP === 'true',\n          INSTANCE_CREATE: process.env?.RABBITMQ_EVENTS_INSTANCE_CREATE === 'true',\n          INSTANCE_DELETE: process.env?.RABBITMQ_EVENTS_INSTANCE_DELETE === 'true',\n          QRCODE_UPDATED: process.env?.RABBITMQ_EVENTS_QRCODE_UPDATED === 'true',\n          MESSAGES_SET: process.env?.RABBITMQ_EVENTS_MESSAGES_SET === 'true',\n          MESSAGES_UPSERT: process.env?.RABBITMQ_EVENTS_MESSAGES_UPSERT === 'true',\n          MESSAGES_EDITED: process.env?.RABBITMQ_EVENTS_MESSAGES_EDITED === 'true',\n          MESSAGES_UPDATE: process.env?.RABBITMQ_EVENTS_MESSAGES_UPDATE === 'true',\n          MESSAGES_DELETE: process.env?.RABBITMQ_EVENTS_MESSAGES_DELETE === 'true',\n          SEND_MESSAGE: process.env?.RABBITMQ_EVENTS_SEND_MESSAGE === 'true',\n          CONTACTS_SET: process.env?.RABBITMQ_EVENTS_CONTACTS_SET === 'true',\n          CONTACTS_UPDATE: process.env?.RABBITMQ_EVENTS_CONTACTS_UPDATE === 'true',\n          CONTACTS_UPSERT: process.env?.RABBITMQ_EVENTS_CONTACTS_UPSERT === 'true',\n          PRESENCE_UPDATE: process.env?.RABBITMQ_EVENTS_PRESENCE_UPDATE === 'true',\n          CHATS_SET: process.env?.RABBITMQ_EVENTS_CHATS_SET === 'true',\n          CHATS_UPDATE: process.env?.RABBITMQ_EVENTS_CHATS_UPDATE === 'true',\n          CHATS_UPSERT: process.env?.RABBITMQ_EVENTS_CHATS_UPSERT === 'true',\n          CHATS_DELETE: process.env?.RABBITMQ_EVENTS_CHATS_DELETE === 'true',\n          CONNECTION_UPDATE: process.env?.RABBITMQ_EVENTS_CONNECTION_UPDATE === 'true',\n          LABELS_EDIT: process.env?.RABBITMQ_EVENTS_LABELS_EDIT === 'true',\n          LABELS_ASSOCIATION: process.env?.RABBITMQ_EVENTS_LABELS_ASSOCIATION === 'true',\n          GROUPS_UPSERT: process.env?.RABBITMQ_EVENTS_GROUPS_UPSERT === 'true',\n          GROUP_UPDATE: process.env?.RABBITMQ_EVENTS_GROUPS_UPDATE === 'true',\n          GROUP_PARTICIPANTS_UPDATE: process.env?.RABBITMQ_EVENTS_GROUP_PARTICIPANTS_UPDATE === 'true',\n          CALL: process.env?.RABBITMQ_EVENTS_CALL === 'true',\n          TYPEBOT_START: process.env?.RABBITMQ_EVENTS_TYPEBOT_START === 'true',\n          TYPEBOT_CHANGE_STATUS: process.env?.RABBITMQ_EVENTS_TYPEBOT_CHANGE_STATUS === 'true',\n        },\n      },\n      SQS: {\n        ENABLED: process.env?.SQS_ENABLED === 'true',\n        ACCESS_KEY_ID: process.env.SQS_ACCESS_KEY_ID || '',\n        SECRET_ACCESS_KEY: process.env.SQS_SECRET_ACCESS_KEY || '',\n        ACCOUNT_ID: process.env.SQS_ACCOUNT_ID || '',\n        REGION: process.env.SQS_REGION || '',\n      },\n      WEBSOCKET: {\n        ENABLED: process.env?.WEBSOCKET_ENABLED === 'true',\n        GLOBAL_EVENTS: process.env?.WEBSOCKET_GLOBAL_EVENTS === 'true',\n      },\n      PUSHER: {\n        ENABLED: process.env?.PUSHER_ENABLED === 'true',\n        GLOBAL: {\n          ENABLED: process.env?.PUSHER_GLOBAL_ENABLED === 'true',\n          APP_ID: process.env?.PUSHER_GLOBAL_APP_ID || '',\n          KEY: process.env?.PUSHER_GLOBAL_KEY || '',\n          SECRET: process.env?.PUSHER_GLOBAL_SECRET || '',\n          CLUSTER: process.env?.PUSHER_GLOBAL_CLUSTER || '',\n          USE_TLS: process.env?.PUSHER_GLOBAL_USE_TLS === 'true',\n        },\n        EVENTS: {\n          APPLICATION_STARTUP: process.env?.PUSHER_EVENTS_APPLICATION_STARTUP === 'true',\n          INSTANCE_CREATE: process.env?.PUSHER_EVENTS_INSTANCE_CREATE === 'true',\n          INSTANCE_DELETE: process.env?.PUSHER_EVENTS_INSTANCE_DELETE === 'true',\n          QRCODE_UPDATED: process.env?.PUSHER_EVENTS_QRCODE_UPDATED === 'true',\n          MESSAGES_SET: process.env?.PUSHER_EVENTS_MESSAGES_SET === 'true',\n          MESSAGES_UPSERT: process.env?.PUSHER_EVENTS_MESSAGES_UPSERT === 'true',\n          MESSAGES_EDITED: process.env?.PUSHER_EVENTS_MESSAGES_EDITED === 'true',\n          MESSAGES_UPDATE: process.env?.PUSHER_EVENTS_MESSAGES_UPDATE === 'true',\n          MESSAGES_DELETE: process.env?.PUSHER_EVENTS_MESSAGES_DELETE === 'true',\n          SEND_MESSAGE: process.env?.PUSHER_EVENTS_SEND_MESSAGE === 'true',\n          CONTACTS_SET: process.env?.PUSHER_EVENTS_CONTACTS_SET === 'true',\n          CONTACTS_UPDATE: process.env?.PUSHER_EVENTS_CONTACTS_UPDATE === 'true',\n          CONTACTS_UPSERT: process.env?.PUSHER_EVENTS_CONTACTS_UPSERT === 'true',\n          PRESENCE_UPDATE: process.env?.PUSHER_EVENTS_PRESENCE_UPDATE === 'true',\n          CHATS_SET: process.env?.PUSHER_EVENTS_CHATS_SET === 'true',\n          CHATS_UPDATE: process.env?.PUSHER_EVENTS_CHATS_UPDATE === 'true',\n          CHATS_UPSERT: process.env?.PUSHER_EVENTS_CHATS_UPSERT === 'true',\n          CHATS_DELETE: process.env?.PUSHER_EVENTS_CHATS_DELETE === 'true',\n          CONNECTION_UPDATE: process.env?.PUSHER_EVENTS_CONNECTION_UPDATE === 'true',\n          LABELS_EDIT: process.env?.PUSHER_EVENTS_LABELS_EDIT === 'true',\n          LABELS_ASSOCIATION: process.env?.PUSHER_EVENTS_LABELS_ASSOCIATION === 'true',\n          GROUPS_UPSERT: process.env?.PUSHER_EVENTS_GROUPS_UPSERT === 'true',\n          GROUP_UPDATE: process.env?.PUSHER_EVENTS_GROUPS_UPDATE === 'true',\n          GROUP_PARTICIPANTS_UPDATE: process.env?.PUSHER_EVENTS_GROUP_PARTICIPANTS_UPDATE === 'true',\n          CALL: process.env?.PUSHER_EVENTS_CALL === 'true',\n          TYPEBOT_START: process.env?.PUSHER_EVENTS_TYPEBOT_START === 'true',\n          TYPEBOT_CHANGE_STATUS: process.env?.PUSHER_EVENTS_TYPEBOT_CHANGE_STATUS === 'true',\n        },\n      },\n      WA_BUSINESS: {\n        TOKEN_WEBHOOK: process.env.WA_BUSINESS_TOKEN_WEBHOOK || 'evolution',\n        URL: process.env.WA_BUSINESS_URL || 'https://graph.facebook.com',\n        VERSION: process.env.WA_BUSINESS_VERSION || 'v18.0',\n        LANGUAGE: process.env.WA_BUSINESS_LANGUAGE || 'en',\n      },\n      LOG: {\n        LEVEL:\n          (process.env?.LOG_LEVEL?.split(',') as LogLevel[]) ||\n          (['ERROR', 'WARN', 'DEBUG', 'INFO', 'LOG', 'VERBOSE', 'DARK', 'WEBHOOKS', 'WEBSOCKET'] as LogLevel[]),\n        COLOR: process.env?.LOG_COLOR === 'true',\n        BAILEYS: (process.env?.LOG_BAILEYS as LogBaileys) || 'error',\n      },\n      DEL_INSTANCE: isBooleanString(process.env?.DEL_INSTANCE)\n        ? process.env.DEL_INSTANCE === 'true'\n        : Number.parseInt(process.env.DEL_INSTANCE) || false,\n      DEL_TEMP_INSTANCES: isBooleanString(process.env?.DEL_TEMP_INSTANCES)\n        ? process.env.DEL_TEMP_INSTANCES === 'true'\n        : true,\n      LANGUAGE: process.env?.LANGUAGE || 'en',\n      WEBHOOK: {\n        GLOBAL: {\n          URL: process.env?.WEBHOOK_GLOBAL_URL || '',\n          ENABLED: process.env?.WEBHOOK_GLOBAL_ENABLED === 'true',\n          WEBHOOK_BY_EVENTS: process.env?.WEBHOOK_GLOBAL_WEBHOOK_BY_EVENTS === 'true',\n        },\n        EVENTS: {\n          APPLICATION_STARTUP: process.env?.WEBHOOK_EVENTS_APPLICATION_STARTUP === 'true',\n          INSTANCE_CREATE: process.env?.WEBHOOK_EVENTS_INSTANCE_CREATE === 'true',\n          INSTANCE_DELETE: process.env?.WEBHOOK_EVENTS_INSTANCE_DELETE === 'true',\n          QRCODE_UPDATED: process.env?.WEBHOOK_EVENTS_QRCODE_UPDATED === 'true',\n          MESSAGES_SET: process.env?.WEBHOOK_EVENTS_MESSAGES_SET === 'true',\n          MESSAGES_UPSERT: process.env?.WEBHOOK_EVENTS_MESSAGES_UPSERT === 'true',\n          MESSAGES_EDITED: process.env?.WEBHOOK_EVENTS_MESSAGES_EDITED === 'true',\n          MESSAGES_UPDATE: process.env?.WEBHOOK_EVENTS_MESSAGES_UPDATE === 'true',\n          MESSAGES_DELETE: process.env?.WEBHOOK_EVENTS_MESSAGES_DELETE === 'true',\n          SEND_MESSAGE: process.env?.WEBHOOK_EVENTS_SEND_MESSAGE === 'true',\n          CONTACTS_SET: process.env?.WEBHOOK_EVENTS_CONTACTS_SET === 'true',\n          CONTACTS_UPDATE: process.env?.WEBHOOK_EVENTS_CONTACTS_UPDATE === 'true',\n          CONTACTS_UPSERT: process.env?.WEBHOOK_EVENTS_CONTACTS_UPSERT === 'true',\n          PRESENCE_UPDATE: process.env?.WEBHOOK_EVENTS_PRESENCE_UPDATE === 'true',\n          CHATS_SET: process.env?.WEBHOOK_EVENTS_CHATS_SET === 'true',\n          CHATS_UPDATE: process.env?.WEBHOOK_EVENTS_CHATS_UPDATE === 'true',\n          CHATS_UPSERT: process.env?.WEBHOOK_EVENTS_CHATS_UPSERT === 'true',\n          CHATS_DELETE: process.env?.WEBHOOK_EVENTS_CHATS_DELETE === 'true',\n          CONNECTION_UPDATE: process.env?.WEBHOOK_EVENTS_CONNECTION_UPDATE === 'true',\n          LABELS_EDIT: process.env?.WEBHOOK_EVENTS_LABELS_EDIT === 'true',\n          LABELS_ASSOCIATION: process.env?.WEBHOOK_EVENTS_LABELS_ASSOCIATION === 'true',\n          GROUPS_UPSERT: process.env?.WEBHOOK_EVENTS_GROUPS_UPSERT === 'true',\n          GROUP_UPDATE: process.env?.WEBHOOK_EVENTS_GROUPS_UPDATE === 'true',\n          GROUP_PARTICIPANTS_UPDATE: process.env?.WEBHOOK_EVENTS_GROUP_PARTICIPANTS_UPDATE === 'true',\n          CALL: process.env?.WEBHOOK_EVENTS_CALL === 'true',\n          TYPEBOT_START: process.env?.WEBHOOK_EVENTS_TYPEBOT_START === 'true',\n          TYPEBOT_CHANGE_STATUS: process.env?.WEBHOOK_EVENTS_TYPEBOT_CHANGE_STATUS === 'true',\n          ERRORS: process.env?.WEBHOOK_EVENTS_ERRORS === 'true',\n          ERRORS_WEBHOOK: process.env?.WEBHOOK_EVENTS_ERRORS_WEBHOOK || '',\n        },\n      },\n      CONFIG_SESSION_PHONE: {\n        CLIENT: process.env?.CONFIG_SESSION_PHONE_CLIENT || 'Evolution API',\n        NAME: process.env?.CONFIG_SESSION_PHONE_NAME || 'Chrome',\n        VERSION: process.env?.CONFIG_SESSION_PHONE_VERSION || null,\n      },\n      QRCODE: {\n        LIMIT: Number.parseInt(process.env.QRCODE_LIMIT) || 30,\n        COLOR: process.env.QRCODE_COLOR || '#198754',\n      },\n      TYPEBOT: {\n        ENABLED: process.env?.TYPEBOT_ENABLED === 'true',\n        API_VERSION: process.env?.TYPEBOT_API_VERSION || 'old',\n        SEND_MEDIA_BASE64: process.env?.TYPEBOT_SEND_MEDIA_BASE64 === 'true',\n      },\n      CHATWOOT: {\n        ENABLED: process.env?.CHATWOOT_ENABLED === 'true',\n        MESSAGE_DELETE: process.env.CHATWOOT_MESSAGE_DELETE === 'true',\n        MESSAGE_READ: process.env.CHATWOOT_MESSAGE_READ === 'true',\n        BOT_CONTACT: !process.env.CHATWOOT_BOT_CONTACT || process.env.CHATWOOT_BOT_CONTACT === 'true',\n        IMPORT: {\n          DATABASE: {\n            CONNECTION: {\n              URI: process.env.CHATWOOT_IMPORT_DATABASE_CONNECTION_URI || '',\n            },\n          },\n          PLACEHOLDER_MEDIA_MESSAGE: process.env?.CHATWOOT_IMPORT_PLACEHOLDER_MEDIA_MESSAGE === 'true',\n        },\n      },\n      OPENAI: {\n        ENABLED: process.env?.OPENAI_ENABLED === 'true',\n        API_KEY_GLOBAL: process.env?.OPENAI_API_KEY_GLOBAL || null,\n      },\n      DIFY: {\n        ENABLED: process.env?.DIFY_ENABLED === 'true',\n      },\n      CACHE: {\n        REDIS: {\n          ENABLED: process.env?.CACHE_REDIS_ENABLED === 'true',\n          URI: process.env?.CACHE_REDIS_URI || '',\n          PREFIX_KEY: process.env?.CACHE_REDIS_PREFIX_KEY || 'evolution-cache',\n          TTL: Number.parseInt(process.env?.CACHE_REDIS_TTL) || 604800,\n          SAVE_INSTANCES: process.env?.CACHE_REDIS_SAVE_INSTANCES === 'true',\n        },\n        LOCAL: {\n          ENABLED: process.env?.CACHE_LOCAL_ENABLED === 'true',\n          TTL: Number.parseInt(process.env?.CACHE_REDIS_TTL) || 86400,\n        },\n      },\n      S3: {\n        ACCESS_KEY: process.env?.S3_ACCESS_KEY,\n        SECRET_KEY: process.env?.S3_SECRET_KEY,\n        ENDPOINT: process.env?.S3_ENDPOINT,\n        BUCKET_NAME: process.env?.S3_BUCKET,\n        ENABLE: process.env?.S3_ENABLED === 'true',\n        PORT: Number.parseInt(process.env?.S3_PORT || '9000'),\n        USE_SSL: process.env?.S3_USE_SSL === 'true',\n        REGION: process.env?.S3_REGION,\n      },\n      AUTHENTICATION: {\n        API_KEY: {\n          KEY: process.env.AUTHENTICATION_API_KEY || 'BQYHJGJHJ',\n        },\n        EXPOSE_IN_FETCH_INSTANCES: process.env?.AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES === 'true',\n      },\n    };\n  }\n}\n\nexport const configService = new ConfigService();\n","import axios from 'axios';\nimport fs from 'fs';\n\nconst packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));\n\nexport interface TelemetryData {\n  route: string;\n  apiVersion: string;\n  timestamp: Date;\n}\n\nexport const sendTelemetry = async (route: string): Promise<void> => {\n  const enabled = process.env.TELEMETRY_ENABLED === undefined || process.env.TELEMETRY_ENABLED === 'true';\n\n  if (!enabled) {\n    return;\n  }\n\n  if (route === '/') {\n    return;\n  }\n\n  const telemetry: TelemetryData = {\n    route,\n    apiVersion: `${packageJson.version}`,\n    timestamp: new Date(),\n  };\n\n  const url =\n    process.env.TELEMETRY_URL && process.env.TELEMETRY_URL !== ''\n      ? process.env.TELEMETRY_URL\n      : 'https://log.evolution-api.com/telemetry';\n\n  axios\n    .post(url, telemetry)\n    .then(() => {})\n    .catch(() => {});\n};\n"],"mappings":"yjBAAA,IAAAA,GAAA,GAAAC,GAAAD,GAAA,mBAAAE,IAAA,eAAAC,GAAAH,ICsJO,IAAMI,EAAc,CACzB,kBAAmB,oBACnB,iBAAkB,mBAClB,UAAW,WACb,EC1JA,IAAAC,EAAkB,oBAClBC,EAAe,iBCDf,IAAAC,EAAgC,2BAChCC,EAAmB,qBAEnB,EAAAC,QAAO,OAAO,EA6RP,IAAMC,EAAN,KAAoB,CACzB,aAAc,CACZ,KAAK,QAAQ,CACf,CAIO,IAAaC,EAAU,CAC5B,OAAO,KAAK,IAAIA,CAAG,CACrB,CAEQ,SAAU,CAChB,KAAK,IAAM,KAAK,WAAW,EAC3B,KAAK,IAAI,WAAa,QAAQ,KAAK,WAAa,OAC5C,QAAQ,KAAK,aAAe,SAC9B,KAAK,IAAI,OAAO,KAAO,QAAQ,IAAI,YACnC,KAAK,IAAI,OAAO,KAAO,OAAO,SAAS,QAAQ,IAAI,WAAW,GAAK,KAEvE,CAEQ,YAAkB,CACxB,MAAO,CACL,OAAQ,CACN,KAAO,QAAQ,IAAI,aAAoC,OACvD,KAAM,OAAO,SAAS,QAAQ,IAAI,WAAW,GAAK,KAClD,IAAK,QAAQ,IAAI,WACjB,aAAc,QAAQ,KAAK,sBAAwB,OACnD,gBAAiB,QAAQ,KAAK,yBAA2B,MAC3D,EACA,KAAM,CACJ,OAAQ,QAAQ,IAAI,aAAa,MAAM,GAAG,GAAK,CAAC,GAAG,EACnD,QACG,QAAQ,IAAI,cAAc,MAAM,GAAG,GACnC,CAAC,OAAQ,MAAO,MAAO,QAAQ,EAClC,YAAa,QAAQ,KAAK,mBAAqB,MACjD,EACA,SAAU,CACR,QAAS,QAAQ,KAAK,kBAAoB,GAC1C,UAAW,QAAQ,KAAK,oBAAsB,EAChD,EACA,SAAU,CACR,QAAS,QAAQ,KAAK,mBAAqB,OAC3C,KAAM,QAAQ,IAAI,cAClB,KAAM,QAAQ,KAAK,eAAiB,OACpC,OAAQ,QAAQ,KAAK,iBAAmB,WAC1C,EACA,SAAU,CACR,WAAY,CACV,IAAK,QAAQ,IAAI,yBAA2B,GAC5C,YAAa,QAAQ,IAAI,iCAAmC,WAC9D,EACA,SAAU,QAAQ,IAAI,mBAAqB,aAC3C,UAAW,CACT,SAAU,QAAQ,KAAK,8BAAgC,OACvD,YAAa,QAAQ,KAAK,iCAAmC,OAC7D,eAAgB,QAAQ,KAAK,+BAAiC,OAC9D,SAAU,QAAQ,KAAK,8BAAgC,OACvD,MAAO,QAAQ,KAAK,2BAA6B,OACjD,SAAU,QAAQ,KAAK,8BAAgC,OACvD,OAAQ,QAAQ,KAAK,4BAA8B,OACnD,eAAgB,QAAQ,KAAK,+BAAiC,OAC9D,oBAAqB,OAAO,SAAS,QAAQ,KAAK,mCAAqC,GAAG,CAC5F,EACA,YAAa,CACX,uBAAwB,QAAQ,KAAK,0BAA4B,MACnE,CACF,EACA,SAAU,CACR,QAAS,QAAQ,KAAK,mBAAqB,OAC3C,eAAgB,QAAQ,KAAK,0BAA4B,OACzD,WAAY,QAAQ,KAAK,qBAAuB,YAChD,cAAe,QAAQ,KAAK,wBAA0B,qBACtD,IAAK,QAAQ,IAAI,cAAgB,GACjC,OAAQ,CACN,oBAAqB,QAAQ,KAAK,sCAAwC,OAC1E,gBAAiB,QAAQ,KAAK,kCAAoC,OAClE,gBAAiB,QAAQ,KAAK,kCAAoC,OAClE,eAAgB,QAAQ,KAAK,iCAAmC,OAChE,aAAc,QAAQ,KAAK,+BAAiC,OAC5D,gBAAiB,QAAQ,KAAK,kCAAoC,OAClE,gBAAiB,QAAQ,KAAK,kCAAoC,OAClE,gBAAiB,QAAQ,KAAK,kCAAoC,OAClE,gBAAiB,QAAQ,KAAK,kCAAoC,OAClE,aAAc,QAAQ,KAAK,+BAAiC,OAC5D,aAAc,QAAQ,KAAK,+BAAiC,OAC5D,gBAAiB,QAAQ,KAAK,kCAAoC,OAClE,gBAAiB,QAAQ,KAAK,kCAAoC,OAClE,gBAAiB,QAAQ,KAAK,kCAAoC,OAClE,UAAW,QAAQ,KAAK,4BAA8B,OACtD,aAAc,QAAQ,KAAK,+BAAiC,OAC5D,aAAc,QAAQ,KAAK,+BAAiC,OAC5D,aAAc,QAAQ,KAAK,+BAAiC,OAC5D,kBAAmB,QAAQ,KAAK,oCAAsC,OACtE,YAAa,QAAQ,KAAK,8BAAgC,OAC1D,mBAAoB,QAAQ,KAAK,qCAAuC,OACxE,cAAe,QAAQ,KAAK,gCAAkC,OAC9D,aAAc,QAAQ,KAAK,gCAAkC,OAC7D,0BAA2B,QAAQ,KAAK,4CAA8C,OACtF,KAAM,QAAQ,KAAK,uBAAyB,OAC5C,cAAe,QAAQ,KAAK,gCAAkC,OAC9D,sBAAuB,QAAQ,KAAK,wCAA0C,MAChF,CACF,EACA,IAAK,CACH,QAAS,QAAQ,KAAK,cAAgB,OACtC,cAAe,QAAQ,IAAI,mBAAqB,GAChD,kBAAmB,QAAQ,IAAI,uBAAyB,GACxD,WAAY,QAAQ,IAAI,gBAAkB,GAC1C,OAAQ,QAAQ,IAAI,YAAc,EACpC,EACA,UAAW,CACT,QAAS,QAAQ,KAAK,oBAAsB,OAC5C,cAAe,QAAQ,KAAK,0BAA4B,MAC1D,EACA,OAAQ,CACN,QAAS,QAAQ,KAAK,iBAAmB,OACzC,OAAQ,CACN,QAAS,QAAQ,KAAK,wBAA0B,OAChD,OAAQ,QAAQ,KAAK,sBAAwB,GAC7C,IAAK,QAAQ,KAAK,mBAAqB,GACvC,OAAQ,QAAQ,KAAK,sBAAwB,GAC7C,QAAS,QAAQ,KAAK,uBAAyB,GAC/C,QAAS,QAAQ,KAAK,wBAA0B,MAClD,EACA,OAAQ,CACN,oBAAqB,QAAQ,KAAK,oCAAsC,OACxE,gBAAiB,QAAQ,KAAK,gCAAkC,OAChE,gBAAiB,QAAQ,KAAK,gCAAkC,OAChE,eAAgB,QAAQ,KAAK,+BAAiC,OAC9D,aAAc,QAAQ,KAAK,6BAA+B,OAC1D,gBAAiB,QAAQ,KAAK,gCAAkC,OAChE,gBAAiB,QAAQ,KAAK,gCAAkC,OAChE,gBAAiB,QAAQ,KAAK,gCAAkC,OAChE,gBAAiB,QAAQ,KAAK,gCAAkC,OAChE,aAAc,QAAQ,KAAK,6BAA+B,OAC1D,aAAc,QAAQ,KAAK,6BAA+B,OAC1D,gBAAiB,QAAQ,KAAK,gCAAkC,OAChE,gBAAiB,QAAQ,KAAK,gCAAkC,OAChE,gBAAiB,QAAQ,KAAK,gCAAkC,OAChE,UAAW,QAAQ,KAAK,0BAA4B,OACpD,aAAc,QAAQ,KAAK,6BAA+B,OAC1D,aAAc,QAAQ,KAAK,6BAA+B,OAC1D,aAAc,QAAQ,KAAK,6BAA+B,OAC1D,kBAAmB,QAAQ,KAAK,kCAAoC,OACpE,YAAa,QAAQ,KAAK,4BAA8B,OACxD,mBAAoB,QAAQ,KAAK,mCAAqC,OACtE,cAAe,QAAQ,KAAK,8BAAgC,OAC5D,aAAc,QAAQ,KAAK,8BAAgC,OAC3D,0BAA2B,QAAQ,KAAK,0CAA4C,OACpF,KAAM,QAAQ,KAAK,qBAAuB,OAC1C,cAAe,QAAQ,KAAK,8BAAgC,OAC5D,sBAAuB,QAAQ,KAAK,sCAAwC,MAC9E,CACF,EACA,YAAa,CACX,cAAe,QAAQ,IAAI,2BAA6B,YACxD,IAAK,QAAQ,IAAI,iBAAmB,6BACpC,QAAS,QAAQ,IAAI,qBAAuB,QAC5C,SAAU,QAAQ,IAAI,sBAAwB,IAChD,EACA,IAAK,CACH,MACG,QAAQ,KAAK,WAAW,MAAM,GAAG,GACjC,CAAC,QAAS,OAAQ,QAAS,OAAQ,MAAO,UAAW,OAAQ,WAAY,WAAW,EACvF,MAAO,QAAQ,KAAK,YAAc,OAClC,QAAU,QAAQ,KAAK,aAA8B,OACvD,EACA,gBAAc,mBAAgB,QAAQ,KAAK,YAAY,EACnD,QAAQ,IAAI,eAAiB,OAC7B,OAAO,SAAS,QAAQ,IAAI,YAAY,GAAK,GACjD,sBAAoB,mBAAgB,QAAQ,KAAK,kBAAkB,EAC/D,QAAQ,IAAI,qBAAuB,OACnC,GACJ,SAAU,QAAQ,KAAK,UAAY,KACnC,QAAS,CACP,OAAQ,CACN,IAAK,QAAQ,KAAK,oBAAsB,GACxC,QAAS,QAAQ,KAAK,yBAA2B,OACjD,kBAAmB,QAAQ,KAAK,mCAAqC,MACvE,EACA,OAAQ,CACN,oBAAqB,QAAQ,KAAK,qCAAuC,OACzE,gBAAiB,QAAQ,KAAK,iCAAmC,OACjE,gBAAiB,QAAQ,KAAK,iCAAmC,OACjE,eAAgB,QAAQ,KAAK,gCAAkC,OAC/D,aAAc,QAAQ,KAAK,8BAAgC,OAC3D,gBAAiB,QAAQ,KAAK,iCAAmC,OACjE,gBAAiB,QAAQ,KAAK,iCAAmC,OACjE,gBAAiB,QAAQ,KAAK,iCAAmC,OACjE,gBAAiB,QAAQ,KAAK,iCAAmC,OACjE,aAAc,QAAQ,KAAK,8BAAgC,OAC3D,aAAc,QAAQ,KAAK,8BAAgC,OAC3D,gBAAiB,QAAQ,KAAK,iCAAmC,OACjE,gBAAiB,QAAQ,KAAK,iCAAmC,OACjE,gBAAiB,QAAQ,KAAK,iCAAmC,OACjE,UAAW,QAAQ,KAAK,2BAA6B,OACrD,aAAc,QAAQ,KAAK,8BAAgC,OAC3D,aAAc,QAAQ,KAAK,8BAAgC,OAC3D,aAAc,QAAQ,KAAK,8BAAgC,OAC3D,kBAAmB,QAAQ,KAAK,mCAAqC,OACrE,YAAa,QAAQ,KAAK,6BAA+B,OACzD,mBAAoB,QAAQ,KAAK,oCAAsC,OACvE,cAAe,QAAQ,KAAK,+BAAiC,OAC7D,aAAc,QAAQ,KAAK,+BAAiC,OAC5D,0BAA2B,QAAQ,KAAK,2CAA6C,OACrF,KAAM,QAAQ,KAAK,sBAAwB,OAC3C,cAAe,QAAQ,KAAK,+BAAiC,OAC7D,sBAAuB,QAAQ,KAAK,uCAAyC,OAC7E,OAAQ,QAAQ,KAAK,wBAA0B,OAC/C,eAAgB,QAAQ,KAAK,+BAAiC,EAChE,CACF,EACA,qBAAsB,CACpB,OAAQ,QAAQ,KAAK,6BAA+B,gBACpD,KAAM,QAAQ,KAAK,2BAA6B,SAChD,QAAS,QAAQ,KAAK,8BAAgC,IACxD,EACA,OAAQ,CACN,MAAO,OAAO,SAAS,QAAQ,IAAI,YAAY,GAAK,GACpD,MAAO,QAAQ,IAAI,cAAgB,SACrC,EACA,QAAS,CACP,QAAS,QAAQ,KAAK,kBAAoB,OAC1C,YAAa,QAAQ,KAAK,qBAAuB,MACjD,kBAAmB,QAAQ,KAAK,4BAA8B,MAChE,EACA,SAAU,CACR,QAAS,QAAQ,KAAK,mBAAqB,OAC3C,eAAgB,QAAQ,IAAI,0BAA4B,OACxD,aAAc,QAAQ,IAAI,wBAA0B,OACpD,YAAa,CAAC,QAAQ,IAAI,sBAAwB,QAAQ,IAAI,uBAAyB,OACvF,OAAQ,CACN,SAAU,CACR,WAAY,CACV,IAAK,QAAQ,IAAI,yCAA2C,EAC9D,CACF,EACA,0BAA2B,QAAQ,KAAK,4CAA8C,MACxF,CACF,EACA,OAAQ,CACN,QAAS,QAAQ,KAAK,iBAAmB,OACzC,eAAgB,QAAQ,KAAK,uBAAyB,IACxD,EACA,KAAM,CACJ,QAAS,QAAQ,KAAK,eAAiB,MACzC,EACA,MAAO,CACL,MAAO,CACL,QAAS,QAAQ,KAAK,sBAAwB,OAC9C,IAAK,QAAQ,KAAK,iBAAmB,GACrC,WAAY,QAAQ,KAAK,wBAA0B,kBACnD,IAAK,OAAO,SAAS,QAAQ,KAAK,eAAe,GAAK,OACtD,eAAgB,QAAQ,KAAK,6BAA+B,MAC9D,EACA,MAAO,CACL,QAAS,QAAQ,KAAK,sBAAwB,OAC9C,IAAK,OAAO,SAAS,QAAQ,KAAK,eAAe,GAAK,KACxD,CACF,EACA,GAAI,CACF,WAAY,QAAQ,KAAK,cACzB,WAAY,QAAQ,KAAK,cACzB,SAAU,QAAQ,KAAK,YACvB,YAAa,QAAQ,KAAK,UAC1B,OAAQ,QAAQ,KAAK,aAAe,OACpC,KAAM,OAAO,SAAS,QAAQ,KAAK,SAAW,MAAM,EACpD,QAAS,QAAQ,KAAK,aAAe,OACrC,OAAQ,QAAQ,KAAK,SACvB,EACA,eAAgB,CACd,QAAS,CACP,IAAK,QAAQ,IAAI,wBAA0B,WAC7C,EACA,0BAA2B,QAAQ,KAAK,2CAA6C,MACvF,CACF,CACF,CACF,EAEaC,EAAgB,IAAIF,EDpjBjC,IAAMG,GAAc,KAAK,MAAM,EAAAC,QAAG,aAAa,iBAAkB,MAAM,CAAC,EAElEC,EAAiBC,MACrB,EAAAC,SAAMD,CAAS,EACZ,OAAO,EACP,SAAS,EACT,QAAQ,UAAW,EAAE,EAErBE,OACHA,EAAA,IAAM,WACNA,EAAA,KAAO,WACPA,EAAA,KAAO,WACPA,EAAA,MAAQ,WACRA,EAAA,MAAQ,WACRA,EAAA,QAAU,WACVA,EAAA,KAAO,WAPJA,OAAA,IAgBL,IAAKC,OACHA,EAAA,IAAM,oBACNA,EAAA,KAAO,oBACPA,EAAA,KAAO,oBACPA,EAAA,KAAO,oBACPA,EAAA,MAAQ,oBACRA,EAAA,MAAQ,oBACRA,EAAA,QAAU,oBAPPA,OAAA,IAUAC,OACHA,EAAA,IAAM,MACNA,EAAA,KAAO,OACPA,EAAA,KAAO,OACPA,EAAA,KAAO,OACPA,EAAA,MAAQ,QACRA,EAAA,MAAQ,QACRA,EAAA,QAAU,UAPPA,OAAA,IAUAC,OACHA,EAAA,IAAM,WACNA,EAAA,KAAO,WACPA,EAAA,KAAO,WACPA,EAAA,KAAO,WACPA,EAAA,MAAQ,WACRA,EAAA,MAAQ,WACRA,EAAA,QAAU,WAPPA,OAAA,IAUQC,EAAN,KAAa,CAIlB,YAAYC,EAAU,SAAU,CAHhC,KAAiB,cAAgBC,EAOjC,KAAQ,SAAW,KAHjB,KAAK,QAAUD,CACjB,CAIO,WAAWE,EAAe,CAC/B,KAAK,QAAUA,CACjB,CAEO,YAAYA,EAAe,CAChC,KAAK,SAAWA,CAClB,CAEQ,QAAQA,EAAYC,EAAY,CACtC,IAAMC,EAAgB,CAAC,EAEvB,KAAK,cAAc,IAAS,KAAK,EAAE,MAAM,QAASC,GAAUD,EAAM,KAAKP,EAAKQ,CAAK,CAAC,CAAC,EAEnF,IAAMC,EAAY,OAAOJ,EACrBE,EAAM,SAASD,CAAI,IACjBF,EAAc,IAAS,KAAK,EAAE,OAChC,QAAQ,IACmB,UAAiBL,EAAMO,CAAI,EACpD,kBACA,UAAiBI,EAAMJ,CAAI,EAC3B,KAAK,SAAW,IAAI,KAAK,QAAQ,IAAM,GACvC,UAAiBI,EAAMJ,CAAI,EAC3B,IAAIK,GAAY,OAAO,GACvB,UAAiBD,EAAMJ,CAAI,EAC3B,QAAQ,IAAI,SAAS,EACrB,UACA,UAAiBI,EAAMJ,CAAI,EAC3B,IACA,kBACA,GAAGM,EAAc,KAAK,IAAI,CAAC,CAAC,KAC5B,UACAF,EAAMJ,CAAI,EAAIL,EAAWK,CAAI,EAAI,UACjC,GAAGA,CAAI,WACP,kBACA,IAAI,KAAK,OAAO,WAChBI,EAAMJ,CAAI,EAAI,UACd,IAAIG,CAAS,WACbC,EAAMJ,CAAI,EACVG,IAAc,SAAWJ,EAAQ,GACjC,SACF,EACAI,IAAc,UAAW,QAAQ,IAAoBJ,EAAO;AAAA,CAAI,GAEhE,QAAQ,IACN,kBACA,KAAK,SAAW,IAAI,KAAK,QAAQ,IAAM,GACvC,QAAQ,IAAI,SAAS,EACrB,IACA,GAAGO,EAAc,KAAK,IAAI,CAAC,CAAC,KAC5B,GAAGN,CAAI,IACP,IAAI,KAAK,OAAO,IAChB,IAAIG,CAAS,IACbJ,CACF,EAGN,CAEO,IAAIA,EAAY,CACrB,KAAK,QAAQA,EAAO,KAAQ,CAC9B,CAEO,KAAKA,EAAY,CACtB,KAAK,QAAQA,EAAO,MAAS,CAC/B,CAEO,KAAKA,EAAY,CACtB,KAAK,QAAQA,EAAO,MAAS,CAC/B,CAEO,MAAMA,EAAY,CACvB,KAAK,QAAQA,EAAO,OAAU,CAChC,CAEO,QAAQA,EAAY,CACzB,KAAK,QAAQA,EAAO,SAAY,CAClC,CAEO,MAAMA,EAAY,CACvB,KAAK,QAAQA,EAAO,OAAU,CAChC,CAEO,KAAKA,EAAY,CACtB,KAAK,QAAQA,EAAO,MAAS,CAC/B,CACF,EEzJA,IAAAQ,EAAkB,oBAClBC,EAAe,iBAETC,GAAc,KAAK,MAAM,EAAAC,QAAG,aAAa,iBAAkB,MAAM,CAAC,EAQ3DC,EAAgB,MAAOC,GAAiC,CAOnE,GAJI,EAFY,QAAQ,IAAI,oBAAsB,QAAa,QAAQ,IAAI,oBAAsB,SAM7FA,IAAU,IACZ,OAGF,IAAMC,EAA2B,CAC/B,MAAAD,EACA,WAAY,GAAGH,GAAY,OAAO,GAClC,UAAW,IAAI,IACjB,EAEMK,EACJ,QAAQ,IAAI,eAAiB,QAAQ,IAAI,gBAAkB,GACvD,QAAQ,IAAI,cACZ,0CAEN,EAAAC,QACG,KAAKD,EAAKD,CAAS,EACnB,KAAK,IAAM,CAAC,CAAC,EACb,MAAM,IAAM,CAAC,CAAC,CACnB,EJ5BA,IAAAG,EAAkB,oBAClBC,EAAqC,mBACrCC,EAAqB,wBACrBC,EAAmB,qBACnBC,EAAc,mBAEDC,EAAN,KAAoB,CACzB,YACmBC,EACAC,EACAC,EACjB,CAHiB,eAAAF,EACA,mBAAAC,EACA,sBAAAC,EAKnB,KAAiB,OAAS,IAAIC,EAAO,eAAe,CAJjD,CAMH,MAAc,iBAAiBC,EAAeC,EAAsBC,EAAmBC,EAAiB,CAGtG,IAAMC,EAFsBH,EAAU,eAEO,IAAKI,IACzC,CACL,KAAM,SACN,QAASA,CACX,EACD,EAIKC,EAFyBL,EAAU,kBAEU,IAAKI,IAC/C,CACL,KAAM,YACN,QAASA,CACX,EACD,EAIKE,EAFoBN,EAAU,aAEK,IAAKI,IACrC,CACL,KAAM,OACN,QAASA,CACX,EACD,EAEKG,EAAmB,CACvB,KAAM,OACN,QAAS,CAAC,CAAE,KAAM,OAAQ,KAAML,CAAQ,CAAC,CAC3C,EAEA,GAAI,KAAK,eAAeA,CAAO,EAAG,CAChC,IAAMM,EAAeN,EAAQ,MAAM,GAAG,EAEhCO,EAAMD,EAAa,CAAC,EAAE,MAAM,GAAG,EAAE,CAAC,EAExCD,EAAY,QAAU,CACpB,CAAE,KAAM,OAAQ,KAAMC,EAAa,CAAC,GAAKN,CAAQ,EACjD,CACE,KAAM,YACN,UAAW,CACT,IAAKO,CACP,CACF,CACF,CACF,CAEA,IAAMC,EAAkB,CAAC,GAAGP,EAAgB,GAAGE,EAAmB,GAAGC,EAAcC,CAAW,EAE1FR,EAAS,cAAgBY,EAAY,mBACvC,MAAMZ,EAAS,OAAO,kBAAkBE,CAAS,EACjD,MAAMF,EAAS,OAAO,mBAAmB,YAAaE,CAAS,GAGjE,IAAMW,EAAc,MAAM,KAAK,OAAO,KAAK,YAAY,OAAO,CAC5D,MAAOZ,EAAU,MACjB,SAAUU,EACV,WAAYV,EAAU,SACxB,CAAC,EAED,OAAID,EAAS,cAAgBY,EAAY,kBACvC,MAAMZ,EAAS,OAAO,mBAAmB,SAAUE,CAAS,EAE9CW,EAAY,QAAQ,CAAC,EAAE,QAAQ,OAGjD,CAEA,MAAc,uBACZb,EACAC,EACAC,EACAY,EACAC,EACAZ,EACAa,EACA,CACA,IAAMR,EAAmB,CACvB,KAAMO,EAAS,YAAc,OAC7B,QAAS,CAAC,CAAE,KAAM,OAAQ,KAAMZ,CAAQ,CAAC,CAC3C,EAEA,GAAI,KAAK,eAAeA,CAAO,EAAG,CAChC,IAAMM,EAAeN,EAAQ,MAAM,GAAG,EAEhCO,EAAMD,EAAa,CAAC,EAAE,MAAM,GAAG,EAAE,CAAC,EAExCD,EAAY,QAAU,CACpB,CAAE,KAAM,OAAQ,KAAMC,EAAa,CAAC,GAAKN,CAAQ,EACjD,CACE,KAAM,YACN,UAAW,CACT,IAAKO,CACP,CACF,CACF,CACF,CAIA,GAFA,MAAM,KAAK,OAAO,KAAK,QAAQ,SAAS,OAAOM,EAAUR,CAAW,EAEhEO,EAAQ,CACVE,EAAc,mBAAmB,EACjC,MACF,CAEA,IAAMC,EAAe,MAAM,KAAK,OAAO,KAAK,QAAQ,KAAK,OAAOF,EAAU,CACxE,aAAcf,EAAU,WAC1B,CAAC,EAEGD,EAAS,cAAgBY,EAAY,mBACvC,MAAMZ,EAAS,OAAO,kBAAkBE,CAAS,EACjD,MAAMF,EAAS,OAAO,mBAAmB,YAAaE,CAAS,GAGjE,IAAMiB,EAAW,MAAM,KAAK,cAAcH,EAAUE,EAAa,GAAIjB,EAAU,YAAaC,EAAWY,CAAQ,EAE/G,OAAId,EAAS,cAAgBY,EAAY,kBACvC,MAAMZ,EAAS,OAAO,mBAAmB,SAAUE,CAAS,EAE9CiB,GAAU,KAAK,CAAC,EAAE,QAAQ,CAAC,EAAE,KAAK,KAGpD,CAEA,MAAc,oBACZnB,EACAoB,EACAlB,EACAmB,EACAhB,EACA,CACA,IAAMiB,EAAY,0BAEdC,EAAa,GACbC,EAAY,EAEZC,EAEEC,EAAgBhB,GAA+B,CACnD,IAAMiB,EAAYjB,EAAI,MAAM,GAAG,EAAE,IAAI,GAAG,YAAY,EAC9CkB,EAAkB,CAAC,MAAO,OAAQ,MAAO,MAAO,MAAO,MAAM,EAC7DC,EAAkB,CAAC,MAAO,MAAO,MAAO,KAAK,EAC7CC,EAAkB,CAAC,MAAO,MAAO,MAAO,KAAK,EAC7CC,EAAqB,CAAC,MAAO,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,KAAK,EAErF,OAAIH,EAAgB,SAASD,GAAa,EAAE,EAAU,QAClDE,EAAgB,SAASF,GAAa,EAAE,EAAU,QAClDG,EAAgB,SAASH,GAAa,EAAE,EAAU,QAClDI,EAAmB,SAASJ,GAAa,EAAE,EAAU,WAClD,IACT,EAEA,MAAQF,EAAQH,EAAU,KAAKjB,CAAO,KAAO,MAAM,CACjD,GAAM,CAAC2B,EAAWC,EAAUC,EAASxB,CAAG,EAAIe,EACtCU,EAAYT,EAAahB,CAAG,EAE5B0B,EAAa/B,EAAQ,MAAMmB,EAAWC,EAAM,KAAK,EAKvD,GAJIW,IACFb,GAAca,GAGZD,EAAW,CACb,IAAME,EAAgBhB,EAAS,eAAiB,GAC1CiB,EAAcjB,EAAS,aAAe,EACtCkB,EAAW,IACXC,EAAW,IAEjB,GAAIjB,EAAW,KAAK,EAAG,CACrB,GAAIc,EAAe,CACjB,IAAMI,EAAmBlB,EAAW,KAAK,EAAE,MAAM;AAAA;AAAA,CAAM,EAEvD,QAASmB,EAAQ,EAAGA,EAAQD,EAAiB,OAAQC,IAAS,CAC5D,IAAMrC,EAAUoC,EAAiBC,CAAK,EAEhCC,EAAQ,KAAK,IAAI,KAAK,IAAItC,EAAQ,OAASiC,EAAaC,CAAQ,EAAGC,CAAQ,EAE7ExC,EAAS,cAAgBY,EAAY,mBACvC,MAAMZ,EAAS,OAAO,kBAAkBE,CAAS,EACjD,MAAMF,EAAS,OAAO,mBAAmB,YAAaE,CAAS,GAGjE,MAAM,IAAI,QAAe0C,IAAY,CACnC,WAAW,SAAY,CACrB,MAAM5C,EAAS,YACb,CACE,OAAQE,EAAU,MAAM,GAAG,EAAE,CAAC,EAC9B,MAAOmB,GAAU,cAAgB,IACjC,KAAMhB,CACR,EACA,EACF,EACAuC,GAAQ,CACV,EAAGD,CAAK,CACV,CAAC,EAEG3C,EAAS,cAAgBY,EAAY,kBACvC,MAAMZ,EAAS,OAAO,mBAAmB,SAAUE,CAAS,CAEhE,CACF,MACE,MAAMF,EAAS,YACb,CACE,OAAQE,EAAU,MAAM,GAAG,EAAE,CAAC,EAC9B,MAAOmB,GAAU,cAAgB,IACjC,KAAME,EAAW,KAAK,CACxB,EACA,EACF,EAEFA,EAAa,EACf,CAEIY,IAAc,QAChB,MAAMnC,EAAS,cAAc,CAC3B,OAAQE,EAAU,MAAM,GAAG,EAAE,CAAC,EAC9B,MAAOmB,GAAU,cAAgB,IACjC,MAAOX,EACP,QAASwB,CACX,CAAC,EAED,MAAMlC,EAAS,aACb,CACE,OAAQE,EAAU,MAAM,GAAG,EAAE,CAAC,EAC9B,MAAOmB,GAAU,cAAgB,IACjC,UAAWc,EACX,MAAOzB,EACP,QAASwB,CACX,EACA,KACA,EACF,CAEJ,MACEX,GAAc,IAAIW,CAAO,KAAKxB,CAAG,IAGnCc,EAAYF,EAAU,SACxB,CAEA,GAAIE,EAAYnB,EAAQ,OAAQ,CAC9B,IAAMwC,EAAgBxC,EAAQ,MAAMmB,CAAS,EACzCqB,EAAc,KAAK,IACrBtB,GAAcsB,EAElB,CAEA,IAAMR,EAAgBhB,EAAS,eAAiB,GAC1CiB,EAAcjB,EAAS,aAAe,EACtCkB,EAAW,IACXC,EAAW,IAEjB,GAAIjB,EAAW,KAAK,EAAG,CACrB,GAAIc,EAAe,CACjB,IAAMI,EAAmBlB,EAAW,KAAK,EAAE,MAAM;AAAA;AAAA,CAAM,EAEvD,QAASmB,EAAQ,EAAGA,EAAQD,EAAiB,OAAQC,IAAS,CAC5D,IAAMrC,EAAUoC,EAAiBC,CAAK,EAEhCC,EAAQ,KAAK,IAAI,KAAK,IAAItC,EAAQ,OAASiC,EAAaC,CAAQ,EAAGC,CAAQ,EAE7ExC,EAAS,cAAgBY,EAAY,mBACvC,MAAMZ,EAAS,OAAO,kBAAkBE,CAAS,EACjD,MAAMF,EAAS,OAAO,mBAAmB,YAAaE,CAAS,GAGjE,MAAM,IAAI,QAAe0C,GAAY,CACnC,WAAW,SAAY,CACrB,MAAM5C,EAAS,YACb,CACE,OAAQE,EAAU,MAAM,GAAG,EAAE,CAAC,EAC9B,MAAOmB,GAAU,cAAgB,IACjC,KAAMhB,CACR,EACA,EACF,EACAuC,EAAQ,CACV,EAAGD,CAAK,CACV,CAAC,EAEG3C,EAAS,cAAgBY,EAAY,kBACvC,MAAMZ,EAAS,OAAO,mBAAmB,SAAUE,CAAS,CAEhE,CACF,MACE,MAAMF,EAAS,YACb,CACE,OAAQE,EAAU,MAAM,GAAG,EAAE,CAAC,EAC9B,MAAOmB,GAAU,cAAgB,IACjC,KAAME,EAAW,KAAK,CACxB,EACA,EACF,EAEFA,EAAa,EACf,CAEAN,EAAc,mBAAmB,EAEjC,MAAM,KAAK,iBAAiB,mBAAmB,OAAO,CACpD,MAAO,CACL,GAAIG,EAAQ,EACd,EACA,KAAM,CACJ,OAAQ,SACR,UAAW,EACb,CACF,CAAC,CACH,CAEA,MAAa,0BAA0BpB,EAAuB8C,EAAW,CACvE,GAAIA,EAAK,YAAc,mBAAoB,OAE3C,IAAMC,EAAQ,MAAM,KAAK,iBAAiB,YAAY,UAAU,CAC9D,MAAO,CACL,GAAID,EAAK,aACX,CACF,CAAC,EAED,GAAI,CAACC,EAAO,MAAM,IAAI,MAAM,wBAAwB,EAEpD,GAAI,CACF,KAAK,OAAS,IAAI,EAAAC,QAAO,CACvB,OAAQD,EAAM,MAChB,CAAC,EAED,IAAM/B,GAAY,MAAM,KAAK,OAAO,KAAK,QAAQ,OAAO,CAAC,CAAC,GAAG,GAEzDI,EAAU,KACd,OAAIJ,IACFI,EAAU,MAAM,KAAK,iBAAiB,mBAAmB,OAAO,CAC9D,KAAM,CACJ,UAAW0B,EAAK,UAChB,SAAUA,EAAK,SACf,UAAW9B,EACX,OAAQ,SACR,UAAW,GACX,MAAO8B,EAAK,MACZ,WAAY9C,EAAS,WACrB,KAAM,QACR,CACF,CAAC,GAEI,CAAE,QAAAoB,CAAQ,CACnB,OAAS6B,EAAO,CACd,KAAK,OAAO,MAAMA,CAAK,EACvB,MACF,CACF,CAEA,MAAc,wBACZjD,EACAE,EACAY,EACAC,EACAd,EACAoB,EACAD,EACAjB,EACA,CACA,IAAM2C,EAAO,MAAM,KAAK,0BAA0B9C,EAAU,CAC1D,UAAAE,EACA,SAAAY,EACA,cAAeb,EAAU,cACzB,MAAOA,EAAU,EACnB,CAAC,EAEG6C,EAAK,UACP1B,EAAU0B,EAAK,SAGjB,IAAMzC,EAAU,MAAM,KAAK,uBACzBL,EACAC,EACAC,EACAY,EACAC,EACAZ,EACAiB,EAAQ,SACV,EAEA,MAAM,KAAK,oBAAoBpB,EAAUoB,EAASlB,EAAWmB,EAAUhB,CAAO,CAGhF,CAEQ,OAAO6C,EAAsB,CACnC,GAAI,CACF,YAAK,MAAMA,CAAG,EACP,EACT,MAAY,CACV,MAAO,EACT,CACF,CAEA,MAAc,cACZlC,EACAmC,EACAC,EACAlD,EACAY,EACA,CACA,IAAMuC,EAAS,MAAM,KAAK,OAAO,KAAK,QAAQ,KAAK,SAASrC,EAAUmC,CAAK,EACvEG,EACJ,OAAQD,EAAO,OAAQ,CACrB,IAAK,kBAGH,GAFAC,EAAYD,GAAQ,iBAAiB,qBAAqB,WAEtDC,EACF,QAAWC,KAAYD,EAAW,CAChC,IAAME,EAAKD,EAAS,GACdE,EAAeF,GAAU,UAAU,KACnCG,EAAmB,KAAK,OAAOH,GAAU,UAAU,SAAS,EAC9D,KAAK,MAAMA,GAAU,UAAU,SAAS,EACxCA,GAAU,UAAU,UAEpBI,EAAS,KAEb,GAAI,CACF,GAAM,CAAE,KAAAb,CAAK,EAAI,MAAM,EAAAc,QAAM,KAAKR,EAAa,CAC7C,KAAMK,EACN,UAAW,CAAE,GAAGC,EAAkB,UAAAxD,EAAW,SAAAY,CAAS,CACxD,CAAC,EAED6C,EAAS,KAAK,UAAUb,CAAI,EACzB,QAAQ,MAAO,MAAM,EACrB,QAAQ,KAAM,KAAK,EACnB,QAAQ,MAAO,KAAK,EACpB,QAAQ,MAAO,KAAK,EACpB,QAAQ,MAAO,KAAK,CACzB,OAASG,EAAO,CACdU,EAAS,KAAK,UAAUV,CAAK,EAC1B,QAAQ,MAAO,MAAM,EACrB,QAAQ,KAAM,KAAK,EACnB,QAAQ,MAAO,KAAK,EACpB,QAAQ,MAAO,KAAK,EACpB,QAAQ,MAAO,KAAK,CACzB,CAEA,MAAM,KAAK,OAAO,KAAK,QAAQ,KAAK,kBAAkBjC,EAAUmC,EAAO,CACrE,aAAc,CACZ,CACE,aAAcK,EACd,OAAAG,CACF,CACF,CACF,CAAC,CACH,CAGF,OAAO,KAAK,cAAc3C,EAAUmC,EAAOC,EAAalD,EAAWY,CAAQ,EAC7E,IAAK,SACH,aAAM,IAAI,QAAS8B,GAAY,WAAWA,EAAS,GAAI,CAAC,EACjD,KAAK,cAAc5B,EAAUmC,EAAOC,EAAalD,EAAWY,CAAQ,EAC7E,IAAK,cACH,aAAM,IAAI,QAAS8B,GAAY,WAAWA,EAAS,GAAI,CAAC,EACjD,KAAK,cAAc5B,EAAUmC,EAAOC,EAAalD,EAAWY,CAAQ,EAC7E,IAAK,YACH,OAAO,MAAM,KAAK,OAAO,KAAK,QAAQ,SAAS,KAAKE,EAAU,CAC5D,OAAQmC,EACR,MAAO,CACT,CAAC,CACL,CACF,CAEQ,eAAehD,EAAiB,CACtC,OAAOA,EAAQ,SAAS,cAAc,CACxC,CAEA,MAAa,uBACXH,EACAE,EACAY,EACAC,EACAd,EACAmB,EACAC,EACAlB,EACA,CACA,GAAIiB,GAAWA,EAAQ,SAAW,SAChC,OAGF,GAAIA,GAAWC,EAAS,QAAUA,EAAS,OAAS,EAAG,CACrD,IAAMwC,EAAM,KAAK,IAAI,EAEfC,EAAmB,IAAI,KAAK1C,EAAQ,SAAS,EAAE,QAAQ,EAEvD2C,EAAOF,EAAMC,EAInB,GAFsB,KAAK,MAAMC,EAAO,IAAO,EAAE,EAE7B1C,EAAS,OAAQ,CAC/BA,EAAS,SACX,MAAM,KAAK,iBAAiB,mBAAmB,OAAO,CACpD,MAAO,CACL,GAAID,EAAQ,EACd,EACA,KAAM,CACJ,OAAQ,QACV,CACF,CAAC,EAED,MAAM,KAAK,iBAAiB,mBAAmB,WAAW,CACxD,MAAO,CACL,MAAOnB,EAAU,GACjB,UAAWC,CACb,CACF,CAAC,EAGH,MAAM,KAAK,wBACTF,EACAE,EACAY,EACAC,EACAd,EACAoB,EACAD,EACAjB,CACF,EACA,MACF,CACF,CAEA,GAAI,CAACiB,EAAS,CACZ,MAAM,KAAK,wBAAwBpB,EAAUE,EAAWY,EAAUC,EAAQd,EAAWoB,EAAUD,EAASjB,CAAO,EAC/G,MACF,CAaA,GAXIiB,EAAQ,SAAW,UACrB,MAAM,KAAK,iBAAiB,mBAAmB,OAAO,CACpD,MAAO,CACL,GAAIA,EAAQ,EACd,EACA,KAAM,CACJ,OAAQ,SACR,UAAW,EACb,CACF,CAAC,EAEC,CAACjB,EAAS,CACRkB,EAAS,iBACX,KAAK,UAAU,YAAYrB,EAAS,YAAY,EAAE,YAChD,CACE,OAAQE,EAAU,MAAM,GAAG,EAAE,CAAC,EAC9B,MAAOmB,EAAS,cAAgB,IAChC,KAAMA,EAAS,cACjB,EACA,EACF,EAEAJ,EAAc,mBAAmB,GAEnC,MACF,CAEA,GAAII,EAAS,eAAiBlB,EAAQ,YAAY,IAAMkB,EAAS,cAAc,YAAY,EAAG,CACxFA,EAAS,SACX,MAAM,KAAK,iBAAiB,mBAAmB,OAAO,CACpD,MAAO,CACL,GAAID,EAAQ,EACd,EACA,KAAM,CACJ,OAAQ,QACV,CACF,CAAC,EAED,MAAM,KAAK,iBAAiB,mBAAmB,WAAW,CACxD,MAAO,CACL,MAAOnB,EAAU,GACjB,UAAWC,CACb,CACF,CAAC,EAEH,MACF,CAEA,IAAM6C,EAAQ,MAAM,KAAK,iBAAiB,YAAY,UAAU,CAC9D,MAAO,CACL,GAAI9C,EAAU,aAChB,CACF,CAAC,EAED,GAAI,CAAC8C,EAAO,MAAM,IAAI,MAAM,wBAAwB,EAEpD,KAAK,OAAS,IAAI,EAAAC,QAAO,CACvB,OAAQD,EAAM,MAChB,CAAC,EAED,IAAM/B,EAAWI,EAAQ,UAEnBf,EAAU,MAAM,KAAK,uBACzBL,EACAC,EACAC,EACAY,EACAC,EACAZ,EACAa,CACF,EAEA,MAAM,KAAK,oBAAoBhB,EAAUoB,EAASlB,EAAWmB,EAAUhB,CAAO,CAGhF,CAEA,MAAa,+BAA+BL,EAAuB8C,EAAW,CAC5E,GAAIA,EAAK,YAAc,mBAAoB,OAE3C,IAAMU,EAAK,KAAK,MAAM,KAAK,OAAO,EAAI,IAAW,EAAE,SAAS,EAEtDT,EAAQ,MAAM,KAAK,iBAAiB,YAAY,UAAU,CAC9D,MAAO,CACL,GAAID,EAAK,aACX,CACF,CAAC,EAED,GAAI,CAACC,EAAO,MAAM,IAAI,MAAM,wBAAwB,EAEpD,GAAI,CAcF,MAAO,CAAE,QAbO,MAAM,KAAK,iBAAiB,mBAAmB,OAAO,CACpE,KAAM,CACJ,UAAWD,EAAK,UAChB,SAAUA,EAAK,SACf,UAAWU,EACX,OAAQ,SACR,UAAW,GACX,MAAOV,EAAK,MACZ,WAAY9C,EAAS,WACrB,KAAM,QACR,CACF,CAAC,EAEiB,MAAA+C,CAAM,CAC1B,OAASE,EAAO,CACd,KAAK,OAAO,MAAMA,CAAK,EACvB,MACF,CACF,CAEA,MAAc,6BACZjD,EACAE,EACAY,EACAb,EACAoB,EACAD,EACAjB,EACA,CACA,IAAM2C,EAAO,MAAM,KAAK,+BAA+B9C,EAAU,CAC/D,UAAAE,EACA,SAAAY,EACA,cAAeb,EAAU,cACzB,MAAOA,EAAU,EACnB,CAAC,EAEDmB,EAAU0B,EAAK,QAEf,IAAMC,EAAQD,EAAK,MAEnB,KAAK,OAAS,IAAI,EAAAE,QAAO,CACvB,OAAQD,EAAM,MAChB,CAAC,EAED,IAAM1C,EAAU,MAAM,KAAK,iBAAiBL,EAAUC,EAAWC,EAAWC,CAAO,EAEnF,MAAM,KAAK,oBAAoBH,EAAUoB,EAASlB,EAAWmB,EAAUhB,CAAO,CAGhF,CAEA,MAAa,4BACXL,EACAE,EACAY,EACAb,EACAmB,EACAC,EACAlB,EACA,CACA,GAAIiB,GAAWA,EAAQ,SAAW,SAChC,OAGF,GAAIA,GAAWC,EAAS,QAAUA,EAAS,OAAS,EAAG,CACrD,IAAMwC,EAAM,KAAK,IAAI,EAEfC,EAAmB,IAAI,KAAK1C,EAAQ,SAAS,EAAE,QAAQ,EAEvD2C,EAAOF,EAAMC,EAInB,GAFsB,KAAK,MAAMC,EAAO,IAAO,EAAE,EAE7B1C,EAAS,OAAQ,CAC/BA,EAAS,SACX,MAAM,KAAK,iBAAiB,mBAAmB,OAAO,CACpD,MAAO,CACL,GAAID,EAAQ,EACd,EACA,KAAM,CACJ,OAAQ,QACV,CACF,CAAC,EAED,MAAM,KAAK,iBAAiB,mBAAmB,WAAW,CACxD,MAAO,CACL,MAAOnB,EAAU,GACjB,UAAWC,CACb,CACF,CAAC,EAGH,MAAM,KAAK,6BAA6BF,EAAUE,EAAWY,EAAUb,EAAWoB,EAAUD,EAASjB,CAAO,EAC5G,MACF,CACF,CAEA,GAAI,CAACiB,EAAS,CACZ,MAAM,KAAK,6BAA6BpB,EAAUE,EAAWY,EAAUb,EAAWoB,EAAUD,EAASjB,CAAO,EAC5G,MACF,CAYA,GAVA,MAAM,KAAK,iBAAiB,mBAAmB,OAAO,CACpD,MAAO,CACL,GAAIiB,EAAQ,EACd,EACA,KAAM,CACJ,OAAQ,SACR,UAAW,EACb,CACF,CAAC,EAEG,CAACjB,EAAS,CACRkB,EAAS,iBACX,KAAK,UAAU,YAAYrB,EAAS,YAAY,EAAE,YAChD,CACE,OAAQE,EAAU,MAAM,GAAG,EAAE,CAAC,EAC9B,MAAOmB,EAAS,cAAgB,IAChC,KAAMA,EAAS,cACjB,EACA,EACF,EAEAJ,EAAc,mBAAmB,GAEnC,MACF,CAEA,GAAII,EAAS,eAAiBlB,EAAQ,YAAY,IAAMkB,EAAS,cAAc,YAAY,EAAG,CACxFA,EAAS,SACX,MAAM,KAAK,iBAAiB,mBAAmB,OAAO,CACpD,MAAO,CACL,GAAID,EAAQ,EACd,EACA,KAAM,CACJ,OAAQ,QACV,CACF,CAAC,EAED,MAAM,KAAK,iBAAiB,mBAAmB,WAAW,CACxD,MAAO,CACL,MAAOnB,EAAU,GACjB,UAAWC,CACb,CACF,CAAC,EAEH,MACF,CAEA,IAAM6C,EAAQ,MAAM,KAAK,iBAAiB,YAAY,UAAU,CAC9D,MAAO,CACL,GAAI9C,EAAU,aAChB,CACF,CAAC,EAED,GAAI,CAAC8C,EAAO,MAAM,IAAI,MAAM,wBAAwB,EAEpD,KAAK,OAAS,IAAI,EAAAC,QAAO,CACvB,OAAQD,EAAM,MAChB,CAAC,EAED,IAAM1C,EAAU,MAAM,KAAK,iBAAiBL,EAAUC,EAAWC,EAAWC,CAAO,EAEnF,MAAM,KAAK,oBAAoBH,EAAUoB,EAASlB,EAAWmB,EAAUhB,CAAO,CAGhF,CAEA,MAAa,aAAa0C,EAAoBiB,EAAUC,EAAyB,CAC/E,IAAIC,EAEAF,GAAK,SAAS,SAChBE,EAAQ,MAAM,EAAAN,QAAM,IAAII,EAAI,QAAQ,SAAU,CAAE,aAAc,aAAc,CAAC,EAAE,KAAM7C,GAC5E,OAAO,KAAKA,EAAS,KAAM,QAAQ,CAC3C,EAED+C,EAAQ,QAAM,wBACZ,CAAE,IAAKF,EAAI,IAAK,QAASA,GAAK,OAAQ,EACtC,SACA,CAAC,EACD,CACE,UAAQ,EAAAG,SAAE,CAAE,MAAO,OAAQ,CAAC,EAC5B,gBAAiBF,CACnB,CACF,EAGF,IAAMG,EAAO,KAAK,cAAc,IAAc,UAAU,EAAE,SAAS,IAAI,EACnE,KACA,KAAK,cAAc,IAAc,UAAU,EAEzCC,EAAW,IAAI,EAAAC,QAErB,OAAAD,EAAS,OAAO,OAAQH,EAAO,WAAW,EAC1CG,EAAS,OAAO,QAAS,WAAW,EACpCA,EAAS,OAAO,WAAYD,CAAI,GAEf,MAAM,EAAAR,QAAM,KAAK,iDAAkDS,EAAU,CAC5F,QAAS,CACP,eAAgB,sBAChB,cAAe,UAAUtB,EAAM,MAAM,EACvC,CACF,CAAC,IAEgB,MAAM,IACzB,CACF","names":["openai_service_exports","__export","OpenaiService","__toCommonJS","Integration","import_dayjs","import_fs","import_class_validator","import_dotenv","dotenv","ConfigService","key","configService","packageJson","fs","formatDateLog","timestamp","dayjs","Color","Level","Type","Background","Logger","context","configService","value","type","types","level","typeValue","Color","packageJson","formatDateLog","import_axios","import_fs","packageJson","fs","sendTelemetry","route","telemetry","url","axios","import_axios","import_baileys","import_form_data","import_openai","import_pino","OpenaiService","waMonitor","configService","prismaRepository","Logger","instance","openaiBot","remoteJid","content","messagesSystem","message","messagesAssistant","messagesUser","messageData","contentSplit","url","messages","Integration","completions","pushName","fromMe","threadId","sendTelemetry","runAssistant","response","session","settings","linkRegex","textBuffer","lastIndex","match","getMediaType","extension","imageExtensions","audioExtensions","videoExtensions","documentExtensions","fullMatch","exclMark","altText","mediaType","beforeText","splitMessages","timePerChar","minDelay","maxDelay","multipleMessages","index","delay","resolve","remainingText","data","creds","OpenAI","error","str","runId","functionUrl","getRun","toolCalls","toolCall","id","functionName","functionArgument","output","axios","now","sessionUpdatedAt","diff","msg","updateMediaMessage","audio","P","lang","formData","FormData"]}