{"version":3,"sources":["../../../src/api/integrations/integration.dto.ts","../../../src/api/integrations/chatbot/chatwoot/dto/chatwoot.dto.ts","../../../src/api/integrations/event/event.dto.ts"],"sourcesContent":["import { ChatwootInstanceMixin } from '@api/integrations/chatbot/chatwoot/dto/chatwoot.dto';\nimport { EventInstanceMixin } from '@api/integrations/event/event.dto';\n\nexport type Constructor<T = {}> = new (...args: any[]) => T;\n\nexport class IntegrationDto extends EventInstanceMixin(ChatwootInstanceMixin(class {})) {}\n","import { Constructor } from '@api/integrations/integration.dto';\n\nexport class ChatwootDto {\n  enabled?: boolean;\n  accountId?: string;\n  token?: string;\n  url?: string;\n  nameInbox?: string;\n  signMsg?: boolean;\n  signDelimiter?: string;\n  number?: string;\n  reopenConversation?: boolean;\n  conversationPending?: boolean;\n  mergeBrazilContacts?: boolean;\n  importContacts?: boolean;\n  importMessages?: boolean;\n  daysLimitImportMessages?: number;\n  autoCreate?: boolean;\n  organization?: string;\n  logo?: string;\n  ignoreJids?: string[];\n}\n\nexport function ChatwootInstanceMixin<TBase extends Constructor>(Base: TBase) {\n  return class extends Base {\n    chatwootAccountId?: string;\n    chatwootToken?: string;\n    chatwootUrl?: string;\n    chatwootSignMsg?: boolean;\n    chatwootReopenConversation?: boolean;\n    chatwootConversationPending?: boolean;\n    chatwootMergeBrazilContacts?: boolean;\n    chatwootImportContacts?: boolean;\n    chatwootImportMessages?: boolean;\n    chatwootDaysLimitImportMessages?: number;\n    chatwootNameInbox?: string;\n    chatwootOrganization?: string;\n    chatwootLogo?: string;\n    chatwootAutoCreate?: boolean;\n  };\n}\n","import { Constructor } from '@api/integrations/integration.dto';\nimport { JsonValue } from '@prisma/client/runtime/library';\n\nexport class EventDto {\n  webhook?: {\n    enabled?: boolean;\n    events?: string[];\n    url?: string;\n    headers?: JsonValue;\n    byEvents?: boolean;\n    base64?: boolean;\n  };\n\n  websocket?: {\n    enabled?: boolean;\n    events?: string[];\n  };\n\n  sqs?: {\n    enabled?: boolean;\n    events?: string[];\n  };\n\n  rabbitmq?: {\n    enabled?: boolean;\n    events?: string[];\n  };\n\n  pusher?: {\n    enabled?: boolean;\n    appId?: string;\n    key?: string;\n    secret?: string;\n    cluster?: string;\n    useTLS?: boolean;\n    events?: string[];\n  };\n}\n\nexport function EventInstanceMixin<TBase extends Constructor>(Base: TBase) {\n  return class extends Base {\n    webhook?: {\n      enabled?: boolean;\n      events?: string[];\n      headers?: JsonValue;\n      url?: string;\n      byEvents?: boolean;\n      base64?: boolean;\n    };\n\n    websocket?: {\n      enabled?: boolean;\n      events?: string[];\n    };\n\n    sqs?: {\n      enabled?: boolean;\n      events?: string[];\n    };\n\n    rabbitmq?: {\n      enabled?: boolean;\n      events?: string[];\n    };\n\n    pusher?: {\n      enabled?: boolean;\n      appId?: string;\n      key?: string;\n      secret?: string;\n      cluster?: string;\n      useTLS?: boolean;\n      events?: string[];\n    };\n  };\n}\n"],"mappings":"4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,oBAAAE,IAAA,eAAAC,EAAAH,GCuBO,SAASI,EAAiDC,EAAa,CAC5E,OAAO,cAAcA,CAAK,CAe1B,CACF,CCDO,SAASC,EAA8CC,EAAa,CACzE,OAAO,cAAcA,CAAK,CAkC1B,CACF,CFtEO,IAAMC,EAAN,cAA6BC,EAAmBC,EAAsB,KAAM,CAAC,CAAC,CAAC,CAAE,CAAC","names":["integration_dto_exports","__export","IntegrationDto","__toCommonJS","ChatwootInstanceMixin","Base","EventInstanceMixin","Base","IntegrationDto","EventInstanceMixin","ChatwootInstanceMixin"]}