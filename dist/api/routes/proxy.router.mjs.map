{"version":3,"sources":["../../../src/api/abstract/abstract.router.ts","../../../src/config/logger.config.ts","../../../src/config/env.config.ts","../../../src/cache/localcache.ts","../../../src/cache/rediscache.ts","../../../src/cache/rediscache.client.ts","../../../src/cache/cacheengine.ts","../../../src/config/event.config.ts","../../../src/api/controllers/call.controller.ts","../../../src/api/controllers/chat.controller.ts","../../../src/api/controllers/group.controller.ts","../../../src/api/types/wa.types.ts","../../../src/api/controllers/instance.controller.ts","../../../node_modules/uuid/dist/esm-node/rng.js","../../../node_modules/uuid/dist/esm-node/stringify.js","../../../node_modules/uuid/dist/esm-node/native.js","../../../node_modules/uuid/dist/esm-node/v4.js","../../../src/api/controllers/label.controller.ts","../../../src/utils/makeProxyAgent.ts","../../../src/api/controllers/proxy.controller.ts","../../../src/api/controllers/sendMessage.controller.ts","../../../src/api/controllers/settings.controller.ts","../../../src/api/controllers/template.controller.ts","../../../src/api/integrations/storage/s3/libs/minio.server.ts","../../../src/api/integrations/chatbot/chatwoot/libs/postgres.client.ts","../../../src/api/integrations/chatbot/chatwoot/utils/chatwoot-import-helper.ts","../../../src/api/integrations/chatbot/chatwoot/services/chatwoot.service.ts","../../../src/utils/i18n.ts","../../../src/utils/sendTelemetry.ts","../../../src/api/integrations/chatbot/dify/services/dify.service.ts","../../../src/api/integrations/chatbot/openai/services/openai.service.ts","../../../src/utils/getConversationMessage.ts","../../../src/api/integrations/chatbot/typebot/services/typebot.service.ts","../../../src/api/services/channel.service.ts","../../../src/utils/createJid.ts","../../../src/api/integrations/channel/evolution/evolution.channel.service.ts","../../../src/utils/renderStatus.ts","../../../src/api/integrations/channel/meta/whatsapp.business.service.ts","../../../src/api/dto/chat.dto.ts","../../../src/api/services/cache.service.ts","../../../src/api/integrations/channel/whatsapp/whatsapp.baileys.service.ts","../../../src/utils/onWhatsappCache.ts","../../../src/config/path.config.ts","../../../src/utils/use-multi-file-auth-state-prisma.ts","../../../src/utils/use-multi-file-auth-state-provider-files.ts","../../../src/utils/use-multi-file-auth-state-redis-db.ts","../../../src/api/integrations/channel/whatsapp/voiceCalls/useVoiceCallsBaileys.ts","../../../src/api/integrations/channel/channel.controller.ts","../../../src/api/integrations/channel/evolution/evolution.controller.ts","../../../src/api/integrations/channel/meta/meta.controller.ts","../../../src/api/integrations/channel/whatsapp/baileys.controller.ts","../../../src/utils/advancedOperatorsSearch.ts","../../../src/utils/findBotByTrigger.ts","../../../src/api/integrations/chatbot/chatbot.controller.ts","../../../src/api/integrations/chatbot/chatwoot/controllers/chatwoot.controller.ts","../../../src/api/integrations/chatbot/dify/controllers/dify.controller.ts","../../../src/api/integrations/chatbot/evolutionBot/controllers/evolutionBot.controller.ts","../../../src/api/integrations/chatbot/evolutionBot/services/evolutionBot.service.ts","../../../src/api/integrations/chatbot/flowise/controllers/flowise.controller.ts","../../../src/api/integrations/chatbot/flowise/services/flowise.service.ts","../../../src/api/integrations/chatbot/openai/controllers/openai.controller.ts","../../../src/api/integrations/chatbot/typebot/controllers/typebot.controller.ts","../../../src/api/integrations/event/pusher/pusher.controller.ts","../../../src/api/integrations/event/event.controller.ts","../../../src/api/integrations/event/rabbitmq/rabbitmq.controller.ts","../../../src/api/integrations/event/sqs/sqs.controller.ts","../../../src/api/integrations/event/webhook/webhook.controller.ts","../../../src/api/integrations/event/websocket/websocket.controller.ts","../../../src/api/integrations/event/event.manager.ts","../../../src/api/integrations/storage/s3/controllers/s3.controller.ts","../../../src/api/integrations/storage/s3/services/s3.service.ts","../../../src/api/provider/sessions.ts","../../../src/api/repository/repository.service.ts","../../../src/api/services/monitor.service.ts","../../../src/api/services/proxy.service.ts","../../../src/api/services/settings.service.ts","../../../src/api/services/template.service.ts","../../../src/api/server.module.ts","../../../src/api/guards/auth.guard.ts","../../../src/api/guards/instance.guard.ts","../../../src/api/guards/telemetry.guard.ts","../../../src/api/integrations/channel/channel.router.ts","../../../src/api/integrations/channel/evolution/evolution.router.ts","../../../src/api/integrations/channel/meta/meta.router.ts","../../../src/api/integrations/chatbot/chatwoot/dto/chatwoot.dto.ts","../../../src/api/integrations/event/event.dto.ts","../../../src/api/integrations/integration.dto.ts","../../../src/api/dto/instance.dto.ts","../../../src/validate/instance.schema.ts","../../../src/api/integrations/channel/whatsapp/baileys.router.ts","../../../src/validate/chat.schema.ts","../../../src/validate/group.schema.ts","../../../src/validate/label.schema.ts","../../../src/validate/message.schema.ts","../../../src/validate/proxy.schema.ts","../../../src/validate/settings.schema.ts","../../../src/validate/template.schema.ts","../../../src/api/integrations/chatbot/chatwoot/validate/chatwoot.schema.ts","../../../src/api/integrations/chatbot/dify/validate/dify.schema.ts","../../../src/api/integrations/chatbot/evolutionBot/validate/evolutionBot.schema.ts","../../../src/api/integrations/chatbot/flowise/validate/flowise.schema.ts","../../../src/api/integrations/chatbot/openai/validate/openai.schema.ts","../../../src/api/integrations/chatbot/typebot/validate/typebot.schema.ts","../../../src/api/integrations/event/pusher/pusher.schema.ts","../../../src/api/integrations/event/webhook/webhook.schema.ts","../../../src/api/integrations/event/event.schema.ts","../../../src/api/integrations/chatbot/chatwoot/routes/chatwoot.router.ts","../../../src/api/dto/chatbot.dto.ts","../../../src/api/integrations/chatbot/dify/dto/dify.dto.ts","../../../src/api/integrations/chatbot/dify/routes/dify.router.ts","../../../src/api/integrations/chatbot/openai/dto/openai.dto.ts","../../../src/api/integrations/chatbot/openai/routes/openai.router.ts","../../../src/api/integrations/chatbot/typebot/dto/typebot.dto.ts","../../../src/api/integrations/chatbot/typebot/routes/typebot.router.ts","../../../src/api/integrations/chatbot/chatbot.router.ts","../../../src/api/integrations/chatbot/evolutionBot/routes/evolutionBot.router.ts","../../../src/api/integrations/chatbot/evolutionBot/dto/evolutionBot.dto.ts","../../../src/api/integrations/chatbot/flowise/routes/flowise.router.ts","../../../src/api/integrations/chatbot/flowise/dto/flowise.dto.ts","../../../src/api/integrations/event/pusher/pusher.router.ts","../../../src/api/integrations/event/rabbitmq/rabbitmq.router.ts","../../../src/api/integrations/event/sqs/sqs.router.ts","../../../src/api/integrations/event/webhook/webhook.router.ts","../../../src/api/integrations/event/websocket/websocket.router.ts","../../../src/api/integrations/event/event.router.ts","../../../src/api/integrations/storage/s3/dto/media.dto.ts","../../../src/api/integrations/storage/s3/validate/s3.schema.ts","../../../src/api/integrations/storage/s3/routes/s3.router.ts","../../../src/api/integrations/storage/storage.router.ts","../../../src/api/routes/index.router.ts","../../../src/api/dto/call.dto.ts","../../../src/api/routes/call.router.ts","../../../src/api/routes/chat.router.ts","../../../src/api/dto/group.dto.ts","../../../src/api/routes/group.router.ts","../../../src/api/routes/instance.router.ts","../../../src/api/dto/label.dto.ts","../../../src/api/routes/label.router.ts","../../../src/api/dto/sendMessage.dto.ts","../../../src/api/routes/sendMessage.router.ts","../../../src/api/dto/settings.dto.ts","../../../src/api/routes/settings.router.ts","../../../src/api/dto/template.dto.ts","../../../src/api/routes/template.router.ts","../../../src/api/routes/view.router.ts","../../../src/exceptions/400.exception.ts","../../../src/exceptions/401.exception.ts","../../../src/exceptions/403.exception.ts","../../../src/exceptions/404.exception.ts","../../../src/exceptions/500.exception.ts","../../../src/api/dto/proxy.dto.ts","../../../src/api/routes/proxy.router.ts"],"sourcesContent":["import 'express-async-errors';\n\nimport { GetParticipant, GroupInvite } from '@api/dto/group.dto';\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { Logger } from '@config/logger.config';\nimport { BadRequestException } from '@exceptions';\nimport { Request } from 'express';\nimport { JSONSchema7 } from 'json-schema';\nimport { validate } from 'jsonschema';\n\ntype DataValidate<T> = {\n  request: Request;\n  schema: JSONSchema7;\n  ClassRef: any;\n  execute: (instance: InstanceDto, data: T) => Promise<any>;\n};\n\nconst logger = new Logger('Validate');\n\nexport abstract class RouterBroker {\n  constructor() {}\n  public routerPath(path: string, param = true) {\n    let route = '/' + path;\n    param ? (route += '/:instanceName') : null;\n\n    return route;\n  }\n\n  public async dataValidate<T>(args: DataValidate<T>) {\n    const { request, schema, ClassRef, execute } = args;\n\n    const ref = new ClassRef();\n    const body = request.body;\n    const instance = request.params as unknown as InstanceDto;\n\n    if (request?.query && Object.keys(request.query).length > 0) {\n      Object.assign(instance, request.query);\n    }\n\n    if (request.originalUrl.includes('/instance/create')) {\n      Object.assign(instance, body);\n    }\n\n    Object.assign(ref, body);\n\n    const v = schema ? validate(ref, schema) : { valid: true, errors: [] };\n\n    if (!v.valid) {\n      const message: any[] = v.errors.map(({ stack, schema }) => {\n        let message: string;\n        if (schema['description']) {\n          message = schema['description'];\n        } else {\n          message = stack.replace('instance.', '');\n        }\n        return message;\n      });\n      logger.error(message);\n      throw new BadRequestException(message);\n    }\n\n    return await execute(instance, ref);\n  }\n\n  public async groupNoValidate<T>(args: DataValidate<T>) {\n    const { request, ClassRef, schema, execute } = args;\n\n    const instance = request.params as unknown as InstanceDto;\n\n    const ref = new ClassRef();\n\n    Object.assign(ref, request.body);\n\n    const v = validate(ref, schema);\n\n    if (!v.valid) {\n      const message: any[] = v.errors.map(({ property, stack, schema }) => {\n        let message: string;\n        if (schema['description']) {\n          message = schema['description'];\n        } else {\n          message = stack.replace('instance.', '');\n        }\n        return {\n          property: property.replace('instance.', ''),\n          message,\n        };\n      });\n      logger.error([...message]);\n      throw new BadRequestException(...message);\n    }\n\n    return await execute(instance, ref);\n  }\n\n  public async groupValidate<T>(args: DataValidate<T>) {\n    const { request, ClassRef, schema, execute } = args;\n\n    const instance = request.params as unknown as InstanceDto;\n    const body = request.body;\n\n    let groupJid = body?.groupJid;\n\n    if (!groupJid) {\n      if (request.query?.groupJid) {\n        groupJid = request.query.groupJid;\n      } else {\n        throw new BadRequestException('The group id needs to be informed in the query', 'ex: \"groupJid=120362@g.us\"');\n      }\n    }\n\n    if (!groupJid.endsWith('@g.us')) {\n      groupJid = groupJid + '@g.us';\n    }\n\n    Object.assign(body, {\n      groupJid: groupJid,\n    });\n\n    const ref = new ClassRef();\n\n    Object.assign(ref, body);\n\n    const v = validate(ref, schema);\n\n    if (!v.valid) {\n      const message: any[] = v.errors.map(({ property, stack, schema }) => {\n        let message: string;\n        if (schema['description']) {\n          message = schema['description'];\n        } else {\n          message = stack.replace('instance.', '');\n        }\n        return {\n          property: property.replace('instance.', ''),\n          message,\n        };\n      });\n      logger.error([...message]);\n      throw new BadRequestException(...message);\n    }\n\n    return await execute(instance, ref);\n  }\n\n  public async inviteCodeValidate<T>(args: DataValidate<T>) {\n    const { request, ClassRef, schema, execute } = args;\n\n    const inviteCode = request.query as unknown as GroupInvite;\n\n    if (!inviteCode?.inviteCode) {\n      throw new BadRequestException(\n        'The group invite code id needs to be informed in the query',\n        'ex: \"inviteCode=F1EX5QZxO181L3TMVP31gY\" (Obtained from group join link)',\n      );\n    }\n\n    const instance = request.params as unknown as InstanceDto;\n    const body = request.body;\n\n    const ref = new ClassRef();\n\n    Object.assign(body, inviteCode);\n    Object.assign(ref, body);\n\n    const v = validate(ref, schema);\n\n    if (!v.valid) {\n      const message: any[] = v.errors.map(({ property, stack, schema }) => {\n        let message: string;\n        if (schema['description']) {\n          message = schema['description'];\n        } else {\n          message = stack.replace('instance.', '');\n        }\n        return {\n          property: property.replace('instance.', ''),\n          message,\n        };\n      });\n      logger.error([...message]);\n      throw new BadRequestException(...message);\n    }\n\n    return await execute(instance, ref);\n  }\n\n  public async getParticipantsValidate<T>(args: DataValidate<T>) {\n    const { request, ClassRef, schema, execute } = args;\n\n    const getParticipants = request.query as unknown as GetParticipant;\n\n    if (!getParticipants?.getParticipants) {\n      throw new BadRequestException('The getParticipants needs to be informed in the query');\n    }\n\n    const instance = request.params as unknown as InstanceDto;\n    const body = request.body;\n\n    const ref = new ClassRef();\n\n    Object.assign(body, getParticipants);\n    Object.assign(ref, body);\n\n    const v = validate(ref, schema);\n\n    if (!v.valid) {\n      const message: any[] = v.errors.map(({ property, stack, schema }) => {\n        let message: string;\n        if (schema['description']) {\n          message = schema['description'];\n        } else {\n          message = stack.replace('instance.', '');\n        }\n        return {\n          property: property.replace('instance.', ''),\n          message,\n        };\n      });\n      logger.error([...message]);\n      throw new BadRequestException(...message);\n    }\n\n    return await execute(instance, ref);\n  }\n}\n","import dayjs from 'dayjs';\nimport fs from 'fs';\n\nimport { configService, Log } from './env.config';\nconst packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));\n\nconst formatDateLog = (timestamp: number) =>\n  dayjs(timestamp)\n    .toDate()\n    .toString()\n    .replace(/\\sGMT.+/, '');\n\nenum Color {\n  LOG = '\\x1b[32m',\n  INFO = '\\x1b[34m',\n  WARN = '\\x1b[33m',\n  ERROR = '\\x1b[31m',\n  DEBUG = '\\x1b[36m',\n  VERBOSE = '\\x1b[37m',\n  DARK = '\\x1b[30m',\n}\n\nenum Command {\n  RESET = '\\x1b[0m',\n  BRIGHT = '\\x1b[1m',\n  UNDERSCORE = '\\x1b[4m',\n}\n\nenum Level {\n  LOG = Color.LOG + '%s' + Command.RESET,\n  DARK = Color.DARK + '%s' + Command.RESET,\n  INFO = Color.INFO + '%s' + Command.RESET,\n  WARN = Color.WARN + '%s' + Command.RESET,\n  ERROR = Color.ERROR + '%s' + Command.RESET,\n  DEBUG = Color.DEBUG + '%s' + Command.RESET,\n  VERBOSE = Color.VERBOSE + '%s' + Command.RESET,\n}\n\nenum Type {\n  LOG = 'LOG',\n  WARN = 'WARN',\n  INFO = 'INFO',\n  DARK = 'DARK',\n  ERROR = 'ERROR',\n  DEBUG = 'DEBUG',\n  VERBOSE = 'VERBOSE',\n}\n\nenum Background {\n  LOG = '\\x1b[42m',\n  INFO = '\\x1b[44m',\n  WARN = '\\x1b[43m',\n  DARK = '\\x1b[40m',\n  ERROR = '\\x1b[41m',\n  DEBUG = '\\x1b[46m',\n  VERBOSE = '\\x1b[47m',\n}\n\nexport class Logger {\n  private readonly configService = configService;\n  private context: string;\n\n  constructor(context = 'Logger') {\n    this.context = context;\n  }\n\n  private instance = null;\n\n  public setContext(value: string) {\n    this.context = value;\n  }\n\n  public setInstance(value: string) {\n    this.instance = value;\n  }\n\n  private console(value: any, type: Type) {\n    const types: Type[] = [];\n\n    this.configService.get<Log>('LOG').LEVEL.forEach((level) => types.push(Type[level]));\n\n    const typeValue = typeof value;\n    if (types.includes(type)) {\n      if (configService.get<Log>('LOG').COLOR) {\n        console.log(\n          /*Command.UNDERSCORE +*/ Command.BRIGHT + Level[type],\n          '[Evolution API]',\n          Command.BRIGHT + Color[type],\n          this.instance ? `[${this.instance}]` : '',\n          Command.BRIGHT + Color[type],\n          `v${packageJson.version}`,\n          Command.BRIGHT + Color[type],\n          process.pid.toString(),\n          Command.RESET,\n          Command.BRIGHT + Color[type],\n          '-',\n          Command.BRIGHT + Color.VERBOSE,\n          `${formatDateLog(Date.now())}  `,\n          Command.RESET,\n          Color[type] + Background[type] + Command.BRIGHT,\n          `${type} ` + Command.RESET,\n          Color.WARN + Command.BRIGHT,\n          `[${this.context}]` + Command.RESET,\n          Color[type] + Command.BRIGHT,\n          `[${typeValue}]` + Command.RESET,\n          Color[type],\n          typeValue !== 'object' ? value : '',\n          Command.RESET,\n        );\n        typeValue === 'object' ? console.log(/*Level.DARK,*/ value, '\\n') : '';\n      } else {\n        console.log(\n          '[Evolution API]',\n          this.instance ? `[${this.instance}]` : '',\n          process.pid.toString(),\n          '-',\n          `${formatDateLog(Date.now())}  `,\n          `${type} `,\n          `[${this.context}]`,\n          `[${typeValue}]`,\n          value,\n        );\n      }\n    }\n  }\n\n  public log(value: any) {\n    this.console(value, Type.LOG);\n  }\n\n  public info(value: any) {\n    this.console(value, Type.INFO);\n  }\n\n  public warn(value: any) {\n    this.console(value, Type.WARN);\n  }\n\n  public error(value: any) {\n    this.console(value, Type.ERROR);\n  }\n\n  public verbose(value: any) {\n    this.console(value, Type.VERBOSE);\n  }\n\n  public debug(value: any) {\n    this.console(value, Type.DEBUG);\n  }\n\n  public dark(value: any) {\n    this.console(value, Type.DARK);\n  }\n}\n","import { isBooleanString } from 'class-validator';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nexport type HttpServer = {\n  TYPE: 'http' | 'https';\n  PORT: number;\n  URL: string;\n  DISABLE_DOCS: boolean;\n  DISABLE_MANAGER: boolean;\n};\n\nexport type HttpMethods = 'POST' | 'GET' | 'PUT' | 'DELETE';\nexport type Cors = {\n  ORIGIN: string[];\n  METHODS: HttpMethods[];\n  CREDENTIALS: boolean;\n};\n\nexport type LogBaileys = 'fatal' | 'error' | 'warn' | 'info' | 'debug' | 'trace';\n\nexport type LogLevel = 'ERROR' | 'WARN' | 'DEBUG' | 'INFO' | 'LOG' | 'VERBOSE' | 'DARK' | 'WEBHOOKS' | 'WEBSOCKET';\n\nexport type Log = {\n  LEVEL: LogLevel[];\n  COLOR: boolean;\n  BAILEYS: LogBaileys;\n};\n\nexport type ProviderSession = {\n  ENABLED: boolean;\n  HOST: string;\n  PORT: string;\n  PREFIX: string;\n};\n\nexport type SaveData = {\n  INSTANCE: boolean;\n  HISTORIC: boolean;\n  NEW_MESSAGE: boolean;\n  MESSAGE_UPDATE: boolean;\n  CONTACTS: boolean;\n  CHATS: boolean;\n  LABELS: boolean;\n  IS_ON_WHATSAPP: boolean;\n  IS_ON_WHATSAPP_DAYS: number;\n};\n\nexport type DBConnection = {\n  URI: string;\n  CLIENT_NAME: string;\n};\nexport type Database = {\n  CONNECTION: DBConnection;\n  PROVIDER: string;\n  SAVE_DATA: SaveData;\n  DELETE_DATA: DeleteData;\n};\n\nexport type DeleteData = {\n  LOGICAL_MESSAGE_DELETE: boolean;\n};\nexport type EventsRabbitmq = {\n  APPLICATION_STARTUP: boolean;\n  INSTANCE_CREATE: boolean;\n  INSTANCE_DELETE: boolean;\n  QRCODE_UPDATED: boolean;\n  MESSAGES_SET: boolean;\n  MESSAGES_UPSERT: boolean;\n  MESSAGES_EDITED: boolean;\n  MESSAGES_UPDATE: boolean;\n  MESSAGES_DELETE: boolean;\n  SEND_MESSAGE: boolean;\n  CONTACTS_SET: boolean;\n  CONTACTS_UPDATE: boolean;\n  CONTACTS_UPSERT: boolean;\n  PRESENCE_UPDATE: boolean;\n  CHATS_SET: boolean;\n  CHATS_UPDATE: boolean;\n  CHATS_DELETE: boolean;\n  CHATS_UPSERT: boolean;\n  CONNECTION_UPDATE: boolean;\n  LABELS_EDIT: boolean;\n  LABELS_ASSOCIATION: boolean;\n  GROUPS_UPSERT: boolean;\n  GROUP_UPDATE: boolean;\n  GROUP_PARTICIPANTS_UPDATE: boolean;\n  CALL: boolean;\n  TYPEBOT_START: boolean;\n  TYPEBOT_CHANGE_STATUS: boolean;\n};\n\nexport type Rabbitmq = {\n  ENABLED: boolean;\n  URI: string;\n  EXCHANGE_NAME: string;\n  GLOBAL_ENABLED: boolean;\n  EVENTS: EventsRabbitmq;\n  PREFIX_KEY: string;\n};\n\nexport type Sqs = {\n  ENABLED: boolean;\n  ACCESS_KEY_ID: string;\n  SECRET_ACCESS_KEY: string;\n  ACCOUNT_ID: string;\n  REGION: string;\n};\n\nexport type Websocket = {\n  ENABLED: boolean;\n  GLOBAL_EVENTS: boolean;\n};\n\nexport type WaBusiness = {\n  TOKEN_WEBHOOK: string;\n  URL: string;\n  VERSION: string;\n  LANGUAGE: string;\n};\n\nexport type EventsWebhook = {\n  APPLICATION_STARTUP: boolean;\n  INSTANCE_CREATE: boolean;\n  INSTANCE_DELETE: boolean;\n  QRCODE_UPDATED: boolean;\n  MESSAGES_SET: boolean;\n  MESSAGES_UPSERT: boolean;\n  MESSAGES_EDITED: boolean;\n  MESSAGES_UPDATE: boolean;\n  MESSAGES_DELETE: boolean;\n  SEND_MESSAGE: boolean;\n  CONTACTS_SET: boolean;\n  CONTACTS_UPDATE: boolean;\n  CONTACTS_UPSERT: boolean;\n  PRESENCE_UPDATE: boolean;\n  CHATS_SET: boolean;\n  CHATS_UPDATE: boolean;\n  CHATS_DELETE: boolean;\n  CHATS_UPSERT: boolean;\n  CONNECTION_UPDATE: boolean;\n  LABELS_EDIT: boolean;\n  LABELS_ASSOCIATION: boolean;\n  GROUPS_UPSERT: boolean;\n  GROUP_UPDATE: boolean;\n  GROUP_PARTICIPANTS_UPDATE: boolean;\n  CALL: boolean;\n  TYPEBOT_START: boolean;\n  TYPEBOT_CHANGE_STATUS: boolean;\n  ERRORS: boolean;\n  ERRORS_WEBHOOK: string;\n};\n\nexport type EventsPusher = {\n  APPLICATION_STARTUP: boolean;\n  INSTANCE_CREATE: boolean;\n  INSTANCE_DELETE: boolean;\n  QRCODE_UPDATED: boolean;\n  MESSAGES_SET: boolean;\n  MESSAGES_UPSERT: boolean;\n  MESSAGES_EDITED: boolean;\n  MESSAGES_UPDATE: boolean;\n  MESSAGES_DELETE: boolean;\n  SEND_MESSAGE: boolean;\n  CONTACTS_SET: boolean;\n  CONTACTS_UPDATE: boolean;\n  CONTACTS_UPSERT: boolean;\n  PRESENCE_UPDATE: boolean;\n  CHATS_SET: boolean;\n  CHATS_UPDATE: boolean;\n  CHATS_DELETE: boolean;\n  CHATS_UPSERT: boolean;\n  CONNECTION_UPDATE: boolean;\n  LABELS_EDIT: boolean;\n  LABELS_ASSOCIATION: boolean;\n  GROUPS_UPSERT: boolean;\n  GROUP_UPDATE: boolean;\n  GROUP_PARTICIPANTS_UPDATE: boolean;\n  CALL: boolean;\n  TYPEBOT_START: boolean;\n  TYPEBOT_CHANGE_STATUS: boolean;\n};\n\nexport type ApiKey = { KEY: string };\n\nexport type Auth = {\n  API_KEY: ApiKey;\n  EXPOSE_IN_FETCH_INSTANCES: boolean;\n};\n\nexport type DelInstance = number | boolean;\n\nexport type Language = string | 'en';\n\nexport type GlobalWebhook = {\n  URL: string;\n  ENABLED: boolean;\n  WEBHOOK_BY_EVENTS: boolean;\n};\n\nexport type GlobalPusher = {\n  ENABLED: boolean;\n  APP_ID: string;\n  KEY: string;\n  SECRET: string;\n  CLUSTER: string;\n  USE_TLS: boolean;\n};\n\nexport type CacheConfRedis = {\n  ENABLED: boolean;\n  URI: string;\n  PREFIX_KEY: string;\n  TTL: number;\n  SAVE_INSTANCES: boolean;\n};\nexport type CacheConfLocal = {\n  ENABLED: boolean;\n  TTL: number;\n};\nexport type SslConf = { PRIVKEY: string; FULLCHAIN: string };\nexport type Webhook = { GLOBAL?: GlobalWebhook; EVENTS: EventsWebhook };\nexport type Pusher = { ENABLED: boolean; GLOBAL?: GlobalPusher; EVENTS: EventsPusher };\nexport type ConfigSessionPhone = { CLIENT: string; NAME: string; VERSION: string };\nexport type QrCode = { LIMIT: number; COLOR: string };\nexport type Typebot = { ENABLED: boolean; API_VERSION: string; SEND_MEDIA_BASE64: boolean };\nexport type Chatwoot = {\n  ENABLED: boolean;\n  MESSAGE_DELETE: boolean;\n  MESSAGE_READ: boolean;\n  BOT_CONTACT: boolean;\n  IMPORT: {\n    DATABASE: {\n      CONNECTION: {\n        URI: string;\n      };\n    };\n    PLACEHOLDER_MEDIA_MESSAGE: boolean;\n  };\n};\nexport type Openai = { ENABLED: boolean; API_KEY_GLOBAL?: string };\nexport type Dify = { ENABLED: boolean };\n\nexport type S3 = {\n  ACCESS_KEY: string;\n  SECRET_KEY: string;\n  ENDPOINT: string;\n  BUCKET_NAME: string;\n  ENABLE: boolean;\n  PORT?: number;\n  USE_SSL?: boolean;\n  REGION?: string;\n};\n\nexport type CacheConf = { REDIS: CacheConfRedis; LOCAL: CacheConfLocal };\nexport type Production = boolean;\n\nexport interface Env {\n  SERVER: HttpServer;\n  CORS: Cors;\n  SSL_CONF: SslConf;\n  PROVIDER: ProviderSession;\n  DATABASE: Database;\n  RABBITMQ: Rabbitmq;\n  SQS: Sqs;\n  WEBSOCKET: Websocket;\n  WA_BUSINESS: WaBusiness;\n  LOG: Log;\n  DEL_INSTANCE: DelInstance;\n  DEL_TEMP_INSTANCES: boolean;\n  LANGUAGE: Language;\n  WEBHOOK: Webhook;\n  PUSHER: Pusher;\n  CONFIG_SESSION_PHONE: ConfigSessionPhone;\n  QRCODE: QrCode;\n  TYPEBOT: Typebot;\n  CHATWOOT: Chatwoot;\n  OPENAI: Openai;\n  DIFY: Dify;\n  CACHE: CacheConf;\n  S3?: S3;\n  AUTHENTICATION: Auth;\n  PRODUCTION?: Production;\n}\n\nexport type Key = keyof Env;\n\nexport class ConfigService {\n  constructor() {\n    this.loadEnv();\n  }\n\n  private env: Env;\n\n  public get<T = any>(key: Key) {\n    return this.env[key] as T;\n  }\n\n  private loadEnv() {\n    this.env = this.envProcess();\n    this.env.PRODUCTION = process.env?.NODE_ENV === 'PROD';\n    if (process.env?.DOCKER_ENV === 'true') {\n      this.env.SERVER.TYPE = process.env.SERVER_TYPE as 'http' | 'http';\n      this.env.SERVER.PORT = Number.parseInt(process.env.SERVER_PORT) || 8080;\n    }\n  }\n\n  private envProcess(): Env {\n    return {\n      SERVER: {\n        TYPE: (process.env.SERVER_TYPE as 'http' | 'https') || 'http',\n        PORT: Number.parseInt(process.env.SERVER_PORT) || 8080,\n        URL: process.env.SERVER_URL,\n        DISABLE_DOCS: process.env?.SERVER_DISABLE_DOCS === 'true',\n        DISABLE_MANAGER: process.env?.SERVER_DISABLE_MANAGER === 'true',\n      },\n      CORS: {\n        ORIGIN: process.env.CORS_ORIGIN?.split(',') || ['*'],\n        METHODS:\n          (process.env.CORS_METHODS?.split(',') as HttpMethods[]) ||\n          (['POST', 'GET', 'PUT', 'DELETE'] as HttpMethods[]),\n        CREDENTIALS: process.env?.CORS_CREDENTIALS === 'true',\n      },\n      SSL_CONF: {\n        PRIVKEY: process.env?.SSL_CONF_PRIVKEY || '',\n        FULLCHAIN: process.env?.SSL_CONF_FULLCHAIN || '',\n      },\n      PROVIDER: {\n        ENABLED: process.env?.PROVIDER_ENABLED === 'true',\n        HOST: process.env.PROVIDER_HOST,\n        PORT: process.env?.PROVIDER_PORT || '5656',\n        PREFIX: process.env?.PROVIDER_PREFIX || 'evolution',\n      },\n      DATABASE: {\n        CONNECTION: {\n          URI: process.env.DATABASE_CONNECTION_URI || '',\n          CLIENT_NAME: process.env.DATABASE_CONNECTION_CLIENT_NAME || 'evolution',\n        },\n        PROVIDER: process.env.DATABASE_PROVIDER || 'postgresql',\n        SAVE_DATA: {\n          INSTANCE: process.env?.DATABASE_SAVE_DATA_INSTANCE === 'true',\n          NEW_MESSAGE: process.env?.DATABASE_SAVE_DATA_NEW_MESSAGE === 'true',\n          MESSAGE_UPDATE: process.env?.DATABASE_SAVE_MESSAGE_UPDATE === 'true',\n          CONTACTS: process.env?.DATABASE_SAVE_DATA_CONTACTS === 'true',\n          CHATS: process.env?.DATABASE_SAVE_DATA_CHATS === 'true',\n          HISTORIC: process.env?.DATABASE_SAVE_DATA_HISTORIC === 'true',\n          LABELS: process.env?.DATABASE_SAVE_DATA_LABELS === 'true',\n          IS_ON_WHATSAPP: process.env?.DATABASE_SAVE_IS_ON_WHATSAPP === 'true',\n          IS_ON_WHATSAPP_DAYS: Number.parseInt(process.env?.DATABASE_SAVE_IS_ON_WHATSAPP_DAYS ?? '7'),\n        },\n        DELETE_DATA: {\n          LOGICAL_MESSAGE_DELETE: process.env?.DATABASE_DELETE_MESSAGE === 'true',\n        },\n      },\n      RABBITMQ: {\n        ENABLED: process.env?.RABBITMQ_ENABLED === 'true',\n        GLOBAL_ENABLED: process.env?.RABBITMQ_GLOBAL_ENABLED === 'true',\n        PREFIX_KEY: process.env?.RABBITMQ_PREFIX_KEY || 'evolution',\n        EXCHANGE_NAME: process.env?.RABBITMQ_EXCHANGE_NAME || 'evolution_exchange',\n        URI: process.env.RABBITMQ_URI || '',\n        EVENTS: {\n          APPLICATION_STARTUP: process.env?.RABBITMQ_EVENTS_APPLICATION_STARTUP === 'true',\n          INSTANCE_CREATE: process.env?.RABBITMQ_EVENTS_INSTANCE_CREATE === 'true',\n          INSTANCE_DELETE: process.env?.RABBITMQ_EVENTS_INSTANCE_DELETE === 'true',\n          QRCODE_UPDATED: process.env?.RABBITMQ_EVENTS_QRCODE_UPDATED === 'true',\n          MESSAGES_SET: process.env?.RABBITMQ_EVENTS_MESSAGES_SET === 'true',\n          MESSAGES_UPSERT: process.env?.RABBITMQ_EVENTS_MESSAGES_UPSERT === 'true',\n          MESSAGES_EDITED: process.env?.RABBITMQ_EVENTS_MESSAGES_EDITED === 'true',\n          MESSAGES_UPDATE: process.env?.RABBITMQ_EVENTS_MESSAGES_UPDATE === 'true',\n          MESSAGES_DELETE: process.env?.RABBITMQ_EVENTS_MESSAGES_DELETE === 'true',\n          SEND_MESSAGE: process.env?.RABBITMQ_EVENTS_SEND_MESSAGE === 'true',\n          CONTACTS_SET: process.env?.RABBITMQ_EVENTS_CONTACTS_SET === 'true',\n          CONTACTS_UPDATE: process.env?.RABBITMQ_EVENTS_CONTACTS_UPDATE === 'true',\n          CONTACTS_UPSERT: process.env?.RABBITMQ_EVENTS_CONTACTS_UPSERT === 'true',\n          PRESENCE_UPDATE: process.env?.RABBITMQ_EVENTS_PRESENCE_UPDATE === 'true',\n          CHATS_SET: process.env?.RABBITMQ_EVENTS_CHATS_SET === 'true',\n          CHATS_UPDATE: process.env?.RABBITMQ_EVENTS_CHATS_UPDATE === 'true',\n          CHATS_UPSERT: process.env?.RABBITMQ_EVENTS_CHATS_UPSERT === 'true',\n          CHATS_DELETE: process.env?.RABBITMQ_EVENTS_CHATS_DELETE === 'true',\n          CONNECTION_UPDATE: process.env?.RABBITMQ_EVENTS_CONNECTION_UPDATE === 'true',\n          LABELS_EDIT: process.env?.RABBITMQ_EVENTS_LABELS_EDIT === 'true',\n          LABELS_ASSOCIATION: process.env?.RABBITMQ_EVENTS_LABELS_ASSOCIATION === 'true',\n          GROUPS_UPSERT: process.env?.RABBITMQ_EVENTS_GROUPS_UPSERT === 'true',\n          GROUP_UPDATE: process.env?.RABBITMQ_EVENTS_GROUPS_UPDATE === 'true',\n          GROUP_PARTICIPANTS_UPDATE: process.env?.RABBITMQ_EVENTS_GROUP_PARTICIPANTS_UPDATE === 'true',\n          CALL: process.env?.RABBITMQ_EVENTS_CALL === 'true',\n          TYPEBOT_START: process.env?.RABBITMQ_EVENTS_TYPEBOT_START === 'true',\n          TYPEBOT_CHANGE_STATUS: process.env?.RABBITMQ_EVENTS_TYPEBOT_CHANGE_STATUS === 'true',\n        },\n      },\n      SQS: {\n        ENABLED: process.env?.SQS_ENABLED === 'true',\n        ACCESS_KEY_ID: process.env.SQS_ACCESS_KEY_ID || '',\n        SECRET_ACCESS_KEY: process.env.SQS_SECRET_ACCESS_KEY || '',\n        ACCOUNT_ID: process.env.SQS_ACCOUNT_ID || '',\n        REGION: process.env.SQS_REGION || '',\n      },\n      WEBSOCKET: {\n        ENABLED: process.env?.WEBSOCKET_ENABLED === 'true',\n        GLOBAL_EVENTS: process.env?.WEBSOCKET_GLOBAL_EVENTS === 'true',\n      },\n      PUSHER: {\n        ENABLED: process.env?.PUSHER_ENABLED === 'true',\n        GLOBAL: {\n          ENABLED: process.env?.PUSHER_GLOBAL_ENABLED === 'true',\n          APP_ID: process.env?.PUSHER_GLOBAL_APP_ID || '',\n          KEY: process.env?.PUSHER_GLOBAL_KEY || '',\n          SECRET: process.env?.PUSHER_GLOBAL_SECRET || '',\n          CLUSTER: process.env?.PUSHER_GLOBAL_CLUSTER || '',\n          USE_TLS: process.env?.PUSHER_GLOBAL_USE_TLS === 'true',\n        },\n        EVENTS: {\n          APPLICATION_STARTUP: process.env?.PUSHER_EVENTS_APPLICATION_STARTUP === 'true',\n          INSTANCE_CREATE: process.env?.PUSHER_EVENTS_INSTANCE_CREATE === 'true',\n          INSTANCE_DELETE: process.env?.PUSHER_EVENTS_INSTANCE_DELETE === 'true',\n          QRCODE_UPDATED: process.env?.PUSHER_EVENTS_QRCODE_UPDATED === 'true',\n          MESSAGES_SET: process.env?.PUSHER_EVENTS_MESSAGES_SET === 'true',\n          MESSAGES_UPSERT: process.env?.PUSHER_EVENTS_MESSAGES_UPSERT === 'true',\n          MESSAGES_EDITED: process.env?.PUSHER_EVENTS_MESSAGES_EDITED === 'true',\n          MESSAGES_UPDATE: process.env?.PUSHER_EVENTS_MESSAGES_UPDATE === 'true',\n          MESSAGES_DELETE: process.env?.PUSHER_EVENTS_MESSAGES_DELETE === 'true',\n          SEND_MESSAGE: process.env?.PUSHER_EVENTS_SEND_MESSAGE === 'true',\n          CONTACTS_SET: process.env?.PUSHER_EVENTS_CONTACTS_SET === 'true',\n          CONTACTS_UPDATE: process.env?.PUSHER_EVENTS_CONTACTS_UPDATE === 'true',\n          CONTACTS_UPSERT: process.env?.PUSHER_EVENTS_CONTACTS_UPSERT === 'true',\n          PRESENCE_UPDATE: process.env?.PUSHER_EVENTS_PRESENCE_UPDATE === 'true',\n          CHATS_SET: process.env?.PUSHER_EVENTS_CHATS_SET === 'true',\n          CHATS_UPDATE: process.env?.PUSHER_EVENTS_CHATS_UPDATE === 'true',\n          CHATS_UPSERT: process.env?.PUSHER_EVENTS_CHATS_UPSERT === 'true',\n          CHATS_DELETE: process.env?.PUSHER_EVENTS_CHATS_DELETE === 'true',\n          CONNECTION_UPDATE: process.env?.PUSHER_EVENTS_CONNECTION_UPDATE === 'true',\n          LABELS_EDIT: process.env?.PUSHER_EVENTS_LABELS_EDIT === 'true',\n          LABELS_ASSOCIATION: process.env?.PUSHER_EVENTS_LABELS_ASSOCIATION === 'true',\n          GROUPS_UPSERT: process.env?.PUSHER_EVENTS_GROUPS_UPSERT === 'true',\n          GROUP_UPDATE: process.env?.PUSHER_EVENTS_GROUPS_UPDATE === 'true',\n          GROUP_PARTICIPANTS_UPDATE: process.env?.PUSHER_EVENTS_GROUP_PARTICIPANTS_UPDATE === 'true',\n          CALL: process.env?.PUSHER_EVENTS_CALL === 'true',\n          TYPEBOT_START: process.env?.PUSHER_EVENTS_TYPEBOT_START === 'true',\n          TYPEBOT_CHANGE_STATUS: process.env?.PUSHER_EVENTS_TYPEBOT_CHANGE_STATUS === 'true',\n        },\n      },\n      WA_BUSINESS: {\n        TOKEN_WEBHOOK: process.env.WA_BUSINESS_TOKEN_WEBHOOK || 'evolution',\n        URL: process.env.WA_BUSINESS_URL || 'https://graph.facebook.com',\n        VERSION: process.env.WA_BUSINESS_VERSION || 'v18.0',\n        LANGUAGE: process.env.WA_BUSINESS_LANGUAGE || 'en',\n      },\n      LOG: {\n        LEVEL:\n          (process.env?.LOG_LEVEL?.split(',') as LogLevel[]) ||\n          (['ERROR', 'WARN', 'DEBUG', 'INFO', 'LOG', 'VERBOSE', 'DARK', 'WEBHOOKS', 'WEBSOCKET'] as LogLevel[]),\n        COLOR: process.env?.LOG_COLOR === 'true',\n        BAILEYS: (process.env?.LOG_BAILEYS as LogBaileys) || 'error',\n      },\n      DEL_INSTANCE: isBooleanString(process.env?.DEL_INSTANCE)\n        ? process.env.DEL_INSTANCE === 'true'\n        : Number.parseInt(process.env.DEL_INSTANCE) || false,\n      DEL_TEMP_INSTANCES: isBooleanString(process.env?.DEL_TEMP_INSTANCES)\n        ? process.env.DEL_TEMP_INSTANCES === 'true'\n        : true,\n      LANGUAGE: process.env?.LANGUAGE || 'en',\n      WEBHOOK: {\n        GLOBAL: {\n          URL: process.env?.WEBHOOK_GLOBAL_URL || '',\n          ENABLED: process.env?.WEBHOOK_GLOBAL_ENABLED === 'true',\n          WEBHOOK_BY_EVENTS: process.env?.WEBHOOK_GLOBAL_WEBHOOK_BY_EVENTS === 'true',\n        },\n        EVENTS: {\n          APPLICATION_STARTUP: process.env?.WEBHOOK_EVENTS_APPLICATION_STARTUP === 'true',\n          INSTANCE_CREATE: process.env?.WEBHOOK_EVENTS_INSTANCE_CREATE === 'true',\n          INSTANCE_DELETE: process.env?.WEBHOOK_EVENTS_INSTANCE_DELETE === 'true',\n          QRCODE_UPDATED: process.env?.WEBHOOK_EVENTS_QRCODE_UPDATED === 'true',\n          MESSAGES_SET: process.env?.WEBHOOK_EVENTS_MESSAGES_SET === 'true',\n          MESSAGES_UPSERT: process.env?.WEBHOOK_EVENTS_MESSAGES_UPSERT === 'true',\n          MESSAGES_EDITED: process.env?.WEBHOOK_EVENTS_MESSAGES_EDITED === 'true',\n          MESSAGES_UPDATE: process.env?.WEBHOOK_EVENTS_MESSAGES_UPDATE === 'true',\n          MESSAGES_DELETE: process.env?.WEBHOOK_EVENTS_MESSAGES_DELETE === 'true',\n          SEND_MESSAGE: process.env?.WEBHOOK_EVENTS_SEND_MESSAGE === 'true',\n          CONTACTS_SET: process.env?.WEBHOOK_EVENTS_CONTACTS_SET === 'true',\n          CONTACTS_UPDATE: process.env?.WEBHOOK_EVENTS_CONTACTS_UPDATE === 'true',\n          CONTACTS_UPSERT: process.env?.WEBHOOK_EVENTS_CONTACTS_UPSERT === 'true',\n          PRESENCE_UPDATE: process.env?.WEBHOOK_EVENTS_PRESENCE_UPDATE === 'true',\n          CHATS_SET: process.env?.WEBHOOK_EVENTS_CHATS_SET === 'true',\n          CHATS_UPDATE: process.env?.WEBHOOK_EVENTS_CHATS_UPDATE === 'true',\n          CHATS_UPSERT: process.env?.WEBHOOK_EVENTS_CHATS_UPSERT === 'true',\n          CHATS_DELETE: process.env?.WEBHOOK_EVENTS_CHATS_DELETE === 'true',\n          CONNECTION_UPDATE: process.env?.WEBHOOK_EVENTS_CONNECTION_UPDATE === 'true',\n          LABELS_EDIT: process.env?.WEBHOOK_EVENTS_LABELS_EDIT === 'true',\n          LABELS_ASSOCIATION: process.env?.WEBHOOK_EVENTS_LABELS_ASSOCIATION === 'true',\n          GROUPS_UPSERT: process.env?.WEBHOOK_EVENTS_GROUPS_UPSERT === 'true',\n          GROUP_UPDATE: process.env?.WEBHOOK_EVENTS_GROUPS_UPDATE === 'true',\n          GROUP_PARTICIPANTS_UPDATE: process.env?.WEBHOOK_EVENTS_GROUP_PARTICIPANTS_UPDATE === 'true',\n          CALL: process.env?.WEBHOOK_EVENTS_CALL === 'true',\n          TYPEBOT_START: process.env?.WEBHOOK_EVENTS_TYPEBOT_START === 'true',\n          TYPEBOT_CHANGE_STATUS: process.env?.WEBHOOK_EVENTS_TYPEBOT_CHANGE_STATUS === 'true',\n          ERRORS: process.env?.WEBHOOK_EVENTS_ERRORS === 'true',\n          ERRORS_WEBHOOK: process.env?.WEBHOOK_EVENTS_ERRORS_WEBHOOK || '',\n        },\n      },\n      CONFIG_SESSION_PHONE: {\n        CLIENT: process.env?.CONFIG_SESSION_PHONE_CLIENT || 'Evolution API',\n        NAME: process.env?.CONFIG_SESSION_PHONE_NAME || 'Chrome',\n        VERSION: process.env?.CONFIG_SESSION_PHONE_VERSION || null,\n      },\n      QRCODE: {\n        LIMIT: Number.parseInt(process.env.QRCODE_LIMIT) || 30,\n        COLOR: process.env.QRCODE_COLOR || '#198754',\n      },\n      TYPEBOT: {\n        ENABLED: process.env?.TYPEBOT_ENABLED === 'true',\n        API_VERSION: process.env?.TYPEBOT_API_VERSION || 'old',\n        SEND_MEDIA_BASE64: process.env?.TYPEBOT_SEND_MEDIA_BASE64 === 'true',\n      },\n      CHATWOOT: {\n        ENABLED: process.env?.CHATWOOT_ENABLED === 'true',\n        MESSAGE_DELETE: process.env.CHATWOOT_MESSAGE_DELETE === 'true',\n        MESSAGE_READ: process.env.CHATWOOT_MESSAGE_READ === 'true',\n        BOT_CONTACT: !process.env.CHATWOOT_BOT_CONTACT || process.env.CHATWOOT_BOT_CONTACT === 'true',\n        IMPORT: {\n          DATABASE: {\n            CONNECTION: {\n              URI: process.env.CHATWOOT_IMPORT_DATABASE_CONNECTION_URI || '',\n            },\n          },\n          PLACEHOLDER_MEDIA_MESSAGE: process.env?.CHATWOOT_IMPORT_PLACEHOLDER_MEDIA_MESSAGE === 'true',\n        },\n      },\n      OPENAI: {\n        ENABLED: process.env?.OPENAI_ENABLED === 'true',\n        API_KEY_GLOBAL: process.env?.OPENAI_API_KEY_GLOBAL || null,\n      },\n      DIFY: {\n        ENABLED: process.env?.DIFY_ENABLED === 'true',\n      },\n      CACHE: {\n        REDIS: {\n          ENABLED: process.env?.CACHE_REDIS_ENABLED === 'true',\n          URI: process.env?.CACHE_REDIS_URI || '',\n          PREFIX_KEY: process.env?.CACHE_REDIS_PREFIX_KEY || 'evolution-cache',\n          TTL: Number.parseInt(process.env?.CACHE_REDIS_TTL) || 604800,\n          SAVE_INSTANCES: process.env?.CACHE_REDIS_SAVE_INSTANCES === 'true',\n        },\n        LOCAL: {\n          ENABLED: process.env?.CACHE_LOCAL_ENABLED === 'true',\n          TTL: Number.parseInt(process.env?.CACHE_REDIS_TTL) || 86400,\n        },\n      },\n      S3: {\n        ACCESS_KEY: process.env?.S3_ACCESS_KEY,\n        SECRET_KEY: process.env?.S3_SECRET_KEY,\n        ENDPOINT: process.env?.S3_ENDPOINT,\n        BUCKET_NAME: process.env?.S3_BUCKET,\n        ENABLE: process.env?.S3_ENABLED === 'true',\n        PORT: Number.parseInt(process.env?.S3_PORT || '9000'),\n        USE_SSL: process.env?.S3_USE_SSL === 'true',\n        REGION: process.env?.S3_REGION,\n      },\n      AUTHENTICATION: {\n        API_KEY: {\n          KEY: process.env.AUTHENTICATION_API_KEY || 'BQYHJGJHJ',\n        },\n        EXPOSE_IN_FETCH_INSTANCES: process.env?.AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES === 'true',\n      },\n    };\n  }\n}\n\nexport const configService = new ConfigService();\n","import { ICache } from '@api/abstract/abstract.cache';\nimport { CacheConf, CacheConfLocal, ConfigService } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport { BufferJSON } from 'baileys';\nimport NodeCache from 'node-cache';\n\nexport class LocalCache implements ICache {\n  private readonly logger = new Logger('LocalCache');\n  private conf: CacheConfLocal;\n  static localCache = new NodeCache();\n\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly module: string,\n  ) {\n    this.conf = this.configService.get<CacheConf>('CACHE')?.LOCAL;\n  }\n\n  async get(key: string): Promise<any> {\n    return LocalCache.localCache.get(this.buildKey(key));\n  }\n\n  async set(key: string, value: any, ttl?: number) {\n    return LocalCache.localCache.set(this.buildKey(key), value, ttl || this.conf.TTL);\n  }\n\n  async has(key: string) {\n    return LocalCache.localCache.has(this.buildKey(key));\n  }\n\n  async delete(key: string) {\n    return LocalCache.localCache.del(this.buildKey(key));\n  }\n\n  async deleteAll(appendCriteria?: string) {\n    const keys = await this.keys(appendCriteria);\n    if (!keys?.length) {\n      return 0;\n    }\n\n    return LocalCache.localCache.del(keys);\n  }\n\n  async keys(appendCriteria?: string) {\n    const filter = `${this.buildKey('')}${appendCriteria ? `${appendCriteria}:` : ''}`;\n\n    return LocalCache.localCache.keys().filter((key) => key.substring(0, filter.length) === filter);\n  }\n\n  buildKey(key: string) {\n    return `${this.module}:${key}`;\n  }\n\n  async hGet(key: string, field: string) {\n    try {\n      const data = LocalCache.localCache.get(this.buildKey(key)) as Object;\n\n      if (data && field in data) {\n        return JSON.parse(data[field], BufferJSON.reviver);\n      }\n\n      return null;\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async hSet(key: string, field: string, value: any) {\n    try {\n      const json = JSON.stringify(value, BufferJSON.replacer);\n\n      let hash = LocalCache.localCache.get(this.buildKey(key));\n\n      if (!hash) {\n        hash = {};\n      }\n\n      hash[field] = json;\n      LocalCache.localCache.set(this.buildKey(key), hash);\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async hDelete(key: string, field: string) {\n    try {\n      const data = LocalCache.localCache.get(this.buildKey(key)) as Object;\n\n      if (data && field in data) {\n        delete data[field];\n        LocalCache.localCache.set(this.buildKey(key), data);\n        return 1;\n      }\n\n      return 0;\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n}\n","import { ICache } from '@api/abstract/abstract.cache';\nimport { CacheConf, CacheConfRedis, ConfigService } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport { BufferJSON } from 'baileys';\nimport { RedisClientType } from 'redis';\n\nimport { redisClient } from './rediscache.client';\n\nexport class RedisCache implements ICache {\n  private readonly logger = new Logger('RedisCache');\n  private client: RedisClientType;\n  private conf: CacheConfRedis;\n\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly module: string,\n  ) {\n    this.conf = this.configService.get<CacheConf>('CACHE')?.REDIS;\n    this.client = redisClient.getConnection();\n  }\n  async get(key: string): Promise<any> {\n    try {\n      return JSON.parse(await this.client.get(this.buildKey(key)));\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async hGet(key: string, field: string) {\n    try {\n      const data = await this.client.hGet(this.buildKey(key), field);\n\n      if (data) {\n        return JSON.parse(data, BufferJSON.reviver);\n      }\n\n      return null;\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async set(key: string, value: any, ttl?: number) {\n    try {\n      await this.client.setEx(this.buildKey(key), ttl || this.conf?.TTL, JSON.stringify(value));\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async hSet(key: string, field: string, value: any) {\n    try {\n      const json = JSON.stringify(value, BufferJSON.replacer);\n\n      await this.client.hSet(this.buildKey(key), field, json);\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async has(key: string) {\n    try {\n      return (await this.client.exists(this.buildKey(key))) > 0;\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async delete(key: string) {\n    try {\n      return await this.client.del(this.buildKey(key));\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async hDelete(key: string, field: string) {\n    try {\n      return await this.client.hDel(this.buildKey(key), field);\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async deleteAll(appendCriteria?: string) {\n    try {\n      const keys = await this.keys(appendCriteria);\n      if (!keys?.length) {\n        return 0;\n      }\n\n      return await this.client.del(keys);\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async keys(appendCriteria?: string) {\n    try {\n      const match = `${this.buildKey('')}${appendCriteria ? `${appendCriteria}:` : ''}*`;\n      const keys = [];\n      for await (const key of this.client.scanIterator({\n        MATCH: match,\n        COUNT: 100,\n      })) {\n        keys.push(key);\n      }\n\n      return [...new Set(keys)];\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  buildKey(key: string) {\n    return `${this.conf?.PREFIX_KEY}:${this.module}:${key}`;\n  }\n}\n","import { CacheConf, CacheConfRedis, configService } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport { createClient, RedisClientType } from 'redis';\n\nclass Redis {\n  private logger = new Logger('Redis');\n  private client: RedisClientType = null;\n  private conf: CacheConfRedis;\n  private connected = false;\n\n  constructor() {\n    this.conf = configService.get<CacheConf>('CACHE')?.REDIS;\n  }\n\n  getConnection(): RedisClientType {\n    if (this.connected) {\n      return this.client;\n    } else {\n      this.client = createClient({\n        url: this.conf.URI,\n      });\n\n      this.client.on('connect', () => {\n        this.logger.verbose('redis connecting');\n      });\n\n      this.client.on('ready', () => {\n        this.logger.verbose('redis ready');\n        this.connected = true;\n      });\n\n      this.client.on('error', () => {\n        this.logger.error('redis disconnected');\n        this.connected = false;\n      });\n\n      this.client.on('end', () => {\n        this.logger.verbose('redis connection ended');\n        this.connected = false;\n      });\n\n      try {\n        this.client.connect();\n        this.connected = true;\n      } catch (e) {\n        this.connected = false;\n        this.logger.error('redis connect exception caught: ' + e);\n        return null;\n      }\n\n      return this.client;\n    }\n  }\n}\n\nexport const redisClient = new Redis();\n","import { ICache } from '@api/abstract/abstract.cache';\nimport { CacheConf, ConfigService } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\n\nimport { LocalCache } from './localcache';\nimport { RedisCache } from './rediscache';\n\nconst logger = new Logger('CacheEngine');\n\nexport class CacheEngine {\n  private engine: ICache;\n\n  constructor(\n    private readonly configService: ConfigService,\n    module: string,\n  ) {\n    const cacheConf = configService.get<CacheConf>('CACHE');\n\n    if (cacheConf?.REDIS?.ENABLED && cacheConf?.REDIS?.URI !== '') {\n      logger.verbose(`RedisCache initialized for ${module}`);\n      this.engine = new RedisCache(configService, module);\n    } else if (cacheConf?.LOCAL?.ENABLED) {\n      logger.verbose(`LocalCache initialized for ${module}`);\n      this.engine = new LocalCache(configService, module);\n    }\n  }\n\n  public getEngine() {\n    return this.engine;\n  }\n}\n","import EventEmitter2 from 'eventemitter2';\n\nconst maxListeners = parseInt(process.env.EVENT_EMITTER_MAX_LISTENERS, 10) || 50;\n\nexport const eventEmitter = new EventEmitter2({\n  delimiter: '.',\n  newListener: false,\n  ignoreErrors: false,\n  maxListeners: maxListeners,\n});\n","import { OfferCallDto } from '@api/dto/call.dto';\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { WAMonitoringService } from '@api/services/monitor.service';\n\nexport class CallController {\n  constructor(private readonly waMonitor: WAMonitoringService) {}\n\n  public async offerCall({ instanceName }: InstanceDto, data: OfferCallDto) {\n    return await this.waMonitor.waInstances[instanceName].offerCall(data);\n  }\n}\n","import {\n  ArchiveChatDto,\n  BlockUserDto,\n  DeleteMessage,\n  getBase64FromMediaMessageDto,\n  MarkChatUnreadDto,\n  NumberDto,\n  PrivacySettingDto,\n  ProfileNameDto,\n  ProfilePictureDto,\n  ProfileStatusDto,\n  ReadMessageDto,\n  SendPresenceDto,\n  UpdateMessageDto,\n  WhatsAppNumberDto,\n} from '@api/dto/chat.dto';\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { Query } from '@api/repository/repository.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { Contact, Message, MessageUpdate } from '@prisma/client';\n\nexport class ChatController {\n  constructor(private readonly waMonitor: WAMonitoringService) {}\n\n  public async whatsappNumber({ instanceName }: InstanceDto, data: WhatsAppNumberDto) {\n    return await this.waMonitor.waInstances[instanceName].whatsappNumber(data);\n  }\n\n  public async readMessage({ instanceName }: InstanceDto, data: ReadMessageDto) {\n    return await this.waMonitor.waInstances[instanceName].markMessageAsRead(data);\n  }\n\n  public async archiveChat({ instanceName }: InstanceDto, data: ArchiveChatDto) {\n    return await this.waMonitor.waInstances[instanceName].archiveChat(data);\n  }\n\n  public async markChatUnread({ instanceName }: InstanceDto, data: MarkChatUnreadDto) {\n    return await this.waMonitor.waInstances[instanceName].markChatUnread(data);\n  }\n\n  public async deleteMessage({ instanceName }: InstanceDto, data: DeleteMessage) {\n    return await this.waMonitor.waInstances[instanceName].deleteMessage(data);\n  }\n\n  public async fetchProfilePicture({ instanceName }: InstanceDto, data: NumberDto) {\n    return await this.waMonitor.waInstances[instanceName].profilePicture(data.number);\n  }\n\n  public async fetchProfile({ instanceName }: InstanceDto, data: NumberDto) {\n    return await this.waMonitor.waInstances[instanceName].fetchProfile(instanceName, data.number);\n  }\n\n  public async fetchContacts({ instanceName }: InstanceDto, query: Query<Contact>) {\n    return await this.waMonitor.waInstances[instanceName].fetchContacts(query);\n  }\n\n  public async getBase64FromMediaMessage({ instanceName }: InstanceDto, data: getBase64FromMediaMessageDto) {\n    return await this.waMonitor.waInstances[instanceName].getBase64FromMediaMessage(data);\n  }\n\n  public async fetchMessages({ instanceName }: InstanceDto, query: Query<Message>) {\n    return await this.waMonitor.waInstances[instanceName].fetchMessages(query);\n  }\n\n  public async fetchStatusMessage({ instanceName }: InstanceDto, query: Query<MessageUpdate>) {\n    return await this.waMonitor.waInstances[instanceName].fetchStatusMessage(query);\n  }\n\n  public async fetchChats({ instanceName }: InstanceDto, query: Query<Contact>) {\n    return await this.waMonitor.waInstances[instanceName].fetchChats(query);\n  }\n\n  public async sendPresence({ instanceName }: InstanceDto, data: SendPresenceDto) {\n    return await this.waMonitor.waInstances[instanceName].sendPresence(data);\n  }\n\n  public async fetchPrivacySettings({ instanceName }: InstanceDto) {\n    return await this.waMonitor.waInstances[instanceName].fetchPrivacySettings();\n  }\n\n  public async updatePrivacySettings({ instanceName }: InstanceDto, data: PrivacySettingDto) {\n    return await this.waMonitor.waInstances[instanceName].updatePrivacySettings(data);\n  }\n\n  public async fetchBusinessProfile({ instanceName }: InstanceDto, data: ProfilePictureDto) {\n    return await this.waMonitor.waInstances[instanceName].fetchBusinessProfile(data.number);\n  }\n\n  public async updateProfileName({ instanceName }: InstanceDto, data: ProfileNameDto) {\n    return await this.waMonitor.waInstances[instanceName].updateProfileName(data.name);\n  }\n\n  public async updateProfileStatus({ instanceName }: InstanceDto, data: ProfileStatusDto) {\n    return await this.waMonitor.waInstances[instanceName].updateProfileStatus(data.status);\n  }\n\n  public async updateProfilePicture({ instanceName }: InstanceDto, data: ProfilePictureDto) {\n    return await this.waMonitor.waInstances[instanceName].updateProfilePicture(data.picture);\n  }\n\n  public async removeProfilePicture({ instanceName }: InstanceDto) {\n    return await this.waMonitor.waInstances[instanceName].removeProfilePicture();\n  }\n\n  public async updateMessage({ instanceName }: InstanceDto, data: UpdateMessageDto) {\n    return await this.waMonitor.waInstances[instanceName].updateMessage(data);\n  }\n\n  public async blockUser({ instanceName }: InstanceDto, data: BlockUserDto) {\n    return await this.waMonitor.waInstances[instanceName].blockUser(data);\n  }\n}\n","import {\n  AcceptGroupInvite,\n  CreateGroupDto,\n  GetParticipant,\n  GroupDescriptionDto,\n  GroupInvite,\n  GroupJid,\n  GroupPictureDto,\n  GroupSendInvite,\n  GroupSubjectDto,\n  GroupToggleEphemeralDto,\n  GroupUpdateParticipantDto,\n  GroupUpdateSettingDto,\n} from '@api/dto/group.dto';\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { WAMonitoringService } from '@api/services/monitor.service';\n\nexport class GroupController {\n  constructor(private readonly waMonitor: WAMonitoringService) {}\n\n  public async createGroup(instance: InstanceDto, create: CreateGroupDto) {\n    return await this.waMonitor.waInstances[instance.instanceName].createGroup(create);\n  }\n\n  public async updateGroupPicture(instance: InstanceDto, update: GroupPictureDto) {\n    return await this.waMonitor.waInstances[instance.instanceName].updateGroupPicture(update);\n  }\n\n  public async updateGroupSubject(instance: InstanceDto, update: GroupSubjectDto) {\n    return await this.waMonitor.waInstances[instance.instanceName].updateGroupSubject(update);\n  }\n\n  public async updateGroupDescription(instance: InstanceDto, update: GroupDescriptionDto) {\n    return await this.waMonitor.waInstances[instance.instanceName].updateGroupDescription(update);\n  }\n\n  public async findGroupInfo(instance: InstanceDto, groupJid: GroupJid) {\n    return await this.waMonitor.waInstances[instance.instanceName].findGroup(groupJid);\n  }\n\n  public async fetchAllGroups(instance: InstanceDto, getPaticipants: GetParticipant) {\n    return await this.waMonitor.waInstances[instance.instanceName].fetchAllGroups(getPaticipants);\n  }\n\n  public async inviteCode(instance: InstanceDto, groupJid: GroupJid) {\n    return await this.waMonitor.waInstances[instance.instanceName].inviteCode(groupJid);\n  }\n\n  public async inviteInfo(instance: InstanceDto, inviteCode: GroupInvite) {\n    return await this.waMonitor.waInstances[instance.instanceName].inviteInfo(inviteCode);\n  }\n\n  public async sendInvite(instance: InstanceDto, data: GroupSendInvite) {\n    return await this.waMonitor.waInstances[instance.instanceName].sendInvite(data);\n  }\n\n  public async acceptInviteCode(instance: InstanceDto, inviteCode: AcceptGroupInvite) {\n    return await this.waMonitor.waInstances[instance.instanceName].acceptInviteCode(inviteCode);\n  }\n\n  public async revokeInviteCode(instance: InstanceDto, groupJid: GroupJid) {\n    return await this.waMonitor.waInstances[instance.instanceName].revokeInviteCode(groupJid);\n  }\n\n  public async findParticipants(instance: InstanceDto, groupJid: GroupJid) {\n    return await this.waMonitor.waInstances[instance.instanceName].findParticipants(groupJid);\n  }\n\n  public async updateGParticipate(instance: InstanceDto, update: GroupUpdateParticipantDto) {\n    return await this.waMonitor.waInstances[instance.instanceName].updateGParticipant(update);\n  }\n\n  public async updateGSetting(instance: InstanceDto, update: GroupUpdateSettingDto) {\n    return await this.waMonitor.waInstances[instance.instanceName].updateGSetting(update);\n  }\n\n  public async toggleEphemeral(instance: InstanceDto, update: GroupToggleEphemeralDto) {\n    return await this.waMonitor.waInstances[instance.instanceName].toggleEphemeral(update);\n  }\n\n  public async leaveGroup(instance: InstanceDto, groupJid: GroupJid) {\n    return await this.waMonitor.waInstances[instance.instanceName].leaveGroup(groupJid);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-namespace */\nimport { JsonValue } from '@prisma/client/runtime/library';\nimport { AuthenticationState, WAConnectionState } from 'baileys';\n\nexport enum Events {\n  APPLICATION_STARTUP = 'application.startup',\n  INSTANCE_CREATE = 'instance.create',\n  INSTANCE_DELETE = 'instance.delete',\n  QRCODE_UPDATED = 'qrcode.updated',\n  CONNECTION_UPDATE = 'connection.update',\n  STATUS_INSTANCE = 'status.instance',\n  MESSAGES_SET = 'messages.set',\n  MESSAGES_UPSERT = 'messages.upsert',\n  MESSAGES_EDITED = 'messages.edited',\n  MESSAGES_UPDATE = 'messages.update',\n  MESSAGES_DELETE = 'messages.delete',\n  SEND_MESSAGE = 'send.message',\n  CONTACTS_SET = 'contacts.set',\n  CONTACTS_UPSERT = 'contacts.upsert',\n  CONTACTS_UPDATE = 'contacts.update',\n  PRESENCE_UPDATE = 'presence.update',\n  CHATS_SET = 'chats.set',\n  CHATS_UPDATE = 'chats.update',\n  CHATS_UPSERT = 'chats.upsert',\n  CHATS_DELETE = 'chats.delete',\n  GROUPS_UPSERT = 'groups.upsert',\n  GROUPS_UPDATE = 'groups.update',\n  GROUP_PARTICIPANTS_UPDATE = 'group-participants.update',\n  CALL = 'call',\n  TYPEBOT_START = 'typebot.start',\n  TYPEBOT_CHANGE_STATUS = 'typebot.change-status',\n  LABELS_EDIT = 'labels.edit',\n  LABELS_ASSOCIATION = 'labels.association',\n  CREDS_UPDATE = 'creds.update',\n  MESSAGING_HISTORY_SET = 'messaging-history.set',\n  REMOVE_INSTANCE = 'remove.instance',\n  LOGOUT_INSTANCE = 'logout.instance',\n}\n\nexport declare namespace wa {\n  export type QrCode = {\n    count?: number;\n    pairingCode?: string;\n    base64?: string;\n    code?: string;\n  };\n\n  export type Instance = {\n    id?: string;\n    qrcode?: QrCode;\n    pairingCode?: string;\n    authState?: { state: AuthenticationState; saveCreds: () => void };\n    name?: string;\n    wuid?: string;\n    profileName?: string;\n    profilePictureUrl?: string;\n    token?: string;\n    number?: string;\n    integration?: string;\n    businessId?: string;\n  };\n\n  export type LocalChatwoot = {\n    enabled?: boolean;\n    accountId?: string;\n    token?: string;\n    url?: string;\n    nameInbox?: string;\n    signMsg?: boolean;\n    signDelimiter?: string;\n    number?: string;\n    reopenConversation?: boolean;\n    conversationPending?: boolean;\n    mergeBrazilContacts?: boolean;\n    importContacts?: boolean;\n    importMessages?: boolean;\n    daysLimitImportMessages?: number;\n  };\n\n  export type LocalSettings = {\n    rejectCall?: boolean;\n    msgCall?: string;\n    groupsIgnore?: boolean;\n    alwaysOnline?: boolean;\n    readMessages?: boolean;\n    readStatus?: boolean;\n    syncFullHistory?: boolean;\n    wavoipToken?: string;\n  };\n\n  export type LocalEvent = {\n    enabled?: boolean;\n    events?: JsonValue;\n  };\n\n  export type LocalWebHook = LocalEvent & {\n    url?: string;\n    headers?: JsonValue;\n    webhookByEvents?: boolean;\n    webhookBase64?: boolean;\n  };\n\n  export type LocalPusher = LocalEvent & {\n    appId?: string;\n    key?: string;\n    secret?: string;\n    cluster?: string;\n    useTLS?: boolean;\n  };\n\n  type Session = {\n    remoteJid?: string;\n    sessionId?: string;\n    createdAt?: number;\n  };\n\n  export type LocalProxy = {\n    enabled?: boolean;\n    host?: string;\n    port?: string;\n    protocol?: string;\n    username?: string;\n    password?: string;\n  };\n\n  export type StateConnection = {\n    instance?: string;\n    state?: WAConnectionState | 'refused';\n    statusReason?: number;\n  };\n\n  export type StatusMessage = 'ERROR' | 'PENDING' | 'SERVER_ACK' | 'DELIVERY_ACK' | 'READ' | 'DELETED' | 'PLAYED';\n}\n\nexport const TypeMediaMessage = [\n  'imageMessage',\n  'documentMessage',\n  'audioMessage',\n  'videoMessage',\n  'stickerMessage',\n  'ptvMessage',\n];\n\nexport const MessageSubtype = [\n  'ephemeralMessage',\n  'documentWithCaptionMessage',\n  'viewOnceMessage',\n  'viewOnceMessageV2',\n];\n\nexport const Integration = {\n  WHATSAPP_BUSINESS: 'WHATSAPP-BUSINESS',\n  WHATSAPP_BAILEYS: 'WHATSAPP-BAILEYS',\n  EVOLUTION: 'EVOLUTION',\n};\n","import { InstanceDto, SetPresenceDto } from '@api/dto/instance.dto';\nimport { ChatwootService } from '@api/integrations/chatbot/chatwoot/services/chatwoot.service';\nimport { ProviderFiles } from '@api/provider/sessions';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport { channelController, eventManager } from '@api/server.module';\nimport { CacheService } from '@api/services/cache.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { SettingsService } from '@api/services/settings.service';\nimport { Events, Integration, wa } from '@api/types/wa.types';\nimport { Auth, Chatwoot, ConfigService, HttpServer, WaBusiness } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport { BadRequestException, InternalServerErrorException, UnauthorizedException } from '@exceptions';\nimport { delay } from 'baileys';\nimport { isArray, isURL } from 'class-validator';\nimport EventEmitter2 from 'eventemitter2';\nimport { v4 } from 'uuid';\n\nimport { ProxyController } from './proxy.controller';\n\nexport class InstanceController {\n  constructor(\n    private readonly waMonitor: WAMonitoringService,\n    private readonly configService: ConfigService,\n    private readonly prismaRepository: PrismaRepository,\n    private readonly eventEmitter: EventEmitter2,\n    private readonly chatwootService: ChatwootService,\n    private readonly settingsService: SettingsService,\n    private readonly proxyService: ProxyController,\n    private readonly cache: CacheService,\n    private readonly chatwootCache: CacheService,\n    private readonly baileysCache: CacheService,\n    private readonly providerFiles: ProviderFiles,\n  ) {}\n\n  private readonly logger = new Logger('InstanceController');\n\n  public async createInstance(instanceData: InstanceDto) {\n    try {\n      const instance = channelController.init(instanceData, {\n        configService: this.configService,\n        eventEmitter: this.eventEmitter,\n        prismaRepository: this.prismaRepository,\n        cache: this.cache,\n        chatwootCache: this.chatwootCache,\n        baileysCache: this.baileysCache,\n        providerFiles: this.providerFiles,\n      });\n\n      if (!instance) {\n        throw new BadRequestException('Invalid integration');\n      }\n\n      const instanceId = v4();\n\n      instanceData.instanceId = instanceId;\n\n      let hash: string;\n\n      if (!instanceData.token) hash = v4().toUpperCase();\n      else hash = instanceData.token;\n\n      await this.waMonitor.saveInstance({\n        instanceId,\n        integration: instanceData.integration,\n        instanceName: instanceData.instanceName,\n        ownerJid: instanceData.ownerJid,\n        profileName: instanceData.profileName,\n        profilePicUrl: instanceData.profilePicUrl,\n        hash,\n        number: instanceData.number,\n        businessId: instanceData.businessId,\n        status: instanceData.status,\n      });\n\n      instance.setInstance({\n        instanceName: instanceData.instanceName,\n        instanceId,\n        integration: instanceData.integration,\n        token: hash,\n        number: instanceData.number,\n        businessId: instanceData.businessId,\n      });\n\n      this.waMonitor.waInstances[instance.instanceName] = instance;\n      this.waMonitor.delInstanceTime(instance.instanceName);\n\n      // set events\n      await eventManager.setInstance(instance.instanceName, instanceData);\n\n      instance.sendDataWebhook(Events.INSTANCE_CREATE, {\n        instanceName: instanceData.instanceName,\n        instanceId: instanceId,\n      });\n\n      if (instanceData.proxyHost && instanceData.proxyPort && instanceData.proxyProtocol) {\n        const testProxy = await this.proxyService.testProxy({\n          host: instanceData.proxyHost,\n          port: instanceData.proxyPort,\n          protocol: instanceData.proxyProtocol,\n          username: instanceData.proxyUsername,\n          password: instanceData.proxyPassword,\n        });\n        if (!testProxy) {\n          throw new BadRequestException('Invalid proxy');\n        }\n\n        await this.proxyService.createProxy(instance, {\n          enabled: true,\n          host: instanceData.proxyHost,\n          port: instanceData.proxyPort,\n          protocol: instanceData.proxyProtocol,\n          username: instanceData.proxyUsername,\n          password: instanceData.proxyPassword,\n        });\n      }\n\n      const settings: wa.LocalSettings = {\n        rejectCall: instanceData.rejectCall === true,\n        msgCall: instanceData.msgCall || '',\n        groupsIgnore: instanceData.groupsIgnore === true,\n        alwaysOnline: instanceData.alwaysOnline === true,\n        readMessages: instanceData.readMessages === true,\n        readStatus: instanceData.readStatus === true,\n        syncFullHistory: instanceData.syncFullHistory === true,\n        wavoipToken: instanceData.wavoipToken || '',\n      };\n\n      await this.settingsService.create(instance, settings);\n\n      let webhookWaBusiness = null,\n        accessTokenWaBusiness = '';\n\n      if (instanceData.integration === Integration.WHATSAPP_BUSINESS) {\n        if (!instanceData.number) {\n          throw new BadRequestException('number is required');\n        }\n        const urlServer = this.configService.get<HttpServer>('SERVER').URL;\n        webhookWaBusiness = `${urlServer}/webhook/meta`;\n        accessTokenWaBusiness = this.configService.get<WaBusiness>('WA_BUSINESS').TOKEN_WEBHOOK;\n      }\n\n      if (!instanceData.chatwootAccountId || !instanceData.chatwootToken || !instanceData.chatwootUrl) {\n        let getQrcode: wa.QrCode;\n\n        if (instanceData.qrcode && instanceData.integration === Integration.WHATSAPP_BAILEYS) {\n          await instance.connectToWhatsapp(instanceData.number);\n          await delay(5000);\n          getQrcode = instance.qrCode;\n        }\n\n        const result = {\n          instance: {\n            instanceName: instance.instanceName,\n            instanceId: instanceId,\n            integration: instanceData.integration,\n            webhookWaBusiness,\n            accessTokenWaBusiness,\n            status: instance.connectionStatus.state,\n          },\n          hash,\n          webhook: {\n            webhookUrl: instanceData?.webhook?.url,\n            webhookHeaders: instanceData?.webhook?.headers,\n            webhookByEvents: instanceData?.webhook?.byEvents,\n            webhookBase64: instanceData?.webhook?.base64,\n          },\n          websocket: {\n            enabled: instanceData?.websocket?.enabled,\n          },\n          rabbitmq: {\n            enabled: instanceData?.rabbitmq?.enabled,\n          },\n          sqs: {\n            enabled: instanceData?.sqs?.enabled,\n          },\n          settings,\n          qrcode: getQrcode,\n        };\n\n        return result;\n      }\n\n      if (!this.configService.get<Chatwoot>('CHATWOOT').ENABLED)\n        throw new BadRequestException('Chatwoot is not enabled');\n\n      if (!instanceData.chatwootAccountId) {\n        throw new BadRequestException('accountId is required');\n      }\n\n      if (!instanceData.chatwootToken) {\n        throw new BadRequestException('token is required');\n      }\n\n      if (!instanceData.chatwootUrl) {\n        throw new BadRequestException('url is required');\n      }\n\n      if (!isURL(instanceData.chatwootUrl, { require_tld: false })) {\n        throw new BadRequestException('Invalid \"url\" property in chatwoot');\n      }\n\n      if (instanceData.chatwootSignMsg !== true && instanceData.chatwootSignMsg !== false) {\n        throw new BadRequestException('signMsg is required');\n      }\n\n      if (instanceData.chatwootReopenConversation !== true && instanceData.chatwootReopenConversation !== false) {\n        throw new BadRequestException('reopenConversation is required');\n      }\n\n      if (instanceData.chatwootConversationPending !== true && instanceData.chatwootConversationPending !== false) {\n        throw new BadRequestException('conversationPending is required');\n      }\n\n      const urlServer = this.configService.get<HttpServer>('SERVER').URL;\n\n      try {\n        this.chatwootService.create(instance, {\n          enabled: true,\n          accountId: instanceData.chatwootAccountId,\n          token: instanceData.chatwootToken,\n          url: instanceData.chatwootUrl,\n          signMsg: instanceData.chatwootSignMsg || false,\n          nameInbox: instanceData.chatwootNameInbox ?? instance.instanceName.split('-cwId-')[0],\n          number: instanceData.number,\n          reopenConversation: instanceData.chatwootReopenConversation || false,\n          conversationPending: instanceData.chatwootConversationPending || false,\n          importContacts: instanceData.chatwootImportContacts ?? true,\n          mergeBrazilContacts: instanceData.chatwootMergeBrazilContacts ?? false,\n          importMessages: instanceData.chatwootImportMessages ?? true,\n          daysLimitImportMessages: instanceData.chatwootDaysLimitImportMessages ?? 60,\n          organization: instanceData.chatwootOrganization,\n          logo: instanceData.chatwootLogo,\n          autoCreate: instanceData.chatwootAutoCreate !== false,\n        });\n      } catch (error) {\n        this.logger.log(error);\n      }\n\n      return {\n        instance: {\n          instanceName: instance.instanceName,\n          instanceId: instanceId,\n          integration: instanceData.integration,\n          webhookWaBusiness,\n          accessTokenWaBusiness,\n          status: instance.connectionStatus.state,\n        },\n        hash,\n        webhook: {\n          webhookUrl: instanceData?.webhook?.url,\n          webhookHeaders: instanceData?.webhook?.headers,\n          webhookByEvents: instanceData?.webhook?.byEvents,\n          webhookBase64: instanceData?.webhook?.base64,\n        },\n        websocket: {\n          enabled: instanceData?.websocket?.enabled,\n        },\n        rabbitmq: {\n          enabled: instanceData?.rabbitmq?.enabled,\n        },\n        sqs: {\n          enabled: instanceData?.sqs?.enabled,\n        },\n        settings,\n        chatwoot: {\n          enabled: true,\n          accountId: instanceData.chatwootAccountId,\n          token: instanceData.chatwootToken,\n          url: instanceData.chatwootUrl,\n          signMsg: instanceData.chatwootSignMsg || false,\n          reopenConversation: instanceData.chatwootReopenConversation || false,\n          conversationPending: instanceData.chatwootConversationPending || false,\n          mergeBrazilContacts: instanceData.chatwootMergeBrazilContacts ?? false,\n          importContacts: instanceData.chatwootImportContacts ?? true,\n          importMessages: instanceData.chatwootImportMessages ?? true,\n          daysLimitImportMessages: instanceData.chatwootDaysLimitImportMessages || 60,\n          number: instanceData.number,\n          nameInbox: instanceData.chatwootNameInbox ?? instance.instanceName,\n          webhookUrl: `${urlServer}/chatwoot/webhook/${encodeURIComponent(instance.instanceName)}`,\n        },\n      };\n    } catch (error) {\n      this.waMonitor.deleteInstance(instanceData.instanceName);\n      this.logger.error(isArray(error.message) ? error.message[0] : error.message);\n      throw new BadRequestException(isArray(error.message) ? error.message[0] : error.message);\n    }\n  }\n\n  public async connectToWhatsapp({ instanceName, number = null }: InstanceDto) {\n    try {\n      const instance = this.waMonitor.waInstances[instanceName];\n      const state = instance?.connectionStatus?.state;\n\n      if (!state) {\n        throw new BadRequestException('The \"' + instanceName + '\" instance does not exist');\n      }\n\n      if (state == 'open') {\n        return await this.connectionState({ instanceName });\n      }\n\n      if (state == 'connecting') {\n        return instance.qrCode;\n      }\n\n      if (state == 'close') {\n        await instance.connectToWhatsapp(number);\n\n        await delay(2000);\n        return instance.qrCode;\n      }\n\n      return {\n        instance: {\n          instanceName: instanceName,\n          status: state,\n        },\n        qrcode: instance?.qrCode,\n      };\n    } catch (error) {\n      this.logger.error(error);\n      return { error: true, message: error.toString() };\n    }\n  }\n\n  public async restartInstance({ instanceName }: InstanceDto) {\n    try {\n      const instance = this.waMonitor.waInstances[instanceName];\n      const state = instance?.connectionStatus?.state;\n\n      if (!state) {\n        throw new BadRequestException('The \"' + instanceName + '\" instance does not exist');\n      }\n\n      if (state == 'close') {\n        throw new BadRequestException('The \"' + instanceName + '\" instance is not connected');\n      } else if (state == 'open') {\n        if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED) instance.clearCacheChatwoot();\n        this.logger.info('restarting instance' + instanceName);\n\n        instance.client?.ws?.close();\n        instance.client?.end(new Error('restart'));\n        return await this.connectToWhatsapp({ instanceName });\n      } else if (state == 'connecting') {\n        instance.client?.ws?.close();\n        instance.client?.end(new Error('restart'));\n        return await this.connectToWhatsapp({ instanceName });\n      }\n    } catch (error) {\n      this.logger.error(error);\n      return { error: true, message: error.toString() };\n    }\n  }\n\n  public async connectionState({ instanceName }: InstanceDto) {\n    return {\n      instance: {\n        instanceName: instanceName,\n        state: this.waMonitor.waInstances[instanceName]?.connectionStatus?.state,\n      },\n    };\n  }\n\n  public async fetchInstances({ instanceName, instanceId, number }: InstanceDto, key: string) {\n    const env = this.configService.get<Auth>('AUTHENTICATION').API_KEY;\n\n    if (env.KEY !== key) {\n      const instancesByKey = await this.prismaRepository.instance.findMany({\n        where: {\n          token: key,\n          name: instanceName || undefined,\n          id: instanceId || undefined,\n        },\n      });\n\n      if (instancesByKey.length > 0) {\n        const names = instancesByKey.map((instance) => instance.name);\n\n        return this.waMonitor.instanceInfo(names);\n      } else {\n        throw new UnauthorizedException();\n      }\n    }\n\n    if (instanceId || number) {\n      return this.waMonitor.instanceInfoById(instanceId, number);\n    }\n\n    const instanceNames = instanceName ? [instanceName] : null;\n\n    return this.waMonitor.instanceInfo(instanceNames);\n  }\n\n  public async setPresence({ instanceName }: InstanceDto, data: SetPresenceDto) {\n    return await this.waMonitor.waInstances[instanceName].setPresence(data);\n  }\n\n  public async logout({ instanceName }: InstanceDto) {\n    const { instance } = await this.connectionState({ instanceName });\n\n    if (instance.state === 'close') {\n      throw new BadRequestException('The \"' + instanceName + '\" instance is not connected');\n    }\n\n    try {\n      this.waMonitor.waInstances[instanceName]?.logoutInstance();\n\n      return { status: 'SUCCESS', error: false, response: { message: 'Instance logged out' } };\n    } catch (error) {\n      throw new InternalServerErrorException(error.toString());\n    }\n  }\n\n  public async deleteInstance({ instanceName }: InstanceDto) {\n    const { instance } = await this.connectionState({ instanceName });\n    try {\n      const waInstances = this.waMonitor.waInstances[instanceName];\n      if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED) waInstances?.clearCacheChatwoot();\n\n      if (instance.state === 'connecting' || instance.state === 'open') {\n        await this.logout({ instanceName });\n      }\n\n      try {\n        waInstances?.sendDataWebhook(Events.INSTANCE_DELETE, {\n          instanceName,\n          instanceId: waInstances.instanceId,\n        });\n      } catch (error) {\n        this.logger.error(error);\n      }\n\n      this.eventEmitter.emit('remove.instance', instanceName, 'inner');\n      return { status: 'SUCCESS', error: false, response: { message: 'Instance deleted' } };\n    } catch (error) {\n      throw new BadRequestException(error.toString());\n    }\n  }\n}\n","import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import crypto from 'crypto';\nexport default {\n  randomUUID: crypto.randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import { InstanceDto } from '@api/dto/instance.dto';\nimport { HandleLabelDto } from '@api/dto/label.dto';\nimport { WAMonitoringService } from '@api/services/monitor.service';\n\nexport class LabelController {\n  constructor(private readonly waMonitor: WAMonitoringService) {}\n\n  public async fetchLabels({ instanceName }: InstanceDto) {\n    return await this.waMonitor.waInstances[instanceName].fetchLabels();\n  }\n\n  public async handleLabel({ instanceName }: InstanceDto, data: HandleLabelDto) {\n    return await this.waMonitor.waInstances[instanceName].handleLabel(data);\n  }\n}\n","import { HttpsProxyAgent } from 'https-proxy-agent';\n\ntype Proxy = {\n  host: string;\n  password?: string;\n  port: string;\n  protocol: string;\n  username?: string;\n};\n\nexport function makeProxyAgent(proxy: Proxy | string) {\n  if (typeof proxy === 'string') {\n    return new HttpsProxyAgent(proxy);\n  }\n\n  const { host, password, port, protocol, username } = proxy;\n  let proxyUrl = `${protocol}://${host}:${port}`;\n\n  if (username && password) {\n    proxyUrl = `${protocol}://${username}:${password}@${host}:${port}`;\n  }\n  return new HttpsProxyAgent(proxyUrl);\n}\n","import { InstanceDto } from '@api/dto/instance.dto';\nimport { ProxyDto } from '@api/dto/proxy.dto';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { ProxyService } from '@api/services/proxy.service';\nimport { Logger } from '@config/logger.config';\nimport { BadRequestException, NotFoundException } from '@exceptions';\nimport { makeProxyAgent } from '@utils/makeProxyAgent';\nimport axios from 'axios';\n\nconst logger = new Logger('ProxyController');\n\nexport class ProxyController {\n  constructor(\n    private readonly proxyService: ProxyService,\n    private readonly waMonitor: WAMonitoringService,\n  ) {}\n\n  public async createProxy(instance: InstanceDto, data: ProxyDto) {\n    if (!this.waMonitor.waInstances[instance.instanceName]) {\n      throw new NotFoundException(`The \"${instance.instanceName}\" instance does not exist`);\n    }\n\n    if (!data?.enabled) {\n      data.host = '';\n      data.port = '';\n      data.protocol = '';\n      data.username = '';\n      data.password = '';\n    }\n\n    if (data.host) {\n      const testProxy = await this.testProxy(data);\n      if (!testProxy) {\n        throw new BadRequestException('Invalid proxy');\n      }\n    }\n\n    return this.proxyService.create(instance, data);\n  }\n\n  public async findProxy(instance: InstanceDto) {\n    if (!this.waMonitor.waInstances[instance.instanceName]) {\n      throw new NotFoundException(`The \"${instance.instanceName}\" instance does not exist`);\n    }\n\n    return this.proxyService.find(instance);\n  }\n\n  public async testProxy(proxy: ProxyDto) {\n    try {\n      const serverIp = await axios.get('https://icanhazip.com/');\n      const response = await axios.get('https://icanhazip.com/', {\n        httpsAgent: makeProxyAgent(proxy),\n      });\n\n      return response?.data !== serverIp?.data;\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response?.data) {\n        logger.error('testProxy error: ' + error.response.data);\n      } else if (axios.isAxiosError(error)) {\n        logger.error('testProxy error: ');\n      } else {\n        logger.error('testProxy error: ');\n      }\n      return false;\n    }\n  }\n}\n","import { InstanceDto } from '@api/dto/instance.dto';\nimport {\n  SendAudioDto,\n  SendButtonsDto,\n  SendContactDto,\n  SendListDto,\n  SendLocationDto,\n  SendMediaDto,\n  SendPollDto,\n  SendPtvDto,\n  SendReactionDto,\n  SendStatusDto,\n  SendStickerDto,\n  SendTemplateDto,\n  SendTextDto,\n} from '@api/dto/sendMessage.dto';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { BadRequestException } from '@exceptions';\nimport { isBase64, isURL } from 'class-validator';\n\nexport class SendMessageController {\n  constructor(private readonly waMonitor: WAMonitoringService) {}\n\n  public async sendTemplate({ instanceName }: InstanceDto, data: SendTemplateDto) {\n    return await this.waMonitor.waInstances[instanceName].templateMessage(data);\n  }\n\n  public async sendText({ instanceName }: InstanceDto, data: SendTextDto) {\n    return await this.waMonitor.waInstances[instanceName].textMessage(data);\n  }\n\n  public async sendMedia({ instanceName }: InstanceDto, data: SendMediaDto, file?: any) {\n    if (isBase64(data?.media) && !data?.fileName && data?.mediatype === 'document') {\n      throw new BadRequestException('For base64 the file name must be informed.');\n    }\n\n    if (file || isURL(data?.media) || isBase64(data?.media)) {\n      return await this.waMonitor.waInstances[instanceName].mediaMessage(data, file);\n    }\n    throw new BadRequestException('Owned media must be a url or base64');\n  }\n\n  public async sendPtv({ instanceName }: InstanceDto, data: SendPtvDto, file?: any) {\n    if (file || isURL(data?.video) || isBase64(data?.video)) {\n      return await this.waMonitor.waInstances[instanceName].ptvMessage(data, file);\n    }\n    throw new BadRequestException('Owned media must be a url or base64');\n  }\n\n  public async sendSticker({ instanceName }: InstanceDto, data: SendStickerDto, file?: any) {\n    if (file || isURL(data.sticker) || isBase64(data.sticker)) {\n      return await this.waMonitor.waInstances[instanceName].mediaSticker(data, file);\n    }\n    throw new BadRequestException('Owned media must be a url or base64');\n  }\n\n  public async sendWhatsAppAudio({ instanceName }: InstanceDto, data: SendAudioDto, file?: any) {\n    if (file?.buffer || isURL(data.audio) || isBase64(data.audio)) {\n      // Si file existe y tiene buffer, o si es una URL o Base64, continúa\n      return await this.waMonitor.waInstances[instanceName].audioWhatsapp(data, file);\n    } else {\n      console.error('El archivo no tiene buffer o el audio no es una URL o Base64 válida');\n      throw new BadRequestException('Owned media must be a url, base64, or valid file with buffer');\n    }\n  }\n\n  public async sendButtons({ instanceName }: InstanceDto, data: SendButtonsDto) {\n    return await this.waMonitor.waInstances[instanceName].buttonMessage(data);\n  }\n\n  public async sendLocation({ instanceName }: InstanceDto, data: SendLocationDto) {\n    return await this.waMonitor.waInstances[instanceName].locationMessage(data);\n  }\n\n  public async sendList({ instanceName }: InstanceDto, data: SendListDto) {\n    return await this.waMonitor.waInstances[instanceName].listMessage(data);\n  }\n\n  public async sendContact({ instanceName }: InstanceDto, data: SendContactDto) {\n    return await this.waMonitor.waInstances[instanceName].contactMessage(data);\n  }\n\n  public async sendReaction({ instanceName }: InstanceDto, data: SendReactionDto) {\n    if (!data.reaction.match(/[^()\\w\\sà-ú\"-+]+/)) {\n      throw new BadRequestException('\"reaction\" must be an emoji');\n    }\n    return await this.waMonitor.waInstances[instanceName].reactionMessage(data);\n  }\n\n  public async sendPoll({ instanceName }: InstanceDto, data: SendPollDto) {\n    return await this.waMonitor.waInstances[instanceName].pollMessage(data);\n  }\n\n  public async sendStatus({ instanceName }: InstanceDto, data: SendStatusDto, file?: any) {\n    return await this.waMonitor.waInstances[instanceName].statusMessage(data, file);\n  }\n}\n","import { InstanceDto } from '@api/dto/instance.dto';\nimport { SettingsDto } from '@api/dto/settings.dto';\nimport { SettingsService } from '@api/services/settings.service';\n\nexport class SettingsController {\n  constructor(private readonly settingsService: SettingsService) {}\n\n  public async createSettings(instance: InstanceDto, data: SettingsDto) {\n    return this.settingsService.create(instance, data);\n  }\n\n  public async findSettings(instance: InstanceDto) {\n    const settings = this.settingsService.find(instance);\n    return settings;\n  }\n}\n","import { InstanceDto } from '@api/dto/instance.dto';\nimport { TemplateDto } from '@api/dto/template.dto';\nimport { TemplateService } from '@api/services/template.service';\n\nexport class TemplateController {\n  constructor(private readonly templateService: TemplateService) {}\n\n  public async createTemplate(instance: InstanceDto, data: TemplateDto) {\n    return this.templateService.create(instance, data);\n  }\n\n  public async findTemplate(instance: InstanceDto) {\n    return this.templateService.find(instance);\n  }\n}\n","import { ConfigService, S3 } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport { BadRequestException } from '@exceptions';\nimport * as MinIo from 'minio';\nimport { join } from 'path';\nimport { Readable, Transform } from 'stream';\n\nconst logger = new Logger('S3 Service');\n\nconst BUCKET = new ConfigService().get<S3>('S3');\n\ninterface Metadata extends MinIo.ItemBucketMetadata {\n  'Content-Type': string;\n}\n\nconst minioClient = (() => {\n  if (BUCKET?.ENABLE) {\n    return new MinIo.Client({\n      endPoint: BUCKET.ENDPOINT,\n      port: BUCKET.PORT,\n      useSSL: BUCKET.USE_SSL,\n      accessKey: BUCKET.ACCESS_KEY,\n      secretKey: BUCKET.SECRET_KEY,\n      region: BUCKET.REGION,\n    });\n  }\n})();\n\nconst bucketName = process.env.S3_BUCKET;\n\nconst bucketExists = async () => {\n  if (minioClient) {\n    try {\n      const list = await minioClient.listBuckets();\n      return list.find((bucket) => bucket.name === bucketName);\n    } catch (error) {\n      return false;\n    }\n  }\n};\n\nconst setBucketPolicy = async () => {\n  if (minioClient) {\n    const policy = {\n      Version: '2012-10-17',\n      Statement: [\n        {\n          Effect: 'Allow',\n          Principal: '*',\n          Action: ['s3:GetObject'],\n          Resource: [`arn:aws:s3:::${bucketName}/*`],\n        },\n      ],\n    };\n    await minioClient.setBucketPolicy(bucketName, JSON.stringify(policy));\n  }\n};\n\nconst createBucket = async () => {\n  if (minioClient) {\n    try {\n      const exists = await bucketExists();\n      if (!exists) {\n        await minioClient.makeBucket(bucketName);\n      }\n\n      await setBucketPolicy();\n\n      logger.info(`S3 Bucket ${bucketName} - ON`);\n      return true;\n    } catch (error) {\n      logger.error('S3 ERROR:');\n      logger.error(error);\n      return false;\n    }\n  }\n};\n\ncreateBucket();\n\nconst uploadFile = async (fileName: string, file: Buffer | Transform | Readable, size: number, metadata: Metadata) => {\n  if (minioClient) {\n    const objectName = join('evolution-api', fileName);\n    try {\n      metadata['custom-header-application'] = 'evolution-api';\n      return await minioClient.putObject(bucketName, objectName, file, size, metadata);\n    } catch (error) {\n      logger.error(error);\n      return error;\n    }\n  }\n};\n\nconst getObjectUrl = async (fileName: string, expiry?: number) => {\n  if (minioClient) {\n    try {\n      const objectName = join('evolution-api', fileName);\n      if (expiry) {\n        return await minioClient.presignedGetObject(bucketName, objectName, expiry);\n      }\n      return await minioClient.presignedGetObject(bucketName, objectName);\n    } catch (error) {\n      throw new BadRequestException(error?.message);\n    }\n  }\n};\n\nconst uploadTempFile = async (\n  folder: string,\n  fileName: string,\n  file: Buffer | Transform | Readable,\n  size: number,\n  metadata: Metadata,\n) => {\n  if (minioClient) {\n    const objectName = join(folder, fileName);\n    try {\n      metadata['custom-header-application'] = 'evolution-api';\n      return await minioClient.putObject(bucketName, objectName, file, size, metadata);\n    } catch (error) {\n      logger.error(error);\n      return error;\n    }\n  }\n};\n\nconst deleteFile = async (folder: string, fileName: string) => {\n  if (minioClient) {\n    const objectName = join(folder, fileName);\n    try {\n      return await minioClient.removeObject(bucketName, objectName);\n    } catch (error) {\n      logger.error(error);\n      return error;\n    }\n  }\n};\n\nexport { BUCKET, deleteFile, getObjectUrl, uploadFile, uploadTempFile };\n","import { Chatwoot, configService } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport postgresql from 'pg';\n\nconst { Pool } = postgresql;\n\nclass Postgres {\n  private logger = new Logger('Postgres');\n  private pool;\n  private connected = false;\n\n  getConnection(connectionString: string) {\n    if (this.connected) {\n      return this.pool;\n    } else {\n      this.pool = new Pool({\n        connectionString,\n        ssl: {\n          rejectUnauthorized: false,\n        },\n      });\n\n      this.pool.on('error', () => {\n        this.logger.error('postgres disconnected');\n        this.connected = false;\n      });\n\n      try {\n        this.connected = true;\n      } catch (e) {\n        this.connected = false;\n        this.logger.error('postgres connect exception caught: ' + e);\n        return null;\n      }\n\n      return this.pool;\n    }\n  }\n\n  getChatwootConnection() {\n    const uri = configService.get<Chatwoot>('CHATWOOT').IMPORT.DATABASE.CONNECTION.URI;\n\n    return this.getConnection(uri);\n  }\n}\n\nexport const postgresClient = new Postgres();\n","import { InstanceDto } from '@api/dto/instance.dto';\nimport { ChatwootDto } from '@api/integrations/chatbot/chatwoot/dto/chatwoot.dto';\nimport { postgresClient } from '@api/integrations/chatbot/chatwoot/libs/postgres.client';\nimport { ChatwootService } from '@api/integrations/chatbot/chatwoot/services/chatwoot.service';\nimport { Chatwoot, configService } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport { inbox } from '@figuro/chatwoot-sdk';\nimport { Chatwoot as ChatwootModel, Contact, Message } from '@prisma/client';\nimport { proto } from 'baileys';\n\ntype ChatwootUser = {\n  user_type: string;\n  user_id: number;\n};\n\ntype FksChatwoot = {\n  phone_number: string;\n  contact_id: string;\n  conversation_id: string;\n};\n\ntype firstLastTimestamp = {\n  first: number;\n  last: number;\n};\n\ntype IWebMessageInfo = Omit<proto.IWebMessageInfo, 'key'> & Partial<Pick<proto.IWebMessageInfo, 'key'>>;\n\nclass ChatwootImport {\n  private logger = new Logger('ChatwootImport');\n  private repositoryMessagesCache = new Map<string, Set<string>>();\n  private historyMessages = new Map<string, Message[]>();\n  private historyContacts = new Map<string, Contact[]>();\n\n  public getRepositoryMessagesCache(instance: InstanceDto) {\n    return this.repositoryMessagesCache.has(instance.instanceName)\n      ? this.repositoryMessagesCache.get(instance.instanceName)\n      : null;\n  }\n\n  public setRepositoryMessagesCache(instance: InstanceDto, repositoryMessagesCache: Set<string>) {\n    this.repositoryMessagesCache.set(instance.instanceName, repositoryMessagesCache);\n  }\n\n  public deleteRepositoryMessagesCache(instance: InstanceDto) {\n    this.repositoryMessagesCache.delete(instance.instanceName);\n  }\n\n  public addHistoryMessages(instance: InstanceDto, messagesRaw: Message[]) {\n    const actualValue = this.historyMessages.has(instance.instanceName)\n      ? this.historyMessages.get(instance.instanceName)\n      : [];\n    this.historyMessages.set(instance.instanceName, [...actualValue, ...messagesRaw]);\n  }\n\n  public addHistoryContacts(instance: InstanceDto, contactsRaw: Contact[]) {\n    const actualValue = this.historyContacts.has(instance.instanceName)\n      ? this.historyContacts.get(instance.instanceName)\n      : [];\n    this.historyContacts.set(instance.instanceName, actualValue.concat(contactsRaw));\n  }\n\n  public deleteHistoryMessages(instance: InstanceDto) {\n    this.historyMessages.delete(instance.instanceName);\n  }\n\n  public deleteHistoryContacts(instance: InstanceDto) {\n    this.historyContacts.delete(instance.instanceName);\n  }\n\n  public clearAll(instance: InstanceDto) {\n    this.deleteRepositoryMessagesCache(instance);\n    this.deleteHistoryMessages(instance);\n    this.deleteHistoryContacts(instance);\n  }\n\n  public getHistoryMessagesLenght(instance: InstanceDto) {\n    return this.historyMessages.get(instance.instanceName)?.length ?? 0;\n  }\n\n  public async importHistoryContacts(instance: InstanceDto, provider: ChatwootDto) {\n    try {\n      if (this.getHistoryMessagesLenght(instance) > 0) {\n        return;\n      }\n\n      const pgClient = postgresClient.getChatwootConnection();\n\n      let totalContactsImported = 0;\n\n      const contacts = this.historyContacts.get(instance.instanceName) || [];\n      if (contacts.length === 0) {\n        return 0;\n      }\n\n      let contactsChunk: Contact[] = this.sliceIntoChunks(contacts, 3000);\n      while (contactsChunk.length > 0) {\n        const labelSql = `SELECT id FROM labels WHERE title = '${provider.nameInbox}' AND account_id = ${provider.accountId} LIMIT 1`;\n\n        let labelId = (await pgClient.query(labelSql))?.rows[0]?.id;\n\n        if (!labelId) {\n          // creating label in chatwoot db and getting the id\n          const sqlLabel = `INSERT INTO labels (title, color, show_on_sidebar, account_id, created_at, updated_at) VALUES ('${provider.nameInbox}', '#34039B', true, ${provider.accountId}, NOW(), NOW()) RETURNING id`;\n\n          labelId = (await pgClient.query(sqlLabel))?.rows[0]?.id;\n        }\n\n        // inserting contacts in chatwoot db\n        let sqlInsert = `INSERT INTO contacts\n          (name, phone_number, account_id, identifier, created_at, updated_at) VALUES `;\n        const bindInsert = [provider.accountId];\n\n        for (const contact of contactsChunk) {\n          bindInsert.push(contact.pushName);\n          const bindName = `$${bindInsert.length}`;\n\n          bindInsert.push(`+${contact.remoteJid.split('@')[0]}`);\n          const bindPhoneNumber = `$${bindInsert.length}`;\n\n          bindInsert.push(contact.remoteJid);\n          const bindIdentifier = `$${bindInsert.length}`;\n\n          sqlInsert += `(${bindName}, ${bindPhoneNumber}, $1, ${bindIdentifier}, NOW(), NOW()),`;\n        }\n        if (sqlInsert.slice(-1) === ',') {\n          sqlInsert = sqlInsert.slice(0, -1);\n        }\n        sqlInsert += ` ON CONFLICT (identifier, account_id)\n                       DO UPDATE SET\n                        name = EXCLUDED.name,\n                        phone_number = EXCLUDED.phone_number,\n                        identifier = EXCLUDED.identifier`;\n\n        totalContactsImported += (await pgClient.query(sqlInsert, bindInsert))?.rowCount ?? 0;\n\n        const sqlTags = `SELECT id FROM tags WHERE name = '${provider.nameInbox}' LIMIT 1`;\n\n        const tagData = (await pgClient.query(sqlTags))?.rows[0];\n        let tagId = tagData?.id;\n\n        const sqlTag = `INSERT INTO tags (name, taggings_count) VALUES ('${provider.nameInbox}', ${totalContactsImported}) ON CONFLICT (name) DO UPDATE SET taggings_count = tags.taggings_count + ${totalContactsImported} RETURNING id`;\n\n        tagId = (await pgClient.query(sqlTag))?.rows[0]?.id;\n\n        await pgClient.query(sqlTag);\n\n        let sqlInsertLabel = `INSERT INTO taggings (tag_id, taggable_type, taggable_id, context, created_at) VALUES `;\n\n        contactsChunk.forEach((contact) => {\n          const bindTaggableId = `(SELECT id FROM contacts WHERE identifier = '${contact.remoteJid}' AND account_id = ${provider.accountId})`;\n          sqlInsertLabel += `($1, $2, ${bindTaggableId}, $3, NOW()),`;\n        });\n\n        if (sqlInsertLabel.slice(-1) === ',') {\n          sqlInsertLabel = sqlInsertLabel.slice(0, -1);\n        }\n\n        await pgClient.query(sqlInsertLabel, [tagId, 'Contact', 'labels']);\n\n        contactsChunk = this.sliceIntoChunks(contacts, 3000);\n      }\n\n      this.deleteHistoryContacts(instance);\n\n      return totalContactsImported;\n    } catch (error) {\n      this.logger.error(`Error on import history contacts: ${error.toString()}`);\n    }\n  }\n\n  public async getExistingSourceIds(sourceIds: string[]): Promise<Set<string>> {\n    try {\n      const existingSourceIdsSet = new Set<string>();\n\n      if (sourceIds.length === 0) {\n        return existingSourceIdsSet;\n      }\n\n      const formattedSourceIds = sourceIds.map((sourceId) => `WAID:${sourceId.replace('WAID:', '')}`); // Make sure the sourceId is always formatted as WAID:1234567890\n      const query = 'SELECT source_id FROM messages WHERE source_id = ANY($1)';\n      const pgClient = postgresClient.getChatwootConnection();\n      const result = await pgClient.query(query, [formattedSourceIds]);\n\n      for (const row of result.rows) {\n        existingSourceIdsSet.add(row.source_id);\n      }\n\n      return existingSourceIdsSet;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  public async importHistoryMessages(\n    instance: InstanceDto,\n    chatwootService: ChatwootService,\n    inbox: inbox,\n    provider: ChatwootModel,\n  ) {\n    try {\n      const pgClient = postgresClient.getChatwootConnection();\n\n      const chatwootUser = await this.getChatwootUser(provider);\n      if (!chatwootUser) {\n        throw new Error('User not found to import messages.');\n      }\n\n      let totalMessagesImported = 0;\n\n      let messagesOrdered = this.historyMessages.get(instance.instanceName) || [];\n      if (messagesOrdered.length === 0) {\n        return 0;\n      }\n\n      // ordering messages by number and timestamp asc\n      messagesOrdered.sort((a, b) => {\n        const aKey = a.key as {\n          remoteJid: string;\n        };\n\n        const bKey = b.key as {\n          remoteJid: string;\n        };\n\n        const aMessageTimestamp = a.messageTimestamp as any as number;\n        const bMessageTimestamp = b.messageTimestamp as any as number;\n\n        return parseInt(aKey.remoteJid) - parseInt(bKey.remoteJid) || aMessageTimestamp - bMessageTimestamp;\n      });\n\n      const allMessagesMappedByPhoneNumber = this.createMessagesMapByPhoneNumber(messagesOrdered);\n      // Map structure: +552199999999 => { first message timestamp from number, last message timestamp from number}\n      const phoneNumbersWithTimestamp = new Map<string, firstLastTimestamp>();\n      allMessagesMappedByPhoneNumber.forEach((messages: Message[], phoneNumber: string) => {\n        phoneNumbersWithTimestamp.set(phoneNumber, {\n          first: messages[0]?.messageTimestamp as any as number,\n          last: messages[messages.length - 1]?.messageTimestamp as any as number,\n        });\n      });\n\n      const existingSourceIds = await this.getExistingSourceIds(messagesOrdered.map((message: any) => message.key.id));\n      messagesOrdered = messagesOrdered.filter((message: any) => !existingSourceIds.has(message.key.id));\n      // processing messages in batch\n      const batchSize = 4000;\n      let messagesChunk: Message[] = this.sliceIntoChunks(messagesOrdered, batchSize);\n      while (messagesChunk.length > 0) {\n        // Map structure: +552199999999 => Message[]\n        const messagesByPhoneNumber = this.createMessagesMapByPhoneNumber(messagesChunk);\n\n        if (messagesByPhoneNumber.size > 0) {\n          const fksByNumber = await this.selectOrCreateFksFromChatwoot(\n            provider,\n            inbox,\n            phoneNumbersWithTimestamp,\n            messagesByPhoneNumber,\n          );\n\n          // inserting messages in chatwoot db\n          let sqlInsertMsg = `INSERT INTO messages\n            (content, processed_message_content, account_id, inbox_id, conversation_id, message_type, private, content_type,\n            sender_type, sender_id, source_id, created_at, updated_at) VALUES `;\n          const bindInsertMsg = [provider.accountId, inbox.id];\n\n          messagesByPhoneNumber.forEach((messages: any[], phoneNumber: string) => {\n            const fksChatwoot = fksByNumber.get(phoneNumber);\n\n            messages.forEach((message) => {\n              if (!message.message) {\n                return;\n              }\n\n              if (!fksChatwoot?.conversation_id || !fksChatwoot?.contact_id) {\n                return;\n              }\n\n              const contentMessage = this.getContentMessage(chatwootService, message);\n              if (!contentMessage) {\n                return;\n              }\n\n              bindInsertMsg.push(contentMessage);\n              const bindContent = `$${bindInsertMsg.length}`;\n\n              bindInsertMsg.push(fksChatwoot.conversation_id);\n              const bindConversationId = `$${bindInsertMsg.length}`;\n\n              bindInsertMsg.push(message.key.fromMe ? '1' : '0');\n              const bindMessageType = `$${bindInsertMsg.length}`;\n\n              bindInsertMsg.push(message.key.fromMe ? chatwootUser.user_type : 'Contact');\n              const bindSenderType = `$${bindInsertMsg.length}`;\n\n              bindInsertMsg.push(message.key.fromMe ? chatwootUser.user_id : fksChatwoot.contact_id);\n              const bindSenderId = `$${bindInsertMsg.length}`;\n\n              bindInsertMsg.push('WAID:' + message.key.id);\n              const bindSourceId = `$${bindInsertMsg.length}`;\n\n              bindInsertMsg.push(message.messageTimestamp as number);\n              const bindmessageTimestamp = `$${bindInsertMsg.length}`;\n\n              sqlInsertMsg += `(${bindContent}, ${bindContent}, $1, $2, ${bindConversationId}, ${bindMessageType}, FALSE, 0,\n                  ${bindSenderType},${bindSenderId},${bindSourceId}, to_timestamp(${bindmessageTimestamp}), to_timestamp(${bindmessageTimestamp})),`;\n            });\n          });\n          if (bindInsertMsg.length > 2) {\n            if (sqlInsertMsg.slice(-1) === ',') {\n              sqlInsertMsg = sqlInsertMsg.slice(0, -1);\n            }\n            totalMessagesImported += (await pgClient.query(sqlInsertMsg, bindInsertMsg))?.rowCount ?? 0;\n          }\n        }\n        messagesChunk = this.sliceIntoChunks(messagesOrdered, batchSize);\n      }\n\n      this.deleteHistoryMessages(instance);\n      this.deleteRepositoryMessagesCache(instance);\n\n      const providerData: ChatwootDto = {\n        ...provider,\n        ignoreJids: Array.isArray(provider.ignoreJids) ? provider.ignoreJids.map((event) => String(event)) : [],\n      };\n\n      this.importHistoryContacts(instance, providerData);\n\n      return totalMessagesImported;\n    } catch (error) {\n      this.logger.error(`Error on import history messages: ${error.toString()}`);\n\n      this.deleteHistoryMessages(instance);\n      this.deleteRepositoryMessagesCache(instance);\n    }\n  }\n\n  public async selectOrCreateFksFromChatwoot(\n    provider: ChatwootModel,\n    inbox: inbox,\n    phoneNumbersWithTimestamp: Map<string, firstLastTimestamp>,\n    messagesByPhoneNumber: Map<string, Message[]>,\n  ): Promise<Map<string, FksChatwoot>> {\n    const pgClient = postgresClient.getChatwootConnection();\n\n    const bindValues = [provider.accountId, inbox.id];\n    const phoneNumberBind = Array.from(messagesByPhoneNumber.keys())\n      .map((phoneNumber) => {\n        const phoneNumberTimestamp = phoneNumbersWithTimestamp.get(phoneNumber);\n\n        if (phoneNumberTimestamp) {\n          bindValues.push(phoneNumber);\n          let bindStr = `($${bindValues.length},`;\n\n          bindValues.push(phoneNumberTimestamp.first);\n          bindStr += `$${bindValues.length},`;\n\n          bindValues.push(phoneNumberTimestamp.last);\n          return `${bindStr}$${bindValues.length})`;\n        }\n      })\n      .join(',');\n\n    // select (or insert when necessary) data from tables contacts, contact_inboxes, conversations from chatwoot db\n    const sqlFromChatwoot = `WITH\n              phone_number AS (\n                SELECT phone_number, created_at::INTEGER, last_activity_at::INTEGER FROM (\n                  VALUES \n                   ${phoneNumberBind}\n                 ) as t (phone_number, created_at, last_activity_at)\n              ),\n\n              only_new_phone_number AS (\n                SELECT * FROM phone_number\n                WHERE phone_number NOT IN (\n                  SELECT phone_number\n                  FROM contacts\n                    JOIN contact_inboxes ci ON ci.contact_id = contacts.id AND ci.inbox_id = $2\n                    JOIN conversations con ON con.contact_inbox_id = ci.id \n                      AND con.account_id = $1\n                      AND con.inbox_id = $2\n                      AND con.contact_id = contacts.id\n                  WHERE contacts.account_id = $1\n                )\n              ),\n\n              new_contact AS (\n                INSERT INTO contacts (name, phone_number, account_id, identifier, created_at, updated_at)\n                SELECT REPLACE(p.phone_number, '+', ''), p.phone_number, $1, CONCAT(REPLACE(p.phone_number, '+', ''),\n                  '@s.whatsapp.net'), to_timestamp(p.created_at), to_timestamp(p.last_activity_at)\n                FROM only_new_phone_number AS p\n                ON CONFLICT(identifier, account_id) DO UPDATE SET updated_at = EXCLUDED.updated_at\n                RETURNING id, phone_number, created_at, updated_at\n              ),\n\n              new_contact_inbox AS (\n                INSERT INTO contact_inboxes (contact_id, inbox_id, source_id, created_at, updated_at)\n                SELECT new_contact.id, $2, gen_random_uuid(), new_contact.created_at, new_contact.updated_at\n                FROM new_contact \n                RETURNING id, contact_id, created_at, updated_at\n              ),\n\n              new_conversation AS (\n                INSERT INTO conversations (account_id, inbox_id, status, contact_id,\n                  contact_inbox_id, uuid, last_activity_at, created_at, updated_at)\n                SELECT $1, $2, 0, new_contact_inbox.contact_id, new_contact_inbox.id, gen_random_uuid(),\n                  new_contact_inbox.updated_at, new_contact_inbox.created_at, new_contact_inbox.updated_at\n                FROM new_contact_inbox\n                RETURNING id, contact_id\n              )\n\n              SELECT new_contact.phone_number, new_conversation.contact_id, new_conversation.id AS conversation_id\n              FROM new_conversation \n              JOIN new_contact ON new_conversation.contact_id = new_contact.id\n\n              UNION\n\n              SELECT p.phone_number, c.id contact_id, con.id conversation_id\n                FROM phone_number p\n              JOIN contacts c ON c.phone_number = p.phone_number\n              JOIN contact_inboxes ci ON ci.contact_id = c.id AND ci.inbox_id = $2\n              JOIN conversations con ON con.contact_inbox_id = ci.id AND con.account_id = $1\n                AND con.inbox_id = $2 AND con.contact_id = c.id`;\n\n    const fksFromChatwoot = await pgClient.query(sqlFromChatwoot, bindValues);\n\n    return new Map(fksFromChatwoot.rows.map((item: FksChatwoot) => [item.phone_number, item]));\n  }\n\n  public async getChatwootUser(provider: ChatwootModel): Promise<ChatwootUser> {\n    try {\n      const pgClient = postgresClient.getChatwootConnection();\n\n      const sqlUser = `SELECT owner_type AS user_type, owner_id AS user_id\n                         FROM access_tokens\n                       WHERE token = $1`;\n\n      return (await pgClient.query(sqlUser, [provider.token]))?.rows[0] || false;\n    } catch (error) {\n      this.logger.error(`Error on getChatwootUser: ${error.toString()}`);\n    }\n  }\n\n  public createMessagesMapByPhoneNumber(messages: Message[]): Map<string, Message[]> {\n    return messages.reduce((acc: Map<string, Message[]>, message: Message) => {\n      const key = message?.key as {\n        remoteJid: string;\n      };\n      if (!this.isIgnorePhoneNumber(key?.remoteJid)) {\n        const phoneNumber = key?.remoteJid?.split('@')[0];\n        if (phoneNumber) {\n          const phoneNumberPlus = `+${phoneNumber}`;\n          const messages = acc.has(phoneNumberPlus) ? acc.get(phoneNumberPlus) : [];\n          messages.push(message);\n          acc.set(phoneNumberPlus, messages);\n        }\n      }\n\n      return acc;\n    }, new Map());\n  }\n\n  public async getContactsOrderByRecentConversations(\n    inbox: inbox,\n    provider: ChatwootModel,\n    limit = 50,\n  ): Promise<{ id: number; phone_number: string; identifier: string }[]> {\n    try {\n      const pgClient = postgresClient.getChatwootConnection();\n\n      const sql = `SELECT contacts.id, contacts.identifier, contacts.phone_number\n                     FROM conversations\n                   JOIN contacts ON contacts.id = conversations.contact_id\n                   WHERE conversations.account_id = $1\n                     AND inbox_id = $2\n                   ORDER BY conversations.last_activity_at DESC\n                   LIMIT $3`;\n\n      return (await pgClient.query(sql, [provider.accountId, inbox.id, limit]))?.rows;\n    } catch (error) {\n      this.logger.error(`Error on get recent conversations: ${error.toString()}`);\n    }\n  }\n\n  public getContentMessage(chatwootService: ChatwootService, msg: IWebMessageInfo) {\n    const contentMessage = chatwootService.getConversationMessage(msg.message);\n    if (contentMessage) {\n      return contentMessage;\n    }\n\n    if (!configService.get<Chatwoot>('CHATWOOT').IMPORT.PLACEHOLDER_MEDIA_MESSAGE) {\n      return '';\n    }\n\n    const types = {\n      documentMessage: msg.message.documentMessage,\n      documentWithCaptionMessage: msg.message.documentWithCaptionMessage?.message?.documentMessage,\n      imageMessage: msg.message.imageMessage,\n      videoMessage: msg.message.videoMessage,\n      audioMessage: msg.message.audioMessage,\n      stickerMessage: msg.message.stickerMessage,\n      templateMessage: msg.message.templateMessage?.hydratedTemplate?.hydratedContentText,\n    };\n    const typeKey = Object.keys(types).find((key) => types[key] !== undefined);\n\n    switch (typeKey) {\n      case 'documentMessage':\n        return `_<File: ${msg.message.documentMessage.fileName}${\n          msg.message.documentMessage.caption ? ` ${msg.message.documentMessage.caption}` : ''\n        }>_`;\n\n      case 'documentWithCaptionMessage':\n        return `_<File: ${msg.message.documentWithCaptionMessage.message.documentMessage.fileName}${\n          msg.message.documentWithCaptionMessage.message.documentMessage.caption\n            ? ` ${msg.message.documentWithCaptionMessage.message.documentMessage.caption}`\n            : ''\n        }>_`;\n\n      case 'templateMessage':\n        return msg.message.templateMessage.hydratedTemplate.hydratedTitleText\n          ? `*${msg.message.templateMessage.hydratedTemplate.hydratedTitleText}*\\\\n`\n          : '' + msg.message.templateMessage.hydratedTemplate.hydratedContentText;\n\n      case 'imageMessage':\n        return '_<Image Message>_';\n\n      case 'videoMessage':\n        return '_<Video Message>_';\n\n      case 'audioMessage':\n        return '_<Audio Message>_';\n\n      case 'stickerMessage':\n        return '_<Sticker Message>_';\n\n      default:\n        return '';\n    }\n  }\n\n  public sliceIntoChunks(arr: any[], chunkSize: number) {\n    return arr.splice(0, chunkSize);\n  }\n\n  public isGroup(remoteJid: string) {\n    return remoteJid.includes('@g.us');\n  }\n\n  public isIgnorePhoneNumber(remoteJid: string) {\n    return this.isGroup(remoteJid) || remoteJid === 'status@broadcast' || remoteJid === '0@s.whatsapp.net';\n  }\n\n  public updateMessageSourceID(messageId: string | number, sourceId: string) {\n    const pgClient = postgresClient.getChatwootConnection();\n\n    const sql = `UPDATE messages SET source_id = $1, status = 0, created_at = NOW(), updated_at = NOW() WHERE id = $2;`;\n\n    return pgClient.query(sql, [`WAID:${sourceId}`, messageId]);\n  }\n}\n\nexport const chatwootImport = new ChatwootImport();\n","import { InstanceDto } from '@api/dto/instance.dto';\nimport { Options, Quoted, SendAudioDto, SendMediaDto, SendTextDto } from '@api/dto/sendMessage.dto';\nimport { ChatwootDto } from '@api/integrations/chatbot/chatwoot/dto/chatwoot.dto';\nimport { postgresClient } from '@api/integrations/chatbot/chatwoot/libs/postgres.client';\nimport { chatwootImport } from '@api/integrations/chatbot/chatwoot/utils/chatwoot-import-helper';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport { CacheService } from '@api/services/cache.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { Events } from '@api/types/wa.types';\nimport { Chatwoot, ConfigService, Database, HttpServer } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport ChatwootClient, {\n  ChatwootAPIConfig,\n  contact,\n  contact_inboxes,\n  conversation,\n  conversation_show,\n  generic_id,\n  inbox,\n} from '@figuro/chatwoot-sdk';\nimport { request as chatwootRequest } from '@figuro/chatwoot-sdk/dist/core/request';\nimport { Chatwoot as ChatwootModel, Contact as ContactModel, Message as MessageModel } from '@prisma/client';\nimport i18next from '@utils/i18n';\nimport { sendTelemetry } from '@utils/sendTelemetry';\nimport axios from 'axios';\nimport { proto } from 'baileys';\nimport dayjs from 'dayjs';\nimport FormData from 'form-data';\nimport Jimp from 'jimp';\nimport Long from 'long';\nimport mimeTypes from 'mime-types';\nimport path from 'path';\nimport { Readable } from 'stream';\n\ninterface ChatwootMessage {\n  messageId?: number;\n  inboxId?: number;\n  conversationId?: number;\n  contactInboxSourceId?: string;\n  isRead?: boolean;\n}\n\nexport class ChatwootService {\n  private readonly logger = new Logger('ChatwootService');\n\n  private provider: any;\n\n  constructor(\n    private readonly waMonitor: WAMonitoringService,\n    private readonly configService: ConfigService,\n    private readonly prismaRepository: PrismaRepository,\n    private readonly cache: CacheService,\n  ) {}\n\n  private pgClient = postgresClient.getChatwootConnection();\n\n  private async getProvider(instance: InstanceDto): Promise<ChatwootModel | null> {\n    const cacheKey = `${instance.instanceName}:getProvider`;\n    if (await this.cache.has(cacheKey)) {\n      const provider = (await this.cache.get(cacheKey)) as ChatwootModel;\n\n      return provider;\n    }\n\n    const provider = await this.waMonitor.waInstances[instance.instanceName]?.findChatwoot();\n\n    if (!provider) {\n      this.logger.warn('provider not found');\n      return null;\n    }\n\n    this.cache.set(cacheKey, provider);\n\n    return provider;\n  }\n\n  private async clientCw(instance: InstanceDto) {\n    const provider = await this.getProvider(instance);\n\n    if (!provider) {\n      this.logger.error('provider not found');\n      return null;\n    }\n\n    this.provider = provider;\n\n    const client = new ChatwootClient({\n      config: this.getClientCwConfig(),\n    });\n\n    return client;\n  }\n\n  public getClientCwConfig(): ChatwootAPIConfig & { nameInbox: string; mergeBrazilContacts: boolean } {\n    return {\n      basePath: this.provider.url,\n      with_credentials: true,\n      credentials: 'include',\n      token: this.provider.token,\n      nameInbox: this.provider.nameInbox,\n      mergeBrazilContacts: this.provider.mergeBrazilContacts,\n    };\n  }\n\n  public getCache() {\n    return this.cache;\n  }\n\n  public async create(instance: InstanceDto, data: ChatwootDto) {\n    await this.waMonitor.waInstances[instance.instanceName].setChatwoot(data);\n\n    if (data.autoCreate) {\n      this.logger.log('Auto create chatwoot instance');\n      const urlServer = this.configService.get<HttpServer>('SERVER').URL;\n\n      await this.initInstanceChatwoot(\n        instance,\n        data.nameInbox ?? instance.instanceName.split('-cwId-')[0],\n        `${urlServer}/chatwoot/webhook/${encodeURIComponent(instance.instanceName)}`,\n        true,\n        data.number,\n        data.organization,\n        data.logo,\n      );\n    }\n    return data;\n  }\n\n  public async find(instance: InstanceDto): Promise<ChatwootDto> {\n    try {\n      return await this.waMonitor.waInstances[instance.instanceName].findChatwoot();\n    } catch (error) {\n      this.logger.error('chatwoot not found');\n      return { enabled: null, url: '' };\n    }\n  }\n\n  public async getContact(instance: InstanceDto, id: number) {\n    const client = await this.clientCw(instance);\n\n    if (!client) {\n      this.logger.warn('client not found');\n      return null;\n    }\n\n    if (!id) {\n      this.logger.warn('id is required');\n      return null;\n    }\n\n    const contact = await client.contact.getContactable({\n      accountId: this.provider.accountId,\n      id,\n    });\n\n    if (!contact) {\n      this.logger.warn('contact not found');\n      return null;\n    }\n\n    return contact;\n  }\n\n  public async initInstanceChatwoot(\n    instance: InstanceDto,\n    inboxName: string,\n    webhookUrl: string,\n    qrcode: boolean,\n    number: string,\n    organization?: string,\n    logo?: string,\n  ) {\n    const client = await this.clientCw(instance);\n\n    if (!client) {\n      this.logger.warn('client not found');\n      return null;\n    }\n\n    const findInbox: any = await client.inboxes.list({\n      accountId: this.provider.accountId,\n    });\n\n    const checkDuplicate = findInbox.payload.map((inbox) => inbox.name).includes(inboxName);\n\n    let inboxId: number;\n\n    this.logger.log('Creating chatwoot inbox');\n    if (!checkDuplicate) {\n      const data = {\n        type: 'api',\n        webhook_url: webhookUrl,\n      };\n\n      const inbox = await client.inboxes.create({\n        accountId: this.provider.accountId,\n        data: {\n          name: inboxName,\n          channel: data as any,\n        },\n      });\n\n      if (!inbox) {\n        this.logger.warn('inbox not found');\n        return null;\n      }\n\n      inboxId = inbox.id;\n    } else {\n      const inbox = findInbox.payload.find((inbox) => inbox.name === inboxName);\n\n      if (!inbox) {\n        this.logger.warn('inbox not found');\n        return null;\n      }\n\n      inboxId = inbox.id;\n    }\n    this.logger.log(`Inbox created - inboxId: ${inboxId}`);\n\n    if (!this.configService.get<Chatwoot>('CHATWOOT').BOT_CONTACT) {\n      this.logger.log('Chatwoot bot contact is disabled');\n\n      return true;\n    }\n\n    this.logger.log('Creating chatwoot bot contact');\n    const contact =\n      (await this.findContact(instance, '123456')) ||\n      ((await this.createContact(\n        instance,\n        '123456',\n        inboxId,\n        false,\n        organization ? organization : 'EvolutionAPI',\n        logo ? logo : 'https://evolution-api.com/files/evolution-api-favicon.png',\n      )) as any);\n\n    if (!contact) {\n      this.logger.warn('contact not found');\n      return null;\n    }\n\n    const contactId = contact.id || contact.payload.contact.id;\n    this.logger.log(`Contact created - contactId: ${contactId}`);\n\n    if (qrcode) {\n      this.logger.log('QR code enabled');\n      const data = {\n        contact_id: contactId.toString(),\n        inbox_id: inboxId.toString(),\n      };\n\n      const conversation = await client.conversations.create({\n        accountId: this.provider.accountId,\n        data,\n      });\n\n      if (!conversation) {\n        this.logger.warn('conversation not found');\n        return null;\n      }\n\n      let contentMsg = 'init';\n\n      if (number) {\n        contentMsg = `init:${number}`;\n      }\n\n      const message = await client.messages.create({\n        accountId: this.provider.accountId,\n        conversationId: conversation.id,\n        data: {\n          content: contentMsg,\n          message_type: 'outgoing',\n        },\n      });\n\n      if (!message) {\n        this.logger.warn('conversation not found');\n        return null;\n      }\n      this.logger.log('Init message sent');\n    }\n\n    return true;\n  }\n\n  public async createContact(\n    instance: InstanceDto,\n    phoneNumber: string,\n    inboxId: number,\n    isGroup: boolean,\n    name?: string,\n    avatar_url?: string,\n    jid?: string,\n  ) {\n    const client = await this.clientCw(instance);\n\n    if (!client) {\n      this.logger.warn('client not found');\n      return null;\n    }\n\n    let data: any = {};\n    if (!isGroup) {\n      data = {\n        inbox_id: inboxId,\n        name: name || phoneNumber,\n        identifier: jid,\n        avatar_url: avatar_url,\n      };\n\n      if ((jid && jid.includes('@')) || !jid) {\n        data['phone_number'] = `+${phoneNumber}`;\n      }\n    } else {\n      data = {\n        inbox_id: inboxId,\n        name: name || phoneNumber,\n        identifier: phoneNumber,\n        avatar_url: avatar_url,\n      };\n    }\n\n    const contact = await client.contacts.create({\n      accountId: this.provider.accountId,\n      data,\n    });\n\n    if (!contact) {\n      this.logger.warn('contact not found');\n      return null;\n    }\n\n    const findContact = await this.findContact(instance, phoneNumber);\n\n    const contactId = findContact?.id;\n\n    await this.addLabelToContact(this.provider.nameInbox, contactId);\n\n    return contact;\n  }\n\n  public async updateContact(instance: InstanceDto, id: number, data: any) {\n    const client = await this.clientCw(instance);\n\n    if (!client) {\n      this.logger.warn('client not found');\n      return null;\n    }\n\n    if (!id) {\n      this.logger.warn('id is required');\n      return null;\n    }\n\n    try {\n      const contact = await client.contacts.update({\n        accountId: this.provider.accountId,\n        id,\n        data,\n      });\n\n      return contact;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  public async addLabelToContact(nameInbox: string, contactId: number) {\n    try {\n      const uri = this.configService.get<Chatwoot>('CHATWOOT').IMPORT.DATABASE.CONNECTION.URI;\n\n      if (!uri) return false;\n\n      const sqlTags = `SELECT id, taggings_count FROM tags WHERE name = $1 LIMIT 1`;\n      const tagData = (await this.pgClient.query(sqlTags, [nameInbox]))?.rows[0];\n      let tagId = tagData?.id;\n      const taggingsCount = tagData?.taggings_count || 0;\n\n      const sqlTag = `INSERT INTO tags (name, taggings_count) \n                      VALUES ($1, $2) \n                      ON CONFLICT (name) \n                      DO UPDATE SET taggings_count = tags.taggings_count + 1 \n                      RETURNING id`;\n\n      tagId = (await this.pgClient.query(sqlTag, [nameInbox, taggingsCount + 1]))?.rows[0]?.id;\n\n      const sqlCheckTagging = `SELECT 1 FROM taggings \n                               WHERE tag_id = $1 AND taggable_type = 'Contact' AND taggable_id = $2 AND context = 'labels' LIMIT 1`;\n\n      const taggingExists = (await this.pgClient.query(sqlCheckTagging, [tagId, contactId]))?.rowCount > 0;\n\n      if (!taggingExists) {\n        const sqlInsertLabel = `INSERT INTO taggings (tag_id, taggable_type, taggable_id, context, created_at) \n                                VALUES ($1, 'Contact', $2, 'labels', NOW())`;\n\n        await this.pgClient.query(sqlInsertLabel, [tagId, contactId]);\n      }\n\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  public async findContact(instance: InstanceDto, phoneNumber: string) {\n    const client = await this.clientCw(instance);\n\n    if (!client) {\n      this.logger.warn('client not found');\n      return null;\n    }\n\n    let query: any;\n    const isGroup = phoneNumber.includes('@g.us');\n\n    if (!isGroup) {\n      query = `+${phoneNumber}`;\n    } else {\n      query = phoneNumber;\n    }\n\n    let contact: any;\n\n    if (isGroup) {\n      contact = await client.contacts.search({\n        accountId: this.provider.accountId,\n        q: query,\n      });\n    } else {\n      contact = await chatwootRequest(this.getClientCwConfig(), {\n        method: 'POST',\n        url: `/api/v1/accounts/${this.provider.accountId}/contacts/filter`,\n        body: {\n          payload: this.getFilterPayload(query),\n        },\n      });\n    }\n\n    if (!contact && contact?.payload?.length === 0) {\n      this.logger.warn('contact not found');\n      return null;\n    }\n\n    if (!isGroup) {\n      return contact.payload.length > 1 ? this.findContactInContactList(contact.payload, query) : contact.payload[0];\n    } else {\n      return contact.payload.find((contact) => contact.identifier === query);\n    }\n  }\n\n  private async mergeBrazilianContacts(contacts: any[]) {\n    try {\n      const contact = await chatwootRequest(this.getClientCwConfig(), {\n        method: 'POST',\n        url: `/api/v1/accounts/${this.provider.accountId}/actions/contact_merge`,\n        body: {\n          base_contact_id: contacts.find((contact) => contact.phone_number.length === 14)?.id,\n          mergee_contact_id: contacts.find((contact) => contact.phone_number.length === 13)?.id,\n        },\n      });\n\n      return contact;\n    } catch {\n      this.logger.error('Error merging contacts');\n      return null;\n    }\n  }\n\n  private findContactInContactList(contacts: any[], query: string) {\n    const phoneNumbers = this.getNumbers(query);\n    const searchableFields = this.getSearchableFields();\n\n    // eslint-disable-next-line prettier/prettier\n    if (contacts.length === 2 && this.getClientCwConfig().mergeBrazilContacts && query.startsWith('+55')) {\n      const contact = this.mergeBrazilianContacts(contacts);\n      if (contact) {\n        return contact;\n      }\n    }\n\n    const phone = phoneNumbers.reduce(\n      (savedNumber, number) => (number.length > savedNumber.length ? number : savedNumber),\n      '',\n    );\n\n    const contact_with9 = contacts.find((contact) => contact.phone_number === phone);\n    if (contact_with9) {\n      return contact_with9;\n    }\n\n    for (const contact of contacts) {\n      for (const field of searchableFields) {\n        if (contact[field] && phoneNumbers.includes(contact[field])) {\n          return contact;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  private getNumbers(query: string) {\n    const numbers = [];\n    numbers.push(query);\n\n    if (query.startsWith('+55') && query.length === 14) {\n      const withoutNine = query.slice(0, 5) + query.slice(6);\n      numbers.push(withoutNine);\n    } else if (query.startsWith('+55') && query.length === 13) {\n      const withNine = query.slice(0, 5) + '9' + query.slice(5);\n      numbers.push(withNine);\n    }\n\n    return numbers;\n  }\n\n  private getSearchableFields() {\n    return ['phone_number'];\n  }\n\n  private getFilterPayload(query: string) {\n    const filterPayload = [];\n\n    const numbers = this.getNumbers(query);\n    const fieldsToSearch = this.getSearchableFields();\n\n    fieldsToSearch.forEach((field, index1) => {\n      numbers.forEach((number, index2) => {\n        const queryOperator = fieldsToSearch.length - 1 === index1 && numbers.length - 1 === index2 ? null : 'OR';\n        filterPayload.push({\n          attribute_key: field,\n          filter_operator: 'equal_to',\n          values: [number.replace('+', '')],\n          query_operator: queryOperator,\n        });\n      });\n    });\n\n    return filterPayload;\n  }\n\n  public async createConversation(instance: InstanceDto, body: any) {\n    try {\n      this.logger.verbose('--- Start createConversation ---');\n      this.logger.verbose(`Instance: ${JSON.stringify(instance)}`);\n\n      const client = await this.clientCw(instance);\n\n      if (!client) {\n        this.logger.warn(`Client not found for instance: ${JSON.stringify(instance)}`);\n        return null;\n      }\n\n      const cacheKey = `${instance.instanceName}:createConversation-${body.key.remoteJid}`;\n      this.logger.verbose(`Cache key: ${cacheKey}`);\n\n      if (await this.cache.has(cacheKey)) {\n        this.logger.verbose(`Cache hit for key: ${cacheKey}`);\n        const conversationId = (await this.cache.get(cacheKey)) as number;\n        this.logger.verbose(`Cached conversation ID: ${conversationId}`);\n        let conversationExists: conversation | boolean;\n        try {\n          conversationExists = await client.conversations.get({\n            accountId: this.provider.accountId,\n            conversationId: conversationId,\n          });\n          this.logger.verbose(`Conversation exists: ${JSON.stringify(conversationExists)}`);\n        } catch (error) {\n          this.logger.error(`Error getting conversation: ${error}`);\n          conversationExists = false;\n        }\n        if (!conversationExists) {\n          this.logger.verbose('Conversation does not exist, re-calling createConversation');\n          this.cache.delete(cacheKey);\n          return await this.createConversation(instance, body);\n        }\n\n        return conversationId;\n      }\n\n      const isGroup = body.key.remoteJid.includes('@g.us');\n      this.logger.verbose(`Is group: ${isGroup}`);\n\n      const chatId = isGroup ? body.key.remoteJid : body.key.remoteJid.split('@')[0];\n      this.logger.verbose(`Chat ID: ${chatId}`);\n\n      let nameContact: string;\n\n      nameContact = !body.key.fromMe ? body.pushName : chatId;\n      this.logger.verbose(`Name contact: ${nameContact}`);\n\n      const filterInbox = await this.getInbox(instance);\n\n      if (!filterInbox) {\n        this.logger.warn(`Inbox not found for instance: ${JSON.stringify(instance)}`);\n        return null;\n      }\n\n      if (isGroup) {\n        this.logger.verbose('Processing group conversation');\n        const group = await this.waMonitor.waInstances[instance.instanceName].client.groupMetadata(chatId);\n        this.logger.verbose(`Group metadata: ${JSON.stringify(group)}`);\n\n        nameContact = `${group.subject} (GROUP)`;\n\n        const picture_url = await this.waMonitor.waInstances[instance.instanceName].profilePicture(\n          body.key.participant.split('@')[0],\n        );\n        this.logger.verbose(`Participant profile picture URL: ${JSON.stringify(picture_url)}`);\n\n        const findParticipant = await this.findContact(instance, body.key.participant.split('@')[0]);\n        this.logger.verbose(`Found participant: ${JSON.stringify(findParticipant)}`);\n\n        if (findParticipant) {\n          if (!findParticipant.name || findParticipant.name === chatId) {\n            await this.updateContact(instance, findParticipant.id, {\n              name: body.pushName,\n              avatar_url: picture_url.profilePictureUrl || null,\n            });\n          }\n        } else {\n          await this.createContact(\n            instance,\n            body.key.participant.split('@')[0],\n            filterInbox.id,\n            false,\n            body.pushName,\n            picture_url.profilePictureUrl || null,\n            body.key.participant,\n          );\n        }\n      }\n\n      const picture_url = await this.waMonitor.waInstances[instance.instanceName].profilePicture(chatId);\n      this.logger.verbose(`Contact profile picture URL: ${JSON.stringify(picture_url)}`);\n\n      let contact = await this.findContact(instance, chatId);\n      this.logger.verbose(`Found contact: ${JSON.stringify(contact)}`);\n\n      if (contact) {\n        if (!body.key.fromMe) {\n          const waProfilePictureFile =\n            picture_url?.profilePictureUrl?.split('#')[0].split('?')[0].split('/').pop() || '';\n          const chatwootProfilePictureFile = contact?.thumbnail?.split('#')[0].split('?')[0].split('/').pop() || '';\n          const pictureNeedsUpdate = waProfilePictureFile !== chatwootProfilePictureFile;\n          const nameNeedsUpdate =\n            !contact.name ||\n            contact.name === chatId ||\n            (`+${chatId}`.startsWith('+55')\n              ? this.getNumbers(`+${chatId}`).some(\n                  (v) => contact.name === v || contact.name === v.substring(3) || contact.name === v.substring(1),\n                )\n              : false);\n\n          this.logger.verbose(`Picture needs update: ${pictureNeedsUpdate}`);\n          this.logger.verbose(`Name needs update: ${nameNeedsUpdate}`);\n\n          if (pictureNeedsUpdate || nameNeedsUpdate) {\n            contact = await this.updateContact(instance, contact.id, {\n              ...(nameNeedsUpdate && { name: nameContact }),\n              ...(waProfilePictureFile === '' && { avatar: null }),\n              ...(pictureNeedsUpdate && { avatar_url: picture_url?.profilePictureUrl }),\n            });\n          }\n        }\n      } else {\n        const jid = body.key.remoteJid;\n        contact = await this.createContact(\n          instance,\n          chatId,\n          filterInbox.id,\n          isGroup,\n          nameContact,\n          picture_url.profilePictureUrl || null,\n          jid,\n        );\n      }\n\n      if (!contact) {\n        this.logger.warn('Contact not created or found');\n        return null;\n      }\n\n      const contactId = contact?.payload?.id || contact?.payload?.contact?.id || contact?.id;\n      this.logger.verbose(`Contact ID: ${contactId}`);\n\n      const contactConversations = (await client.contacts.listConversations({\n        accountId: this.provider.accountId,\n        id: contactId,\n      })) as any;\n      this.logger.verbose(`Contact conversations: ${JSON.stringify(contactConversations)}`);\n\n      if (!contactConversations || !contactConversations.payload) {\n        this.logger.error('No conversations found or payload is undefined');\n        return null;\n      }\n\n      if (contactConversations.payload.length) {\n        let conversation: any;\n        if (this.provider.reopenConversation) {\n          conversation = contactConversations.payload.find((conversation) => conversation.inbox_id == filterInbox.id);\n          this.logger.verbose(`Found conversation in reopenConversation mode: ${JSON.stringify(conversation)}`);\n\n          if (this.provider.conversationPending && conversation.status !== 'open') {\n            if (conversation) {\n              await client.conversations.toggleStatus({\n                accountId: this.provider.accountId,\n                conversationId: conversation.id,\n                data: {\n                  status: 'pending',\n                },\n              });\n            }\n          }\n        } else {\n          conversation = contactConversations.payload.find(\n            (conversation) => conversation.status !== 'resolved' && conversation.inbox_id == filterInbox.id,\n          );\n          this.logger.verbose(`Found conversation: ${JSON.stringify(conversation)}`);\n        }\n\n        if (conversation) {\n          this.logger.verbose(`Returning existing conversation ID: ${conversation.id}`);\n          this.cache.set(cacheKey, conversation.id);\n          return conversation.id;\n        }\n      }\n\n      const data = {\n        contact_id: contactId.toString(),\n        inbox_id: filterInbox.id.toString(),\n      };\n\n      if (this.provider.conversationPending) {\n        data['status'] = 'pending';\n      }\n\n      const conversation = await client.conversations.create({\n        accountId: this.provider.accountId,\n        data,\n      });\n\n      if (!conversation) {\n        this.logger.warn('Conversation not created or found');\n        return null;\n      }\n\n      this.logger.verbose(`New conversation created with ID: ${conversation.id}`);\n      this.cache.set(cacheKey, conversation.id);\n      return conversation.id;\n    } catch (error) {\n      this.logger.error(`Error in createConversation: ${error}`);\n    }\n  }\n\n  public async getInbox(instance: InstanceDto): Promise<inbox | null> {\n    const cacheKey = `${instance.instanceName}:getInbox`;\n    if (await this.cache.has(cacheKey)) {\n      return (await this.cache.get(cacheKey)) as inbox;\n    }\n\n    const client = await this.clientCw(instance);\n\n    if (!client) {\n      this.logger.warn('client not found');\n      return null;\n    }\n\n    const inbox = (await client.inboxes.list({\n      accountId: this.provider.accountId,\n    })) as any;\n\n    if (!inbox) {\n      this.logger.warn('inbox not found');\n      return null;\n    }\n\n    const findByName = inbox.payload.find((inbox) => inbox.name === this.getClientCwConfig().nameInbox);\n\n    if (!findByName) {\n      this.logger.warn('inbox not found');\n      return null;\n    }\n\n    this.cache.set(cacheKey, findByName);\n    return findByName;\n  }\n\n  public async createMessage(\n    instance: InstanceDto,\n    conversationId: number,\n    content: string,\n    messageType: 'incoming' | 'outgoing' | undefined,\n    privateMessage?: boolean,\n    attachments?: {\n      content: unknown;\n      encoding: string;\n      filename: string;\n    }[],\n    messageBody?: any,\n    sourceId?: string,\n    quotedMsg?: MessageModel,\n  ) {\n    const client = await this.clientCw(instance);\n\n    if (!client) {\n      this.logger.warn('client not found');\n      return null;\n    }\n\n    const replyToIds = await this.getReplyToIds(messageBody, instance);\n\n    const sourceReplyId = quotedMsg?.chatwootMessageId || null;\n\n    const message = await client.messages.create({\n      accountId: this.provider.accountId,\n      conversationId: conversationId,\n      data: {\n        content: content,\n        message_type: messageType,\n        attachments: attachments,\n        private: privateMessage || false,\n        source_id: sourceId,\n        content_attributes: {\n          ...replyToIds,\n        },\n        source_reply_id: sourceReplyId ? sourceReplyId.toString() : null,\n      },\n    });\n\n    if (!message) {\n      this.logger.warn('message not found');\n      return null;\n    }\n\n    return message;\n  }\n\n  public async getOpenConversationByContact(\n    instance: InstanceDto,\n    inbox: inbox,\n    contact: generic_id & contact,\n  ): Promise<conversation> {\n    const client = await this.clientCw(instance);\n\n    if (!client) {\n      this.logger.warn('client not found');\n      return null;\n    }\n\n    const conversations = (await client.contacts.listConversations({\n      accountId: this.provider.accountId,\n      id: contact.id,\n    })) as any;\n\n    return (\n      conversations.payload.find(\n        (conversation) => conversation.inbox_id === inbox.id && conversation.status === 'open',\n      ) || undefined\n    );\n  }\n\n  public async createBotMessage(\n    instance: InstanceDto,\n    content: string,\n    messageType: 'incoming' | 'outgoing' | undefined,\n    attachments?: {\n      content: unknown;\n      encoding: string;\n      filename: string;\n    }[],\n  ) {\n    const client = await this.clientCw(instance);\n\n    if (!client) {\n      this.logger.warn('client not found');\n      return null;\n    }\n\n    const contact = await this.findContact(instance, '123456');\n\n    if (!contact) {\n      this.logger.warn('contact not found');\n      return null;\n    }\n\n    const filterInbox = await this.getInbox(instance);\n\n    if (!filterInbox) {\n      this.logger.warn('inbox not found');\n      return null;\n    }\n\n    const conversation = await this.getOpenConversationByContact(instance, filterInbox, contact);\n\n    if (!conversation) {\n      this.logger.warn('conversation not found');\n      return;\n    }\n\n    const message = await client.messages.create({\n      accountId: this.provider.accountId,\n      conversationId: conversation.id,\n      data: {\n        content: content,\n        message_type: messageType,\n        attachments: attachments,\n      },\n    });\n\n    if (!message) {\n      this.logger.warn('message not found');\n      return null;\n    }\n\n    return message;\n  }\n\n  private async sendData(\n    conversationId: number,\n    fileStream: Readable,\n    fileName: string,\n    messageType: 'incoming' | 'outgoing' | undefined,\n    content?: string,\n    instance?: InstanceDto,\n    messageBody?: any,\n    sourceId?: string,\n    quotedMsg?: MessageModel,\n  ) {\n    if (sourceId && this.isImportHistoryAvailable()) {\n      const messageAlreadySaved = await chatwootImport.getExistingSourceIds([sourceId]);\n      if (messageAlreadySaved) {\n        if (messageAlreadySaved.size > 0) {\n          this.logger.warn('Message already saved on chatwoot');\n          return null;\n        }\n      }\n    }\n    const data = new FormData();\n\n    if (content) {\n      data.append('content', content);\n    }\n\n    data.append('message_type', messageType);\n\n    data.append('attachments[]', fileStream, { filename: fileName });\n\n    const sourceReplyId = quotedMsg?.chatwootMessageId || null;\n\n    if (messageBody && instance) {\n      const replyToIds = await this.getReplyToIds(messageBody, instance);\n\n      if (replyToIds.in_reply_to || replyToIds.in_reply_to_external_id) {\n        const content = JSON.stringify({\n          ...replyToIds,\n        });\n        data.append('content_attributes', content);\n      }\n    }\n\n    if (sourceReplyId) {\n      data.append('source_reply_id', sourceReplyId.toString());\n    }\n\n    if (sourceId) {\n      data.append('source_id', sourceId);\n    }\n\n    const config = {\n      method: 'post',\n      maxBodyLength: Infinity,\n      url: `${this.provider.url}/api/v1/accounts/${this.provider.accountId}/conversations/${conversationId}/messages`,\n      headers: {\n        api_access_token: this.provider.token,\n        ...data.getHeaders(),\n      },\n      data: data,\n    };\n\n    try {\n      const { data } = await axios.request(config);\n\n      return data;\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  public async createBotQr(\n    instance: InstanceDto,\n    content: string,\n    messageType: 'incoming' | 'outgoing' | undefined,\n    fileStream?: Readable,\n    fileName?: string,\n  ) {\n    const client = await this.clientCw(instance);\n\n    if (!client) {\n      this.logger.warn('client not found');\n      return null;\n    }\n\n    if (!this.configService.get<Chatwoot>('CHATWOOT').BOT_CONTACT) {\n      this.logger.log('Chatwoot bot contact is disabled');\n\n      return true;\n    }\n\n    const contact = await this.findContact(instance, '123456');\n\n    if (!contact) {\n      this.logger.warn('contact not found');\n      return null;\n    }\n\n    const filterInbox = await this.getInbox(instance);\n\n    if (!filterInbox) {\n      this.logger.warn('inbox not found');\n      return null;\n    }\n\n    const conversation = await this.getOpenConversationByContact(instance, filterInbox, contact);\n\n    if (!conversation) {\n      this.logger.warn('conversation not found');\n      return;\n    }\n\n    const data = new FormData();\n\n    if (content) {\n      data.append('content', content);\n    }\n\n    data.append('message_type', messageType);\n\n    if (fileStream && fileName) {\n      data.append('attachments[]', fileStream, { filename: fileName });\n    }\n\n    const config = {\n      method: 'post',\n      maxBodyLength: Infinity,\n      url: `${this.provider.url}/api/v1/accounts/${this.provider.accountId}/conversations/${conversation.id}/messages`,\n      headers: {\n        api_access_token: this.provider.token,\n        ...data.getHeaders(),\n      },\n      data: data,\n    };\n\n    try {\n      const { data } = await axios.request(config);\n\n      return data;\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  public async sendAttachment(waInstance: any, number: string, media: any, caption?: string, options?: Options) {\n    try {\n      const parsedMedia = path.parse(decodeURIComponent(media));\n      let mimeType = mimeTypes.lookup(parsedMedia?.ext) || '';\n      let fileName = parsedMedia?.name + parsedMedia?.ext;\n\n      if (!mimeType) {\n        const parts = media.split('/');\n        fileName = decodeURIComponent(parts[parts.length - 1]);\n\n        const response = await axios.get(media, {\n          responseType: 'arraybuffer',\n        });\n        mimeType = response.headers['content-type'];\n      }\n\n      let type = 'document';\n\n      switch (mimeType.split('/')[0]) {\n        case 'image':\n          type = 'image';\n          break;\n        case 'video':\n          type = 'video';\n          break;\n        case 'audio':\n          type = 'audio';\n          break;\n        default:\n          type = 'document';\n          break;\n      }\n\n      if (type === 'audio') {\n        const data: SendAudioDto = {\n          number: number,\n          audio: media,\n          delay: 1200,\n          quoted: options?.quoted,\n        };\n\n        sendTelemetry('/message/sendWhatsAppAudio');\n\n        const messageSent = await waInstance?.audioWhatsapp(data, true);\n\n        return messageSent;\n      }\n\n      if (type === 'image' && parsedMedia && parsedMedia?.ext === '.gif') {\n        type = 'document';\n      }\n\n      const data: SendMediaDto = {\n        number: number,\n        mediatype: type as any,\n        fileName: fileName,\n        media: media,\n        delay: 1200,\n        quoted: options?.quoted,\n      };\n\n      sendTelemetry('/message/sendMedia');\n\n      if (caption) {\n        data.caption = caption;\n      }\n\n      const messageSent = await waInstance?.mediaMessage(data, null, true);\n\n      return messageSent;\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  public async onSendMessageError(instance: InstanceDto, conversation: number, error?: any) {\n    this.logger.verbose(`onSendMessageError ${JSON.stringify(error)}`);\n\n    const client = await this.clientCw(instance);\n\n    if (!client) {\n      return;\n    }\n\n    if (error && error?.status === 400 && error?.message[0]?.exists === false) {\n      client.messages.create({\n        accountId: this.provider.accountId,\n        conversationId: conversation,\n        data: {\n          content: `${i18next.t('cw.message.numbernotinwhatsapp')}`,\n          message_type: 'outgoing',\n          private: true,\n        },\n      });\n\n      return;\n    }\n\n    client.messages.create({\n      accountId: this.provider.accountId,\n      conversationId: conversation,\n      data: {\n        content: i18next.t('cw.message.notsent', {\n          error: error ? `_${error.toString()}_` : '',\n        }),\n        message_type: 'outgoing',\n        private: true,\n      },\n    });\n  }\n\n  public async receiveWebhook(instance: InstanceDto, body: any) {\n    try {\n      await new Promise((resolve) => setTimeout(resolve, 500));\n\n      const client = await this.clientCw(instance);\n\n      if (!client) {\n        this.logger.warn('client not found');\n        return null;\n      }\n\n      if (\n        this.provider.reopenConversation === false &&\n        body.event === 'conversation_status_changed' &&\n        body.status === 'resolved' &&\n        body.meta?.sender?.identifier\n      ) {\n        const keyToDelete = `${instance.instanceName}:createConversation-${body.meta.sender.identifier}`;\n        this.cache.delete(keyToDelete);\n      }\n\n      if (\n        !body?.conversation ||\n        body.private ||\n        (body.event === 'message_updated' && !body.content_attributes?.deleted)\n      ) {\n        return { message: 'bot' };\n      }\n\n      const chatId =\n        body.conversation.meta.sender?.identifier || body.conversation.meta.sender?.phone_number.replace('+', '');\n      // Chatwoot to Whatsapp\n      const messageReceived = body.content\n        ? body.content\n            .replaceAll(/(?<!\\*)\\*((?!\\s)([^\\n*]+?)(?<!\\s))\\*(?!\\*)/g, '_$1_') // Substitui * por _\n            .replaceAll(/\\*{2}((?!\\s)([^\\n*]+?)(?<!\\s))\\*{2}/g, '*$1*') // Substitui ** por *\n            .replaceAll(/~{2}((?!\\s)([^\\n*]+?)(?<!\\s))~{2}/g, '~$1~') // Substitui ~~ por ~\n            .replaceAll(/(?<!`)`((?!\\s)([^`*]+?)(?<!\\s))`(?!`)/g, '```$1```') // Substitui ` por ```\n        : body.content;\n\n      const senderName = body?.conversation?.messages[0]?.sender?.available_name || body?.sender?.name;\n      const waInstance = this.waMonitor.waInstances[instance.instanceName];\n\n      if (body.event === 'message_updated' && body.content_attributes?.deleted) {\n        const message = await this.prismaRepository.message.findFirst({\n          where: {\n            chatwootMessageId: body.id,\n            instanceId: instance.instanceId,\n          },\n        });\n\n        if (message) {\n          const key = message.key as {\n            id: string;\n            remoteJid: string;\n            fromMe: boolean;\n            participant: string;\n          };\n\n          await waInstance?.client.sendMessage(key.remoteJid, { delete: key });\n\n          await this.prismaRepository.message.deleteMany({\n            where: {\n              instanceId: instance.instanceId,\n              chatwootMessageId: body.id,\n            },\n          });\n        }\n        return { message: 'bot' };\n      }\n\n      const cwBotContact = this.configService.get<Chatwoot>('CHATWOOT').BOT_CONTACT;\n\n      if (chatId === '123456' && body.message_type === 'outgoing') {\n        const command = messageReceived.replace('/', '');\n\n        if (cwBotContact && (command.includes('init') || command.includes('iniciar'))) {\n          const state = waInstance?.connectionStatus?.state;\n\n          if (state !== 'open') {\n            const number = command.split(':')[1];\n            await waInstance.connectToWhatsapp(number);\n          } else {\n            await this.createBotMessage(\n              instance,\n              i18next.t('cw.inbox.alreadyConnected', {\n                inboxName: body.inbox.name,\n              }),\n              'incoming',\n            );\n          }\n        }\n\n        if (command === 'clearcache') {\n          waInstance.clearCacheChatwoot();\n          await this.createBotMessage(\n            instance,\n            i18next.t('cw.inbox.clearCache', {\n              inboxName: body.inbox.name,\n            }),\n            'incoming',\n          );\n        }\n\n        if (command === 'status') {\n          const state = waInstance?.connectionStatus?.state;\n\n          if (!state) {\n            await this.createBotMessage(\n              instance,\n              i18next.t('cw.inbox.notFound', {\n                inboxName: body.inbox.name,\n              }),\n              'incoming',\n            );\n          }\n\n          if (state) {\n            await this.createBotMessage(\n              instance,\n              i18next.t('cw.inbox.status', {\n                inboxName: body.inbox.name,\n                state: state,\n              }),\n              'incoming',\n            );\n          }\n        }\n\n        if (cwBotContact && (command === 'disconnect' || command === 'desconectar')) {\n          const msgLogout = i18next.t('cw.inbox.disconnect', {\n            inboxName: body.inbox.name,\n          });\n\n          await this.createBotMessage(instance, msgLogout, 'incoming');\n\n          await waInstance?.client?.logout('Log out instance: ' + instance.instanceName);\n          await waInstance?.client?.ws?.close();\n        }\n      }\n\n      if (body.message_type === 'outgoing' && body?.conversation?.messages?.length && chatId !== '123456') {\n        if (body?.conversation?.messages[0]?.source_id?.substring(0, 5) === 'WAID:') {\n          return { message: 'bot' };\n        }\n\n        if (!waInstance && body.conversation?.id) {\n          this.onSendMessageError(instance, body.conversation?.id, 'Instance not found');\n          return { message: 'bot' };\n        }\n\n        let formatText: string;\n        if (senderName === null || senderName === undefined) {\n          formatText = messageReceived;\n        } else {\n          const formattedDelimiter = this.provider.signDelimiter\n            ? this.provider.signDelimiter.replaceAll('\\\\n', '\\n')\n            : '\\n';\n          const textToConcat = this.provider.signMsg ? [`*${senderName}:*`] : [];\n          textToConcat.push(messageReceived);\n\n          formatText = textToConcat.join(formattedDelimiter);\n        }\n\n        for (const message of body.conversation.messages) {\n          if (message.attachments && message.attachments.length > 0) {\n            for (const attachment of message.attachments) {\n              if (!messageReceived) {\n                formatText = null;\n              }\n\n              const options: Options = {\n                quoted: await this.getQuotedMessage(body, instance),\n              };\n\n              const messageSent = await this.sendAttachment(\n                waInstance,\n                chatId,\n                attachment.data_url,\n                formatText,\n                options,\n              );\n              if (!messageSent && body.conversation?.id) {\n                this.onSendMessageError(instance, body.conversation?.id);\n              }\n\n              await this.updateChatwootMessageId(\n                {\n                  ...messageSent,\n                  owner: instance.instanceName,\n                },\n                {\n                  messageId: body.id,\n                  inboxId: body.inbox?.id,\n                  conversationId: body.conversation?.id,\n                  contactInboxSourceId: body.conversation?.contact_inbox?.source_id,\n                },\n                instance,\n              );\n            }\n          } else {\n            const data: SendTextDto = {\n              number: chatId,\n              text: formatText,\n              delay: 1200,\n              quoted: await this.getQuotedMessage(body, instance),\n            };\n\n            sendTelemetry('/message/sendText');\n\n            let messageSent: any;\n            try {\n              messageSent = await waInstance?.textMessage(data, true);\n              if (!messageSent) {\n                throw new Error('Message not sent');\n              }\n\n              if (Long.isLong(messageSent?.messageTimestamp)) {\n                messageSent.messageTimestamp = messageSent.messageTimestamp?.toNumber();\n              }\n\n              await this.updateChatwootMessageId(\n                {\n                  ...messageSent,\n                  instanceId: instance.instanceId,\n                },\n                {\n                  messageId: body.id,\n                  inboxId: body.inbox?.id,\n                  conversationId: body.conversation?.id,\n                  contactInboxSourceId: body.conversation?.contact_inbox?.source_id,\n                },\n                instance,\n              );\n            } catch (error) {\n              if (!messageSent && body.conversation?.id) {\n                this.onSendMessageError(instance, body.conversation?.id, error);\n              }\n              throw error;\n            }\n          }\n        }\n\n        const chatwootRead = this.configService.get<Chatwoot>('CHATWOOT').MESSAGE_READ;\n        if (chatwootRead) {\n          const lastMessage = await this.prismaRepository.message.findFirst({\n            where: {\n              key: {\n                path: ['fromMe'],\n                equals: false,\n              },\n              instanceId: instance.instanceId,\n            },\n          });\n          if (lastMessage && !lastMessage.chatwootIsRead) {\n            const key = lastMessage.key as {\n              id: string;\n              fromMe: boolean;\n              remoteJid: string;\n              participant?: string;\n            };\n\n            waInstance?.markMessageAsRead({\n              readMessages: [\n                {\n                  id: key.id,\n                  fromMe: key.fromMe,\n                  remoteJid: key.remoteJid,\n                },\n              ],\n            });\n            const updateMessage = {\n              chatwootMessageId: lastMessage.chatwootMessageId,\n              chatwootConversationId: lastMessage.chatwootConversationId,\n              chatwootInboxId: lastMessage.chatwootInboxId,\n              chatwootContactInboxSourceId: lastMessage.chatwootContactInboxSourceId,\n              chatwootIsRead: true,\n            };\n\n            await this.prismaRepository.message.updateMany({\n              where: {\n                instanceId: instance.instanceId,\n                key: {\n                  path: ['id'],\n                  equals: key.id,\n                },\n              },\n              data: updateMessage,\n            });\n          }\n        }\n      }\n\n      if (body.message_type === 'template' && body.event === 'message_created') {\n        const data: SendTextDto = {\n          number: chatId,\n          text: body.content.replace(/\\\\\\r\\n|\\\\\\n|\\n/g, '\\n'),\n          delay: 1200,\n        };\n\n        sendTelemetry('/message/sendText');\n\n        await waInstance?.textMessage(data);\n      }\n\n      return { message: 'bot' };\n    } catch (error) {\n      this.logger.error(error);\n\n      return { message: 'bot' };\n    }\n  }\n\n  private async updateChatwootMessageId(\n    message: MessageModel,\n    chatwootMessageIds: ChatwootMessage,\n    instance: InstanceDto,\n  ) {\n    const key = message.key as {\n      id: string;\n      fromMe: boolean;\n      remoteJid: string;\n      participant?: string;\n    };\n\n    if (!chatwootMessageIds.messageId || !key?.id) {\n      return;\n    }\n\n    await this.prismaRepository.message.updateMany({\n      where: {\n        key: {\n          path: ['id'],\n          equals: key.id,\n        },\n        instanceId: instance.instanceId,\n      },\n      data: {\n        chatwootMessageId: chatwootMessageIds.messageId,\n        chatwootConversationId: chatwootMessageIds.conversationId,\n        chatwootInboxId: chatwootMessageIds.inboxId,\n        chatwootContactInboxSourceId: chatwootMessageIds.contactInboxSourceId,\n        chatwootIsRead: chatwootMessageIds.isRead,\n      },\n    });\n\n    if (this.isImportHistoryAvailable()) {\n      chatwootImport.updateMessageSourceID(chatwootMessageIds.messageId, key.id);\n    }\n  }\n\n  private async getMessageByKeyId(instance: InstanceDto, keyId: string): Promise<MessageModel> {\n    const messages = await this.prismaRepository.message.findFirst({\n      where: {\n        key: {\n          path: ['id'],\n          equals: keyId,\n        },\n        instanceId: instance.instanceId,\n      },\n    });\n\n    return messages || null;\n  }\n\n  private async getReplyToIds(\n    msg: any,\n    instance: InstanceDto,\n  ): Promise<{ in_reply_to: string; in_reply_to_external_id: string }> {\n    let inReplyTo = null;\n    let inReplyToExternalId = null;\n\n    if (msg) {\n      inReplyToExternalId = msg.message?.extendedTextMessage?.contextInfo?.stanzaId ?? msg.contextInfo?.stanzaId;\n      if (inReplyToExternalId) {\n        const message = await this.getMessageByKeyId(instance, inReplyToExternalId);\n        if (message?.chatwootMessageId) {\n          inReplyTo = message.chatwootMessageId;\n        }\n      }\n    }\n\n    return {\n      in_reply_to: inReplyTo,\n      in_reply_to_external_id: inReplyToExternalId,\n    };\n  }\n\n  private async getQuotedMessage(msg: any, instance: InstanceDto): Promise<Quoted> {\n    if (msg?.content_attributes?.in_reply_to) {\n      const message = await this.prismaRepository.message.findFirst({\n        where: {\n          chatwootMessageId: msg?.content_attributes?.in_reply_to,\n          instanceId: instance.instanceId,\n        },\n      });\n\n      const key = message?.key as {\n        id: string;\n        fromMe: boolean;\n        remoteJid: string;\n        participant?: string;\n      };\n\n      if (message && key?.id) {\n        return {\n          key: message.key as proto.IMessageKey,\n          message: message.message as proto.IMessage,\n        };\n      }\n    }\n\n    return null;\n  }\n\n  private isMediaMessage(message: any) {\n    const media = [\n      'imageMessage',\n      'documentMessage',\n      'documentWithCaptionMessage',\n      'audioMessage',\n      'videoMessage',\n      'stickerMessage',\n      'viewOnceMessageV2',\n    ];\n\n    const messageKeys = Object.keys(message);\n\n    const result = messageKeys.some((key) => media.includes(key));\n\n    return result;\n  }\n\n  private getAdsMessage(msg: any) {\n    interface AdsMessage {\n      title: string;\n      body: string;\n      thumbnailUrl: string;\n      sourceUrl: string;\n    }\n\n    const adsMessage: AdsMessage | undefined = {\n      title: msg.extendedTextMessage?.contextInfo?.externalAdReply?.title || msg.contextInfo?.externalAdReply?.title,\n      body: msg.extendedTextMessage?.contextInfo?.externalAdReply?.body || msg.contextInfo?.externalAdReply?.body,\n      thumbnailUrl:\n        msg.extendedTextMessage?.contextInfo?.externalAdReply?.thumbnailUrl ||\n        msg.contextInfo?.externalAdReply?.thumbnailUrl,\n      sourceUrl:\n        msg.extendedTextMessage?.contextInfo?.externalAdReply?.sourceUrl || msg.contextInfo?.externalAdReply?.sourceUrl,\n    };\n\n    return adsMessage;\n  }\n\n  private getReactionMessage(msg: any) {\n    interface ReactionMessage {\n      key: {\n        id: string;\n        fromMe: boolean;\n        remoteJid: string;\n        participant?: string;\n      };\n      text: string;\n    }\n    const reactionMessage: ReactionMessage | undefined = msg?.reactionMessage;\n\n    return reactionMessage;\n  }\n\n  private getTypeMessage(msg: any) {\n    const types = {\n      conversation: msg.conversation,\n      imageMessage: msg.imageMessage?.caption,\n      videoMessage: msg.videoMessage?.caption,\n      extendedTextMessage: msg.extendedTextMessage?.text,\n      messageContextInfo: msg.messageContextInfo?.stanzaId,\n      stickerMessage: undefined,\n      documentMessage: msg.documentMessage?.caption,\n      documentWithCaptionMessage: msg.documentWithCaptionMessage?.message?.documentMessage?.caption,\n      audioMessage: msg.audioMessage?.caption,\n      contactMessage: msg.contactMessage?.vcard,\n      contactsArrayMessage: msg.contactsArrayMessage,\n      locationMessage: msg.locationMessage,\n      liveLocationMessage: msg.liveLocationMessage,\n      listMessage: msg.listMessage,\n      listResponseMessage: msg.listResponseMessage,\n      viewOnceMessageV2:\n        msg?.message?.viewOnceMessageV2?.message?.imageMessage?.url ||\n        msg?.message?.viewOnceMessageV2?.message?.videoMessage?.url ||\n        msg?.message?.viewOnceMessageV2?.message?.audioMessage?.url,\n    };\n\n    return types;\n  }\n\n  private getMessageContent(types: any) {\n    const typeKey = Object.keys(types).find((key) => types[key] !== undefined);\n\n    let result = typeKey ? types[typeKey] : undefined;\n\n    // Remove externalAdReplyBody| in Chatwoot (Already Have)\n    if (result && typeof result === 'string' && result.includes('externalAdReplyBody|')) {\n      result = result.split('externalAdReplyBody|').filter(Boolean).join('');\n    }\n\n    if (typeKey === 'locationMessage' || typeKey === 'liveLocationMessage') {\n      const latitude = result.degreesLatitude;\n      const longitude = result.degreesLongitude;\n\n      const locationName = result?.name;\n      const locationAddress = result?.address;\n\n      const formattedLocation =\n        `*${i18next.t('cw.locationMessage.location')}:*\\n\\n` +\n        `_${i18next.t('cw.locationMessage.latitude')}:_ ${latitude} \\n` +\n        `_${i18next.t('cw.locationMessage.longitude')}:_ ${longitude} \\n` +\n        (locationName ? `_${i18next.t('cw.locationMessage.locationName')}:_ ${locationName}\\n` : '') +\n        (locationAddress ? `_${i18next.t('cw.locationMessage.locationAddress')}:_ ${locationAddress} \\n` : '') +\n        `_${i18next.t('cw.locationMessage.locationUrl')}:_ ` +\n        `https://www.google.com/maps/search/?api=1&query=${latitude},${longitude}`;\n\n      return formattedLocation;\n    }\n\n    if (typeKey === 'contactMessage') {\n      const vCardData = result.split('\\n');\n      const contactInfo = {};\n\n      vCardData.forEach((line) => {\n        const [key, value] = line.split(':');\n        if (key && value) {\n          contactInfo[key] = value;\n        }\n      });\n\n      let formattedContact =\n        `*${i18next.t('cw.contactMessage.contact')}:*\\n\\n` +\n        `_${i18next.t('cw.contactMessage.name')}:_ ${contactInfo['FN']}`;\n\n      let numberCount = 1;\n      Object.keys(contactInfo).forEach((key) => {\n        if (key.startsWith('item') && key.includes('TEL')) {\n          const phoneNumber = contactInfo[key];\n          formattedContact += `\\n_${i18next.t('cw.contactMessage.number')} (${numberCount}):_ ${phoneNumber}`;\n          numberCount++;\n        } else if (key.includes('TEL')) {\n          const phoneNumber = contactInfo[key];\n          formattedContact += `\\n_${i18next.t('cw.contactMessage.number')} (${numberCount}):_ ${phoneNumber}`;\n          numberCount++;\n        }\n      });\n\n      return formattedContact;\n    }\n\n    if (typeKey === 'contactsArrayMessage') {\n      const formattedContacts = result.contacts.map((contact) => {\n        const vCardData = contact.vcard.split('\\n');\n        const contactInfo = {};\n\n        vCardData.forEach((line) => {\n          const [key, value] = line.split(':');\n          if (key && value) {\n            contactInfo[key] = value;\n          }\n        });\n\n        let formattedContact = `*${i18next.t('cw.contactMessage.contact')}:*\\n\\n_${i18next.t(\n          'cw.contactMessage.name',\n        )}:_ ${contact.displayName}`;\n\n        let numberCount = 1;\n        Object.keys(contactInfo).forEach((key) => {\n          if (key.startsWith('item') && key.includes('TEL')) {\n            const phoneNumber = contactInfo[key];\n            formattedContact += `\\n_${i18next.t('cw.contactMessage.number')} (${numberCount}):_ ${phoneNumber}`;\n            numberCount++;\n          } else if (key.includes('TEL')) {\n            const phoneNumber = contactInfo[key];\n            formattedContact += `\\n_${i18next.t('cw.contactMessage.number')} (${numberCount}):_ ${phoneNumber}`;\n            numberCount++;\n          }\n        });\n\n        return formattedContact;\n      });\n\n      const formattedContactsArray = formattedContacts.join('\\n\\n');\n\n      return formattedContactsArray;\n    }\n\n    if (typeKey === 'listMessage') {\n      const listTitle = result?.title || 'Unknown';\n      const listDescription = result?.description || 'Unknown';\n      const listFooter = result?.footerText || 'Unknown';\n\n      let formattedList =\n        '*List Menu:*\\n\\n' +\n        '_Title_: ' +\n        listTitle +\n        '\\n' +\n        '_Description_: ' +\n        listDescription +\n        '\\n' +\n        '_Footer_: ' +\n        listFooter;\n\n      if (result.sections && result.sections.length > 0) {\n        result.sections.forEach((section, sectionIndex) => {\n          formattedList += '\\n\\n*Section ' + (sectionIndex + 1) + ':* ' + section.title || 'Unknown\\n';\n\n          if (section.rows && section.rows.length > 0) {\n            section.rows.forEach((row, rowIndex) => {\n              formattedList += '\\n*Line ' + (rowIndex + 1) + ':*\\n';\n              formattedList += '_▪️ Title:_ ' + (row.title || 'Unknown') + '\\n';\n              formattedList += '_▪️ Description:_ ' + (row.description || 'Unknown') + '\\n';\n              formattedList += '_▪️ ID:_ ' + (row.rowId || 'Unknown') + '\\n';\n            });\n          } else {\n            formattedList += '\\nNo lines found in this section.\\n';\n          }\n        });\n      } else {\n        formattedList += '\\nNo sections found.\\n';\n      }\n\n      return formattedList;\n    }\n\n    if (typeKey === 'listResponseMessage') {\n      const responseTitle = result?.title || 'Unknown';\n      const responseDescription = result?.description || 'Unknown';\n      const responseRowId = result?.singleSelectReply?.selectedRowId || 'Unknown';\n\n      const formattedResponseList =\n        '*List Response:*\\n\\n' +\n        '_Title_: ' +\n        responseTitle +\n        '\\n' +\n        '_Description_: ' +\n        responseDescription +\n        '\\n' +\n        '_ID_: ' +\n        responseRowId;\n      return formattedResponseList;\n    }\n\n    return result;\n  }\n\n  public getConversationMessage(msg: any) {\n    const types = this.getTypeMessage(msg);\n\n    const messageContent = this.getMessageContent(types);\n\n    return messageContent;\n  }\n\n  public async eventWhatsapp(event: string, instance: InstanceDto, body: any) {\n    try {\n      const waInstance = this.waMonitor.waInstances[instance.instanceName];\n\n      if (!waInstance) {\n        this.logger.warn('wa instance not found');\n        return null;\n      }\n\n      const client = await this.clientCw(instance);\n\n      if (!client) {\n        this.logger.warn('client not found');\n        return null;\n      }\n\n      if (this.provider?.ignoreJids && this.provider?.ignoreJids.length > 0) {\n        const ignoreJids: any = this.provider?.ignoreJids;\n\n        let ignoreGroups = false;\n        let ignoreContacts = false;\n\n        if (ignoreJids.includes('@g.us')) {\n          ignoreGroups = true;\n        }\n\n        if (ignoreJids.includes('@s.whatsapp.net')) {\n          ignoreContacts = true;\n        }\n\n        if (ignoreGroups && body?.key?.remoteJid.endsWith('@g.us')) {\n          this.logger.warn('Ignoring message from group: ' + body?.key?.remoteJid);\n          return;\n        }\n\n        if (ignoreContacts && body?.key?.remoteJid.endsWith('@s.whatsapp.net')) {\n          this.logger.warn('Ignoring message from contact: ' + body?.key?.remoteJid);\n          return;\n        }\n\n        if (ignoreJids.includes(body?.key?.remoteJid)) {\n          this.logger.warn('Ignoring message from jid: ' + body?.key?.remoteJid);\n          return;\n        }\n      }\n\n      if (event === 'messages.upsert' || event === 'send.message') {\n        if (body.key.remoteJid === 'status@broadcast') {\n          return;\n        }\n\n        if (body.message?.ephemeralMessage?.message) {\n          body.message = {\n            ...body.message?.ephemeralMessage?.message,\n          };\n        }\n\n        const originalMessage = await this.getConversationMessage(body.message);\n        const bodyMessage = originalMessage\n          ? originalMessage\n              .replaceAll(/\\*((?!\\s)([^\\n*]+?)(?<!\\s))\\*/g, '**$1**')\n              .replaceAll(/_((?!\\s)([^\\n_]+?)(?<!\\s))_/g, '*$1*')\n              .replaceAll(/~((?!\\s)([^\\n~]+?)(?<!\\s))~/g, '~~$1~~')\n          : originalMessage;\n\n        if (bodyMessage && bodyMessage.includes('Por favor, classifique esta conversa, http')) {\n          return;\n        }\n\n        const quotedId = body.contextInfo?.stanzaId || body.message?.contextInfo?.stanzaId;\n\n        let quotedMsg = null;\n\n        if (quotedId)\n          quotedMsg = await this.prismaRepository.message.findFirst({\n            where: {\n              key: {\n                path: ['id'],\n                equals: quotedId,\n              },\n              chatwootMessageId: {\n                not: null,\n              },\n            },\n          });\n\n        const isMedia = this.isMediaMessage(body.message);\n\n        const adsMessage = this.getAdsMessage(body);\n\n        const reactionMessage = this.getReactionMessage(body.message);\n\n        if (!bodyMessage && !isMedia && !reactionMessage) {\n          this.logger.warn('no body message found');\n          return;\n        }\n\n        const getConversation = await this.createConversation(instance, body);\n\n        if (!getConversation) {\n          this.logger.warn('conversation not found');\n          return;\n        }\n\n        const messageType = body.key.fromMe ? 'outgoing' : 'incoming';\n\n        if (isMedia) {\n          const downloadBase64 = await waInstance?.getBase64FromMediaMessage({\n            message: {\n              ...body,\n            },\n          });\n\n          let nameFile: string;\n          const messageBody = body?.message[body?.messageType];\n          const originalFilename =\n            messageBody?.fileName || messageBody?.filename || messageBody?.message?.documentMessage?.fileName;\n          if (originalFilename) {\n            const parsedFile = path.parse(originalFilename);\n            if (parsedFile.name && parsedFile.ext) {\n              nameFile = `${parsedFile.name}-${Math.floor(Math.random() * (99 - 10 + 1) + 10)}${parsedFile.ext}`;\n            }\n          }\n\n          if (!nameFile) {\n            nameFile = `${Math.random().toString(36).substring(7)}.${mimeTypes.extension(downloadBase64.mimetype) || ''}`;\n          }\n\n          const fileData = Buffer.from(downloadBase64.base64, 'base64');\n\n          const fileStream = new Readable();\n          fileStream._read = () => {};\n          fileStream.push(fileData);\n          fileStream.push(null);\n\n          if (body.key.remoteJid.includes('@g.us')) {\n            const participantName = body.pushName;\n            const rawPhoneNumber = body.key.participant.split('@')[0];\n            const phoneMatch = rawPhoneNumber.match(/^(\\d{2})(\\d{2})(\\d{4})(\\d{4})$/);\n\n            let formattedPhoneNumber: string;\n\n            if (phoneMatch) {\n              formattedPhoneNumber = `+${phoneMatch[1]} (${phoneMatch[2]}) ${phoneMatch[3]}-${phoneMatch[4]}`;\n            } else {\n              formattedPhoneNumber = `+${rawPhoneNumber}`;\n            }\n\n            let content: string;\n\n            if (!body.key.fromMe) {\n              content = `**${formattedPhoneNumber} - ${participantName}:**\\n\\n${bodyMessage}`;\n            } else {\n              content = `${bodyMessage}`;\n            }\n\n            const send = await this.sendData(\n              getConversation,\n              fileStream,\n              nameFile,\n              messageType,\n              content,\n              instance,\n              body,\n              'WAID:' + body.key.id,\n              quotedMsg,\n            );\n\n            if (!send) {\n              this.logger.warn('message not sent');\n              return;\n            }\n\n            return send;\n          } else {\n            const send = await this.sendData(\n              getConversation,\n              fileStream,\n              nameFile,\n              messageType,\n              bodyMessage,\n              instance,\n              body,\n              'WAID:' + body.key.id,\n              quotedMsg,\n            );\n\n            if (!send) {\n              this.logger.warn('message not sent');\n              return;\n            }\n\n            return send;\n          }\n        }\n\n        if (reactionMessage) {\n          if (reactionMessage.text) {\n            const send = await this.createMessage(\n              instance,\n              getConversation,\n              reactionMessage.text,\n              messageType,\n              false,\n              [],\n              {\n                message: { extendedTextMessage: { contextInfo: { stanzaId: reactionMessage.key.id } } },\n              },\n              'WAID:' + body.key.id,\n              quotedMsg,\n            );\n            if (!send) {\n              this.logger.warn('message not sent');\n              return;\n            }\n          }\n\n          return;\n        }\n\n        const isAdsMessage = (adsMessage && adsMessage.title) || adsMessage.body || adsMessage.thumbnailUrl;\n        if (isAdsMessage) {\n          const imgBuffer = await axios.get(adsMessage.thumbnailUrl, { responseType: 'arraybuffer' });\n\n          const extension = mimeTypes.extension(imgBuffer.headers['content-type']);\n          const mimeType = extension && mimeTypes.lookup(extension);\n\n          if (!mimeType) {\n            this.logger.warn('mimetype of Ads message not found');\n            return;\n          }\n\n          const random = Math.random().toString(36).substring(7);\n          const nameFile = `${random}.${mimeTypes.extension(mimeType)}`;\n          const fileData = Buffer.from(imgBuffer.data, 'binary');\n\n          const img = await Jimp.read(fileData);\n          await img.cover(320, 180);\n\n          const processedBuffer = await img.getBufferAsync(Jimp.MIME_PNG);\n\n          const fileStream = new Readable();\n          fileStream._read = () => {}; // _read is required but you can noop it\n          fileStream.push(processedBuffer);\n          fileStream.push(null);\n\n          const truncStr = (str: string, len: number) => {\n            if (!str) return '';\n\n            return str.length > len ? str.substring(0, len) + '...' : str;\n          };\n\n          const title = truncStr(adsMessage.title, 40);\n          const description = truncStr(adsMessage?.body, 75);\n\n          const send = await this.sendData(\n            getConversation,\n            fileStream,\n            nameFile,\n            messageType,\n            `${bodyMessage}\\n\\n\\n**${title}**\\n${description}\\n${adsMessage.sourceUrl}`,\n            instance,\n            body,\n            'WAID:' + body.key.id,\n          );\n\n          if (!send) {\n            this.logger.warn('message not sent');\n            return;\n          }\n\n          return send;\n        }\n\n        if (body.key.remoteJid.includes('@g.us')) {\n          const participantName = body.pushName;\n          const rawPhoneNumber = body.key.participant.split('@')[0];\n          const phoneMatch = rawPhoneNumber.match(/^(\\d{2})(\\d{2})(\\d{4})(\\d{4})$/);\n\n          let formattedPhoneNumber: string;\n\n          if (phoneMatch) {\n            formattedPhoneNumber = `+${phoneMatch[1]} (${phoneMatch[2]}) ${phoneMatch[3]}-${phoneMatch[4]}`;\n          } else {\n            formattedPhoneNumber = `+${rawPhoneNumber}`;\n          }\n\n          let content: string;\n\n          if (!body.key.fromMe) {\n            content = `**${formattedPhoneNumber} - ${participantName}:**\\n\\n${bodyMessage}`;\n          } else {\n            content = `${bodyMessage}`;\n          }\n\n          const send = await this.createMessage(\n            instance,\n            getConversation,\n            content,\n            messageType,\n            false,\n            [],\n            body,\n            'WAID:' + body.key.id,\n            quotedMsg,\n          );\n\n          if (!send) {\n            this.logger.warn('message not sent');\n            return;\n          }\n\n          return send;\n        } else {\n          const send = await this.createMessage(\n            instance,\n            getConversation,\n            bodyMessage,\n            messageType,\n            false,\n            [],\n            body,\n            'WAID:' + body.key.id,\n            quotedMsg,\n          );\n\n          if (!send) {\n            this.logger.warn('message not sent');\n            return;\n          }\n\n          return send;\n        }\n      }\n\n      if (event === Events.MESSAGES_DELETE) {\n        const chatwootDelete = this.configService.get<Chatwoot>('CHATWOOT').MESSAGE_DELETE;\n\n        if (chatwootDelete === true) {\n          if (!body?.key?.id) {\n            this.logger.warn('message id not found');\n            return;\n          }\n\n          const message = await this.getMessageByKeyId(instance, body.key.id);\n\n          if (message?.chatwootMessageId && message?.chatwootConversationId) {\n            await this.prismaRepository.message.deleteMany({\n              where: {\n                key: {\n                  path: ['id'],\n                  equals: body.key.id,\n                },\n                instanceId: instance.instanceId,\n              },\n            });\n\n            return await client.messages.delete({\n              accountId: this.provider.accountId,\n              conversationId: message.chatwootConversationId,\n              messageId: message.chatwootMessageId,\n            });\n          }\n        }\n      }\n\n      if (event === 'messages.edit') {\n        const editedText = `${\n          body?.editedMessage?.conversation || body?.editedMessage?.extendedTextMessage?.text\n        }\\n\\n_\\`${i18next.t('cw.message.edited')}.\\`_`;\n        const message = await this.getMessageByKeyId(instance, body?.key?.id);\n        const key = message.key as {\n          id: string;\n          fromMe: boolean;\n          remoteJid: string;\n          participant?: string;\n        };\n\n        const messageType = key?.fromMe ? 'outgoing' : 'incoming';\n\n        if (message && message.chatwootConversationId) {\n          const send = await this.createMessage(\n            instance,\n            message.chatwootConversationId,\n            editedText,\n            messageType,\n            false,\n            [],\n            {\n              message: { extendedTextMessage: { contextInfo: { stanzaId: key.id } } },\n            },\n            'WAID:' + body.key.id,\n            null,\n          );\n          if (!send) {\n            this.logger.warn('edited message not sent');\n            return;\n          }\n        }\n        return;\n      }\n\n      if (event === 'messages.read') {\n        if (!body?.key?.id || !body?.key?.remoteJid) {\n          this.logger.warn('message id not found');\n          return;\n        }\n\n        const message = await this.getMessageByKeyId(instance, body.key.id);\n        const conversationId = message?.chatwootConversationId;\n        const contactInboxSourceId = message?.chatwootContactInboxSourceId;\n\n        if (conversationId) {\n          let sourceId = contactInboxSourceId;\n          const inbox = (await this.getInbox(instance)) as inbox & {\n            inbox_identifier?: string;\n          };\n\n          if (!sourceId && inbox) {\n            const conversation = (await client.conversations.get({\n              accountId: this.provider.accountId,\n              conversationId: conversationId,\n            })) as conversation_show & {\n              last_non_activity_message: { conversation: { contact_inbox: contact_inboxes } };\n            };\n            sourceId = conversation.last_non_activity_message?.conversation?.contact_inbox?.source_id;\n          }\n\n          if (sourceId && inbox?.inbox_identifier) {\n            const url =\n              `/public/api/v1/inboxes/${inbox.inbox_identifier}/contacts/${sourceId}` +\n              `/conversations/${conversationId}/update_last_seen`;\n            chatwootRequest(this.getClientCwConfig(), {\n              method: 'POST',\n              url: url,\n            });\n          }\n        }\n        return;\n      }\n\n      if (event === 'status.instance') {\n        const data = body;\n        const inbox = await this.getInbox(instance);\n\n        if (!inbox) {\n          this.logger.warn('inbox not found');\n          return;\n        }\n\n        const msgStatus = i18next.t('cw.inbox.status', {\n          inboxName: inbox.name,\n          state: data.status,\n        });\n\n        await this.createBotMessage(instance, msgStatus, 'incoming');\n      }\n\n      if (event === 'connection.update') {\n        if (body.status === 'open') {\n          // if we have qrcode count then we understand that a new connection was established\n          if (this.waMonitor.waInstances[instance.instanceName].qrCode.count > 0) {\n            const msgConnection = i18next.t('cw.inbox.connected');\n            await this.createBotMessage(instance, msgConnection, 'incoming');\n            this.waMonitor.waInstances[instance.instanceName].qrCode.count = 0;\n            chatwootImport.clearAll(instance);\n          }\n        }\n      }\n\n      if (event === 'qrcode.updated') {\n        if (body.statusCode === 500) {\n          const erroQRcode = `🚨 ${i18next.t('qrlimitreached')}`;\n          return await this.createBotMessage(instance, erroQRcode, 'incoming');\n        } else {\n          const fileData = Buffer.from(body?.qrcode.base64.replace('data:image/png;base64,', ''), 'base64');\n\n          const fileStream = new Readable();\n          fileStream._read = () => {};\n          fileStream.push(fileData);\n          fileStream.push(null);\n\n          await this.createBotQr(\n            instance,\n            i18next.t('qrgeneratedsuccesfully'),\n            'incoming',\n            fileStream,\n            `${instance.instanceName}.png`,\n          );\n\n          let msgQrCode = `⚡️${i18next.t('qrgeneratedsuccesfully')}\\n\\n${i18next.t('scanqr')}`;\n\n          if (body?.qrcode?.pairingCode) {\n            msgQrCode =\n              msgQrCode +\n              `\\n\\n*Pairing Code:* ${body.qrcode.pairingCode.substring(0, 4)}-${body.qrcode.pairingCode.substring(\n                4,\n                8,\n              )}`;\n          }\n\n          await this.createBotMessage(instance, msgQrCode, 'incoming');\n        }\n      }\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  public getNumberFromRemoteJid(remoteJid: string) {\n    return remoteJid.replace(/:\\d+/, '').split('@')[0];\n  }\n\n  public startImportHistoryMessages(instance: InstanceDto) {\n    if (!this.isImportHistoryAvailable()) {\n      return;\n    }\n\n    this.createBotMessage(instance, i18next.t('cw.import.startImport'), 'incoming');\n  }\n\n  public isImportHistoryAvailable() {\n    const uri = this.configService.get<Chatwoot>('CHATWOOT').IMPORT.DATABASE.CONNECTION.URI;\n\n    return uri && uri !== 'postgres://user:password@hostname:port/dbname';\n  }\n\n  public addHistoryMessages(instance: InstanceDto, messagesRaw: MessageModel[]) {\n    if (!this.isImportHistoryAvailable()) {\n      return;\n    }\n\n    chatwootImport.addHistoryMessages(instance, messagesRaw);\n  }\n\n  public addHistoryContacts(instance: InstanceDto, contactsRaw: ContactModel[]) {\n    if (!this.isImportHistoryAvailable()) {\n      return;\n    }\n\n    return chatwootImport.addHistoryContacts(instance, contactsRaw);\n  }\n\n  public async importHistoryMessages(instance: InstanceDto) {\n    if (!this.isImportHistoryAvailable()) {\n      return;\n    }\n\n    this.createBotMessage(instance, i18next.t('cw.import.importingMessages'), 'incoming');\n\n    const totalMessagesImported = await chatwootImport.importHistoryMessages(\n      instance,\n      this,\n      await this.getInbox(instance),\n      this.provider,\n    );\n    this.updateContactAvatarInRecentConversations(instance);\n\n    const msg = Number.isInteger(totalMessagesImported)\n      ? i18next.t('cw.import.messagesImported', { totalMessagesImported })\n      : i18next.t('cw.import.messagesException');\n\n    this.createBotMessage(instance, msg, 'incoming');\n\n    return totalMessagesImported;\n  }\n\n  public async updateContactAvatarInRecentConversations(instance: InstanceDto, limitContacts = 100) {\n    try {\n      if (!this.isImportHistoryAvailable()) {\n        return;\n      }\n\n      const client = await this.clientCw(instance);\n      if (!client) {\n        this.logger.warn('client not found');\n        return null;\n      }\n\n      const inbox = await this.getInbox(instance);\n      if (!inbox) {\n        this.logger.warn('inbox not found');\n        return null;\n      }\n\n      const recentContacts = await chatwootImport.getContactsOrderByRecentConversations(\n        inbox,\n        this.provider,\n        limitContacts,\n      );\n\n      const contactIdentifiers = recentContacts\n        .map((contact) => contact.identifier)\n        .filter((identifier) => identifier !== null);\n\n      const contactsWithProfilePicture = (\n        await this.prismaRepository.contact.findMany({\n          where: {\n            instanceId: instance.instanceId,\n            id: {\n              in: contactIdentifiers,\n            },\n            profilePicUrl: {\n              not: null,\n            },\n          },\n        })\n      ).reduce((acc: Map<string, ContactModel>, contact: ContactModel) => acc.set(contact.id, contact), new Map());\n\n      recentContacts.forEach(async (contact) => {\n        if (contactsWithProfilePicture.has(contact.identifier)) {\n          client.contacts.update({\n            accountId: this.provider.accountId,\n            id: contact.id,\n            data: {\n              avatar_url: contactsWithProfilePicture.get(contact.identifier).profilePictureUrl || null,\n            },\n          });\n        }\n      });\n    } catch (error) {\n      this.logger.error(`Error on update avatar in recent conversations: ${error.toString()}`);\n    }\n  }\n\n  public async syncLostMessages(\n    instance: InstanceDto,\n    chatwootConfig: ChatwootDto,\n    prepareMessage: (message: any) => any,\n  ) {\n    try {\n      if (!this.isImportHistoryAvailable()) {\n        return;\n      }\n      if (!this.configService.get<Database>('DATABASE').SAVE_DATA.MESSAGE_UPDATE) {\n        return;\n      }\n\n      const inbox = await this.getInbox(instance);\n\n      const sqlMessages = `select * from messages m\n      where account_id = ${chatwootConfig.accountId}\n      and inbox_id = ${inbox.id}\n      and created_at >= now() - interval '6h'\n      order by created_at desc`;\n\n      const messagesData = (await this.pgClient.query(sqlMessages))?.rows;\n      const ids: string[] = messagesData\n        .filter((message) => !!message.source_id)\n        .map((message) => message.source_id.replace('WAID:', ''));\n\n      const savedMessages = await this.prismaRepository.message.findMany({\n        where: {\n          Instance: { name: instance.instanceName },\n          messageTimestamp: { gte: dayjs().subtract(6, 'hours').unix() },\n          AND: ids.map((id) => ({ key: { path: ['id'], not: id } })),\n        },\n      });\n\n      const filteredMessages = savedMessages.filter(\n        (msg: any) => !chatwootImport.isIgnorePhoneNumber(msg.key?.remoteJid),\n      );\n      const messagesRaw: any[] = [];\n      for (const m of filteredMessages) {\n        if (!m.message || !m.key || !m.messageTimestamp) {\n          continue;\n        }\n\n        if (Long.isLong(m?.messageTimestamp)) {\n          m.messageTimestamp = m.messageTimestamp?.toNumber();\n        }\n\n        messagesRaw.push(prepareMessage(m as any));\n      }\n\n      this.addHistoryMessages(\n        instance,\n        messagesRaw.filter((msg) => !chatwootImport.isIgnorePhoneNumber(msg.key?.remoteJid)),\n      );\n\n      await chatwootImport.importHistoryMessages(instance, this, inbox, this.provider);\n      const waInstance = this.waMonitor.waInstances[instance.instanceName];\n      waInstance.clearCacheChatwoot();\n    } catch (error) {\n      return;\n    }\n  }\n}\n","import { ConfigService, Language } from '@config/env.config';\nimport fs from 'fs';\nimport i18next from 'i18next';\nimport path from 'path';\n\nconst languages = ['en', 'pt-BR', 'es'];\nconst translationsPath = path.join(__dirname, 'translations');\nconst configService: ConfigService = new ConfigService();\n\nconst resources: any = {};\n\nlanguages.forEach((language) => {\n  const languagePath = path.join(translationsPath, `${language}.json`);\n  if (fs.existsSync(languagePath)) {\n    resources[language] = {\n      translation: require(languagePath),\n    };\n  }\n});\n\ni18next.init({\n  resources,\n  fallbackLng: 'en',\n  lng: configService.get<Language>('LANGUAGE'),\n  debug: false,\n\n  interpolation: {\n    escapeValue: false,\n  },\n});\nexport default i18next;\n","import axios from 'axios';\nimport fs from 'fs';\n\nconst packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));\n\nexport interface TelemetryData {\n  route: string;\n  apiVersion: string;\n  timestamp: Date;\n}\n\nexport const sendTelemetry = async (route: string): Promise<void> => {\n  const enabled = process.env.TELEMETRY_ENABLED === undefined || process.env.TELEMETRY_ENABLED === 'true';\n\n  if (!enabled) {\n    return;\n  }\n\n  if (route === '/') {\n    return;\n  }\n\n  const telemetry: TelemetryData = {\n    route,\n    apiVersion: `${packageJson.version}`,\n    timestamp: new Date(),\n  };\n\n  const url =\n    process.env.TELEMETRY_URL && process.env.TELEMETRY_URL !== ''\n      ? process.env.TELEMETRY_URL\n      : 'https://log.evolution-api.com/telemetry';\n\n  axios\n    .post(url, telemetry)\n    .then(() => {})\n    .catch(() => {});\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { Integration } from '@api/types/wa.types';\nimport { Auth, ConfigService, HttpServer } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport { Dify, DifySetting, IntegrationSession } from '@prisma/client';\nimport { sendTelemetry } from '@utils/sendTelemetry';\nimport axios from 'axios';\nimport { Readable } from 'stream';\n\nexport class DifyService {\n  constructor(\n    private readonly waMonitor: WAMonitoringService,\n    private readonly configService: ConfigService,\n    private readonly prismaRepository: PrismaRepository,\n  ) {}\n\n  private readonly logger = new Logger('DifyService');\n\n  public async createNewSession(instance: InstanceDto, data: any) {\n    try {\n      const session = await this.prismaRepository.integrationSession.create({\n        data: {\n          remoteJid: data.remoteJid,\n          pushName: data.pushName,\n          sessionId: data.remoteJid,\n          status: 'opened',\n          awaitUser: false,\n          botId: data.botId,\n          instanceId: instance.instanceId,\n          type: 'dify',\n        },\n      });\n\n      return { session };\n    } catch (error) {\n      this.logger.error(error);\n      return;\n    }\n  }\n\n  private isImageMessage(content: string) {\n    return content.includes('imageMessage');\n  }\n\n  private isJSON(str: string): boolean {\n    try {\n      JSON.parse(str);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  private async sendMessageToBot(\n    instance: any,\n    session: IntegrationSession,\n    settings: DifySetting,\n    dify: Dify,\n    remoteJid: string,\n    pushName: string,\n    content: string,\n  ) {\n    try {\n      let endpoint: string = dify.apiUrl;\n\n      if (dify.botType === 'chatBot') {\n        endpoint += '/chat-messages';\n        const payload: any = {\n          inputs: {\n            remoteJid: remoteJid,\n            pushName: pushName,\n            instanceName: instance.instanceName,\n            serverUrl: this.configService.get<HttpServer>('SERVER').URL,\n            apiKey: this.configService.get<Auth>('AUTHENTICATION').API_KEY.KEY,\n          },\n          query: content,\n          response_mode: 'blocking',\n          conversation_id: session.sessionId === remoteJid ? undefined : session.sessionId,\n          user: remoteJid,\n        };\n\n        if (this.isImageMessage(content)) {\n          const contentSplit = content.split('|');\n\n          payload.files = [\n            {\n              type: 'image',\n              transfer_method: 'remote_url',\n              url: contentSplit[1].split('?')[0],\n            },\n          ];\n          payload.query = contentSplit[2] || content;\n        }\n\n        if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n          await instance.client.presenceSubscribe(remoteJid);\n          await instance.client.sendPresenceUpdate('composing', remoteJid);\n        }\n\n        const response = await axios.post(endpoint, payload, {\n          headers: {\n            Authorization: `Bearer ${dify.apiKey}`,\n          },\n        });\n\n        if (instance.integration === Integration.WHATSAPP_BAILEYS)\n          await instance.client.sendPresenceUpdate('paused', remoteJid);\n\n        const message = response?.data?.answer;\n        const conversationId = response?.data?.conversation_id;\n\n        await this.sendMessageWhatsApp(instance, remoteJid, message, settings);\n\n        await this.prismaRepository.integrationSession.update({\n          where: {\n            id: session.id,\n          },\n          data: {\n            status: 'opened',\n            awaitUser: true,\n            sessionId: session.sessionId === remoteJid ? conversationId : session.sessionId,\n          },\n        });\n      }\n\n      if (dify.botType === 'textGenerator') {\n        endpoint += '/completion-messages';\n        const payload: any = {\n          inputs: {\n            query: content,\n            pushName: pushName,\n            remoteJid: remoteJid,\n            instanceName: instance.instanceName,\n            serverUrl: this.configService.get<HttpServer>('SERVER').URL,\n            apiKey: this.configService.get<Auth>('AUTHENTICATION').API_KEY.KEY,\n          },\n          response_mode: 'blocking',\n          conversation_id: session.sessionId === remoteJid ? undefined : session.sessionId,\n          user: remoteJid,\n        };\n\n        if (this.isImageMessage(content)) {\n          const contentSplit = content.split('|');\n\n          payload.files = [\n            {\n              type: 'image',\n              transfer_method: 'remote_url',\n              url: contentSplit[1].split('?')[0],\n            },\n          ];\n          payload.inputs.query = contentSplit[2] || content;\n        }\n\n        if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n          await instance.client.presenceSubscribe(remoteJid);\n          await instance.client.sendPresenceUpdate('composing', remoteJid);\n        }\n\n        const response = await axios.post(endpoint, payload, {\n          headers: {\n            Authorization: `Bearer ${dify.apiKey}`,\n          },\n        });\n\n        if (instance.integration === Integration.WHATSAPP_BAILEYS)\n          await instance.client.sendPresenceUpdate('paused', remoteJid);\n\n        const message = response?.data?.answer;\n        const conversationId = response?.data?.conversation_id;\n\n        await this.sendMessageWhatsApp(instance, remoteJid, message, settings);\n\n        await this.prismaRepository.integrationSession.update({\n          where: {\n            id: session.id,\n          },\n          data: {\n            status: 'opened',\n            awaitUser: true,\n            sessionId: session.sessionId === remoteJid ? conversationId : session.sessionId,\n          },\n        });\n      }\n\n      if (dify.botType === 'agent') {\n        endpoint += '/chat-messages';\n        const payload: any = {\n          inputs: {\n            remoteJid: remoteJid,\n            pushName: pushName,\n            instanceName: instance.instanceName,\n            serverUrl: this.configService.get<HttpServer>('SERVER').URL,\n            apiKey: this.configService.get<Auth>('AUTHENTICATION').API_KEY.KEY,\n          },\n          query: content,\n          response_mode: 'streaming',\n          conversation_id: session.sessionId === remoteJid ? undefined : session.sessionId,\n          user: remoteJid,\n        };\n\n        if (this.isImageMessage(content)) {\n          const contentSplit = content.split('|');\n\n          payload.files = [\n            {\n              type: 'image',\n              transfer_method: 'remote_url',\n              url: contentSplit[1].split('?')[0],\n            },\n          ];\n          payload.query = contentSplit[2] || content;\n        }\n\n        if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n          await instance.client.presenceSubscribe(remoteJid);\n          await instance.client.sendPresenceUpdate('composing', remoteJid);\n        }\n\n        const response = await axios.post(endpoint, payload, {\n          headers: {\n            Authorization: `Bearer ${dify.apiKey}`,\n          },\n          responseType: 'stream',\n        });\n\n        let conversationId;\n        let answer = '';\n\n        const stream = response.data;\n        const reader = new Readable().wrap(stream);\n\n        reader.on('data', (chunk) => {\n          const data = chunk.toString().replace(/data:\\s*/g, '');\n\n          if (data.trim() === '' || !data.startsWith('{')) {\n            return;\n          }\n\n          try {\n            const events = data.split('\\n').filter((line) => line.trim() !== '');\n\n            for (const eventString of events) {\n              if (eventString.trim().startsWith('{')) {\n                const event = JSON.parse(eventString);\n\n                if (event?.event === 'agent_message') {\n                  console.log('event:', event);\n                  conversationId = conversationId ?? event?.conversation_id;\n                  answer += event?.answer;\n                }\n              }\n            }\n          } catch (error) {\n            console.error('Error parsing stream data:', error);\n          }\n        });\n\n        reader.on('end', async () => {\n          if (instance.integration === Integration.WHATSAPP_BAILEYS)\n            await instance.client.sendPresenceUpdate('paused', remoteJid);\n\n          const message = answer;\n\n          await this.sendMessageWhatsApp(instance, remoteJid, message, settings);\n\n          await this.prismaRepository.integrationSession.update({\n            where: {\n              id: session.id,\n            },\n            data: {\n              status: 'opened',\n              awaitUser: true,\n              sessionId: conversationId,\n            },\n          });\n        });\n\n        reader.on('error', (error) => {\n          console.error('Error reading stream:', error);\n        });\n\n        return;\n      }\n\n      if (dify.botType === 'workflow') {\n        endpoint += '/workflows/run';\n        const payload: any = {\n          inputs: {\n            query: content,\n            remoteJid: remoteJid,\n            pushName: pushName,\n            instanceName: instance.instanceName,\n            serverUrl: this.configService.get<HttpServer>('SERVER').URL,\n            apiKey: this.configService.get<Auth>('AUTHENTICATION').API_KEY.KEY,\n          },\n          response_mode: 'blocking',\n          user: remoteJid,\n        };\n\n        if (this.isImageMessage(content)) {\n          const contentSplit = content.split('|');\n\n          payload.files = [\n            {\n              type: 'image',\n              transfer_method: 'remote_url',\n              url: contentSplit[1].split('?')[0],\n            },\n          ];\n          payload.inputs.query = contentSplit[2] || content;\n        }\n\n        if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n          await instance.client.presenceSubscribe(remoteJid);\n          await instance.client.sendPresenceUpdate('composing', remoteJid);\n        }\n\n        const response = await axios.post(endpoint, payload, {\n          headers: {\n            Authorization: `Bearer ${dify.apiKey}`,\n          },\n        });\n\n        if (instance.integration === Integration.WHATSAPP_BAILEYS)\n          await instance.client.sendPresenceUpdate('paused', remoteJid);\n\n        const message = response?.data?.data.outputs.text;\n\n        await this.sendMessageWhatsApp(instance, remoteJid, message, settings);\n\n        await this.prismaRepository.integrationSession.update({\n          where: {\n            id: session.id,\n          },\n          data: {\n            status: 'opened',\n            awaitUser: true,\n          },\n        });\n\n        return;\n      }\n    } catch (error) {\n      this.logger.error(error.response?.data || error);\n      return;\n    }\n  }\n\n  private async sendMessageWhatsApp(instance: any, remoteJid: string, message: string, settings: DifySetting) {\n    const linkRegex = /(!?)\\[(.*?)\\]\\((.*?)\\)/g;\n\n    let textBuffer = '';\n    let lastIndex = 0;\n\n    let match: RegExpExecArray | null;\n\n    const getMediaType = (url: string): string | null => {\n      const extension = url.split('.').pop()?.toLowerCase();\n      const imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp'];\n      const audioExtensions = ['mp3', 'wav', 'aac', 'ogg'];\n      const videoExtensions = ['mp4', 'avi', 'mkv', 'mov'];\n      const documentExtensions = ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'txt'];\n\n      if (imageExtensions.includes(extension || '')) return 'image';\n      if (audioExtensions.includes(extension || '')) return 'audio';\n      if (videoExtensions.includes(extension || '')) return 'video';\n      if (documentExtensions.includes(extension || '')) return 'document';\n      return null;\n    };\n\n    while ((match = linkRegex.exec(message)) !== null) {\n      const [fullMatch, exclMark, altText, url] = match;\n      const mediaType = getMediaType(url);\n\n      const beforeText = message.slice(lastIndex, match.index);\n      if (beforeText) {\n        textBuffer += beforeText;\n      }\n\n      if (mediaType) {\n        const splitMessages = settings.splitMessages ?? false;\n        const timePerChar = settings.timePerChar ?? 0;\n        const minDelay = 1000;\n        const maxDelay = 20000;\n\n        if (textBuffer.trim()) {\n          if (splitMessages) {\n            const multipleMessages = textBuffer.trim().split('\\n\\n');\n\n            for (let index = 0; index < multipleMessages.length; index++) {\n              const message = multipleMessages[index];\n\n              const delay = Math.min(Math.max(message.length * timePerChar, minDelay), maxDelay);\n\n              if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n                await instance.client.presenceSubscribe(remoteJid);\n                await instance.client.sendPresenceUpdate('composing', remoteJid);\n              }\n\n              await new Promise<void>((resolve) => {\n                setTimeout(async () => {\n                  await instance.textMessage(\n                    {\n                      number: remoteJid.split('@')[0],\n                      delay: settings?.delayMessage || 1000,\n                      text: message,\n                    },\n                    false,\n                  );\n                  resolve();\n                }, delay);\n              });\n\n              if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n                await instance.client.sendPresenceUpdate('paused', remoteJid);\n              }\n            }\n          } else {\n            await instance.textMessage(\n              {\n                number: remoteJid.split('@')[0],\n                delay: settings?.delayMessage || 1000,\n                text: textBuffer.trim(),\n              },\n              false,\n            );\n          }\n          textBuffer = '';\n        }\n\n        if (mediaType === 'audio') {\n          await instance.audioWhatsapp({\n            number: remoteJid.split('@')[0],\n            delay: settings?.delayMessage || 1000,\n            audio: url,\n            caption: altText,\n          });\n        } else {\n          await instance.mediaMessage(\n            {\n              number: remoteJid.split('@')[0],\n              delay: settings?.delayMessage || 1000,\n              mediatype: mediaType,\n              media: url,\n              caption: altText,\n            },\n            null,\n            false,\n          );\n        }\n      } else {\n        textBuffer += `[${altText}](${url})`;\n      }\n\n      lastIndex = linkRegex.lastIndex;\n    }\n\n    if (lastIndex < message.length) {\n      const remainingText = message.slice(lastIndex);\n      if (remainingText.trim()) {\n        textBuffer += remainingText;\n      }\n    }\n\n    const splitMessages = settings.splitMessages ?? false;\n    const timePerChar = settings.timePerChar ?? 0;\n    const minDelay = 1000;\n    const maxDelay = 20000;\n\n    if (textBuffer.trim()) {\n      if (splitMessages) {\n        const multipleMessages = textBuffer.trim().split('\\n\\n');\n\n        for (let index = 0; index < multipleMessages.length; index++) {\n          const message = multipleMessages[index];\n\n          const delay = Math.min(Math.max(message.length * timePerChar, minDelay), maxDelay);\n\n          if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n            await instance.client.presenceSubscribe(remoteJid);\n            await instance.client.sendPresenceUpdate('composing', remoteJid);\n          }\n\n          await new Promise<void>((resolve) => {\n            setTimeout(async () => {\n              await instance.textMessage(\n                {\n                  number: remoteJid.split('@')[0],\n                  delay: settings?.delayMessage || 1000,\n                  text: message,\n                },\n                false,\n              );\n              resolve();\n            }, delay);\n          });\n\n          if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n            await instance.client.sendPresenceUpdate('paused', remoteJid);\n          }\n        }\n      } else {\n        await instance.textMessage(\n          {\n            number: remoteJid.split('@')[0],\n            delay: settings?.delayMessage || 1000,\n            text: textBuffer.trim(),\n          },\n          false,\n        );\n      }\n    }\n\n    sendTelemetry('/message/sendText');\n  }\n\n  private async initNewSession(\n    instance: any,\n    remoteJid: string,\n    dify: Dify,\n    settings: DifySetting,\n    session: IntegrationSession,\n    content: string,\n    pushName?: string,\n  ) {\n    const data = await this.createNewSession(instance, {\n      remoteJid,\n      pushName,\n      botId: dify.id,\n    });\n\n    if (data.session) {\n      session = data.session;\n    }\n\n    await this.sendMessageToBot(instance, session, settings, dify, remoteJid, pushName, content);\n\n    return;\n  }\n\n  public async processDify(\n    instance: any,\n    remoteJid: string,\n    dify: Dify,\n    session: IntegrationSession,\n    settings: DifySetting,\n    content: string,\n    pushName?: string,\n  ) {\n    if (session && session.status !== 'opened') {\n      return;\n    }\n\n    if (session && settings.expire && settings.expire > 0) {\n      const now = Date.now();\n\n      const sessionUpdatedAt = new Date(session.updatedAt).getTime();\n\n      const diff = now - sessionUpdatedAt;\n\n      const diffInMinutes = Math.floor(diff / 1000 / 60);\n\n      if (diffInMinutes > settings.expire) {\n        if (settings.keepOpen) {\n          await this.prismaRepository.integrationSession.update({\n            where: {\n              id: session.id,\n            },\n            data: {\n              status: 'closed',\n            },\n          });\n        } else {\n          await this.prismaRepository.integrationSession.deleteMany({\n            where: {\n              botId: dify.id,\n              remoteJid: remoteJid,\n            },\n          });\n        }\n\n        await this.initNewSession(instance, remoteJid, dify, settings, session, content, pushName);\n        return;\n      }\n    }\n\n    if (!session) {\n      await this.initNewSession(instance, remoteJid, dify, settings, session, content, pushName);\n      return;\n    }\n\n    await this.prismaRepository.integrationSession.update({\n      where: {\n        id: session.id,\n      },\n      data: {\n        status: 'opened',\n        awaitUser: false,\n      },\n    });\n\n    if (!content) {\n      if (settings.unknownMessage) {\n        this.waMonitor.waInstances[instance.instanceName].textMessage(\n          {\n            number: remoteJid.split('@')[0],\n            delay: settings.delayMessage || 1000,\n            text: settings.unknownMessage,\n          },\n          false,\n        );\n\n        sendTelemetry('/message/sendText');\n      }\n      return;\n    }\n\n    if (settings.keywordFinish && content.toLowerCase() === settings.keywordFinish.toLowerCase()) {\n      if (settings.keepOpen) {\n        await this.prismaRepository.integrationSession.update({\n          where: {\n            id: session.id,\n          },\n          data: {\n            status: 'closed',\n          },\n        });\n      } else {\n        await this.prismaRepository.integrationSession.deleteMany({\n          where: {\n            botId: dify.id,\n            remoteJid: remoteJid,\n          },\n        });\n      }\n      return;\n    }\n\n    await this.sendMessageToBot(instance, session, settings, dify, remoteJid, pushName, content);\n\n    return;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { Integration } from '@api/types/wa.types';\nimport { ConfigService, Language } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport { IntegrationSession, OpenaiBot, OpenaiCreds, OpenaiSetting } from '@prisma/client';\nimport { sendTelemetry } from '@utils/sendTelemetry';\nimport axios from 'axios';\nimport { downloadMediaMessage } from 'baileys';\nimport FormData from 'form-data';\nimport OpenAI from 'openai';\nimport P from 'pino';\n\nexport class OpenaiService {\n  constructor(\n    private readonly waMonitor: WAMonitoringService,\n    private readonly configService: ConfigService,\n    private readonly prismaRepository: PrismaRepository,\n  ) {}\n\n  private client: OpenAI;\n\n  private readonly logger = new Logger('OpenaiService');\n\n  private async sendMessageToBot(instance: any, openaiBot: OpenaiBot, remoteJid: string, content: string) {\n    const systemMessages: any = openaiBot.systemMessages;\n\n    const messagesSystem: any[] = systemMessages.map((message) => {\n      return {\n        role: 'system',\n        content: message,\n      };\n    });\n\n    const assistantMessages: any = openaiBot.assistantMessages;\n\n    const messagesAssistant: any[] = assistantMessages.map((message) => {\n      return {\n        role: 'assistant',\n        content: message,\n      };\n    });\n\n    const userMessages: any = openaiBot.userMessages;\n\n    const messagesUser: any[] = userMessages.map((message) => {\n      return {\n        role: 'user',\n        content: message,\n      };\n    });\n\n    const messageData: any = {\n      role: 'user',\n      content: [{ type: 'text', text: content }],\n    };\n\n    if (this.isImageMessage(content)) {\n      const contentSplit = content.split('|');\n\n      const url = contentSplit[1].split('?')[0];\n\n      messageData.content = [\n        { type: 'text', text: contentSplit[2] || content },\n        {\n          type: 'image_url',\n          image_url: {\n            url: url,\n          },\n        },\n      ];\n    }\n\n    const messages: any[] = [...messagesSystem, ...messagesAssistant, ...messagesUser, messageData];\n\n    if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n      await instance.client.presenceSubscribe(remoteJid);\n      await instance.client.sendPresenceUpdate('composing', remoteJid);\n    }\n\n    const completions = await this.client.chat.completions.create({\n      model: openaiBot.model,\n      messages: messages,\n      max_tokens: openaiBot.maxTokens,\n    });\n\n    if (instance.integration === Integration.WHATSAPP_BAILEYS)\n      await instance.client.sendPresenceUpdate('paused', remoteJid);\n\n    const message = completions.choices[0].message.content;\n\n    return message;\n  }\n\n  private async sendMessageToAssistant(\n    instance: any,\n    openaiBot: OpenaiBot,\n    remoteJid: string,\n    pushName: string,\n    fromMe: boolean,\n    content: string,\n    threadId: string,\n  ) {\n    const messageData: any = {\n      role: fromMe ? 'assistant' : 'user',\n      content: [{ type: 'text', text: content }],\n    };\n\n    if (this.isImageMessage(content)) {\n      const contentSplit = content.split('|');\n\n      const url = contentSplit[1].split('?')[0];\n\n      messageData.content = [\n        { type: 'text', text: contentSplit[2] || content },\n        {\n          type: 'image_url',\n          image_url: {\n            url: url,\n          },\n        },\n      ];\n    }\n\n    await this.client.beta.threads.messages.create(threadId, messageData);\n\n    if (fromMe) {\n      sendTelemetry('/message/sendText');\n      return;\n    }\n\n    const runAssistant = await this.client.beta.threads.runs.create(threadId, {\n      assistant_id: openaiBot.assistantId,\n    });\n\n    if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n      await instance.client.presenceSubscribe(remoteJid);\n      await instance.client.sendPresenceUpdate('composing', remoteJid);\n    }\n\n    const response = await this.getAIResponse(threadId, runAssistant.id, openaiBot.functionUrl, remoteJid, pushName);\n\n    if (instance.integration === Integration.WHATSAPP_BAILEYS)\n      await instance.client.sendPresenceUpdate('paused', remoteJid);\n\n    const message = response?.data[0].content[0].text.value;\n\n    return message;\n  }\n\n  private async sendMessageWhatsapp(\n    instance: any,\n    session: IntegrationSession,\n    remoteJid: string,\n    settings: OpenaiSetting,\n    message: string,\n  ) {\n    const linkRegex = /(!?)\\[(.*?)\\]\\((.*?)\\)/g;\n\n    let textBuffer = '';\n    let lastIndex = 0;\n\n    let match: RegExpExecArray | null;\n\n    const getMediaType = (url: string): string | null => {\n      const extension = url.split('.').pop()?.toLowerCase();\n      const imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp'];\n      const audioExtensions = ['mp3', 'wav', 'aac', 'ogg'];\n      const videoExtensions = ['mp4', 'avi', 'mkv', 'mov'];\n      const documentExtensions = ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'txt'];\n\n      if (imageExtensions.includes(extension || '')) return 'image';\n      if (audioExtensions.includes(extension || '')) return 'audio';\n      if (videoExtensions.includes(extension || '')) return 'video';\n      if (documentExtensions.includes(extension || '')) return 'document';\n      return null;\n    };\n\n    while ((match = linkRegex.exec(message)) !== null) {\n      const [fullMatch, exclMark, altText, url] = match;\n      const mediaType = getMediaType(url);\n\n      const beforeText = message.slice(lastIndex, match.index);\n      if (beforeText) {\n        textBuffer += beforeText;\n      }\n\n      if (mediaType) {\n        const splitMessages = settings.splitMessages ?? false;\n        const timePerChar = settings.timePerChar ?? 0;\n        const minDelay = 1000;\n        const maxDelay = 20000;\n\n        if (textBuffer.trim()) {\n          if (splitMessages) {\n            const multipleMessages = textBuffer.trim().split('\\n\\n');\n\n            for (let index = 0; index < multipleMessages.length; index++) {\n              const message = multipleMessages[index];\n\n              const delay = Math.min(Math.max(message.length * timePerChar, minDelay), maxDelay);\n\n              if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n                await instance.client.presenceSubscribe(remoteJid);\n                await instance.client.sendPresenceUpdate('composing', remoteJid);\n              }\n\n              await new Promise<void>((resolve) => {\n                setTimeout(async () => {\n                  await instance.textMessage(\n                    {\n                      number: remoteJid.split('@')[0],\n                      delay: settings?.delayMessage || 1000,\n                      text: message,\n                    },\n                    false,\n                  );\n                  resolve();\n                }, delay);\n              });\n\n              if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n                await instance.client.sendPresenceUpdate('paused', remoteJid);\n              }\n            }\n          } else {\n            await instance.textMessage(\n              {\n                number: remoteJid.split('@')[0],\n                delay: settings?.delayMessage || 1000,\n                text: textBuffer.trim(),\n              },\n              false,\n            );\n          }\n          textBuffer = '';\n        }\n\n        if (mediaType === 'audio') {\n          await instance.audioWhatsapp({\n            number: remoteJid.split('@')[0],\n            delay: settings?.delayMessage || 1000,\n            audio: url,\n            caption: altText,\n          });\n        } else {\n          await instance.mediaMessage(\n            {\n              number: remoteJid.split('@')[0],\n              delay: settings?.delayMessage || 1000,\n              mediatype: mediaType,\n              media: url,\n              caption: altText,\n            },\n            null,\n            false,\n          );\n        }\n      } else {\n        textBuffer += `[${altText}](${url})`;\n      }\n\n      lastIndex = linkRegex.lastIndex;\n    }\n\n    if (lastIndex < message.length) {\n      const remainingText = message.slice(lastIndex);\n      if (remainingText.trim()) {\n        textBuffer += remainingText;\n      }\n    }\n\n    const splitMessages = settings.splitMessages ?? false;\n    const timePerChar = settings.timePerChar ?? 0;\n    const minDelay = 1000;\n    const maxDelay = 20000;\n\n    if (textBuffer.trim()) {\n      if (splitMessages) {\n        const multipleMessages = textBuffer.trim().split('\\n\\n');\n\n        for (let index = 0; index < multipleMessages.length; index++) {\n          const message = multipleMessages[index];\n\n          const delay = Math.min(Math.max(message.length * timePerChar, minDelay), maxDelay);\n\n          if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n            await instance.client.presenceSubscribe(remoteJid);\n            await instance.client.sendPresenceUpdate('composing', remoteJid);\n          }\n\n          await new Promise<void>((resolve) => {\n            setTimeout(async () => {\n              await instance.textMessage(\n                {\n                  number: remoteJid.split('@')[0],\n                  delay: settings?.delayMessage || 1000,\n                  text: message,\n                },\n                false,\n              );\n              resolve();\n            }, delay);\n          });\n\n          if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n            await instance.client.sendPresenceUpdate('paused', remoteJid);\n          }\n        }\n      } else {\n        await instance.textMessage(\n          {\n            number: remoteJid.split('@')[0],\n            delay: settings?.delayMessage || 1000,\n            text: textBuffer.trim(),\n          },\n          false,\n        );\n      }\n      textBuffer = '';\n    }\n\n    sendTelemetry('/message/sendText');\n\n    await this.prismaRepository.integrationSession.update({\n      where: {\n        id: session.id,\n      },\n      data: {\n        status: 'opened',\n        awaitUser: true,\n      },\n    });\n  }\n\n  public async createAssistantNewSession(instance: InstanceDto, data: any) {\n    if (data.remoteJid === 'status@broadcast') return;\n\n    const creds = await this.prismaRepository.openaiCreds.findFirst({\n      where: {\n        id: data.openaiCredsId,\n      },\n    });\n\n    if (!creds) throw new Error('Openai Creds not found');\n\n    try {\n      this.client = new OpenAI({\n        apiKey: creds.apiKey,\n      });\n\n      const threadId = (await this.client.beta.threads.create({})).id;\n\n      let session = null;\n      if (threadId) {\n        session = await this.prismaRepository.integrationSession.create({\n          data: {\n            remoteJid: data.remoteJid,\n            pushName: data.pushName,\n            sessionId: threadId,\n            status: 'opened',\n            awaitUser: false,\n            botId: data.botId,\n            instanceId: instance.instanceId,\n            type: 'openai',\n          },\n        });\n      }\n      return { session };\n    } catch (error) {\n      this.logger.error(error);\n      return;\n    }\n  }\n\n  private async initAssistantNewSession(\n    instance: any,\n    remoteJid: string,\n    pushName: string,\n    fromMe: boolean,\n    openaiBot: OpenaiBot,\n    settings: OpenaiSetting,\n    session: IntegrationSession,\n    content: string,\n  ) {\n    const data = await this.createAssistantNewSession(instance, {\n      remoteJid,\n      pushName,\n      openaiCredsId: openaiBot.openaiCredsId,\n      botId: openaiBot.id,\n    });\n\n    if (data.session) {\n      session = data.session;\n    }\n\n    const message = await this.sendMessageToAssistant(\n      instance,\n      openaiBot,\n      remoteJid,\n      pushName,\n      fromMe,\n      content,\n      session.sessionId,\n    );\n\n    await this.sendMessageWhatsapp(instance, session, remoteJid, settings, message);\n\n    return;\n  }\n\n  private isJSON(str: string): boolean {\n    try {\n      JSON.parse(str);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  private async getAIResponse(\n    threadId: string,\n    runId: string,\n    functionUrl: string,\n    remoteJid: string,\n    pushName: string,\n  ) {\n    const getRun = await this.client.beta.threads.runs.retrieve(threadId, runId);\n    let toolCalls;\n    switch (getRun.status) {\n      case 'requires_action':\n        toolCalls = getRun?.required_action?.submit_tool_outputs?.tool_calls;\n\n        if (toolCalls) {\n          for (const toolCall of toolCalls) {\n            const id = toolCall.id;\n            const functionName = toolCall?.function?.name;\n            const functionArgument = this.isJSON(toolCall?.function?.arguments)\n              ? JSON.parse(toolCall?.function?.arguments)\n              : toolCall?.function?.arguments;\n\n            let output = null;\n\n            try {\n              const { data } = await axios.post(functionUrl, {\n                name: functionName,\n                arguments: { ...functionArgument, remoteJid, pushName },\n              });\n\n              output = JSON.stringify(data)\n                .replace(/\\\\/g, '\\\\\\\\')\n                .replace(/\"/g, '\\\\\"')\n                .replace(/\\n/g, '\\\\n')\n                .replace(/\\r/g, '\\\\r')\n                .replace(/\\t/g, '\\\\t');\n            } catch (error) {\n              output = JSON.stringify(error)\n                .replace(/\\\\/g, '\\\\\\\\')\n                .replace(/\"/g, '\\\\\"')\n                .replace(/\\n/g, '\\\\n')\n                .replace(/\\r/g, '\\\\r')\n                .replace(/\\t/g, '\\\\t');\n            }\n\n            await this.client.beta.threads.runs.submitToolOutputs(threadId, runId, {\n              tool_outputs: [\n                {\n                  tool_call_id: id,\n                  output,\n                },\n              ],\n            });\n          }\n        }\n\n        return this.getAIResponse(threadId, runId, functionUrl, remoteJid, pushName);\n      case 'queued':\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n        return this.getAIResponse(threadId, runId, functionUrl, remoteJid, pushName);\n      case 'in_progress':\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n        return this.getAIResponse(threadId, runId, functionUrl, remoteJid, pushName);\n      case 'completed':\n        return await this.client.beta.threads.messages.list(threadId, {\n          run_id: runId,\n          limit: 1,\n        });\n    }\n  }\n\n  private isImageMessage(content: string) {\n    return content.includes('imageMessage');\n  }\n\n  public async processOpenaiAssistant(\n    instance: any,\n    remoteJid: string,\n    pushName: string,\n    fromMe: boolean,\n    openaiBot: OpenaiBot,\n    session: IntegrationSession,\n    settings: OpenaiSetting,\n    content: string,\n  ) {\n    if (session && session.status === 'closed') {\n      return;\n    }\n\n    if (session && settings.expire && settings.expire > 0) {\n      const now = Date.now();\n\n      const sessionUpdatedAt = new Date(session.updatedAt).getTime();\n\n      const diff = now - sessionUpdatedAt;\n\n      const diffInMinutes = Math.floor(diff / 1000 / 60);\n\n      if (diffInMinutes > settings.expire) {\n        if (settings.keepOpen) {\n          await this.prismaRepository.integrationSession.update({\n            where: {\n              id: session.id,\n            },\n            data: {\n              status: 'closed',\n            },\n          });\n        } else {\n          await this.prismaRepository.integrationSession.deleteMany({\n            where: {\n              botId: openaiBot.id,\n              remoteJid: remoteJid,\n            },\n          });\n        }\n\n        await this.initAssistantNewSession(\n          instance,\n          remoteJid,\n          pushName,\n          fromMe,\n          openaiBot,\n          settings,\n          session,\n          content,\n        );\n        return;\n      }\n    }\n\n    if (!session) {\n      await this.initAssistantNewSession(instance, remoteJid, pushName, fromMe, openaiBot, settings, session, content);\n      return;\n    }\n\n    if (session.status !== 'paused')\n      await this.prismaRepository.integrationSession.update({\n        where: {\n          id: session.id,\n        },\n        data: {\n          status: 'opened',\n          awaitUser: false,\n        },\n      });\n\n    if (!content) {\n      if (settings.unknownMessage) {\n        this.waMonitor.waInstances[instance.instanceName].textMessage(\n          {\n            number: remoteJid.split('@')[0],\n            delay: settings.delayMessage || 1000,\n            text: settings.unknownMessage,\n          },\n          false,\n        );\n\n        sendTelemetry('/message/sendText');\n      }\n      return;\n    }\n\n    if (settings.keywordFinish && content.toLowerCase() === settings.keywordFinish.toLowerCase()) {\n      if (settings.keepOpen) {\n        await this.prismaRepository.integrationSession.update({\n          where: {\n            id: session.id,\n          },\n          data: {\n            status: 'closed',\n          },\n        });\n      } else {\n        await this.prismaRepository.integrationSession.deleteMany({\n          where: {\n            botId: openaiBot.id,\n            remoteJid: remoteJid,\n          },\n        });\n      }\n      return;\n    }\n\n    const creds = await this.prismaRepository.openaiCreds.findFirst({\n      where: {\n        id: openaiBot.openaiCredsId,\n      },\n    });\n\n    if (!creds) throw new Error('Openai Creds not found');\n\n    this.client = new OpenAI({\n      apiKey: creds.apiKey,\n    });\n\n    const threadId = session.sessionId;\n\n    const message = await this.sendMessageToAssistant(\n      instance,\n      openaiBot,\n      remoteJid,\n      pushName,\n      fromMe,\n      content,\n      threadId,\n    );\n\n    await this.sendMessageWhatsapp(instance, session, remoteJid, settings, message);\n\n    return;\n  }\n\n  public async createChatCompletionNewSession(instance: InstanceDto, data: any) {\n    if (data.remoteJid === 'status@broadcast') return;\n\n    const id = Math.floor(Math.random() * 10000000000).toString();\n\n    const creds = await this.prismaRepository.openaiCreds.findFirst({\n      where: {\n        id: data.openaiCredsId,\n      },\n    });\n\n    if (!creds) throw new Error('Openai Creds not found');\n\n    try {\n      const session = await this.prismaRepository.integrationSession.create({\n        data: {\n          remoteJid: data.remoteJid,\n          pushName: data.pushName,\n          sessionId: id,\n          status: 'opened',\n          awaitUser: false,\n          botId: data.botId,\n          instanceId: instance.instanceId,\n          type: 'openai',\n        },\n      });\n\n      return { session, creds };\n    } catch (error) {\n      this.logger.error(error);\n      return;\n    }\n  }\n\n  private async initChatCompletionNewSession(\n    instance: any,\n    remoteJid: string,\n    pushName: string,\n    openaiBot: OpenaiBot,\n    settings: OpenaiSetting,\n    session: IntegrationSession,\n    content: string,\n  ) {\n    const data = await this.createChatCompletionNewSession(instance, {\n      remoteJid,\n      pushName,\n      openaiCredsId: openaiBot.openaiCredsId,\n      botId: openaiBot.id,\n    });\n\n    session = data.session;\n\n    const creds = data.creds;\n\n    this.client = new OpenAI({\n      apiKey: creds.apiKey,\n    });\n\n    const message = await this.sendMessageToBot(instance, openaiBot, remoteJid, content);\n\n    await this.sendMessageWhatsapp(instance, session, remoteJid, settings, message);\n\n    return;\n  }\n\n  public async processOpenaiChatCompletion(\n    instance: any,\n    remoteJid: string,\n    pushName: string,\n    openaiBot: OpenaiBot,\n    session: IntegrationSession,\n    settings: OpenaiSetting,\n    content: string,\n  ) {\n    if (session && session.status !== 'opened') {\n      return;\n    }\n\n    if (session && settings.expire && settings.expire > 0) {\n      const now = Date.now();\n\n      const sessionUpdatedAt = new Date(session.updatedAt).getTime();\n\n      const diff = now - sessionUpdatedAt;\n\n      const diffInMinutes = Math.floor(diff / 1000 / 60);\n\n      if (diffInMinutes > settings.expire) {\n        if (settings.keepOpen) {\n          await this.prismaRepository.integrationSession.update({\n            where: {\n              id: session.id,\n            },\n            data: {\n              status: 'closed',\n            },\n          });\n        } else {\n          await this.prismaRepository.integrationSession.deleteMany({\n            where: {\n              botId: openaiBot.id,\n              remoteJid: remoteJid,\n            },\n          });\n        }\n\n        await this.initChatCompletionNewSession(instance, remoteJid, pushName, openaiBot, settings, session, content);\n        return;\n      }\n    }\n\n    if (!session) {\n      await this.initChatCompletionNewSession(instance, remoteJid, pushName, openaiBot, settings, session, content);\n      return;\n    }\n\n    await this.prismaRepository.integrationSession.update({\n      where: {\n        id: session.id,\n      },\n      data: {\n        status: 'opened',\n        awaitUser: false,\n      },\n    });\n\n    if (!content) {\n      if (settings.unknownMessage) {\n        this.waMonitor.waInstances[instance.instanceName].textMessage(\n          {\n            number: remoteJid.split('@')[0],\n            delay: settings.delayMessage || 1000,\n            text: settings.unknownMessage,\n          },\n          false,\n        );\n\n        sendTelemetry('/message/sendText');\n      }\n      return;\n    }\n\n    if (settings.keywordFinish && content.toLowerCase() === settings.keywordFinish.toLowerCase()) {\n      if (settings.keepOpen) {\n        await this.prismaRepository.integrationSession.update({\n          where: {\n            id: session.id,\n          },\n          data: {\n            status: 'closed',\n          },\n        });\n      } else {\n        await this.prismaRepository.integrationSession.deleteMany({\n          where: {\n            botId: openaiBot.id,\n            remoteJid: remoteJid,\n          },\n        });\n      }\n      return;\n    }\n\n    const creds = await this.prismaRepository.openaiCreds.findFirst({\n      where: {\n        id: openaiBot.openaiCredsId,\n      },\n    });\n\n    if (!creds) throw new Error('Openai Creds not found');\n\n    this.client = new OpenAI({\n      apiKey: creds.apiKey,\n    });\n\n    const message = await this.sendMessageToBot(instance, openaiBot, remoteJid, content);\n\n    await this.sendMessageWhatsapp(instance, session, remoteJid, settings, message);\n\n    return;\n  }\n\n  public async speechToText(creds: OpenaiCreds, msg: any, updateMediaMessage: any) {\n    let audio;\n\n    if (msg?.message?.mediaUrl) {\n      audio = await axios.get(msg.message.mediaUrl, { responseType: 'arraybuffer' }).then((response) => {\n        return Buffer.from(response.data, 'binary');\n      });\n    } else {\n      audio = await downloadMediaMessage(\n        { key: msg.key, message: msg?.message },\n        'buffer',\n        {},\n        {\n          logger: P({ level: 'error' }) as any,\n          reuploadRequest: updateMediaMessage,\n        },\n      );\n    }\n\n    const lang = this.configService.get<Language>('LANGUAGE').includes('pt')\n      ? 'pt'\n      : this.configService.get<Language>('LANGUAGE');\n\n    const formData = new FormData();\n\n    formData.append('file', audio, 'audio.ogg');\n    formData.append('model', 'whisper-1');\n    formData.append('language', lang);\n\n    const response = await axios.post('https://api.openai.com/v1/audio/transcriptions', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        Authorization: `Bearer ${creds.apiKey}`,\n      },\n    });\n\n    return response?.data?.text;\n  }\n}\n","import { configService, S3 } from '@config/env.config';\n\nconst getTypeMessage = (msg: any) => {\n  let mediaId: string;\n\n  if (configService.get<S3>('S3').ENABLE) mediaId = msg.message.mediaUrl;\n  else mediaId = msg.key.id;\n\n  const types = {\n    conversation: msg?.message?.conversation,\n    extendedTextMessage: msg?.message?.extendedTextMessage?.text,\n    contactMessage: msg?.message?.contactMessage?.displayName,\n    locationMessage: msg?.message?.locationMessage?.degreesLatitude,\n    viewOnceMessageV2:\n      msg?.message?.viewOnceMessageV2?.message?.imageMessage?.url ||\n      msg?.message?.viewOnceMessageV2?.message?.videoMessage?.url ||\n      msg?.message?.viewOnceMessageV2?.message?.audioMessage?.url,\n    listResponseMessage: msg?.message?.listResponseMessage?.title,\n    responseRowId: msg?.message?.listResponseMessage?.singleSelectReply?.selectedRowId,\n    templateButtonReplyMessage:\n      msg?.message?.templateButtonReplyMessage?.selectedId || msg?.message?.buttonsResponseMessage?.selectedButtonId,\n    // Medias\n    audioMessage: msg?.message?.speechToText\n      ? msg?.message?.speechToText\n      : msg?.message?.audioMessage\n        ? `audioMessage|${mediaId}`\n        : undefined,\n    imageMessage: msg?.message?.imageMessage\n      ? `imageMessage|${mediaId}${msg?.message?.imageMessage?.caption ? `|${msg?.message?.imageMessage?.caption}` : ''}`\n      : undefined,\n    videoMessage: msg?.message?.videoMessage\n      ? `videoMessage|${mediaId}${msg?.message?.videoMessage?.caption ? `|${msg?.message?.videoMessage?.caption}` : ''}`\n      : undefined,\n    documentMessage: msg?.message?.documentMessage\n      ? `documentMessage|${mediaId}${\n          msg?.message?.documentMessage?.caption ? `|${msg?.message?.documentMessage?.caption}` : ''\n        }`\n      : undefined,\n    documentWithCaptionMessage: msg?.message?.documentWithCaptionMessage?.message?.documentMessage\n      ? `documentWithCaptionMessage|${mediaId}${\n          msg?.message?.documentWithCaptionMessage?.message?.documentMessage?.caption\n            ? `|${msg?.message?.documentWithCaptionMessage?.message?.documentMessage?.caption}`\n            : ''\n        }`\n      : undefined,\n    externalAdReplyBody: msg?.contextInfo?.externalAdReply?.body\n      ? `externalAdReplyBody|${msg.contextInfo.externalAdReply.body}`\n      : undefined,\n  };\n\n  const messageType = Object.keys(types).find((key) => types[key] !== undefined) || 'unknown';\n\n  return { ...types, messageType };\n};\n\nconst getMessageContent = (types: any) => {\n  const typeKey = Object.keys(types).find((key) => key !== 'externalAdReplyBody' && types[key] !== undefined);\n\n  let result = typeKey ? types[typeKey] : undefined;\n\n  if (types.externalAdReplyBody) {\n    result = result ? `${result}\\n${types.externalAdReplyBody}` : types.externalAdReplyBody;\n  }\n\n  return result;\n};\n\nexport const getConversationMessage = (msg: any) => {\n  const types = getTypeMessage(msg);\n\n  const messageContent = getMessageContent(types);\n\n  return messageContent;\n};\n","import { PrismaRepository } from '@api/repository/repository.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { Auth, ConfigService, HttpServer, Typebot } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport { Instance, IntegrationSession, Message, Typebot as TypebotModel } from '@prisma/client';\nimport { getConversationMessage } from '@utils/getConversationMessage';\nimport { sendTelemetry } from '@utils/sendTelemetry';\nimport axios from 'axios';\n\nexport class TypebotService {\n  constructor(\n    private readonly waMonitor: WAMonitoringService,\n    private readonly configService: ConfigService,\n    private readonly prismaRepository: PrismaRepository,\n  ) {}\n\n  private readonly logger = new Logger('TypebotService');\n\n  public async createNewSession(instance: Instance, data: any) {\n    if (data.remoteJid === 'status@broadcast') return;\n    const id = Math.floor(Math.random() * 10000000000).toString();\n\n    try {\n      const version = this.configService.get<Typebot>('TYPEBOT').API_VERSION;\n      let url: string;\n      let reqData: {};\n      if (version === 'latest') {\n        url = `${data.url}/api/v1/typebots/${data.typebot}/startChat`;\n\n        reqData = {\n          prefilledVariables: {\n            ...data.prefilledVariables,\n            remoteJid: data.remoteJid,\n            pushName: data.pushName || data.prefilledVariables?.pushName || '',\n            instanceName: instance.name,\n            serverUrl: this.configService.get<HttpServer>('SERVER').URL,\n            apiKey: this.configService.get<Auth>('AUTHENTICATION').API_KEY.KEY,\n            ownerJid: instance.number,\n          },\n        };\n      } else {\n        url = `${data.url}/api/v1/sendMessage`;\n\n        reqData = {\n          startParams: {\n            publicId: data.typebot,\n            prefilledVariables: {\n              ...data.prefilledVariables,\n              remoteJid: data.remoteJid,\n              pushName: data.pushName || data.prefilledVariables?.pushName || '',\n              instanceName: instance.name,\n              serverUrl: this.configService.get<HttpServer>('SERVER').URL,\n              apiKey: this.configService.get<Auth>('AUTHENTICATION').API_KEY.KEY,\n              ownerJid: instance.number,\n            },\n          },\n        };\n      }\n      const request = await axios.post(url, reqData);\n\n      let session = null;\n      if (request?.data?.sessionId) {\n        session = await this.prismaRepository.integrationSession.create({\n          data: {\n            remoteJid: data.remoteJid,\n            pushName: data.pushName || '',\n            sessionId: `${id}-${request.data.sessionId}`,\n            status: 'opened',\n            parameters: {\n              ...data.prefilledVariables,\n              remoteJid: data.remoteJid,\n              pushName: data.pushName || '',\n              instanceName: instance.name,\n              serverUrl: this.configService.get<HttpServer>('SERVER').URL,\n              apiKey: this.configService.get<Auth>('AUTHENTICATION').API_KEY.KEY,\n              ownerJid: instance.number,\n            },\n            awaitUser: false,\n            botId: data.botId,\n            instanceId: instance.id,\n            type: 'typebot',\n          },\n        });\n      }\n      return { ...request.data, session };\n    } catch (error) {\n      this.logger.error(error);\n      return;\n    }\n  }\n\n  public async sendWAMessage(\n    instance: Instance,\n    session: IntegrationSession,\n    settings: {\n      expire: number;\n      keywordFinish: string;\n      delayMessage: number;\n      unknownMessage: string;\n      listeningFromMe: boolean;\n      stopBotFromMe: boolean;\n      keepOpen: boolean;\n    },\n    remoteJid: string,\n    messages: any,\n    input: any,\n    clientSideActions: any,\n  ) {\n    processMessages(\n      this.waMonitor.waInstances[instance.name],\n      session,\n      settings,\n      messages,\n      input,\n      clientSideActions,\n      applyFormatting,\n      this.prismaRepository,\n    ).catch((err) => {\n      console.error('Erro ao processar mensagens:', err);\n    });\n\n    function findItemAndGetSecondsToWait(array, targetId) {\n      if (!array) return null;\n\n      for (const item of array) {\n        if (item.lastBubbleBlockId === targetId) {\n          return item.wait?.secondsToWaitFor;\n        }\n      }\n      return null;\n    }\n\n    function applyFormatting(element) {\n      let text = '';\n\n      if (element.text) {\n        text += element.text;\n      }\n\n      if (element.children && element.type !== 'a') {\n        for (const child of element.children) {\n          text += applyFormatting(child);\n        }\n      }\n\n      if (element.type === 'p' && element.type !== 'inline-variable') {\n        text = text.trim() + '\\n';\n      }\n\n      if (element.type === 'inline-variable') {\n        text = text.trim();\n      }\n\n      if (element.type === 'ol') {\n        text =\n          '\\n' +\n          text\n            .split('\\n')\n            .map((line, index) => (line ? `${index + 1}. ${line}` : ''))\n            .join('\\n');\n      }\n\n      if (element.type === 'li') {\n        text = text\n          .split('\\n')\n          .map((line) => (line ? `  ${line}` : ''))\n          .join('\\n');\n      }\n\n      let formats = '';\n\n      if (element.bold) {\n        formats += '*';\n      }\n\n      if (element.italic) {\n        formats += '_';\n      }\n\n      if (element.underline) {\n        formats += '~';\n      }\n\n      let formattedText = `${formats}${text}${formats.split('').reverse().join('')}`;\n\n      if (element.url) {\n        formattedText = element.children[0]?.text ? `[${formattedText}]\\n(${element.url})` : `${element.url}`;\n      }\n\n      return formattedText;\n    }\n\n    async function processMessages(\n      instance: any,\n      session: IntegrationSession,\n      settings: {\n        expire: number;\n        keywordFinish: string;\n        delayMessage: number;\n        unknownMessage: string;\n        listeningFromMe: boolean;\n        stopBotFromMe: boolean;\n        keepOpen: boolean;\n      },\n      messages: any,\n      input: any,\n      clientSideActions: any,\n      applyFormatting: any,\n      prismaRepository: PrismaRepository,\n    ) {\n      for (const message of messages) {\n        if (message.type === 'text') {\n          let formattedText = '';\n\n          for (const richText of message.content.richText) {\n            for (const element of richText.children) {\n              formattedText += applyFormatting(element);\n            }\n            formattedText += '\\n';\n          }\n\n          formattedText = formattedText.replace(/\\*\\*/g, '').replace(/__/, '').replace(/~~/, '').replace(/\\n$/, '');\n\n          formattedText = formattedText.replace(/\\n$/, '');\n\n          if (formattedText.includes('[list]')) {\n            const listJson = {\n              number: remoteJid.split('@')[0],\n              title: '',\n              description: '',\n              buttonText: '',\n              footerText: '',\n              sections: [],\n            };\n\n            const titleMatch = formattedText.match(/\\[title\\]([\\s\\S]*?)(?=\\[description\\])/);\n            const descriptionMatch = formattedText.match(/\\[description\\]([\\s\\S]*?)(?=\\[buttonText\\])/);\n            const buttonTextMatch = formattedText.match(/\\[buttonText\\]([\\s\\S]*?)(?=\\[footerText\\])/);\n            const footerTextMatch = formattedText.match(/\\[footerText\\]([\\s\\S]*?)(?=\\[menu\\])/);\n\n            if (titleMatch) listJson.title = titleMatch[1].trim();\n            if (descriptionMatch) listJson.description = descriptionMatch[1].trim();\n            if (buttonTextMatch) listJson.buttonText = buttonTextMatch[1].trim();\n            if (footerTextMatch) listJson.footerText = footerTextMatch[1].trim();\n\n            const menuContent = formattedText.match(/\\[menu\\]([\\s\\S]*?)\\[\\/menu\\]/)?.[1];\n            if (menuContent) {\n              const sections = menuContent.match(/\\[section\\]([\\s\\S]*?)(?=\\[section\\]|\\[\\/section\\]|\\[\\/menu\\])/g);\n              if (sections) {\n                sections.forEach((section) => {\n                  const sectionTitle = section.match(/title: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                  const rows = section.match(/\\[row\\]([\\s\\S]*?)(?=\\[row\\]|\\[\\/row\\]|\\[\\/section\\]|\\[\\/menu\\])/g);\n\n                  const sectionData = {\n                    title: sectionTitle,\n                    rows:\n                      rows?.map((row) => ({\n                        title: row.match(/title: (.*?)(?:\\n|$)/)?.[1]?.trim(),\n                        description: row.match(/description: (.*?)(?:\\n|$)/)?.[1]?.trim(),\n                        rowId: row.match(/rowId: (.*?)(?:\\n|$)/)?.[1]?.trim(),\n                      })) || [],\n                  };\n\n                  listJson.sections.push(sectionData);\n                });\n              }\n            }\n\n            await instance.listMessage(listJson);\n          } else if (formattedText.includes('[buttons]')) {\n            const buttonJson = {\n              number: remoteJid.split('@')[0],\n              thumbnailUrl: undefined,\n              title: '',\n              description: '',\n              footer: '',\n              buttons: [],\n            };\n\n            const thumbnailUrlMatch = formattedText.match(/\\[thumbnailUrl\\]([\\s\\S]*?)(?=\\[title\\])/);\n            const titleMatch = formattedText.match(/\\[title\\]([\\s\\S]*?)(?=\\[description\\])/);\n            const descriptionMatch = formattedText.match(/\\[description\\]([\\s\\S]*?)(?=\\[footer\\])/);\n            const footerMatch = formattedText.match(/\\[footer\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url))/);\n\n            if (titleMatch) buttonJson.title = titleMatch[1].trim();\n            if (thumbnailUrlMatch) buttonJson.thumbnailUrl = thumbnailUrlMatch[1].trim();\n            if (descriptionMatch) buttonJson.description = descriptionMatch[1].trim();\n            if (footerMatch) buttonJson.footer = footerMatch[1].trim();\n\n            const buttonTypes = {\n              reply: /\\[reply\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\n              pix: /\\[pix\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\n              copy: /\\[copy\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\n              call: /\\[call\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\n              url: /\\[url\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\n            };\n\n            for (const [type, pattern] of Object.entries(buttonTypes)) {\n              let match;\n              while ((match = pattern.exec(formattedText)) !== null) {\n                const content = match[1].trim();\n                const button: any = { type };\n\n                switch (type) {\n                  case 'pix':\n                    button.currency = content.match(/currency: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.name = content.match(/name: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.keyType = content.match(/keyType: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.key = content.match(/key: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    break;\n\n                  case 'reply':\n                    button.displayText = content.match(/displayText: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.id = content.match(/id: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    break;\n\n                  case 'copy':\n                    button.displayText = content.match(/displayText: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.copyCode = content.match(/copyCode: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    break;\n\n                  case 'call':\n                    button.displayText = content.match(/displayText: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.phoneNumber = content.match(/phone: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    break;\n\n                  case 'url':\n                    button.displayText = content.match(/displayText: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.url = content.match(/url: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    break;\n                }\n\n                if (Object.keys(button).length > 1) {\n                  buttonJson.buttons.push(button);\n                }\n              }\n            }\n\n            await instance.buttonMessage(buttonJson);\n          } else {\n            await instance.textMessage(\n              {\n                number: remoteJid.split('@')[0],\n                delay: settings?.delayMessage || 1000,\n                text: formattedText,\n              },\n              false,\n            );\n          }\n\n          sendTelemetry('/message/sendText');\n        }\n\n        if (message.type === 'image') {\n          await instance.mediaMessage(\n            {\n              number: remoteJid.split('@')[0],\n              delay: settings?.delayMessage || 1000,\n              mediatype: 'image',\n              media: message.content.url,\n            },\n            null,\n            false,\n          );\n\n          sendTelemetry('/message/sendMedia');\n        }\n\n        if (message.type === 'video') {\n          await instance.mediaMessage(\n            {\n              number: remoteJid.split('@')[0],\n              delay: settings?.delayMessage || 1000,\n              mediatype: 'video',\n              media: message.content.url,\n            },\n            null,\n            false,\n          );\n\n          sendTelemetry('/message/sendMedia');\n        }\n\n        if (message.type === 'audio') {\n          await instance.audioWhatsapp(\n            {\n              number: remoteJid.split('@')[0],\n              delay: settings?.delayMessage || 1000,\n              encoding: true,\n              audio: message.content.url,\n            },\n            false,\n          );\n\n          sendTelemetry('/message/sendWhatsAppAudio');\n        }\n\n        const wait = findItemAndGetSecondsToWait(clientSideActions, message.id);\n\n        if (wait) {\n          await new Promise((resolve) => setTimeout(resolve, wait * 1000));\n        }\n      }\n\n      console.log('input', input);\n      if (input) {\n        if (input.type === 'choice input') {\n          let formattedText = '';\n\n          const items = input.items;\n\n          for (const item of items) {\n            formattedText += `▶️ ${item.content}\\n`;\n          }\n\n          formattedText = formattedText.replace(/\\n$/, '');\n\n          if (formattedText.includes('[list]')) {\n            const listJson = {\n              number: remoteJid.split('@')[0],\n              title: '',\n              description: '',\n              buttonText: '',\n              footerText: '',\n              sections: [],\n            };\n\n            const titleMatch = formattedText.match(/\\[title\\]([\\s\\S]*?)(?=\\[description\\])/);\n            const descriptionMatch = formattedText.match(/\\[description\\]([\\s\\S]*?)(?=\\[buttonText\\])/);\n            const buttonTextMatch = formattedText.match(/\\[buttonText\\]([\\s\\S]*?)(?=\\[footerText\\])/);\n            const footerTextMatch = formattedText.match(/\\[footerText\\]([\\s\\S]*?)(?=\\[menu\\])/);\n\n            if (titleMatch) listJson.title = titleMatch[1].trim();\n            if (descriptionMatch) listJson.description = descriptionMatch[1].trim();\n            if (buttonTextMatch) listJson.buttonText = buttonTextMatch[1].trim();\n            if (footerTextMatch) listJson.footerText = footerTextMatch[1].trim();\n\n            const menuContent = formattedText.match(/\\[menu\\]([\\s\\S]*?)\\[\\/menu\\]/)?.[1];\n            if (menuContent) {\n              const sections = menuContent.match(/\\[section\\]([\\s\\S]*?)(?=\\[section\\]|\\[\\/section\\]|\\[\\/menu\\])/g);\n              if (sections) {\n                sections.forEach((section) => {\n                  const sectionTitle = section.match(/title: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                  const rows = section.match(/\\[row\\]([\\s\\S]*?)(?=\\[row\\]|\\[\\/row\\]|\\[\\/section\\]|\\[\\/menu\\])/g);\n\n                  const sectionData = {\n                    title: sectionTitle,\n                    rows:\n                      rows?.map((row) => ({\n                        title: row.match(/title: (.*?)(?:\\n|$)/)?.[1]?.trim(),\n                        description: row.match(/description: (.*?)(?:\\n|$)/)?.[1]?.trim(),\n                        rowId: row.match(/rowId: (.*?)(?:\\n|$)/)?.[1]?.trim(),\n                      })) || [],\n                  };\n\n                  listJson.sections.push(sectionData);\n                });\n              }\n            }\n\n            await instance.listMessage(listJson);\n          } else if (formattedText.includes('[buttons]')) {\n            const buttonJson = {\n              number: remoteJid.split('@')[0],\n              thumbnailUrl: undefined,\n              title: '',\n              description: '',\n              footer: '',\n              buttons: [],\n            };\n\n            const thumbnailUrlMatch = formattedText.match(/\\[thumbnailUrl\\]([\\s\\S]*?)(?=\\[title\\])/);\n            const titleMatch = formattedText.match(/\\[title\\]([\\s\\S]*?)(?=\\[description\\])/);\n            const descriptionMatch = formattedText.match(/\\[description\\]([\\s\\S]*?)(?=\\[footer\\])/);\n            const footerMatch = formattedText.match(/\\[footer\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url))/);\n\n            if (titleMatch) buttonJson.title = titleMatch[1].trim();\n            if (thumbnailUrlMatch) buttonJson.thumbnailUrl = thumbnailUrlMatch[1].trim();\n            if (descriptionMatch) buttonJson.description = descriptionMatch[1].trim();\n            if (footerMatch) buttonJson.footer = footerMatch[1].trim();\n\n            const buttonTypes = {\n              reply: /\\[reply\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\n              pix: /\\[pix\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\n              copy: /\\[copy\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\n              call: /\\[call\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\n              url: /\\[url\\]([\\s\\S]*?)(?=\\[(?:reply|pix|copy|call|url)|$)/g,\n            };\n\n            for (const [type, pattern] of Object.entries(buttonTypes)) {\n              let match;\n              while ((match = pattern.exec(formattedText)) !== null) {\n                const content = match[1].trim();\n                const button: any = { type };\n\n                switch (type) {\n                  case 'pix':\n                    button.currency = content.match(/currency: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.name = content.match(/name: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.keyType = content.match(/keyType: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.key = content.match(/key: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    break;\n\n                  case 'reply':\n                    button.displayText = content.match(/displayText: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.id = content.match(/id: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    break;\n\n                  case 'copy':\n                    button.displayText = content.match(/displayText: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.copyCode = content.match(/copyCode: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    break;\n\n                  case 'call':\n                    button.displayText = content.match(/displayText: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.phoneNumber = content.match(/phone: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    break;\n\n                  case 'url':\n                    button.displayText = content.match(/displayText: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    button.url = content.match(/url: (.*?)(?:\\n|$)/)?.[1]?.trim();\n                    break;\n                }\n\n                if (Object.keys(button).length > 1) {\n                  buttonJson.buttons.push(button);\n                }\n              }\n            }\n\n            await instance.buttonMessage(buttonJson);\n          } else {\n            await instance.textMessage(\n              {\n                number: remoteJid.split('@')[0],\n                delay: settings?.delayMessage || 1000,\n                text: formattedText,\n              },\n              false,\n            );\n          }\n\n          sendTelemetry('/message/sendText');\n        }\n\n        await prismaRepository.integrationSession.update({\n          where: {\n            id: session.id,\n          },\n          data: {\n            awaitUser: true,\n          },\n        });\n      } else {\n        if (!settings?.keepOpen) {\n          await prismaRepository.integrationSession.deleteMany({\n            where: {\n              id: session.id,\n            },\n          });\n        } else {\n          await prismaRepository.integrationSession.update({\n            where: {\n              id: session.id,\n            },\n            data: {\n              status: 'closed',\n            },\n          });\n        }\n      }\n    }\n  }\n\n  public async processTypebot(\n    instance: Instance,\n    remoteJid: string,\n    msg: Message,\n    session: IntegrationSession,\n    findTypebot: TypebotModel,\n    url: string,\n    expire: number,\n    typebot: string,\n    keywordFinish: string,\n    delayMessage: number,\n    unknownMessage: string,\n    listeningFromMe: boolean,\n    stopBotFromMe: boolean,\n    keepOpen: boolean,\n    content: string,\n    prefilledVariables?: any,\n  ) {\n    if (session && expire && expire > 0) {\n      const now = Date.now();\n\n      const sessionUpdatedAt = new Date(session.updatedAt).getTime();\n\n      const diff = now - sessionUpdatedAt;\n\n      const diffInMinutes = Math.floor(diff / 1000 / 60);\n\n      if (diffInMinutes > expire) {\n        if (keepOpen) {\n          await this.prismaRepository.integrationSession.update({\n            where: {\n              id: session.id,\n            },\n            data: {\n              status: 'closed',\n            },\n          });\n        } else {\n          await this.prismaRepository.integrationSession.deleteMany({\n            where: {\n              botId: findTypebot.id,\n              remoteJid: remoteJid,\n            },\n          });\n        }\n\n        const data = await this.createNewSession(instance, {\n          enabled: findTypebot?.enabled,\n          url: url,\n          typebot: typebot,\n          expire: expire,\n          keywordFinish: keywordFinish,\n          delayMessage: delayMessage,\n          unknownMessage: unknownMessage,\n          listeningFromMe: listeningFromMe,\n          remoteJid: remoteJid,\n          pushName: msg.pushName,\n          botId: findTypebot.id,\n          prefilledVariables: prefilledVariables,\n        });\n\n        if (data.session) {\n          session = data.session;\n        }\n\n        if (data.messages.length === 0) {\n          const content = getConversationMessage(msg.message);\n\n          if (!content) {\n            if (unknownMessage) {\n              this.waMonitor.waInstances[instance.name].textMessage(\n                {\n                  number: remoteJid.split('@')[0],\n                  delay: delayMessage || 1000,\n                  text: unknownMessage,\n                },\n                false,\n              );\n\n              sendTelemetry('/message/sendText');\n            }\n            return;\n          }\n\n          if (keywordFinish && content.toLowerCase() === keywordFinish.toLowerCase()) {\n            if (keepOpen) {\n              await this.prismaRepository.integrationSession.update({\n                where: {\n                  id: session.id,\n                },\n                data: {\n                  status: 'closed',\n                },\n              });\n            } else {\n              await this.prismaRepository.integrationSession.deleteMany({\n                where: {\n                  botId: findTypebot.id,\n                  remoteJid: remoteJid,\n                },\n              });\n            }\n            return;\n          }\n\n          try {\n            const version = this.configService.get<Typebot>('TYPEBOT').API_VERSION;\n            let urlTypebot: string;\n            let reqData: {};\n            if (version === 'latest') {\n              urlTypebot = `${url}/api/v1/sessions/${data.sessionId}/continueChat`;\n              reqData = {\n                message: content,\n              };\n            } else {\n              urlTypebot = `${url}/api/v1/sendMessage`;\n              reqData = {\n                message: content,\n                sessionId: data.sessionId,\n              };\n            }\n\n            const request = await axios.post(urlTypebot, reqData);\n\n            await this.sendWAMessage(\n              instance,\n              session,\n              {\n                expire: expire,\n                keywordFinish: keywordFinish,\n                delayMessage: delayMessage,\n                unknownMessage: unknownMessage,\n                listeningFromMe: listeningFromMe,\n                stopBotFromMe: stopBotFromMe,\n                keepOpen: keepOpen,\n              },\n              remoteJid,\n              request.data.messages,\n              request.data.input,\n              request.data.clientSideActions,\n            );\n          } catch (error) {\n            this.logger.error(error);\n            return;\n          }\n        }\n\n        await this.sendWAMessage(\n          instance,\n          session,\n          {\n            expire: expire,\n            keywordFinish: keywordFinish,\n            delayMessage: delayMessage,\n            unknownMessage: unknownMessage,\n            listeningFromMe: listeningFromMe,\n            stopBotFromMe: stopBotFromMe,\n            keepOpen: keepOpen,\n          },\n          remoteJid,\n          data.messages,\n          data.input,\n          data.clientSideActions,\n        );\n\n        return;\n      }\n    }\n\n    if (session && session.status !== 'opened') {\n      return;\n    }\n\n    if (!session) {\n      const data = await this.createNewSession(instance, {\n        enabled: findTypebot?.enabled,\n        url: url,\n        typebot: typebot,\n        expire: expire,\n        keywordFinish: keywordFinish,\n        delayMessage: delayMessage,\n        unknownMessage: unknownMessage,\n        listeningFromMe: listeningFromMe,\n        remoteJid: remoteJid,\n        pushName: msg?.pushName,\n        botId: findTypebot.id,\n        prefilledVariables: prefilledVariables,\n      });\n\n      if (data?.session) {\n        session = data.session;\n      }\n\n      await this.sendWAMessage(\n        instance,\n        session,\n        {\n          expire: expire,\n          keywordFinish: keywordFinish,\n          delayMessage: delayMessage,\n          unknownMessage: unknownMessage,\n          listeningFromMe: listeningFromMe,\n          stopBotFromMe: stopBotFromMe,\n          keepOpen: keepOpen,\n        },\n        remoteJid,\n        data?.messages,\n        data?.input,\n        data?.clientSideActions,\n      );\n\n      if (data.messages.length === 0) {\n        if (!content) {\n          if (unknownMessage) {\n            this.waMonitor.waInstances[instance.name].textMessage(\n              {\n                number: remoteJid.split('@')[0],\n                delay: delayMessage || 1000,\n                text: unknownMessage,\n              },\n              false,\n            );\n\n            sendTelemetry('/message/sendText');\n          }\n          return;\n        }\n\n        if (keywordFinish && content.toLowerCase() === keywordFinish.toLowerCase()) {\n          if (keepOpen) {\n            await this.prismaRepository.integrationSession.update({\n              where: {\n                id: session.id,\n              },\n              data: {\n                status: 'closed',\n              },\n            });\n          } else {\n            await this.prismaRepository.integrationSession.deleteMany({\n              where: {\n                botId: findTypebot.id,\n                remoteJid: remoteJid,\n              },\n            });\n          }\n\n          return;\n        }\n\n        let request: any;\n        try {\n          const version = this.configService.get<Typebot>('TYPEBOT').API_VERSION;\n          let urlTypebot: string;\n          let reqData: {};\n          if (version === 'latest') {\n            urlTypebot = `${url}/api/v1/sessions/${data.sessionId}/continueChat`;\n            reqData = {\n              message: content,\n            };\n          } else {\n            urlTypebot = `${url}/api/v1/sendMessage`;\n            reqData = {\n              message: content,\n              sessionId: data.sessionId,\n            };\n          }\n          request = await axios.post(urlTypebot, reqData);\n\n          await this.sendWAMessage(\n            instance,\n            session,\n            {\n              expire: expire,\n              keywordFinish: keywordFinish,\n              delayMessage: delayMessage,\n              unknownMessage: unknownMessage,\n              listeningFromMe: listeningFromMe,\n              stopBotFromMe: stopBotFromMe,\n              keepOpen: keepOpen,\n            },\n            remoteJid,\n            request.data.messages,\n            request.data.input,\n            request.data.clientSideActions,\n          );\n        } catch (error) {\n          this.logger.error(error);\n          return;\n        }\n      }\n      return;\n    }\n\n    await this.prismaRepository.integrationSession.update({\n      where: {\n        id: session.id,\n      },\n      data: {\n        status: 'opened',\n        awaitUser: false,\n      },\n    });\n\n    if (!content) {\n      if (unknownMessage) {\n        this.waMonitor.waInstances[instance.name].textMessage(\n          {\n            number: remoteJid.split('@')[0],\n            delay: delayMessage || 1000,\n            text: unknownMessage,\n          },\n          false,\n        );\n\n        sendTelemetry('/message/sendText');\n      }\n      return;\n    }\n\n    if (keywordFinish && content.toLowerCase() === keywordFinish.toLowerCase()) {\n      if (keepOpen) {\n        await this.prismaRepository.integrationSession.update({\n          where: {\n            id: session.id,\n          },\n          data: {\n            status: 'closed',\n          },\n        });\n      } else {\n        await this.prismaRepository.integrationSession.deleteMany({\n          where: {\n            botId: findTypebot.id,\n            remoteJid: remoteJid,\n          },\n        });\n      }\n      return;\n    }\n\n    const version = this.configService.get<Typebot>('TYPEBOT').API_VERSION;\n    let urlTypebot: string;\n    let reqData: {};\n    if (version === 'latest') {\n      urlTypebot = `${url}/api/v1/sessions/${session.sessionId.split('-')[1]}/continueChat`;\n      reqData = {\n        message: content,\n      };\n    } else {\n      urlTypebot = `${url}/api/v1/sendMessage`;\n      reqData = {\n        message: content,\n        sessionId: session.sessionId.split('-')[1],\n      };\n    }\n    const request = await axios.post(urlTypebot, reqData);\n\n    await this.sendWAMessage(\n      instance,\n      session,\n      {\n        expire: expire,\n        keywordFinish: keywordFinish,\n        delayMessage: delayMessage,\n        unknownMessage: unknownMessage,\n        listeningFromMe: listeningFromMe,\n        stopBotFromMe: stopBotFromMe,\n        keepOpen: keepOpen,\n      },\n      remoteJid,\n      request?.data?.messages,\n      request?.data?.input,\n      request?.data?.clientSideActions,\n    );\n\n    return;\n  }\n}\n","import { InstanceDto } from '@api/dto/instance.dto';\nimport { ProxyDto } from '@api/dto/proxy.dto';\nimport { SettingsDto } from '@api/dto/settings.dto';\nimport { ChatwootDto } from '@api/integrations/chatbot/chatwoot/dto/chatwoot.dto';\nimport { ChatwootService } from '@api/integrations/chatbot/chatwoot/services/chatwoot.service';\nimport { DifyService } from '@api/integrations/chatbot/dify/services/dify.service';\nimport { OpenaiService } from '@api/integrations/chatbot/openai/services/openai.service';\nimport { TypebotService } from '@api/integrations/chatbot/typebot/services/typebot.service';\nimport { PrismaRepository, Query } from '@api/repository/repository.service';\nimport { eventManager, waMonitor } from '@api/server.module';\nimport { Events, wa } from '@api/types/wa.types';\nimport { Auth, Chatwoot, ConfigService, HttpServer } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport { NotFoundException } from '@exceptions';\nimport { Contact, Message, Prisma } from '@prisma/client';\nimport { createJid } from '@utils/createJid';\nimport { WASocket } from 'baileys';\nimport { isArray } from 'class-validator';\nimport EventEmitter2 from 'eventemitter2';\nimport { v4 } from 'uuid';\n\nimport { CacheService } from './cache.service';\n\nexport class ChannelStartupService {\n  constructor(\n    public readonly configService: ConfigService,\n    public readonly eventEmitter: EventEmitter2,\n    public readonly prismaRepository: PrismaRepository,\n    public readonly chatwootCache: CacheService,\n  ) {}\n\n  public readonly logger = new Logger('ChannelStartupService');\n\n  public client: WASocket;\n  public readonly instance: wa.Instance = {};\n  public readonly localChatwoot: wa.LocalChatwoot = {};\n  public readonly localProxy: wa.LocalProxy = {};\n  public readonly localSettings: wa.LocalSettings = {};\n  public readonly localWebhook: wa.LocalWebHook = {};\n\n  public chatwootService = new ChatwootService(\n    waMonitor,\n    this.configService,\n    this.prismaRepository,\n    this.chatwootCache,\n  );\n\n  public typebotService = new TypebotService(waMonitor, this.configService, this.prismaRepository);\n\n  public openaiService = new OpenaiService(waMonitor, this.configService, this.prismaRepository);\n\n  public difyService = new DifyService(waMonitor, this.configService, this.prismaRepository);\n\n  public setInstance(instance: InstanceDto) {\n    this.logger.setInstance(instance.instanceName);\n\n    this.instance.name = instance.instanceName;\n    this.instance.id = instance.instanceId;\n    this.instance.integration = instance.integration;\n    this.instance.number = instance.number;\n    this.instance.token = instance.token;\n    this.instance.businessId = instance.businessId;\n\n    if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED && this.localChatwoot?.enabled) {\n      this.chatwootService.eventWhatsapp(\n        Events.STATUS_INSTANCE,\n        { instanceName: this.instance.name },\n        {\n          instance: this.instance.name,\n          status: 'created',\n        },\n      );\n    }\n  }\n\n  public set instanceName(name: string) {\n    this.logger.setInstance(name);\n\n    if (!name) {\n      this.instance.name = v4();\n      return;\n    }\n    this.instance.name = name;\n  }\n\n  public get instanceName() {\n    return this.instance.name;\n  }\n\n  public set instanceId(id: string) {\n    if (!id) {\n      this.instance.id = v4();\n      return;\n    }\n    this.instance.id = id;\n  }\n\n  public get instanceId() {\n    return this.instance.id;\n  }\n\n  public set integration(integration: string) {\n    this.instance.integration = integration;\n  }\n\n  public get integration() {\n    return this.instance.integration;\n  }\n\n  public set number(number: string) {\n    this.instance.number = number;\n  }\n\n  public get number() {\n    return this.instance.number;\n  }\n\n  public set token(token: string) {\n    this.instance.token = token;\n  }\n\n  public get token() {\n    return this.instance.token;\n  }\n\n  public get wuid() {\n    return this.instance.wuid;\n  }\n\n  public async loadWebhook() {\n    const data = await this.prismaRepository.webhook.findUnique({\n      where: {\n        instanceId: this.instanceId,\n      },\n    });\n\n    this.localWebhook.enabled = data?.enabled;\n    this.localWebhook.webhookBase64 = data?.webhookBase64;\n  }\n\n  public async loadSettings() {\n    const data = await this.prismaRepository.setting.findUnique({\n      where: {\n        instanceId: this.instanceId,\n      },\n    });\n\n    this.localSettings.rejectCall = data?.rejectCall;\n    this.localSettings.msgCall = data?.msgCall;\n    this.localSettings.groupsIgnore = data?.groupsIgnore;\n    this.localSettings.alwaysOnline = data?.alwaysOnline;\n    this.localSettings.readMessages = data?.readMessages;\n    this.localSettings.readStatus = data?.readStatus;\n    this.localSettings.syncFullHistory = data?.syncFullHistory;\n    this.localSettings.wavoipToken = data?.wavoipToken;\n  }\n\n  public async setSettings(data: SettingsDto) {\n    await this.prismaRepository.setting.upsert({\n      where: {\n        instanceId: this.instanceId,\n      },\n      update: {\n        rejectCall: data.rejectCall,\n        msgCall: data.msgCall,\n        groupsIgnore: data.groupsIgnore,\n        alwaysOnline: data.alwaysOnline,\n        readMessages: data.readMessages,\n        readStatus: data.readStatus,\n        syncFullHistory: data.syncFullHistory,\n        wavoipToken: data.wavoipToken,\n      },\n      create: {\n        rejectCall: data.rejectCall,\n        msgCall: data.msgCall,\n        groupsIgnore: data.groupsIgnore,\n        alwaysOnline: data.alwaysOnline,\n        readMessages: data.readMessages,\n        readStatus: data.readStatus,\n        syncFullHistory: data.syncFullHistory,\n        wavoipToken: data.wavoipToken,\n        instanceId: this.instanceId,\n      },\n    });\n\n    this.localSettings.rejectCall = data?.rejectCall;\n    this.localSettings.msgCall = data?.msgCall;\n    this.localSettings.groupsIgnore = data?.groupsIgnore;\n    this.localSettings.alwaysOnline = data?.alwaysOnline;\n    this.localSettings.readMessages = data?.readMessages;\n    this.localSettings.readStatus = data?.readStatus;\n    this.localSettings.syncFullHistory = data?.syncFullHistory;\n    this.localSettings.wavoipToken = data?.wavoipToken;\n\n    if (this.localSettings.wavoipToken && this.localSettings.wavoipToken.length > 0) {\n      this.client.ws.close();\n      this.client.ws.connect();\n    }\n  }\n\n  public async findSettings() {\n    const data = await this.prismaRepository.setting.findUnique({\n      where: {\n        instanceId: this.instanceId,\n      },\n    });\n\n    if (!data) {\n      return null;\n    }\n\n    return {\n      rejectCall: data.rejectCall,\n      msgCall: data.msgCall,\n      groupsIgnore: data.groupsIgnore,\n      alwaysOnline: data.alwaysOnline,\n      readMessages: data.readMessages,\n      readStatus: data.readStatus,\n      syncFullHistory: data.syncFullHistory,\n      wavoipToken: data.wavoipToken,\n    };\n  }\n\n  public async loadChatwoot() {\n    if (!this.configService.get<Chatwoot>('CHATWOOT').ENABLED) {\n      return;\n    }\n\n    const data = await this.prismaRepository.chatwoot.findUnique({\n      where: {\n        instanceId: this.instanceId,\n      },\n    });\n\n    this.localChatwoot.enabled = data?.enabled;\n    this.localChatwoot.accountId = data?.accountId;\n    this.localChatwoot.token = data?.token;\n    this.localChatwoot.url = data?.url;\n    this.localChatwoot.nameInbox = data?.nameInbox;\n    this.localChatwoot.signMsg = data?.signMsg;\n    this.localChatwoot.signDelimiter = data?.signDelimiter;\n    this.localChatwoot.number = data?.number;\n    this.localChatwoot.reopenConversation = data?.reopenConversation;\n    this.localChatwoot.conversationPending = data?.conversationPending;\n    this.localChatwoot.mergeBrazilContacts = data?.mergeBrazilContacts;\n    this.localChatwoot.importContacts = data?.importContacts;\n    this.localChatwoot.importMessages = data?.importMessages;\n    this.localChatwoot.daysLimitImportMessages = data?.daysLimitImportMessages;\n  }\n\n  public async setChatwoot(data: ChatwootDto) {\n    if (!this.configService.get<Chatwoot>('CHATWOOT').ENABLED) {\n      return;\n    }\n\n    const chatwoot = await this.prismaRepository.chatwoot.findUnique({\n      where: {\n        instanceId: this.instanceId,\n      },\n    });\n\n    if (chatwoot) {\n      await this.prismaRepository.chatwoot.update({\n        where: {\n          instanceId: this.instanceId,\n        },\n        data: {\n          enabled: data?.enabled,\n          accountId: data.accountId,\n          token: data.token,\n          url: data.url,\n          nameInbox: data.nameInbox,\n          signMsg: data.signMsg,\n          signDelimiter: data.signMsg ? data.signDelimiter : null,\n          number: data.number,\n          reopenConversation: data.reopenConversation,\n          conversationPending: data.conversationPending,\n          mergeBrazilContacts: data.mergeBrazilContacts,\n          importContacts: data.importContacts,\n          importMessages: data.importMessages,\n          daysLimitImportMessages: data.daysLimitImportMessages,\n          organization: data.organization,\n          logo: data.logo,\n          ignoreJids: data.ignoreJids,\n        },\n      });\n\n      Object.assign(this.localChatwoot, { ...data, signDelimiter: data.signMsg ? data.signDelimiter : null });\n\n      this.clearCacheChatwoot();\n      return;\n    }\n\n    await this.prismaRepository.chatwoot.create({\n      data: {\n        enabled: data?.enabled,\n        accountId: data.accountId,\n        token: data.token,\n        url: data.url,\n        nameInbox: data.nameInbox,\n        signMsg: data.signMsg,\n        number: data.number,\n        reopenConversation: data.reopenConversation,\n        conversationPending: data.conversationPending,\n        mergeBrazilContacts: data.mergeBrazilContacts,\n        importContacts: data.importContacts,\n        importMessages: data.importMessages,\n        daysLimitImportMessages: data.daysLimitImportMessages,\n        organization: data.organization,\n        logo: data.logo,\n        ignoreJids: data.ignoreJids,\n        instanceId: this.instanceId,\n      },\n    });\n\n    Object.assign(this.localChatwoot, { ...data, signDelimiter: data.signMsg ? data.signDelimiter : null });\n\n    this.clearCacheChatwoot();\n  }\n\n  public async findChatwoot(): Promise<ChatwootDto | null> {\n    if (!this.configService.get<Chatwoot>('CHATWOOT').ENABLED) {\n      return null;\n    }\n\n    const data = await this.prismaRepository.chatwoot.findUnique({\n      where: {\n        instanceId: this.instanceId,\n      },\n    });\n\n    if (!data) {\n      return null;\n    }\n\n    const ignoreJidsArray = Array.isArray(data.ignoreJids) ? data.ignoreJids.map((event) => String(event)) : [];\n\n    return {\n      enabled: data?.enabled,\n      accountId: data.accountId,\n      token: data.token,\n      url: data.url,\n      nameInbox: data.nameInbox,\n      signMsg: data.signMsg,\n      signDelimiter: data.signDelimiter || null,\n      reopenConversation: data.reopenConversation,\n      conversationPending: data.conversationPending,\n      mergeBrazilContacts: data.mergeBrazilContacts,\n      importContacts: data.importContacts,\n      importMessages: data.importMessages,\n      daysLimitImportMessages: data.daysLimitImportMessages,\n      organization: data.organization,\n      logo: data.logo,\n      ignoreJids: ignoreJidsArray,\n    };\n  }\n\n  public clearCacheChatwoot() {\n    if (this.localChatwoot?.enabled) {\n      this.chatwootService.getCache()?.deleteAll(this.instanceName);\n    }\n  }\n\n  public async loadProxy() {\n    this.localProxy.enabled = false;\n\n    if (process.env.PROXY_HOST) {\n      this.localProxy.enabled = true;\n      this.localProxy.host = process.env.PROXY_HOST;\n      this.localProxy.port = process.env.PROXY_PORT || '80';\n      this.localProxy.protocol = process.env.PROXY_PROTOCOL || 'http';\n      this.localProxy.username = process.env.PROXY_USERNAME;\n      this.localProxy.password = process.env.PROXY_PASSWORD;\n    }\n\n    const data = await this.prismaRepository.proxy.findUnique({\n      where: {\n        instanceId: this.instanceId,\n      },\n    });\n\n    if (data?.enabled) {\n      this.localProxy.enabled = true;\n      this.localProxy.host = data?.host;\n      this.localProxy.port = data?.port;\n      this.localProxy.protocol = data?.protocol;\n      this.localProxy.username = data?.username;\n      this.localProxy.password = data?.password;\n    }\n  }\n\n  public async setProxy(data: ProxyDto) {\n    await this.prismaRepository.proxy.upsert({\n      where: {\n        instanceId: this.instanceId,\n      },\n      update: {\n        enabled: data?.enabled,\n        host: data.host,\n        port: data.port,\n        protocol: data.protocol,\n        username: data.username,\n        password: data.password,\n      },\n      create: {\n        enabled: data?.enabled,\n        host: data.host,\n        port: data.port,\n        protocol: data.protocol,\n        username: data.username,\n        password: data.password,\n        instanceId: this.instanceId,\n      },\n    });\n\n    Object.assign(this.localProxy, data);\n  }\n\n  public async findProxy() {\n    const data = await this.prismaRepository.proxy.findUnique({\n      where: {\n        instanceId: this.instanceId,\n      },\n    });\n\n    if (!data) {\n      throw new NotFoundException('Proxy not found');\n    }\n\n    return data;\n  }\n\n  public async sendDataWebhook<T = any>(event: Events, data: T, local = true, integration?: string[]) {\n    const serverUrl = this.configService.get<HttpServer>('SERVER').URL;\n    const tzoffset = new Date().getTimezoneOffset() * 60000; //offset in milliseconds\n    const localISOTime = new Date(Date.now() - tzoffset).toISOString();\n    const now = localISOTime;\n\n    const expose = this.configService.get<Auth>('AUTHENTICATION').EXPOSE_IN_FETCH_INSTANCES;\n\n    const instanceApikey = this.token || 'Apikey not found';\n\n    await eventManager.emit({\n      instanceName: this.instance.name,\n      origin: ChannelStartupService.name,\n      event,\n      data,\n      serverUrl,\n      dateTime: now,\n      sender: this.wuid,\n      apiKey: expose && instanceApikey ? instanceApikey : null,\n      local,\n      integration,\n    });\n  }\n\n  // Check if the number is MX or AR\n  public formatMXOrARNumber(jid: string): string {\n    const countryCode = jid.substring(0, 2);\n\n    if (Number(countryCode) === 52 || Number(countryCode) === 54) {\n      if (jid.length === 13) {\n        const number = countryCode + jid.substring(3);\n        return number;\n      }\n\n      return jid;\n    }\n    return jid;\n  }\n\n  // Check if the number is br\n  public formatBRNumber(jid: string) {\n    const regexp = new RegExp(/^(\\d{2})(\\d{2})\\d{1}(\\d{8})$/);\n    if (regexp.test(jid)) {\n      const match = regexp.exec(jid);\n      if (match && match[1] === '55') {\n        const joker = Number.parseInt(match[3][0]);\n        const ddd = Number.parseInt(match[2]);\n        if (joker < 7 || ddd < 31) {\n          return match[0];\n        }\n        return match[1] + match[2] + match[3];\n      }\n      return jid;\n    } else {\n      return jid;\n    }\n  }\n\n  public async fetchContacts(query: Query<Contact>) {\n    const remoteJid = query?.where?.remoteJid\n      ? query?.where?.remoteJid.includes('@')\n        ? query.where?.remoteJid\n        : createJid(query.where?.remoteJid)\n      : null;\n\n    const where = {\n      instanceId: this.instanceId,\n    };\n\n    if (remoteJid) {\n      where['remoteJid'] = remoteJid;\n    }\n\n    return await this.prismaRepository.contact.findMany({\n      where,\n    });\n  }\n\n  public cleanMessageData(message: any) {\n    if (!message) return message;\n\n    const cleanedMessage = { ...message };\n\n    const mediaUrl = cleanedMessage.message.mediaUrl;\n\n    delete cleanedMessage.message.base64;\n\n    if (cleanedMessage.message) {\n      // Limpa imageMessage\n      if (cleanedMessage.message.imageMessage) {\n        cleanedMessage.message.imageMessage = {\n          caption: cleanedMessage.message.imageMessage.caption,\n        };\n      }\n\n      // Limpa videoMessage\n      if (cleanedMessage.message.videoMessage) {\n        cleanedMessage.message.videoMessage = {\n          caption: cleanedMessage.message.videoMessage.caption,\n        };\n      }\n\n      // Limpa audioMessage\n      if (cleanedMessage.message.audioMessage) {\n        cleanedMessage.message.audioMessage = {\n          seconds: cleanedMessage.message.audioMessage.seconds,\n        };\n      }\n\n      // Limpa stickerMessage\n      if (cleanedMessage.message.stickerMessage) {\n        cleanedMessage.message.stickerMessage = {};\n      }\n\n      // Limpa documentMessage\n      if (cleanedMessage.message.documentMessage) {\n        cleanedMessage.message.documentMessage = {\n          caption: cleanedMessage.message.documentMessage.caption,\n          name: cleanedMessage.message.documentMessage.name,\n        };\n      }\n\n      // Limpa documentWithCaptionMessage\n      if (cleanedMessage.message.documentWithCaptionMessage) {\n        cleanedMessage.message.documentWithCaptionMessage = {\n          caption: cleanedMessage.message.documentWithCaptionMessage.caption,\n          name: cleanedMessage.message.documentWithCaptionMessage.name,\n        };\n      }\n    }\n\n    if (mediaUrl) cleanedMessage.message.mediaUrl = mediaUrl;\n\n    return cleanedMessage;\n  }\n\n  public async fetchMessages(query: Query<Message>) {\n    const keyFilters = query?.where?.key as {\n      id?: string;\n      fromMe?: boolean;\n      remoteJid?: string;\n      participants?: string;\n    };\n\n    const timestampFilter = {};\n    if (query?.where?.messageTimestamp) {\n      if (query.where.messageTimestamp['gte'] && query.where.messageTimestamp['lte']) {\n        timestampFilter['messageTimestamp'] = {\n          gte: Math.floor(new Date(query.where.messageTimestamp['gte']).getTime() / 1000),\n          lte: Math.floor(new Date(query.where.messageTimestamp['lte']).getTime() / 1000),\n        };\n      }\n    }\n\n    const count = await this.prismaRepository.message.count({\n      where: {\n        instanceId: this.instanceId,\n        id: query?.where?.id,\n        source: query?.where?.source,\n        messageType: query?.where?.messageType,\n        ...timestampFilter,\n        AND: [\n          keyFilters?.id ? { key: { path: ['id'], equals: keyFilters?.id } } : {},\n          keyFilters?.fromMe ? { key: { path: ['fromMe'], equals: keyFilters?.fromMe } } : {},\n          keyFilters?.remoteJid ? { key: { path: ['remoteJid'], equals: keyFilters?.remoteJid } } : {},\n          keyFilters?.participants ? { key: { path: ['participants'], equals: keyFilters?.participants } } : {},\n        ],\n      },\n    });\n\n    if (!query?.offset) {\n      query.offset = 50;\n    }\n\n    if (!query?.page) {\n      query.page = 1;\n    }\n\n    const messages = await this.prismaRepository.message.findMany({\n      where: {\n        instanceId: this.instanceId,\n        id: query?.where?.id,\n        source: query?.where?.source,\n        messageType: query?.where?.messageType,\n        ...timestampFilter,\n        AND: [\n          keyFilters?.id ? { key: { path: ['id'], equals: keyFilters?.id } } : {},\n          keyFilters?.fromMe ? { key: { path: ['fromMe'], equals: keyFilters?.fromMe } } : {},\n          keyFilters?.remoteJid ? { key: { path: ['remoteJid'], equals: keyFilters?.remoteJid } } : {},\n          keyFilters?.participants ? { key: { path: ['participants'], equals: keyFilters?.participants } } : {},\n        ],\n      },\n      orderBy: {\n        messageTimestamp: 'desc',\n      },\n      skip: query.offset * (query?.page === 1 ? 0 : (query?.page as number) - 1),\n      take: query.offset,\n      select: {\n        id: true,\n        key: true,\n        pushName: true,\n        messageType: true,\n        message: true,\n        messageTimestamp: true,\n        instanceId: true,\n        source: true,\n        contextInfo: true,\n        MessageUpdate: {\n          select: {\n            status: true,\n          },\n        },\n      },\n    });\n\n    return {\n      messages: {\n        total: count,\n        pages: Math.ceil(count / query.offset),\n        currentPage: query.page,\n        records: messages,\n      },\n    };\n  }\n\n  public async fetchStatusMessage(query: any) {\n    return await this.prismaRepository.messageUpdate.findMany({\n      where: {\n        instanceId: this.instanceId,\n        remoteJid: query.where?.remoteJid,\n        keyId: query.where?.id,\n      },\n      skip: query.offset * (query?.page === 1 ? 0 : (query?.page as number) - 1),\n      take: query.offset,\n    });\n  }\n\n  public async fetchChats(query: any) {\n    const remoteJid = query?.where?.remoteJid\n      ? query?.where?.remoteJid.includes('@')\n        ? query.where?.remoteJid\n        : createJid(query.where?.remoteJid)\n      : null;\n\n    const where = {\n      instanceId: this.instanceId,\n    };\n\n    if (remoteJid) {\n      where['remoteJid'] = remoteJid;\n    }\n\n    const timestampFilter =\n      query?.where?.messageTimestamp?.gte && query?.where?.messageTimestamp?.lte\n        ? Prisma.sql`\n          AND \"Message\".\"messageTimestamp\" >= ${Math.floor(new Date(query.where.messageTimestamp.gte).getTime() / 1000)}\n          AND \"Message\".\"messageTimestamp\" <= ${Math.floor(new Date(query.where.messageTimestamp.lte).getTime() / 1000)}`\n        : Prisma.sql``;\n\n    const results = await this.prismaRepository.$queryRaw`\n        WITH rankedMessages AS (\n          SELECT DISTINCT ON (\"Contact\".\"remoteJid\")\n            \"Contact\".\"id\",\n            \"Contact\".\"remoteJid\",\n            \"Contact\".\"pushName\",\n            \"Contact\".\"profilePicUrl\",\n            COALESCE(\n              to_timestamp(\"Message\".\"messageTimestamp\"::double precision), \n              \"Contact\".\"updatedAt\"\n            ) as \"updatedAt\",\n            \"Chat\".\"createdAt\" as \"windowStart\",\n            \"Chat\".\"createdAt\" + INTERVAL '24 hours' as \"windowExpires\",\n            CASE \n              WHEN \"Chat\".\"createdAt\" + INTERVAL '24 hours' > NOW() THEN true \n              ELSE false \n            END as \"windowActive\",\n            \"Message\".\"id\" AS lastMessageId,\n            \"Message\".\"key\" AS lastMessage_key,\n            \"Message\".\"pushName\" AS lastMessagePushName,\n            \"Message\".\"participant\" AS lastMessageParticipant,\n            \"Message\".\"messageType\" AS lastMessageMessageType,\n            \"Message\".\"message\" AS lastMessageMessage,\n            \"Message\".\"contextInfo\" AS lastMessageContextInfo,\n            \"Message\".\"source\" AS lastMessageSource,\n            \"Message\".\"messageTimestamp\" AS lastMessageMessageTimestamp,\n            \"Message\".\"instanceId\" AS lastMessageInstanceId,\n            \"Message\".\"sessionId\" AS lastMessageSessionId,\n            \"Message\".\"status\" AS lastMessageStatus\n          FROM \"Contact\"\n          INNER JOIN \"Message\" ON \"Message\".\"key\"->>'remoteJid' = \"Contact\".\"remoteJid\"\n          LEFT JOIN \"Chat\" ON \"Chat\".\"remoteJid\" = \"Contact\".\"remoteJid\" \n            AND \"Chat\".\"instanceId\" = \"Contact\".\"instanceId\"\n          WHERE \n            \"Contact\".\"instanceId\" = ${this.instanceId}\n            AND \"Message\".\"instanceId\" = ${this.instanceId}\n            ${remoteJid ? Prisma.sql`AND \"Contact\".\"remoteJid\" = ${remoteJid}` : Prisma.sql``}\n            ${timestampFilter}\n          ORDER BY \n            \"Contact\".\"remoteJid\",\n            \"Message\".\"messageTimestamp\" DESC\n        )\n        SELECT * FROM rankedMessages\n        ORDER BY \"updatedAt\" DESC NULLS LAST;\n    `;\n\n    if (results && isArray(results) && results.length > 0) {\n      const mappedResults = results.map((contact) => {\n        const lastMessage = contact.lastMessageId\n          ? {\n              id: contact.lastMessageId,\n              key: contact.lastMessageKey,\n              pushName: contact.lastMessagePushName,\n              participant: contact.lastMessageParticipant,\n              messageType: contact.lastMessageMessageType,\n              message: contact.lastMessageMessage,\n              contextInfo: contact.lastMessageContextInfo,\n              source: contact.lastMessageSource,\n              messageTimestamp: contact.lastMessageMessageTimestamp,\n              instanceId: contact.lastMessageInstanceId,\n              sessionId: contact.lastMessageSessionId,\n              status: contact.lastMessageStatus,\n            }\n          : undefined;\n\n        return {\n          id: contact.id,\n          remoteJid: contact.remoteJid,\n          pushName: contact.pushName,\n          profilePicUrl: contact.profilePicUrl,\n          updatedAt: contact.updatedAt,\n          windowStart: contact.windowStart,\n          windowExpires: contact.windowExpires,\n          windowActive: contact.windowActive,\n          lastMessage: lastMessage ? this.cleanMessageData(lastMessage) : undefined,\n        };\n      });\n\n      return mappedResults;\n    }\n\n    return [];\n  }\n}\n","// Check if the number is MX or AR\nfunction formatMXOrARNumber(jid: string): string {\n  const countryCode = jid.substring(0, 2);\n\n  if (Number(countryCode) === 52 || Number(countryCode) === 54) {\n    if (jid.length === 13) {\n      const number = countryCode + jid.substring(3);\n      return number;\n    }\n\n    return jid;\n  }\n  return jid;\n}\n\n// Check if the number is br\nfunction formatBRNumber(jid: string) {\n  const regexp = new RegExp(/^(\\d{2})(\\d{2})\\d{1}(\\d{8})$/);\n  if (regexp.test(jid)) {\n    const match = regexp.exec(jid);\n    if (match && match[1] === '55') {\n      const joker = Number.parseInt(match[3][0]);\n      const ddd = Number.parseInt(match[2]);\n      if (joker < 7 || ddd < 31) {\n        return match[0];\n      }\n      return match[1] + match[2] + match[3];\n    }\n    return jid;\n  } else {\n    return jid;\n  }\n}\n\nexport function createJid(number: string): string {\n  number = number.replace(/:\\d+/, '');\n\n  if (number.includes('@g.us') || number.includes('@s.whatsapp.net') || number.includes('@lid')) {\n    return number;\n  }\n\n  if (number.includes('@broadcast')) {\n    return number;\n  }\n\n  number = number\n    ?.replace(/\\s/g, '')\n    .replace(/\\+/g, '')\n    .replace(/\\(/g, '')\n    .replace(/\\)/g, '')\n    .split(':')[0]\n    .split('@')[0];\n\n  if (number.includes('-') && number.length >= 24) {\n    number = number.replace(/[^\\d-]/g, '');\n    return `${number}@g.us`;\n  }\n\n  number = number.replace(/\\D/g, '');\n\n  if (number.length >= 18) {\n    number = number.replace(/[^\\d-]/g, '');\n    return `${number}@g.us`;\n  }\n\n  number = formatMXOrARNumber(number);\n\n  number = formatBRNumber(number);\n\n  return `${number}@s.whatsapp.net`;\n}\n","import { InstanceDto } from '@api/dto/instance.dto';\nimport {\n  MediaMessage,\n  Options,\n  SendAudioDto,\n  SendButtonsDto,\n  SendMediaDto,\n  SendTextDto,\n} from '@api/dto/sendMessage.dto';\nimport * as s3Service from '@api/integrations/storage/s3/libs/minio.server';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport { chatbotController } from '@api/server.module';\nimport { CacheService } from '@api/services/cache.service';\nimport { ChannelStartupService } from '@api/services/channel.service';\nimport { Events, wa } from '@api/types/wa.types';\nimport { Chatwoot, ConfigService, Openai, S3 } from '@config/env.config';\nimport { BadRequestException, InternalServerErrorException } from '@exceptions';\nimport { createJid } from '@utils/createJid';\nimport axios from 'axios';\nimport { isBase64, isURL } from 'class-validator';\nimport EventEmitter2 from 'eventemitter2';\nimport FormData from 'form-data';\nimport mimeTypes from 'mime-types';\nimport { join } from 'path';\nimport { v4 } from 'uuid';\n\nexport class EvolutionStartupService extends ChannelStartupService {\n  constructor(\n    public readonly configService: ConfigService,\n    public readonly eventEmitter: EventEmitter2,\n    public readonly prismaRepository: PrismaRepository,\n    public readonly cache: CacheService,\n    public readonly chatwootCache: CacheService,\n  ) {\n    super(configService, eventEmitter, prismaRepository, chatwootCache);\n\n    this.client = null;\n  }\n\n  public client: any;\n\n  public stateConnection: wa.StateConnection = { state: 'open' };\n\n  public phoneNumber: string;\n  public mobile: boolean;\n\n  public get connectionStatus() {\n    return this.stateConnection;\n  }\n\n  public async closeClient() {\n    this.stateConnection = { state: 'close' };\n  }\n\n  public get qrCode(): wa.QrCode {\n    return {\n      pairingCode: this.instance.qrcode?.pairingCode,\n      code: this.instance.qrcode?.code,\n      base64: this.instance.qrcode?.base64,\n      count: this.instance.qrcode?.count,\n    };\n  }\n\n  public async logoutInstance() {\n    await this.closeClient();\n  }\n\n  public setInstance(instance: InstanceDto) {\n    this.logger.setInstance(instance.instanceId);\n\n    this.instance.name = instance.instanceName;\n    this.instance.id = instance.instanceId;\n    this.instance.integration = instance.integration;\n    this.instance.number = instance.number;\n    this.instance.token = instance.token;\n    this.instance.businessId = instance.businessId;\n\n    if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED && this.localChatwoot?.enabled) {\n      this.chatwootService.eventWhatsapp(\n        Events.STATUS_INSTANCE,\n        {\n          instanceName: this.instance.name,\n          instanceId: this.instance.id,\n          integration: instance.integration,\n        },\n        {\n          instance: this.instance.name,\n          status: 'created',\n        },\n      );\n    }\n  }\n\n  public async profilePicture(number: string) {\n    const jid = createJid(number);\n\n    return {\n      wuid: jid,\n      profilePictureUrl: null,\n    };\n  }\n\n  public async getProfileName() {\n    return null;\n  }\n\n  public async profilePictureUrl() {\n    return null;\n  }\n\n  public async getProfileStatus() {\n    return null;\n  }\n\n  public async connectToWhatsapp(data?: any): Promise<any> {\n    if (!data) {\n      this.loadChatwoot();\n      return;\n    }\n\n    try {\n      this.eventHandler(data);\n    } catch (error) {\n      this.logger.error(error);\n      throw new InternalServerErrorException(error?.toString());\n    }\n  }\n\n  protected async eventHandler(received: any) {\n    try {\n      let messageRaw: any;\n\n      if (received.message) {\n        const key = {\n          id: received.key.id || v4(),\n          remoteJid: received.key.remoteJid,\n          fromMe: received.key.fromMe,\n          profilePicUrl: received.profilePicUrl,\n        };\n        messageRaw = {\n          key,\n          pushName: received.pushName,\n          message: received.message,\n          messageType: received.messageType,\n          messageTimestamp: Math.round(new Date().getTime() / 1000),\n          source: 'unknown',\n          instanceId: this.instanceId,\n        };\n\n        const isAudio = received?.message?.audioMessage;\n\n        if (this.configService.get<Openai>('OPENAI').ENABLED && isAudio) {\n          const openAiDefaultSettings = await this.prismaRepository.openaiSetting.findFirst({\n            where: {\n              instanceId: this.instanceId,\n            },\n            include: {\n              OpenaiCreds: true,\n            },\n          });\n\n          if (\n            openAiDefaultSettings &&\n            openAiDefaultSettings.openaiCredsId &&\n            openAiDefaultSettings.speechToText &&\n            received?.message?.audioMessage\n          ) {\n            messageRaw.message.speechToText = await this.openaiService.speechToText(\n              openAiDefaultSettings.OpenaiCreds,\n              received,\n              this.client.updateMediaMessage,\n            );\n          }\n        }\n\n        this.logger.log(messageRaw);\n\n        this.sendDataWebhook(Events.MESSAGES_UPSERT, messageRaw);\n\n        await chatbotController.emit({\n          instance: { instanceName: this.instance.name, instanceId: this.instanceId },\n          remoteJid: messageRaw.key.remoteJid,\n          msg: messageRaw,\n          pushName: messageRaw.pushName,\n        });\n\n        if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED && this.localChatwoot?.enabled) {\n          const chatwootSentMessage = await this.chatwootService.eventWhatsapp(\n            Events.MESSAGES_UPSERT,\n            { instanceName: this.instance.name, instanceId: this.instanceId },\n            messageRaw,\n          );\n\n          if (chatwootSentMessage?.id) {\n            messageRaw.chatwootMessageId = chatwootSentMessage.id;\n            messageRaw.chatwootInboxId = chatwootSentMessage.id;\n            messageRaw.chatwootConversationId = chatwootSentMessage.id;\n          }\n        }\n\n        await this.prismaRepository.message.create({\n          data: messageRaw,\n        });\n\n        await this.updateContact({\n          remoteJid: messageRaw.key.remoteJid,\n          pushName: messageRaw.pushName,\n          profilePicUrl: received.profilePicUrl,\n        });\n      }\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  private async updateContact(data: { remoteJid: string; pushName?: string; profilePicUrl?: string }) {\n    const contactRaw: any = {\n      remoteJid: data.remoteJid,\n      pushName: data?.pushName,\n      instanceId: this.instanceId,\n      profilePicUrl: data?.profilePicUrl,\n    };\n\n    const existingContact = await this.prismaRepository.contact.findFirst({\n      where: {\n        remoteJid: data.remoteJid,\n        instanceId: this.instanceId,\n      },\n    });\n\n    if (existingContact) {\n      await this.prismaRepository.contact.updateMany({\n        where: {\n          remoteJid: data.remoteJid,\n          instanceId: this.instanceId,\n        },\n        data: contactRaw,\n      });\n    } else {\n      await this.prismaRepository.contact.create({\n        data: contactRaw,\n      });\n    }\n\n    this.sendDataWebhook(Events.CONTACTS_UPSERT, contactRaw);\n\n    if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED && this.localChatwoot?.enabled) {\n      await this.chatwootService.eventWhatsapp(\n        Events.CONTACTS_UPDATE,\n        {\n          instanceName: this.instance.name,\n          instanceId: this.instanceId,\n          integration: this.instance.integration,\n        },\n        contactRaw,\n      );\n    }\n\n    const chat = await this.prismaRepository.chat.findFirst({\n      where: { instanceId: this.instanceId, remoteJid: data.remoteJid },\n    });\n\n    if (chat) {\n      const chatRaw: any = {\n        remoteJid: data.remoteJid,\n        instanceId: this.instanceId,\n      };\n\n      this.sendDataWebhook(Events.CHATS_UPDATE, chatRaw);\n\n      await this.prismaRepository.chat.updateMany({\n        where: { remoteJid: chat.remoteJid },\n        data: chatRaw,\n      });\n    }\n\n    const chatRaw: any = {\n      remoteJid: data.remoteJid,\n      instanceId: this.instanceId,\n    };\n\n    this.sendDataWebhook(Events.CHATS_UPSERT, chatRaw);\n\n    await this.prismaRepository.chat.create({\n      data: chatRaw,\n    });\n  }\n\n  protected async sendMessageWithTyping(\n    number: string,\n    message: any,\n    options?: Options,\n    file?: any,\n    isIntegration = false,\n  ) {\n    try {\n      let quoted: any;\n      let webhookUrl: any;\n\n      if (options?.quoted) {\n        const m = options?.quoted;\n\n        const msg = m?.key;\n\n        if (!msg) {\n          throw 'Message not found';\n        }\n\n        quoted = msg;\n      }\n\n      if (options.delay) {\n        await new Promise((resolve) => setTimeout(resolve, options.delay));\n      }\n\n      if (options?.webhookUrl) {\n        webhookUrl = options.webhookUrl;\n      }\n\n      let audioFile;\n\n      const messageId = v4();\n\n      let messageRaw: any;\n\n      if (message?.mediaType === 'image') {\n        messageRaw = {\n          key: { fromMe: true, id: messageId, remoteJid: number },\n          message: {\n            base64: isBase64(message.media) ? message.media : undefined,\n            mediaUrl: isURL(message.media) ? message.media : undefined,\n            quoted,\n          },\n          messageType: 'imageMessage',\n          messageTimestamp: Math.round(new Date().getTime() / 1000),\n          webhookUrl,\n          source: 'unknown',\n          instanceId: this.instanceId,\n        };\n      } else if (message?.mediaType === 'video') {\n        messageRaw = {\n          key: { fromMe: true, id: messageId, remoteJid: number },\n          message: {\n            base64: isBase64(message.media) ? message.media : undefined,\n            mediaUrl: isURL(message.media) ? message.media : undefined,\n            quoted,\n          },\n          messageType: 'videoMessage',\n          messageTimestamp: Math.round(new Date().getTime() / 1000),\n          webhookUrl,\n          source: 'unknown',\n          instanceId: this.instanceId,\n        };\n      } else if (message?.mediaType === 'audio') {\n        messageRaw = {\n          key: { fromMe: true, id: messageId, remoteJid: number },\n          message: {\n            base64: isBase64(message.media) ? message.media : undefined,\n            mediaUrl: isURL(message.media) ? message.media : undefined,\n            quoted,\n          },\n          messageType: 'audioMessage',\n          messageTimestamp: Math.round(new Date().getTime() / 1000),\n          webhookUrl,\n          source: 'unknown',\n          instanceId: this.instanceId,\n        };\n\n        const buffer = Buffer.from(message.media, 'base64');\n        audioFile = {\n          buffer,\n          mimetype: 'audio/mp4',\n          originalname: `${messageId}.mp4`,\n        };\n      } else if (message?.mediaType === 'document') {\n        messageRaw = {\n          key: { fromMe: true, id: messageId, remoteJid: number },\n          message: {\n            base64: isBase64(message.media) ? message.media : undefined,\n            mediaUrl: isURL(message.media) ? message.media : undefined,\n            quoted,\n          },\n          messageType: 'documentMessage',\n          messageTimestamp: Math.round(new Date().getTime() / 1000),\n          webhookUrl,\n          source: 'unknown',\n          instanceId: this.instanceId,\n        };\n      } else if (message.buttonMessage) {\n        messageRaw = {\n          key: { fromMe: true, id: messageId, remoteJid: number },\n          message: {\n            ...message.buttonMessage,\n            buttons: message.buttonMessage.buttons,\n            footer: message.buttonMessage.footer,\n            body: message.buttonMessage.body,\n            quoted,\n          },\n          messageType: 'buttonMessage',\n          messageTimestamp: Math.round(new Date().getTime() / 1000),\n          webhookUrl,\n          source: 'unknown',\n          instanceId: this.instanceId,\n        };\n      } else if (message.listMessage) {\n        messageRaw = {\n          key: { fromMe: true, id: messageId, remoteJid: number },\n          message: {\n            ...message.listMessage,\n            quoted,\n          },\n          messageType: 'listMessage',\n          messageTimestamp: Math.round(new Date().getTime() / 1000),\n          webhookUrl,\n          source: 'unknown',\n          instanceId: this.instanceId,\n        };\n      } else {\n        messageRaw = {\n          key: { fromMe: true, id: messageId, remoteJid: number },\n          message: {\n            ...message,\n            quoted,\n          },\n          messageType: 'conversation',\n          messageTimestamp: Math.round(new Date().getTime() / 1000),\n          webhookUrl,\n          source: 'unknown',\n          instanceId: this.instanceId,\n        };\n      }\n\n      if (messageRaw.message.contextInfo) {\n        messageRaw.contextInfo = {\n          ...messageRaw.message.contextInfo,\n        };\n      }\n\n      if (messageRaw.contextInfo?.stanzaId) {\n        const key: any = {\n          id: messageRaw.contextInfo.stanzaId,\n        };\n\n        const findMessage = await this.prismaRepository.message.findFirst({\n          where: {\n            instanceId: this.instanceId,\n            key,\n          },\n        });\n\n        if (findMessage) {\n          messageRaw.contextInfo.quotedMessage = findMessage.message;\n        }\n      }\n\n      const base64 = messageRaw.message.base64;\n      delete messageRaw.message.base64;\n\n      if (base64 || file || audioFile) {\n        if (this.configService.get<S3>('S3').ENABLE) {\n          try {\n            const fileBuffer = audioFile?.buffer || file?.buffer;\n            const buffer = base64 ? Buffer.from(base64, 'base64') : fileBuffer;\n\n            let mediaType: string;\n            let mimetype = audioFile?.mimetype || file.mimetype;\n\n            if (messageRaw.messageType === 'documentMessage') {\n              mediaType = 'document';\n              mimetype = !mimetype ? 'application/pdf' : mimetype;\n            } else if (messageRaw.messageType === 'imageMessage') {\n              mediaType = 'image';\n              mimetype = !mimetype ? 'image/png' : mimetype;\n            } else if (messageRaw.messageType === 'audioMessage') {\n              mediaType = 'audio';\n              mimetype = !mimetype ? 'audio/mp4' : mimetype;\n            } else if (messageRaw.messageType === 'videoMessage') {\n              mediaType = 'video';\n              mimetype = !mimetype ? 'video/mp4' : mimetype;\n            }\n\n            const fileName = `${messageRaw.key.id}.${mimetype.split('/')[1]}`;\n\n            const size = buffer.byteLength;\n\n            const fullName = join(`${this.instance.id}`, messageRaw.key.remoteJid, mediaType, fileName);\n\n            await s3Service.uploadFile(fullName, buffer, size, {\n              'Content-Type': mimetype,\n            });\n\n            const mediaUrl = await s3Service.getObjectUrl(fullName);\n\n            messageRaw.message.mediaUrl = mediaUrl;\n          } catch (error) {\n            this.logger.error(['Error on upload file to minio', error?.message, error?.stack]);\n          }\n        }\n      }\n\n      this.logger.log(messageRaw);\n\n      this.sendDataWebhook(Events.SEND_MESSAGE, messageRaw);\n\n      if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED && this.localChatwoot?.enabled && !isIntegration) {\n        this.chatwootService.eventWhatsapp(\n          Events.SEND_MESSAGE,\n          { instanceName: this.instance.name, instanceId: this.instanceId },\n          messageRaw,\n        );\n      }\n\n      if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED && this.localChatwoot?.enabled && isIntegration)\n        await chatbotController.emit({\n          instance: { instanceName: this.instance.name, instanceId: this.instanceId },\n          remoteJid: messageRaw.key.remoteJid,\n          msg: messageRaw,\n          pushName: messageRaw.pushName,\n        });\n\n      await this.prismaRepository.message.create({\n        data: messageRaw,\n      });\n\n      return messageRaw;\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(error.toString());\n    }\n  }\n\n  public async textMessage(data: SendTextDto, isIntegration = false) {\n    const res = await this.sendMessageWithTyping(\n      data.number,\n      {\n        conversation: data.text,\n      },\n      {\n        delay: data?.delay,\n        presence: 'composing',\n        quoted: data?.quoted,\n        linkPreview: data?.linkPreview,\n        mentionsEveryOne: data?.mentionsEveryOne,\n        mentioned: data?.mentioned,\n      },\n      null,\n      isIntegration,\n    );\n    return res;\n  }\n\n  protected async prepareMediaMessage(mediaMessage: MediaMessage) {\n    try {\n      if (mediaMessage.mediatype === 'document' && !mediaMessage.fileName) {\n        const regex = new RegExp(/.*\\/(.+?)\\./);\n        const arrayMatch = regex.exec(mediaMessage.media);\n        mediaMessage.fileName = arrayMatch[1];\n      }\n\n      if (mediaMessage.mediatype === 'image' && !mediaMessage.fileName) {\n        mediaMessage.fileName = 'image.png';\n      }\n\n      if (mediaMessage.mediatype === 'video' && !mediaMessage.fileName) {\n        mediaMessage.fileName = 'video.mp4';\n      }\n\n      let mimetype: string | false;\n\n      const prepareMedia: any = {\n        caption: mediaMessage?.caption,\n        fileName: mediaMessage.fileName,\n        mediaType: mediaMessage.mediatype,\n        media: mediaMessage.media,\n        gifPlayback: false,\n      };\n\n      if (isURL(mediaMessage.media)) {\n        mimetype = mimeTypes.lookup(mediaMessage.media);\n      } else {\n        mimetype = mimeTypes.lookup(mediaMessage.fileName);\n      }\n\n      prepareMedia.mimetype = mimetype;\n\n      return prepareMedia;\n    } catch (error) {\n      this.logger.error(error);\n      throw new InternalServerErrorException(error?.toString() || error);\n    }\n  }\n\n  public async mediaMessage(data: SendMediaDto, file?: any, isIntegration = false) {\n    const mediaData: SendMediaDto = { ...data };\n\n    if (file) mediaData.media = file.buffer.toString('base64');\n\n    const message = await this.prepareMediaMessage(mediaData);\n\n    const mediaSent = await this.sendMessageWithTyping(\n      data.number,\n      { ...message },\n      {\n        delay: data?.delay,\n        presence: 'composing',\n        quoted: data?.quoted,\n        linkPreview: data?.linkPreview,\n        mentionsEveryOne: data?.mentionsEveryOne,\n        mentioned: data?.mentioned,\n      },\n      file,\n      isIntegration,\n    );\n\n    return mediaSent;\n  }\n\n  public async processAudio(audio: string, number: string, file: any) {\n    number = number.replace(/\\D/g, '');\n    const hash = `${number}-${new Date().getTime()}`;\n\n    if (process.env.API_AUDIO_CONVERTER) {\n      try {\n        this.logger.verbose('Using audio converter API');\n        const formData = new FormData();\n\n        if (file) {\n          formData.append('file', file.buffer, {\n            filename: file.originalname,\n            contentType: file.mimetype,\n          });\n        } else if (isURL(audio)) {\n          formData.append('url', audio);\n        } else {\n          formData.append('base64', audio);\n        }\n\n        formData.append('format', 'mp4');\n\n        const response = await axios.post(process.env.API_AUDIO_CONVERTER, formData, {\n          headers: {\n            ...formData.getHeaders(),\n            apikey: process.env.API_AUDIO_CONVERTER_KEY,\n          },\n        });\n\n        if (!response?.data?.audio) {\n          throw new InternalServerErrorException('Failed to convert audio');\n        }\n\n        const prepareMedia: any = {\n          fileName: `${hash}.mp4`,\n          mediaType: 'audio',\n          media: response?.data?.audio,\n          mimetype: 'audio/mpeg',\n        };\n\n        return prepareMedia;\n      } catch (error) {\n        this.logger.error(error?.response?.data || error);\n        throw new InternalServerErrorException(error?.response?.data?.message || error?.toString() || error);\n      }\n    } else {\n      let mimetype: string;\n\n      const prepareMedia: any = {\n        fileName: `${hash}.mp3`,\n        mediaType: 'audio',\n        media: audio,\n        mimetype: 'audio/mpeg',\n      };\n\n      if (isURL(audio)) {\n        mimetype = mimeTypes.lookup(audio).toString();\n      } else {\n        mimetype = mimeTypes.lookup(prepareMedia.fileName).toString();\n      }\n\n      prepareMedia.mimetype = mimetype;\n\n      return prepareMedia;\n    }\n  }\n\n  public async audioWhatsapp(data: SendAudioDto, file?: any, isIntegration = false) {\n    const mediaData: SendAudioDto = { ...data };\n\n    if (file?.buffer) {\n      mediaData.audio = file.buffer.toString('base64');\n    } else {\n      console.error('El archivo o buffer no est� definido correctamente.');\n      throw new Error('File or buffer is undefined.');\n    }\n\n    const message = await this.processAudio(mediaData.audio, data.number, file);\n\n    const audioSent = await this.sendMessageWithTyping(\n      data.number,\n      { ...message },\n      {\n        delay: data?.delay,\n        presence: 'composing',\n        quoted: data?.quoted,\n        linkPreview: data?.linkPreview,\n        mentionsEveryOne: data?.mentionsEveryOne,\n        mentioned: data?.mentioned,\n      },\n      file,\n      isIntegration,\n    );\n\n    return audioSent;\n  }\n\n  public async buttonMessage(data: SendButtonsDto, isIntegration = false) {\n    return await this.sendMessageWithTyping(\n      data.number,\n      {\n        buttonMessage: {\n          title: data.title,\n          description: data.description,\n          footer: data.footer,\n          buttons: data.buttons,\n        },\n      },\n      {\n        delay: data?.delay,\n        presence: 'composing',\n        quoted: data?.quoted,\n        mentionsEveryOne: data?.mentionsEveryOne,\n        mentioned: data?.mentioned,\n      },\n      null,\n      isIntegration,\n    );\n  }\n  public async locationMessage() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async listMessage() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async templateMessage() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async contactMessage() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async reactionMessage() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async getBase64FromMediaMessage() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async deleteMessage() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async mediaSticker() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async pollMessage() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async statusMessage() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async reloadConnection() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async whatsappNumber() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async markMessageAsRead() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async archiveChat() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async markChatUnread() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async fetchProfile() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async offerCall() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async sendPresence() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async setPresence() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async fetchPrivacySettings() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async updatePrivacySettings() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async fetchBusinessProfile() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async updateProfileName() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async updateProfileStatus() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async updateProfilePicture() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async removeProfilePicture() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async blockUser() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async updateMessage() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async createGroup() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async updateGroupPicture() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async updateGroupSubject() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async updateGroupDescription() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async findGroup() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async fetchAllGroups() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async inviteCode() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async inviteInfo() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async sendInvite() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async acceptInviteCode() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async revokeInviteCode() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async findParticipants() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async updateGParticipant() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async updateGSetting() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async toggleEphemeral() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async leaveGroup() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async fetchLabels() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async handleLabel() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async receiveMobileCode() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n  public async fakeCall() {\n    throw new BadRequestException('Method not available on Evolution Channel');\n  }\n}\n","import { wa } from '@api/types/wa.types';\n\nexport const status: Record<number, wa.StatusMessage> = {\n  0: 'ERROR',\n  1: 'PENDING',\n  2: 'SERVER_ACK',\n  3: 'DELIVERY_ACK',\n  4: 'READ',\n  5: 'PLAYED',\n};\n","import { NumberBusiness } from '@api/dto/chat.dto';\nimport {\n  ContactMessage,\n  MediaMessage,\n  Options,\n  SendAudioDto,\n  SendButtonsDto,\n  SendContactDto,\n  SendListDto,\n  SendLocationDto,\n  SendMediaDto,\n  SendReactionDto,\n  SendTemplateDto,\n  SendTextDto,\n} from '@api/dto/sendMessage.dto';\nimport * as s3Service from '@api/integrations/storage/s3/libs/minio.server';\nimport { ProviderFiles } from '@api/provider/sessions';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport { chatbotController } from '@api/server.module';\nimport { CacheService } from '@api/services/cache.service';\nimport { ChannelStartupService } from '@api/services/channel.service';\nimport { Events, wa } from '@api/types/wa.types';\nimport { Chatwoot, ConfigService, Database, Openai, S3, WaBusiness } from '@config/env.config';\nimport { BadRequestException, InternalServerErrorException } from '@exceptions';\nimport { createJid } from '@utils/createJid';\nimport { status } from '@utils/renderStatus';\nimport axios from 'axios';\nimport { arrayUnique, isURL } from 'class-validator';\nimport EventEmitter2 from 'eventemitter2';\nimport FormData from 'form-data';\nimport { createReadStream } from 'fs';\nimport mimeTypes from 'mime-types';\nimport { join } from 'path';\n\nexport class BusinessStartupService extends ChannelStartupService {\n  constructor(\n    public readonly configService: ConfigService,\n    public readonly eventEmitter: EventEmitter2,\n    public readonly prismaRepository: PrismaRepository,\n    public readonly cache: CacheService,\n    public readonly chatwootCache: CacheService,\n    public readonly baileysCache: CacheService,\n    private readonly providerFiles: ProviderFiles,\n  ) {\n    super(configService, eventEmitter, prismaRepository, chatwootCache);\n  }\n\n  public stateConnection: wa.StateConnection = { state: 'open' };\n\n  public phoneNumber: string;\n  public mobile: boolean;\n\n  public get connectionStatus() {\n    return this.stateConnection;\n  }\n\n  public async closeClient() {\n    this.stateConnection = { state: 'close' };\n  }\n\n  public get qrCode(): wa.QrCode {\n    return {\n      pairingCode: this.instance.qrcode?.pairingCode,\n      code: this.instance.qrcode?.code,\n      base64: this.instance.qrcode?.base64,\n      count: this.instance.qrcode?.count,\n    };\n  }\n\n  public async logoutInstance() {\n    await this.closeClient();\n  }\n\n  private isMediaMessage(message: any) {\n    return message.document || message.image || message.audio || message.video;\n  }\n\n  private async post(message: any, params: string) {\n    try {\n      let urlServer = this.configService.get<WaBusiness>('WA_BUSINESS').URL;\n      const version = this.configService.get<WaBusiness>('WA_BUSINESS').VERSION;\n      urlServer = `${urlServer}/${version}/${this.number}/${params}`;\n      const headers = { 'Content-Type': 'application/json', Authorization: `Bearer ${this.token}` };\n      const result = await axios.post(urlServer, message, { headers });\n      return result.data;\n    } catch (e) {\n      return e.response?.data?.error;\n    }\n  }\n\n  public async profilePicture(number: string) {\n    const jid = createJid(number);\n\n    return {\n      wuid: jid,\n      profilePictureUrl: null,\n    };\n  }\n\n  public async getProfileName() {\n    return null;\n  }\n\n  public async profilePictureUrl() {\n    return null;\n  }\n\n  public async getProfileStatus() {\n    return null;\n  }\n\n  public async setWhatsappBusinessProfile(data: NumberBusiness): Promise<any> {\n    const content = {\n      messaging_product: 'whatsapp',\n      about: data.about,\n      address: data.address,\n      description: data.description,\n      vertical: data.vertical,\n      email: data.email,\n      websites: data.websites,\n      profile_picture_handle: data.profilehandle,\n    };\n    return await this.post(content, 'whatsapp_business_profile');\n  }\n\n  public async connectToWhatsapp(data?: any): Promise<any> {\n    if (!data) return;\n\n    const content = data.entry[0].changes[0].value;\n\n    try {\n      this.loadChatwoot();\n\n      this.eventHandler(content);\n\n      this.phoneNumber = createJid(content.messages ? content.messages[0].from : content.statuses[0]?.recipient_id);\n    } catch (error) {\n      this.logger.error(error);\n      throw new InternalServerErrorException(error?.toString());\n    }\n  }\n\n  private async downloadMediaMessage(message: any) {\n    try {\n      const id = message[message.type].id;\n      let urlServer = this.configService.get<WaBusiness>('WA_BUSINESS').URL;\n      const version = this.configService.get<WaBusiness>('WA_BUSINESS').VERSION;\n      urlServer = `${urlServer}/${version}/${id}`;\n      const headers = { 'Content-Type': 'application/json', Authorization: `Bearer ${this.token}` };\n      let result = await axios.get(urlServer, { headers });\n      result = await axios.get(result.data.url, { headers, responseType: 'arraybuffer' });\n      return result.data;\n    } catch (e) {\n      this.logger.error(e);\n    }\n  }\n\n  private messageMediaJson(received: any) {\n    const message = received.messages[0];\n    let content: any = message.type + 'Message';\n    content = { [content]: message[message.type] };\n    message.context ? (content = { ...content, contextInfo: { stanzaId: message.context.id } }) : content;\n    return content;\n  }\n\n  private messageInteractiveJson(received: any) {\n    const message = received.messages[0];\n    let content: any = { conversation: message.interactive[message.interactive.type].title };\n    message.context ? (content = { ...content, contextInfo: { stanzaId: message.context.id } }) : content;\n    return content;\n  }\n\n  private messageButtonJson(received: any) {\n    const message = received.messages[0];\n    let content: any = { conversation: received.messages[0].button?.text };\n    message.context ? (content = { ...content, contextInfo: { stanzaId: message.context.id } }) : content;\n    return content;\n  }\n\n  private messageReactionJson(received: any) {\n    const message = received.messages[0];\n    let content: any = {\n      reactionMessage: {\n        key: {\n          id: message.reaction.message_id,\n        },\n        text: message.reaction.emoji,\n      },\n    };\n    message.context ? (content = { ...content, contextInfo: { stanzaId: message.context.id } }) : content;\n    return content;\n  }\n\n  private messageTextJson(received: any) {\n    let content: any;\n    const message = received.messages[0];\n    if (message.from === received.metadata.phone_number_id) {\n      content = {\n        extendedTextMessage: { text: message.text.body },\n      };\n      message.context ? (content = { ...content, contextInfo: { stanzaId: message.context.id } }) : content;\n    } else {\n      content = { conversation: message.text.body };\n      message.context ? (content = { ...content, contextInfo: { stanzaId: message.context.id } }) : content;\n    }\n    return content;\n  }\n\n  private messageContactsJson(received: any) {\n    const message = received.messages[0];\n    let content: any = {};\n\n    const vcard = (contact: any) => {\n      let result =\n        'BEGIN:VCARD\\n' +\n        'VERSION:3.0\\n' +\n        `N:${contact.name.formatted_name}\\n` +\n        `FN:${contact.name.formatted_name}\\n`;\n\n      if (contact.org) {\n        result += `ORG:${contact.org.company};\\n`;\n      }\n\n      if (contact.emails) {\n        result += `EMAIL:${contact.emails[0].email}\\n`;\n      }\n\n      if (contact.urls) {\n        result += `URL:${contact.urls[0].url}\\n`;\n      }\n\n      if (!contact.phones[0]?.wa_id) {\n        contact.phones[0].wa_id = createJid(contact.phones[0].phone);\n      }\n\n      result +=\n        `item1.TEL;waid=${contact.phones[0]?.wa_id}:${contact.phones[0].phone}\\n` +\n        'item1.X-ABLabel:Celular\\n' +\n        'END:VCARD';\n\n      return result;\n    };\n\n    if (message.contacts.length === 1) {\n      content.contactMessage = {\n        displayName: message.contacts[0].name.formatted_name,\n        vcard: vcard(message.contacts[0]),\n      };\n    } else {\n      content.contactsArrayMessage = {\n        displayName: `${message.length} contacts`,\n        contacts: message.map((contact) => {\n          return {\n            displayName: contact.name.formatted_name,\n            vcard: vcard(contact),\n          };\n        }),\n      };\n    }\n    message.context ? (content = { ...content, contextInfo: { stanzaId: message.context.id } }) : content;\n    return content;\n  }\n\n  private renderMessageType(type: string) {\n    let messageType: string;\n\n    switch (type) {\n      case 'text':\n        messageType = 'conversation';\n        break;\n      case 'image':\n        messageType = 'imageMessage';\n        break;\n      case 'video':\n        messageType = 'videoMessage';\n        break;\n      case 'audio':\n        messageType = 'audioMessage';\n        break;\n      case 'document':\n        messageType = 'documentMessage';\n        break;\n      case 'template':\n        messageType = 'conversation';\n        break;\n      default:\n        messageType = 'conversation';\n        break;\n    }\n\n    return messageType;\n  }\n\n  protected async messageHandle(received: any, database: Database, settings: any) {\n    try {\n      let messageRaw: any;\n      let pushName: any;\n\n      if (received.contacts) pushName = received.contacts[0].profile.name;\n\n      if (received.messages) {\n        const key = {\n          id: received.messages[0].id,\n          remoteJid: this.phoneNumber,\n          fromMe: received.messages[0].from === received.metadata.phone_number_id,\n        };\n        if (this.isMediaMessage(received?.messages[0])) {\n          messageRaw = {\n            key,\n            pushName,\n            message: this.messageMediaJson(received),\n            contextInfo: this.messageMediaJson(received)?.contextInfo,\n            messageType: this.renderMessageType(received.messages[0].type),\n            messageTimestamp: parseInt(received.messages[0].timestamp) as number,\n            source: 'unknown',\n            instanceId: this.instanceId,\n          };\n\n          if (this.configService.get<S3>('S3').ENABLE) {\n            try {\n              const message: any = received;\n\n              const id = message.messages[0][message.messages[0].type].id;\n              let urlServer = this.configService.get<WaBusiness>('WA_BUSINESS').URL;\n              const version = this.configService.get<WaBusiness>('WA_BUSINESS').VERSION;\n              urlServer = `${urlServer}/${version}/${id}`;\n              const headers = { 'Content-Type': 'application/json', Authorization: `Bearer ${this.token}` };\n              const result = await axios.get(urlServer, { headers });\n\n              const buffer = await axios.get(result.data.url, { headers, responseType: 'arraybuffer' });\n\n              let mediaType;\n\n              if (message.messages[0].document) {\n                mediaType = 'document';\n              } else if (message.messages[0].image) {\n                mediaType = 'image';\n              } else if (message.messages[0].audio) {\n                mediaType = 'audio';\n              } else {\n                mediaType = 'video';\n              }\n\n              const mimetype = result.data?.mime_type || result.headers['content-type'];\n\n              const contentDisposition = result.headers['content-disposition'];\n              let fileName = `${message.messages[0].id}.${mimetype.split('/')[1]}`;\n              if (contentDisposition) {\n                const match = contentDisposition.match(/filename=\"(.+?)\"/);\n                if (match) {\n                  fileName = match[1];\n                }\n              }\n\n              const size = result.headers['content-length'] || buffer.data.byteLength;\n\n              const fullName = join(`${this.instance.id}`, key.remoteJid, mediaType, fileName);\n\n              await s3Service.uploadFile(fullName, buffer.data, size, {\n                'Content-Type': mimetype,\n              });\n\n              const createdMessage = await this.prismaRepository.message.create({\n                data: messageRaw,\n              });\n\n              await this.prismaRepository.media.create({\n                data: {\n                  messageId: createdMessage.id,\n                  instanceId: this.instanceId,\n                  type: mediaType,\n                  fileName: fullName,\n                  mimetype,\n                },\n              });\n\n              const mediaUrl = await s3Service.getObjectUrl(fullName);\n\n              messageRaw.message.mediaUrl = mediaUrl;\n              messageRaw.message.base64 = buffer.data.toString('base64');\n            } catch (error) {\n              this.logger.error(['Error on upload file to minio', error?.message, error?.stack]);\n            }\n          } else {\n            const buffer = await this.downloadMediaMessage(received?.messages[0]);\n\n            messageRaw.message.base64 = buffer.toString('base64');\n          }\n        } else if (received?.messages[0].interactive) {\n          messageRaw = {\n            key,\n            pushName,\n            message: {\n              ...this.messageInteractiveJson(received),\n            },\n            contextInfo: this.messageInteractiveJson(received)?.contextInfo,\n            messageType: 'interactiveMessage',\n            messageTimestamp: parseInt(received.messages[0].timestamp) as number,\n            source: 'unknown',\n            instanceId: this.instanceId,\n          };\n        } else if (received?.messages[0].button) {\n          messageRaw = {\n            key,\n            pushName,\n            message: {\n              ...this.messageButtonJson(received),\n            },\n            contextInfo: this.messageButtonJson(received)?.contextInfo,\n            messageType: 'buttonMessage',\n            messageTimestamp: parseInt(received.messages[0].timestamp) as number,\n            source: 'unknown',\n            instanceId: this.instanceId,\n          };\n        } else if (received?.messages[0].reaction) {\n          messageRaw = {\n            key,\n            pushName,\n            message: {\n              ...this.messageReactionJson(received),\n            },\n            contextInfo: this.messageReactionJson(received)?.contextInfo,\n            messageType: 'reactionMessage',\n            messageTimestamp: parseInt(received.messages[0].timestamp) as number,\n            source: 'unknown',\n            instanceId: this.instanceId,\n          };\n        } else if (received?.messages[0].contacts) {\n          messageRaw = {\n            key,\n            pushName,\n            message: {\n              ...this.messageContactsJson(received),\n            },\n            contextInfo: this.messageContactsJson(received)?.contextInfo,\n            messageType: 'contactMessage',\n            messageTimestamp: parseInt(received.messages[0].timestamp) as number,\n            source: 'unknown',\n            instanceId: this.instanceId,\n          };\n        } else {\n          messageRaw = {\n            key,\n            pushName,\n            message: this.messageTextJson(received),\n            contextInfo: this.messageTextJson(received)?.contextInfo,\n            messageType: this.renderMessageType(received.messages[0].type),\n            messageTimestamp: parseInt(received.messages[0].timestamp) as number,\n            source: 'unknown',\n            instanceId: this.instanceId,\n          };\n        }\n\n        if (this.localSettings.readMessages) {\n          // await this.client.readMessages([received.key]);\n        }\n\n        if (this.configService.get<Openai>('OPENAI').ENABLED) {\n          const openAiDefaultSettings = await this.prismaRepository.openaiSetting.findFirst({\n            where: {\n              instanceId: this.instanceId,\n            },\n            include: {\n              OpenaiCreds: true,\n            },\n          });\n\n          const audioMessage = received?.messages[0]?.audio;\n\n          if (\n            openAiDefaultSettings &&\n            openAiDefaultSettings.openaiCredsId &&\n            openAiDefaultSettings.speechToText &&\n            audioMessage\n          ) {\n            messageRaw.message.speechToText = await this.openaiService.speechToText(\n              openAiDefaultSettings.OpenaiCreds,\n              {\n                message: {\n                  mediaUrl: messageRaw.message.mediaUrl,\n                  ...messageRaw,\n                },\n              },\n              () => {},\n            );\n          }\n        }\n\n        this.logger.log(messageRaw);\n\n        this.sendDataWebhook(Events.MESSAGES_UPSERT, messageRaw);\n\n        await chatbotController.emit({\n          instance: { instanceName: this.instance.name, instanceId: this.instanceId },\n          remoteJid: messageRaw.key.remoteJid,\n          msg: messageRaw,\n          pushName: messageRaw.pushName,\n        });\n\n        if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED && this.localChatwoot?.enabled) {\n          const chatwootSentMessage = await this.chatwootService.eventWhatsapp(\n            Events.MESSAGES_UPSERT,\n            { instanceName: this.instance.name, instanceId: this.instanceId },\n            messageRaw,\n          );\n\n          if (chatwootSentMessage?.id) {\n            messageRaw.chatwootMessageId = chatwootSentMessage.id;\n            messageRaw.chatwootInboxId = chatwootSentMessage.id;\n            messageRaw.chatwootConversationId = chatwootSentMessage.id;\n          }\n        }\n\n        if (!this.isMediaMessage(received?.messages[0])) {\n          await this.prismaRepository.message.create({\n            data: messageRaw,\n          });\n        }\n\n        const contact = await this.prismaRepository.contact.findFirst({\n          where: { instanceId: this.instanceId, remoteJid: key.remoteJid },\n        });\n\n        const contactRaw: any = {\n          remoteJid: received.contacts[0].profile.phone,\n          pushName,\n          // profilePicUrl: '',\n          instanceId: this.instanceId,\n        };\n\n        if (contactRaw.remoteJid === 'status@broadcast') {\n          return;\n        }\n\n        if (contact) {\n          const contactRaw: any = {\n            remoteJid: received.contacts[0].profile.phone,\n            pushName,\n            // profilePicUrl: '',\n            instanceId: this.instanceId,\n          };\n\n          this.sendDataWebhook(Events.CONTACTS_UPDATE, contactRaw);\n\n          if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED && this.localChatwoot?.enabled) {\n            await this.chatwootService.eventWhatsapp(\n              Events.CONTACTS_UPDATE,\n              { instanceName: this.instance.name, instanceId: this.instanceId },\n              contactRaw,\n            );\n          }\n\n          await this.prismaRepository.contact.updateMany({\n            where: { remoteJid: contact.remoteJid },\n            data: contactRaw,\n          });\n          return;\n        }\n\n        this.sendDataWebhook(Events.CONTACTS_UPSERT, contactRaw);\n\n        this.prismaRepository.contact.create({\n          data: contactRaw,\n        });\n      }\n      if (received.statuses) {\n        for await (const item of received.statuses) {\n          const key = {\n            id: item.id,\n            remoteJid: this.phoneNumber,\n            fromMe: this.phoneNumber === received.metadata.phone_number_id,\n          };\n          if (settings?.groups_ignore && key.remoteJid.includes('@g.us')) {\n            return;\n          }\n          if (key.remoteJid !== 'status@broadcast' && !key?.remoteJid?.match(/(:\\d+)/)) {\n            const findMessage = await this.prismaRepository.message.findFirst({\n              where: {\n                instanceId: this.instanceId,\n                key: {\n                  path: ['id'],\n                  equals: key.id,\n                },\n              },\n            });\n\n            if (!findMessage) {\n              return;\n            }\n\n            if (item.message === null && item.status === undefined) {\n              this.sendDataWebhook(Events.MESSAGES_DELETE, key);\n\n              const message: any = {\n                messageId: findMessage.id,\n                keyId: key.id,\n                remoteJid: key.remoteJid,\n                fromMe: key.fromMe,\n                participant: key?.remoteJid,\n                status: 'DELETED',\n                instanceId: this.instanceId,\n              };\n\n              await this.prismaRepository.messageUpdate.create({\n                data: message,\n              });\n\n              if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED && this.localChatwoot?.enabled) {\n                this.chatwootService.eventWhatsapp(\n                  Events.MESSAGES_DELETE,\n                  { instanceName: this.instance.name, instanceId: this.instanceId },\n                  { key: key },\n                );\n              }\n\n              return;\n            }\n\n            const message: any = {\n              messageId: findMessage.id,\n              keyId: key.id,\n              remoteJid: key.remoteJid,\n              fromMe: key.fromMe,\n              participant: key?.remoteJid,\n              status: item.status.toUpperCase(),\n              instanceId: this.instanceId,\n            };\n\n            this.sendDataWebhook(Events.MESSAGES_UPDATE, message);\n\n            await this.prismaRepository.messageUpdate.create({\n              data: message,\n            });\n\n            if (findMessage.webhookUrl) {\n              await axios.post(findMessage.webhookUrl, message);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  private convertMessageToRaw(message: any, content: any) {\n    let convertMessage: any;\n\n    if (message?.conversation) {\n      if (content?.context?.message_id) {\n        convertMessage = {\n          ...message,\n          contextInfo: { stanzaId: content.context.message_id },\n        };\n        return convertMessage;\n      }\n      convertMessage = message;\n      return convertMessage;\n    }\n\n    if (message?.mediaType === 'image') {\n      if (content?.context?.message_id) {\n        convertMessage = {\n          imageMessage: message,\n          contextInfo: { stanzaId: content.context.message_id },\n        };\n        return convertMessage;\n      }\n      return {\n        imageMessage: message,\n      };\n    }\n\n    if (message?.mediaType === 'video') {\n      if (content?.context?.message_id) {\n        convertMessage = {\n          videoMessage: message,\n          contextInfo: { stanzaId: content.context.message_id },\n        };\n        return convertMessage;\n      }\n      return {\n        videoMessage: message,\n      };\n    }\n\n    if (message?.mediaType === 'audio') {\n      if (content?.context?.message_id) {\n        convertMessage = {\n          audioMessage: message,\n          contextInfo: { stanzaId: content.context.message_id },\n        };\n        return convertMessage;\n      }\n      return {\n        audioMessage: message,\n      };\n    }\n\n    if (message?.mediaType === 'document') {\n      if (content?.context?.message_id) {\n        convertMessage = {\n          documentMessage: message,\n          contextInfo: { stanzaId: content.context.message_id },\n        };\n        return convertMessage;\n      }\n      return {\n        documentMessage: message,\n      };\n    }\n\n    return message;\n  }\n\n  protected async eventHandler(content: any) {\n    const database = this.configService.get<Database>('DATABASE');\n    const settings = await this.findSettings();\n\n    this.messageHandle(content, database, settings);\n  }\n\n  protected async sendMessageWithTyping(number: string, message: any, options?: Options, isIntegration = false) {\n    try {\n      let quoted: any;\n      let webhookUrl: any;\n      const linkPreview = options?.linkPreview != false ? undefined : false;\n      if (options?.quoted) {\n        const m = options?.quoted;\n\n        const msg = m?.key;\n\n        if (!msg) {\n          throw 'Message not found';\n        }\n\n        quoted = msg;\n      }\n      if (options?.webhookUrl) {\n        webhookUrl = options.webhookUrl;\n      }\n\n      let content: any;\n      const messageSent = await (async () => {\n        if (message['reactionMessage']) {\n          content = {\n            messaging_product: 'whatsapp',\n            recipient_type: 'individual',\n            type: 'reaction',\n            to: number.replace(/\\D/g, ''),\n            reaction: {\n              message_id: message['reactionMessage']['key']['id'],\n              emoji: message['reactionMessage']['text'],\n            },\n          };\n          quoted ? (content.context = { message_id: quoted.id }) : content;\n          return await this.post(content, 'messages');\n        }\n        if (message['locationMessage']) {\n          content = {\n            messaging_product: 'whatsapp',\n            recipient_type: 'individual',\n            type: 'location',\n            to: number.replace(/\\D/g, ''),\n            location: {\n              longitude: message['locationMessage']['degreesLongitude'],\n              latitude: message['locationMessage']['degreesLatitude'],\n              name: message['locationMessage']['name'],\n              address: message['locationMessage']['address'],\n            },\n          };\n          quoted ? (content.context = { message_id: quoted.id }) : content;\n          return await this.post(content, 'messages');\n        }\n        if (message['contacts']) {\n          content = {\n            messaging_product: 'whatsapp',\n            recipient_type: 'individual',\n            type: 'contacts',\n            to: number.replace(/\\D/g, ''),\n            contacts: message['contacts'],\n          };\n          quoted ? (content.context = { message_id: quoted.id }) : content;\n          message = message['message'];\n          return await this.post(content, 'messages');\n        }\n        if (message['conversation']) {\n          content = {\n            messaging_product: 'whatsapp',\n            recipient_type: 'individual',\n            type: 'text',\n            to: number.replace(/\\D/g, ''),\n            text: {\n              body: message['conversation'],\n              preview_url: linkPreview,\n            },\n          };\n          quoted ? (content.context = { message_id: quoted.id }) : content;\n          return await this.post(content, 'messages');\n        }\n        if (message['media']) {\n          const isImage = message['mimetype']?.startsWith('image/');\n\n          content = {\n            messaging_product: 'whatsapp',\n            recipient_type: 'individual',\n            type: message['mediaType'],\n            to: number.replace(/\\D/g, ''),\n            [message['mediaType']]: {\n              [message['type']]: message['id'],\n              preview_url: linkPreview,\n              ...(message['fileName'] && !isImage && { filename: message['fileName'] }),\n              caption: message['caption'],\n            },\n          };\n          quoted ? (content.context = { message_id: quoted.id }) : content;\n          return await this.post(content, 'messages');\n        }\n        if (message['audio']) {\n          content = {\n            messaging_product: 'whatsapp',\n            recipient_type: 'individual',\n            type: 'audio',\n            to: number.replace(/\\D/g, ''),\n            audio: {\n              [message['type']]: message['id'],\n            },\n          };\n          quoted ? (content.context = { message_id: quoted.id }) : content;\n          return await this.post(content, 'messages');\n        }\n        if (message['buttons']) {\n          content = {\n            messaging_product: 'whatsapp',\n            recipient_type: 'individual',\n            to: number.replace(/\\D/g, ''),\n            type: 'interactive',\n            interactive: {\n              type: 'button',\n              body: {\n                text: message['text'] || 'Select',\n              },\n              action: {\n                buttons: message['buttons'],\n              },\n            },\n          };\n          quoted ? (content.context = { message_id: quoted.id }) : content;\n          let formattedText = '';\n          for (const item of message['buttons']) {\n            formattedText += `▶️ ${item.reply?.title}\\n`;\n          }\n          message = { conversation: `${message['text'] || 'Select'}\\n` + formattedText };\n          return await this.post(content, 'messages');\n        }\n        if (message['listMessage']) {\n          content = {\n            messaging_product: 'whatsapp',\n            recipient_type: 'individual',\n            to: number.replace(/\\D/g, ''),\n            type: 'interactive',\n            interactive: {\n              type: 'list',\n              header: {\n                type: 'text',\n                text: message['listMessage']['title'],\n              },\n              body: {\n                text: message['listMessage']['description'],\n              },\n              footer: {\n                text: message['listMessage']['footerText'],\n              },\n              action: {\n                button: message['listMessage']['buttonText'],\n                sections: message['listMessage']['sections'],\n              },\n            },\n          };\n          quoted ? (content.context = { message_id: quoted.id }) : content;\n          let formattedText = '';\n          for (const section of message['listMessage']['sections']) {\n            formattedText += `${section?.title}\\n`;\n            for (const row of section.rows) {\n              formattedText += `${row?.title}\\n`;\n            }\n          }\n          message = { conversation: `${message['listMessage']['title']}\\n` + formattedText };\n          return await this.post(content, 'messages');\n        }\n        if (message['template']) {\n          content = {\n            messaging_product: 'whatsapp',\n            recipient_type: 'individual',\n            to: number.replace(/\\D/g, ''),\n            type: 'template',\n            template: {\n              name: message['template']['name'],\n              language: {\n                code: message['template']['language'] || 'en_US',\n              },\n              components: message['template']['components'],\n            },\n          };\n          quoted ? (content.context = { message_id: quoted.id }) : content;\n          message = { conversation: `▶️${message['template']['name']}◀️` };\n          return await this.post(content, 'messages');\n        }\n      })();\n\n      if (messageSent?.error_data) {\n        this.logger.error(messageSent);\n        return messageSent;\n      }\n\n      const messageRaw: any = {\n        key: { fromMe: true, id: messageSent?.messages[0]?.id, remoteJid: createJid(number) },\n        message: this.convertMessageToRaw(message, content),\n        messageType: this.renderMessageType(content.type),\n        messageTimestamp: (messageSent?.messages[0]?.timestamp as number) || Math.round(new Date().getTime() / 1000),\n        instanceId: this.instanceId,\n        webhookUrl,\n        status: status[1],\n        source: 'unknown',\n      };\n\n      this.logger.log(messageRaw);\n\n      this.sendDataWebhook(Events.SEND_MESSAGE, messageRaw);\n\n      if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED && this.localChatwoot?.enabled && !isIntegration) {\n        this.chatwootService.eventWhatsapp(\n          Events.SEND_MESSAGE,\n          { instanceName: this.instance.name, instanceId: this.instanceId },\n          messageRaw,\n        );\n      }\n\n      if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED && this.localChatwoot?.enabled && isIntegration)\n        await chatbotController.emit({\n          instance: { instanceName: this.instance.name, instanceId: this.instanceId },\n          remoteJid: messageRaw.key.remoteJid,\n          msg: messageRaw,\n          pushName: messageRaw.pushName,\n        });\n\n      await this.prismaRepository.message.create({\n        data: messageRaw,\n      });\n\n      return messageRaw;\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(error.toString());\n    }\n  }\n\n  // Send Message Controller\n  public async textMessage(data: SendTextDto, isIntegration = false) {\n    const res = await this.sendMessageWithTyping(\n      data.number,\n      {\n        conversation: data.text,\n      },\n      {\n        delay: data?.delay,\n        presence: 'composing',\n        quoted: data?.quoted,\n        linkPreview: data?.linkPreview,\n        mentionsEveryOne: data?.mentionsEveryOne,\n        mentioned: data?.mentioned,\n      },\n      isIntegration,\n    );\n    return res;\n  }\n\n  private async getIdMedia(mediaMessage: any) {\n    const formData = new FormData();\n\n    const fileStream = createReadStream(mediaMessage.media);\n\n    formData.append('file', fileStream, { filename: 'media', contentType: mediaMessage.mimetype });\n    formData.append('typeFile', mediaMessage.mimetype);\n    formData.append('messaging_product', 'whatsapp');\n\n    // const fileBuffer = await fs.readFile(mediaMessage.media);\n\n    // const fileBlob = new Blob([fileBuffer], { type: mediaMessage.mimetype });\n    // formData.append('file', fileBlob);\n    // formData.append('typeFile', mediaMessage.mimetype);\n    // formData.append('messaging_product', 'whatsapp');\n\n    const headers = { Authorization: `Bearer ${this.token}` };\n    const res = await axios.post(\n      process.env.API_URL + '/' + process.env.VERSION + '/' + this.number + '/media',\n      formData,\n      { headers },\n    );\n    return res.data.id;\n  }\n\n  protected async prepareMediaMessage(mediaMessage: MediaMessage) {\n    try {\n      if (mediaMessage.mediatype === 'document' && !mediaMessage.fileName) {\n        const regex = new RegExp(/.*\\/(.+?)\\./);\n        const arrayMatch = regex.exec(mediaMessage.media);\n        mediaMessage.fileName = arrayMatch[1];\n      }\n\n      if (mediaMessage.mediatype === 'image' && !mediaMessage.fileName) {\n        mediaMessage.fileName = 'image.png';\n      }\n\n      if (mediaMessage.mediatype === 'video' && !mediaMessage.fileName) {\n        mediaMessage.fileName = 'video.mp4';\n      }\n\n      let mimetype: string | false;\n\n      const prepareMedia: any = {\n        caption: mediaMessage?.caption,\n        fileName: mediaMessage.fileName,\n        mediaType: mediaMessage.mediatype,\n        media: mediaMessage.media,\n        gifPlayback: false,\n      };\n\n      if (isURL(mediaMessage.media)) {\n        mimetype = mimeTypes.lookup(mediaMessage.media);\n        prepareMedia.id = mediaMessage.media;\n        prepareMedia.type = 'link';\n      } else {\n        mimetype = mimeTypes.lookup(mediaMessage.fileName);\n        const id = await this.getIdMedia(prepareMedia);\n        prepareMedia.id = id;\n        prepareMedia.type = 'id';\n      }\n\n      prepareMedia.mimetype = mimetype;\n\n      return prepareMedia;\n    } catch (error) {\n      this.logger.error(error);\n      throw new InternalServerErrorException(error?.toString() || error);\n    }\n  }\n\n  public async mediaMessage(data: SendMediaDto, file?: any, isIntegration = false) {\n    const mediaData: SendMediaDto = { ...data };\n\n    if (file) mediaData.media = file.buffer.toString('base64');\n\n    const message = await this.prepareMediaMessage(mediaData);\n\n    const mediaSent = await this.sendMessageWithTyping(\n      data.number,\n      { ...message },\n      {\n        delay: data?.delay,\n        presence: 'composing',\n        quoted: data?.quoted,\n        linkPreview: data?.linkPreview,\n        mentionsEveryOne: data?.mentionsEveryOne,\n        mentioned: data?.mentioned,\n      },\n      isIntegration,\n    );\n\n    return mediaSent;\n  }\n\n  public async processAudio(audio: string, number: string) {\n    number = number.replace(/\\D/g, '');\n    const hash = `${number}-${new Date().getTime()}`;\n\n    let mimetype: string | false;\n\n    const prepareMedia: any = {\n      fileName: `${hash}.mp3`,\n      mediaType: 'audio',\n      media: audio,\n    };\n\n    if (isURL(audio)) {\n      mimetype = mimeTypes.lookup(audio);\n      prepareMedia.id = audio;\n      prepareMedia.type = 'link';\n    } else {\n      mimetype = mimeTypes.lookup(prepareMedia.fileName);\n      const id = await this.getIdMedia(prepareMedia);\n      prepareMedia.id = id;\n      prepareMedia.type = 'id';\n    }\n\n    prepareMedia.mimetype = mimetype;\n\n    return prepareMedia;\n  }\n\n  public async audioWhatsapp(data: SendAudioDto, file?: any, isIntegration = false) {\n    const mediaData: SendAudioDto = { ...data };\n\n    if (file?.buffer) {\n      mediaData.audio = file.buffer.toString('base64');\n    } else if (isURL(mediaData.audio)) {\n      // DO NOTHING\n      // mediaData.audio = mediaData.audio;\n    } else {\n      console.error('El archivo no tiene buffer o file es undefined');\n      throw new Error('File or buffer is undefined');\n    }\n\n    const message = await this.processAudio(mediaData.audio, data.number);\n\n    const audioSent = await this.sendMessageWithTyping(\n      data.number,\n      { ...message },\n      {\n        delay: data?.delay,\n        presence: 'composing',\n        quoted: data?.quoted,\n        linkPreview: data?.linkPreview,\n        mentionsEveryOne: data?.mentionsEveryOne,\n        mentioned: data?.mentioned,\n      },\n      isIntegration,\n    );\n\n    return audioSent;\n  }\n\n  public async buttonMessage(data: SendButtonsDto) {\n    const embeddedMedia: any = {};\n\n    const btnItems = {\n      text: data.buttons.map((btn) => btn.displayText),\n      ids: data.buttons.map((btn) => btn.id),\n    };\n\n    if (!arrayUnique(btnItems.text) || !arrayUnique(btnItems.ids)) {\n      throw new BadRequestException('Button texts cannot be repeated', 'Button IDs cannot be repeated.');\n    }\n\n    return await this.sendMessageWithTyping(\n      data.number,\n      {\n        text: !embeddedMedia?.mediaKey ? data.title : undefined,\n        buttons: data.buttons.map((button) => {\n          return {\n            type: 'reply',\n            reply: {\n              title: button.displayText,\n              id: button.id,\n            },\n          };\n        }),\n        [embeddedMedia?.mediaKey]: embeddedMedia?.message,\n      },\n      {\n        delay: data?.delay,\n        presence: 'composing',\n        quoted: data?.quoted,\n        linkPreview: data?.linkPreview,\n        mentionsEveryOne: data?.mentionsEveryOne,\n        mentioned: data?.mentioned,\n      },\n    );\n  }\n\n  public async locationMessage(data: SendLocationDto) {\n    return await this.sendMessageWithTyping(\n      data.number,\n      {\n        locationMessage: {\n          degreesLatitude: data.latitude,\n          degreesLongitude: data.longitude,\n          name: data?.name,\n          address: data?.address,\n        },\n      },\n      {\n        delay: data?.delay,\n        presence: 'composing',\n        quoted: data?.quoted,\n        linkPreview: data?.linkPreview,\n        mentionsEveryOne: data?.mentionsEveryOne,\n        mentioned: data?.mentioned,\n      },\n    );\n  }\n\n  public async listMessage(data: SendListDto) {\n    const sectionsItems = {\n      title: data.sections.map((list) => list.title),\n    };\n\n    if (!arrayUnique(sectionsItems.title)) {\n      throw new BadRequestException('Section tiles cannot be repeated');\n    }\n\n    const sendData: any = {\n      listMessage: {\n        title: data.title,\n        description: data.description,\n        footerText: data?.footerText,\n        buttonText: data?.buttonText,\n        sections: data.sections.map((section) => {\n          return {\n            title: section.title,\n            rows: section.rows.map((row) => {\n              return {\n                title: row.title,\n                description: row.description.substring(0, 72),\n                id: row.rowId,\n              };\n            }),\n          };\n        }),\n      },\n    };\n\n    return await this.sendMessageWithTyping(data.number, sendData, {\n      delay: data?.delay,\n      presence: 'composing',\n      quoted: data?.quoted,\n      linkPreview: data?.linkPreview,\n      mentionsEveryOne: data?.mentionsEveryOne,\n      mentioned: data?.mentioned,\n    });\n  }\n\n  public async templateMessage(data: SendTemplateDto, isIntegration = false) {\n    const res = await this.sendMessageWithTyping(\n      data.number,\n      {\n        template: {\n          name: data.name,\n          language: data.language,\n          components: data.components,\n        },\n      },\n      {\n        delay: data?.delay,\n        presence: 'composing',\n        quoted: data?.quoted,\n        linkPreview: data?.linkPreview,\n        mentionsEveryOne: data?.mentionsEveryOne,\n        mentioned: data?.mentioned,\n        webhookUrl: data?.webhookUrl,\n      },\n      isIntegration,\n    );\n    return res;\n  }\n\n  public async contactMessage(data: SendContactDto) {\n    const message: any = {};\n\n    const vcard = (contact: ContactMessage) => {\n      let result = 'BEGIN:VCARD\\n' + 'VERSION:3.0\\n' + `N:${contact.fullName}\\n` + `FN:${contact.fullName}\\n`;\n\n      if (contact.organization) {\n        result += `ORG:${contact.organization};\\n`;\n      }\n\n      if (contact.email) {\n        result += `EMAIL:${contact.email}\\n`;\n      }\n\n      if (contact.url) {\n        result += `URL:${contact.url}\\n`;\n      }\n\n      if (!contact.wuid) {\n        contact.wuid = createJid(contact.phoneNumber);\n      }\n\n      result += `item1.TEL;waid=${contact.wuid}:${contact.phoneNumber}\\n` + 'item1.X-ABLabel:Celular\\n' + 'END:VCARD';\n\n      return result;\n    };\n\n    if (data.contact.length === 1) {\n      message.contact = {\n        displayName: data.contact[0].fullName,\n        vcard: vcard(data.contact[0]),\n      };\n    } else {\n      message.contactsArrayMessage = {\n        displayName: `${data.contact.length} contacts`,\n        contacts: data.contact.map((contact) => {\n          return {\n            displayName: contact.fullName,\n            vcard: vcard(contact),\n          };\n        }),\n      };\n    }\n    return await this.sendMessageWithTyping(\n      data.number,\n      {\n        contacts: data.contact.map((contact) => {\n          return {\n            name: { formatted_name: contact.fullName, first_name: contact.fullName },\n            phones: [{ phone: contact.phoneNumber }],\n            urls: [{ url: contact.url }],\n            emails: [{ email: contact.email }],\n            org: { company: contact.organization },\n          };\n        }),\n        message,\n      },\n      {\n        delay: data?.delay,\n        presence: 'composing',\n        quoted: data?.quoted,\n        linkPreview: data?.linkPreview,\n        mentionsEveryOne: data?.mentionsEveryOne,\n        mentioned: data?.mentioned,\n      },\n    );\n  }\n\n  public async reactionMessage(data: SendReactionDto) {\n    return await this.sendMessageWithTyping(data.key.remoteJid, {\n      reactionMessage: {\n        key: data.key,\n        text: data.reaction,\n      },\n    });\n  }\n\n  public async getBase64FromMediaMessage(data: any) {\n    try {\n      const msg = data.message;\n      const messageType = msg.messageType.includes('Message') ? msg.messageType : msg.messageType + 'Message';\n      const mediaMessage = msg.message[messageType];\n\n      return {\n        mediaType: msg.messageType,\n        fileName: mediaMessage?.fileName,\n        caption: mediaMessage?.caption,\n        size: {\n          fileLength: mediaMessage?.fileLength,\n          height: mediaMessage?.fileLength,\n          width: mediaMessage?.width,\n        },\n        mimetype: mediaMessage?.mime_type,\n        base64: msg.message.base64,\n      };\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(error.toString());\n    }\n  }\n\n  public async deleteMessage() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n\n  // methods not available on WhatsApp Business API\n  public async mediaSticker() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async pollMessage() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async statusMessage() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async reloadConnection() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async whatsappNumber() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async markMessageAsRead() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async archiveChat() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async markChatUnread() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async fetchProfile() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async offerCall() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async sendPresence() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async setPresence() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async fetchPrivacySettings() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async updatePrivacySettings() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async fetchBusinessProfile() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async updateProfileName() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async updateProfileStatus() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async updateProfilePicture() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async removeProfilePicture() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async blockUser() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async updateMessage() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async createGroup() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async updateGroupPicture() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async updateGroupSubject() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async updateGroupDescription() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async findGroup() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async fetchAllGroups() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async inviteCode() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async inviteInfo() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async sendInvite() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async acceptInviteCode() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async revokeInviteCode() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async findParticipants() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async updateGParticipant() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async updateGSetting() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async toggleEphemeral() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async leaveGroup() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async fetchLabels() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async handleLabel() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async receiveMobileCode() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n  public async fakeCall() {\n    throw new BadRequestException('Method not available on WhatsApp Business API');\n  }\n}\n","import {\n  proto,\n  WAPresence,\n  WAPrivacyGroupAddValue,\n  WAPrivacyOnlineValue,\n  WAPrivacyValue,\n  WAReadReceiptsValue,\n} from 'baileys';\n\nexport class OnWhatsAppDto {\n  constructor(\n    public readonly jid: string,\n    public readonly exists: boolean,\n    public readonly number: string,\n    public readonly name?: string,\n  ) {}\n}\n\nexport class getBase64FromMediaMessageDto {\n  message: proto.WebMessageInfo;\n  convertToMp4?: boolean;\n}\n\nexport class WhatsAppNumberDto {\n  numbers: string[];\n}\n\nexport class NumberDto {\n  number: string;\n}\n\nexport class NumberBusiness {\n  wid?: string;\n  jid?: string;\n  exists?: boolean;\n  isBusiness: boolean;\n  name?: string;\n  message?: string;\n  description?: string;\n  email?: string;\n  websites?: string[];\n  website?: string[];\n  address?: string;\n  about?: string;\n  vertical?: string;\n  profilehandle?: string;\n}\n\nexport class ProfileNameDto {\n  name: string;\n}\n\nexport class ProfileStatusDto {\n  status: string;\n}\n\nexport class ProfilePictureDto {\n  number?: string;\n  // url or base64\n  picture?: string;\n}\n\nclass Key {\n  id: string;\n  fromMe: boolean;\n  remoteJid: string;\n}\nexport class ReadMessageDto {\n  readMessages: Key[];\n}\n\nexport class LastMessage {\n  key: Key;\n  messageTimestamp?: number;\n}\n\nexport class ArchiveChatDto {\n  lastMessage?: LastMessage;\n  chat?: string;\n  archive: boolean;\n}\n\nexport class MarkChatUnreadDto {\n  lastMessage?: LastMessage;\n  chat?: string;\n}\n\nexport class PrivacySettingDto {\n  readreceipts: WAReadReceiptsValue;\n  profile: WAPrivacyValue;\n  status: WAPrivacyValue;\n  online: WAPrivacyOnlineValue;\n  last: WAPrivacyValue;\n  groupadd: WAPrivacyGroupAddValue;\n}\n\nexport class DeleteMessage {\n  id: string;\n  fromMe: boolean;\n  remoteJid: string;\n  participant?: string;\n}\nexport class Options {\n  delay?: number;\n  presence?: WAPresence;\n}\nclass OptionsMessage {\n  options: Options;\n}\nexport class Metadata extends OptionsMessage {\n  number: string;\n}\n\nexport class SendPresenceDto extends Metadata {\n  presence: WAPresence;\n  delay: number;\n}\n\nexport class UpdateMessageDto extends Metadata {\n  number: string;\n  key: proto.IMessageKey;\n  text: string;\n}\n\nexport class BlockUserDto {\n  number: string;\n  status: 'block' | 'unblock';\n}\n","import { ICache } from '@api/abstract/abstract.cache';\nimport { Logger } from '@config/logger.config';\nimport { BufferJSON } from 'baileys';\n\nexport class CacheService {\n  private readonly logger = new Logger('CacheService');\n\n  constructor(private readonly cache: ICache) {\n    if (cache) {\n      this.logger.verbose(`cacheservice created using cache engine: ${cache.constructor?.name}`);\n    } else {\n      this.logger.verbose(`cacheservice disabled`);\n    }\n  }\n\n  async get(key: string): Promise<any> {\n    if (!this.cache) {\n      return;\n    }\n    return this.cache.get(key);\n  }\n\n  public async hGet(key: string, field: string) {\n    if (!this.cache) {\n      return null;\n    }\n    try {\n      const data = await this.cache.hGet(key, field);\n\n      if (data) {\n        return JSON.parse(data, BufferJSON.reviver);\n      }\n\n      return null;\n    } catch (error) {\n      this.logger.error(error);\n      return null;\n    }\n  }\n\n  async set(key: string, value: any, ttl?: number) {\n    if (!this.cache) {\n      return;\n    }\n    this.cache.set(key, value, ttl);\n  }\n\n  public async hSet(key: string, field: string, value: any) {\n    if (!this.cache) {\n      return;\n    }\n    try {\n      const json = JSON.stringify(value, BufferJSON.replacer);\n\n      await this.cache.hSet(key, field, json);\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  async has(key: string) {\n    if (!this.cache) {\n      return;\n    }\n    return this.cache.has(key);\n  }\n\n  async delete(key: string) {\n    if (!this.cache) {\n      return;\n    }\n    return this.cache.delete(key);\n  }\n\n  async hDelete(key: string, field: string) {\n    if (!this.cache) {\n      return false;\n    }\n    try {\n      await this.cache.hDelete(key, field);\n      return true;\n    } catch (error) {\n      this.logger.error(error);\n      return false;\n    }\n  }\n\n  async deleteAll(appendCriteria?: string) {\n    if (!this.cache) {\n      return;\n    }\n    return this.cache.deleteAll(appendCriteria);\n  }\n\n  async keys(appendCriteria?: string) {\n    if (!this.cache) {\n      return;\n    }\n    return this.cache.keys(appendCriteria);\n  }\n}\n","import { OfferCallDto } from '@api/dto/call.dto';\nimport {\n  ArchiveChatDto,\n  BlockUserDto,\n  DeleteMessage,\n  getBase64FromMediaMessageDto,\n  LastMessage,\n  MarkChatUnreadDto,\n  NumberBusiness,\n  OnWhatsAppDto,\n  PrivacySettingDto,\n  ReadMessageDto,\n  SendPresenceDto,\n  UpdateMessageDto,\n  WhatsAppNumberDto,\n} from '@api/dto/chat.dto';\nimport {\n  AcceptGroupInvite,\n  CreateGroupDto,\n  GetParticipant,\n  GroupDescriptionDto,\n  GroupInvite,\n  GroupJid,\n  GroupPictureDto,\n  GroupSendInvite,\n  GroupSubjectDto,\n  GroupToggleEphemeralDto,\n  GroupUpdateParticipantDto,\n  GroupUpdateSettingDto,\n} from '@api/dto/group.dto';\nimport { InstanceDto, SetPresenceDto } from '@api/dto/instance.dto';\nimport { HandleLabelDto, LabelDto } from '@api/dto/label.dto';\nimport {\n  Button,\n  ContactMessage,\n  KeyType,\n  MediaMessage,\n  Options,\n  SendAudioDto,\n  SendButtonsDto,\n  SendContactDto,\n  SendListDto,\n  SendLocationDto,\n  SendMediaDto,\n  SendPollDto,\n  SendPtvDto,\n  SendReactionDto,\n  SendStatusDto,\n  SendStickerDto,\n  SendTextDto,\n  StatusMessage,\n  TypeButton,\n} from '@api/dto/sendMessage.dto';\nimport { chatwootImport } from '@api/integrations/chatbot/chatwoot/utils/chatwoot-import-helper';\nimport * as s3Service from '@api/integrations/storage/s3/libs/minio.server';\nimport { ProviderFiles } from '@api/provider/sessions';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport { chatbotController, waMonitor } from '@api/server.module';\nimport { CacheService } from '@api/services/cache.service';\nimport { ChannelStartupService } from '@api/services/channel.service';\nimport { Events, MessageSubtype, TypeMediaMessage, wa } from '@api/types/wa.types';\nimport { CacheEngine } from '@cache/cacheengine';\nimport {\n  CacheConf,\n  Chatwoot,\n  ConfigService,\n  configService,\n  ConfigSessionPhone,\n  Database,\n  Log,\n  Openai,\n  ProviderSession,\n  QrCode,\n  S3,\n} from '@config/env.config';\nimport { BadRequestException, InternalServerErrorException, NotFoundException } from '@exceptions';\nimport ffmpegPath from '@ffmpeg-installer/ffmpeg';\nimport { Boom } from '@hapi/boom';\nimport { createId as cuid } from '@paralleldrive/cuid2';\nimport { Instance } from '@prisma/client';\nimport { createJid } from '@utils/createJid';\nimport { makeProxyAgent } from '@utils/makeProxyAgent';\nimport { getOnWhatsappCache, saveOnWhatsappCache } from '@utils/onWhatsappCache';\nimport { status } from '@utils/renderStatus';\nimport useMultiFileAuthStatePrisma from '@utils/use-multi-file-auth-state-prisma';\nimport { AuthStateProvider } from '@utils/use-multi-file-auth-state-provider-files';\nimport { useMultiFileAuthStateRedisDb } from '@utils/use-multi-file-auth-state-redis-db';\nimport axios from 'axios';\nimport makeWASocket, {\n  AnyMessageContent,\n  BufferedEventData,\n  BufferJSON,\n  CacheStore,\n  Chat,\n  ConnectionState,\n  Contact,\n  delay,\n  DisconnectReason,\n  downloadMediaMessage,\n  fetchLatestBaileysVersion,\n  generateWAMessageFromContent,\n  getAggregateVotesInPollMessage,\n  getContentType,\n  getDevice,\n  GroupMetadata,\n  isJidBroadcast,\n  isJidGroup,\n  isJidNewsletter,\n  isJidUser,\n  makeCacheableSignalKeyStore,\n  MessageUpsertType,\n  MessageUserReceiptUpdate,\n  MiscMessageGenerationOptions,\n  ParticipantAction,\n  prepareWAMessageMedia,\n  proto,\n  UserFacingSocketConfig,\n  WABrowserDescription,\n  WAMediaUpload,\n  WAMessage,\n  WAMessageUpdate,\n  WAPresence,\n  WASocket,\n} from 'baileys';\nimport { Label } from 'baileys/lib/Types/Label';\nimport { LabelAssociation } from 'baileys/lib/Types/LabelAssociation';\nimport { spawn } from 'child_process';\nimport { isArray, isBase64, isURL } from 'class-validator';\nimport { randomBytes } from 'crypto';\nimport EventEmitter2 from 'eventemitter2';\nimport ffmpeg from 'fluent-ffmpeg';\nimport FormData from 'form-data';\nimport { readFileSync } from 'fs';\nimport Long from 'long';\nimport mimeTypes from 'mime-types';\nimport NodeCache from 'node-cache';\nimport cron from 'node-cron';\nimport { release } from 'os';\nimport { join } from 'path';\nimport P from 'pino';\nimport qrcode, { QRCodeToDataURLOptions } from 'qrcode';\nimport qrcodeTerminal from 'qrcode-terminal';\nimport sharp from 'sharp';\nimport { PassThrough, Readable } from 'stream';\nimport { v4 } from 'uuid';\n\nimport { useVoiceCallsBaileys } from './voiceCalls/useVoiceCallsBaileys';\n\nconst groupMetadataCache = new CacheService(new CacheEngine(configService, 'groups').getEngine());\n\n// Adicione a função getVideoDuration no início do arquivo\nasync function getVideoDuration(input: Buffer | string | Readable): Promise<number> {\n  const MediaInfoFactory = (await import('mediainfo.js')).default;\n  const mediainfo = await MediaInfoFactory({ format: 'JSON' });\n\n  let fileSize: number;\n  let readChunk: (size: number, offset: number) => Promise<Buffer>;\n\n  if (Buffer.isBuffer(input)) {\n    fileSize = input.length;\n    readChunk = async (size: number, offset: number): Promise<Buffer> => {\n      return input.slice(offset, offset + size);\n    };\n  } else if (typeof input === 'string') {\n    const fs = await import('fs');\n    const stat = await fs.promises.stat(input);\n    fileSize = stat.size;\n    const fd = await fs.promises.open(input, 'r');\n\n    readChunk = async (size: number, offset: number): Promise<Buffer> => {\n      const buffer = Buffer.alloc(size);\n      await fd.read(buffer, 0, size, offset);\n      return buffer;\n    };\n\n    try {\n      const result = await mediainfo.analyzeData(() => fileSize, readChunk);\n      const jsonResult = JSON.parse(result);\n\n      const generalTrack = jsonResult.media.track.find((t: any) => t['@type'] === 'General');\n      const duration = generalTrack.Duration;\n\n      return Math.round(parseFloat(duration));\n    } finally {\n      await fd.close();\n    }\n  } else if (input instanceof Readable) {\n    const chunks: Buffer[] = [];\n    for await (const chunk of input) {\n      chunks.push(chunk);\n    }\n    const data = Buffer.concat(chunks);\n    fileSize = data.length;\n\n    readChunk = async (size: number, offset: number): Promise<Buffer> => {\n      return data.slice(offset, offset + size);\n    };\n  } else {\n    throw new Error('Tipo de entrada não suportado');\n  }\n\n  const result = await mediainfo.analyzeData(() => fileSize, readChunk);\n  const jsonResult = JSON.parse(result);\n\n  const generalTrack = jsonResult.media.track.find((t: any) => t['@type'] === 'General');\n  const duration = generalTrack.Duration;\n\n  return Math.round(parseFloat(duration));\n}\n\nexport class BaileysStartupService extends ChannelStartupService {\n  constructor(\n    public readonly configService: ConfigService,\n    public readonly eventEmitter: EventEmitter2,\n    public readonly prismaRepository: PrismaRepository,\n    public readonly cache: CacheService,\n    public readonly chatwootCache: CacheService,\n    public readonly baileysCache: CacheService,\n    private readonly providerFiles: ProviderFiles,\n  ) {\n    super(configService, eventEmitter, prismaRepository, chatwootCache);\n    this.instance.qrcode = { count: 0 };\n\n    this.authStateProvider = new AuthStateProvider(this.providerFiles);\n  }\n\n  private authStateProvider: AuthStateProvider;\n  private readonly msgRetryCounterCache: CacheStore = new NodeCache();\n  private readonly userDevicesCache: CacheStore = new NodeCache();\n  private endSession = false;\n  private logBaileys = this.configService.get<Log>('LOG').BAILEYS;\n\n  public stateConnection: wa.StateConnection = { state: 'close' };\n\n  public phoneNumber: string;\n\n  public get connectionStatus() {\n    return this.stateConnection;\n  }\n\n  public async logoutInstance() {\n    await this.client?.logout('Log out instance: ' + this.instanceName);\n\n    this.client?.ws?.close();\n\n    const sessionExists = await this.prismaRepository.session.findFirst({\n      where: { sessionId: this.instanceId },\n    });\n    if (sessionExists) {\n      await this.prismaRepository.session.delete({\n        where: {\n          sessionId: this.instanceId,\n        },\n      });\n    }\n  }\n\n  public async getProfileName() {\n    let profileName = this.client.user?.name ?? this.client.user?.verifiedName;\n    if (!profileName) {\n      const data = await this.prismaRepository.session.findUnique({\n        where: { sessionId: this.instanceId },\n      });\n\n      if (data) {\n        const creds = JSON.parse(JSON.stringify(data.creds), BufferJSON.reviver);\n        profileName = creds.me?.name || creds.me?.verifiedName;\n      }\n    }\n\n    return profileName;\n  }\n\n  public async getProfileStatus() {\n    const status = await this.client.fetchStatus(this.instance.wuid);\n\n    return status[0]?.status;\n  }\n\n  public get profilePictureUrl() {\n    return this.instance.profilePictureUrl;\n  }\n\n  public get qrCode(): wa.QrCode {\n    return {\n      pairingCode: this.instance.qrcode?.pairingCode,\n      code: this.instance.qrcode?.code,\n      base64: this.instance.qrcode?.base64,\n      count: this.instance.qrcode?.count,\n    };\n  }\n\n  private async connectionUpdate({ qr, connection, lastDisconnect }: Partial<ConnectionState>) {\n    if (qr) {\n      if (this.instance.qrcode.count === this.configService.get<QrCode>('QRCODE').LIMIT) {\n        this.sendDataWebhook(Events.QRCODE_UPDATED, {\n          message: 'QR code limit reached, please login again',\n          statusCode: DisconnectReason.badSession,\n        });\n\n        if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED && this.localChatwoot?.enabled) {\n          this.chatwootService.eventWhatsapp(\n            Events.QRCODE_UPDATED,\n            { instanceName: this.instance.name, instanceId: this.instanceId },\n            {\n              message: 'QR code limit reached, please login again',\n              statusCode: DisconnectReason.badSession,\n            },\n          );\n        }\n\n        this.sendDataWebhook(Events.CONNECTION_UPDATE, {\n          instance: this.instance.name,\n          state: 'refused',\n          statusReason: DisconnectReason.connectionClosed,\n          wuid: this.instance.wuid,\n          profileName: await this.getProfileName(),\n          profilePictureUrl: this.instance.profilePictureUrl,\n        });\n\n        this.endSession = true;\n\n        return this.eventEmitter.emit('no.connection', this.instance.name);\n      }\n\n      this.instance.qrcode.count++;\n\n      const color = this.configService.get<QrCode>('QRCODE').COLOR;\n\n      const optsQrcode: QRCodeToDataURLOptions = {\n        margin: 3,\n        scale: 4,\n        errorCorrectionLevel: 'H',\n        color: { light: '#ffffff', dark: color },\n      };\n\n      if (this.phoneNumber) {\n        await delay(1000);\n        this.instance.qrcode.pairingCode = await this.client.requestPairingCode(this.phoneNumber);\n      } else {\n        this.instance.qrcode.pairingCode = null;\n      }\n\n      qrcode.toDataURL(qr, optsQrcode, (error, base64) => {\n        if (error) {\n          this.logger.error('Qrcode generate failed:' + error.toString());\n          return;\n        }\n\n        this.instance.qrcode.base64 = base64;\n        this.instance.qrcode.code = qr;\n\n        this.sendDataWebhook(Events.QRCODE_UPDATED, {\n          qrcode: {\n            instance: this.instance.name,\n            pairingCode: this.instance.qrcode.pairingCode,\n            code: qr,\n            base64,\n          },\n        });\n\n        if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED && this.localChatwoot?.enabled) {\n          this.chatwootService.eventWhatsapp(\n            Events.QRCODE_UPDATED,\n            { instanceName: this.instance.name, instanceId: this.instanceId },\n            {\n              qrcode: {\n                instance: this.instance.name,\n                pairingCode: this.instance.qrcode.pairingCode,\n                code: qr,\n                base64,\n              },\n            },\n          );\n        }\n      });\n\n      qrcodeTerminal.generate(qr, { small: true }, (qrcode) =>\n        this.logger.log(\n          `\\n{ instance: ${this.instance.name} pairingCode: ${this.instance.qrcode.pairingCode}, qrcodeCount: ${this.instance.qrcode.count} }\\n` +\n            qrcode,\n        ),\n      );\n\n      await this.prismaRepository.instance.update({\n        where: { id: this.instanceId },\n        data: {\n          connectionStatus: 'connecting',\n        },\n      });\n    }\n\n    if (connection) {\n      this.stateConnection = {\n        state: connection,\n        statusReason: (lastDisconnect?.error as Boom)?.output?.statusCode ?? 200,\n      };\n    }\n\n    if (connection === 'close') {\n      const statusCode = (lastDisconnect?.error as Boom)?.output?.statusCode;\n      const codesToNotReconnect = [DisconnectReason.loggedOut, DisconnectReason.forbidden, 402, 406];\n      const shouldReconnect = !codesToNotReconnect.includes(statusCode);\n      if (shouldReconnect) {\n        await this.connectToWhatsapp(this.phoneNumber);\n      } else {\n        this.sendDataWebhook(Events.STATUS_INSTANCE, {\n          instance: this.instance.name,\n          status: 'closed',\n          disconnectionAt: new Date(),\n          disconnectionReasonCode: statusCode,\n          disconnectionObject: JSON.stringify(lastDisconnect),\n        });\n\n        await this.prismaRepository.instance.update({\n          where: { id: this.instanceId },\n          data: {\n            connectionStatus: 'close',\n            disconnectionAt: new Date(),\n            disconnectionReasonCode: statusCode,\n            disconnectionObject: JSON.stringify(lastDisconnect),\n          },\n        });\n\n        if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED && this.localChatwoot?.enabled) {\n          this.chatwootService.eventWhatsapp(\n            Events.STATUS_INSTANCE,\n            { instanceName: this.instance.name, instanceId: this.instanceId },\n            {\n              instance: this.instance.name,\n              status: 'closed',\n            },\n          );\n        }\n\n        this.eventEmitter.emit('logout.instance', this.instance.name, 'inner');\n        this.client?.ws?.close();\n        this.client.end(new Error('Close connection'));\n\n        this.sendDataWebhook(Events.CONNECTION_UPDATE, {\n          instance: this.instance.name,\n          ...this.stateConnection,\n        });\n      }\n    }\n\n    if (connection === 'open') {\n      this.instance.wuid = this.client.user.id.replace(/:\\d+/, '');\n      try {\n        const profilePic = await this.profilePicture(this.instance.wuid);\n        this.instance.profilePictureUrl = profilePic.profilePictureUrl;\n      } catch (error) {\n        this.instance.profilePictureUrl = null;\n      }\n      const formattedWuid = this.instance.wuid.split('@')[0].padEnd(30, ' ');\n      const formattedName = this.instance.name;\n      this.logger.info(\n        `\n        ┌──────────────────────────────┐\n        │    CONNECTED TO WHATSAPP     │\n        └──────────────────────────────┘`.replace(/^ +/gm, '  '),\n      );\n      this.logger.info(\n        `\n        wuid: ${formattedWuid}\n        name: ${formattedName}\n      `,\n      );\n\n      await this.prismaRepository.instance.update({\n        where: { id: this.instanceId },\n        data: {\n          ownerJid: this.instance.wuid,\n          profileName: (await this.getProfileName()) as string,\n          profilePicUrl: this.instance.profilePictureUrl,\n          connectionStatus: 'open',\n        },\n      });\n\n      if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED && this.localChatwoot?.enabled) {\n        this.chatwootService.eventWhatsapp(\n          Events.CONNECTION_UPDATE,\n          { instanceName: this.instance.name, instanceId: this.instanceId },\n          {\n            instance: this.instance.name,\n            status: 'open',\n          },\n        );\n        this.syncChatwootLostMessages();\n      }\n\n      this.sendDataWebhook(Events.CONNECTION_UPDATE, {\n        instance: this.instance.name,\n        wuid: this.instance.wuid,\n        profileName: await this.getProfileName(),\n        profilePictureUrl: this.instance.profilePictureUrl,\n        ...this.stateConnection,\n      });\n    }\n\n    if (connection === 'connecting') {\n      this.sendDataWebhook(Events.CONNECTION_UPDATE, {\n        instance: this.instance.name,\n        ...this.stateConnection,\n      });\n    }\n  }\n\n  private async getMessage(key: proto.IMessageKey, full = false) {\n    try {\n      const webMessageInfo = (await this.prismaRepository.message.findMany({\n        where: {\n          instanceId: this.instanceId,\n          key: {\n            path: ['id'],\n            equals: key.id,\n          },\n        },\n      })) as unknown as proto.IWebMessageInfo[];\n      if (full) {\n        return webMessageInfo[0];\n      }\n      if (webMessageInfo[0].message?.pollCreationMessage) {\n        const messageSecretBase64 = webMessageInfo[0].message?.messageContextInfo?.messageSecret;\n\n        if (typeof messageSecretBase64 === 'string') {\n          const messageSecret = Buffer.from(messageSecretBase64, 'base64');\n\n          const msg = {\n            messageContextInfo: {\n              messageSecret,\n            },\n            pollCreationMessage: webMessageInfo[0].message?.pollCreationMessage,\n          };\n\n          return msg;\n        }\n      }\n\n      return webMessageInfo[0].message;\n    } catch (error) {\n      return { conversation: '' };\n    }\n  }\n\n  private async defineAuthState() {\n    const db = this.configService.get<Database>('DATABASE');\n    const cache = this.configService.get<CacheConf>('CACHE');\n\n    const provider = this.configService.get<ProviderSession>('PROVIDER');\n\n    if (provider?.ENABLED) {\n      return await this.authStateProvider.authStateProvider(this.instance.id);\n    }\n\n    if (cache?.REDIS.ENABLED && cache?.REDIS.SAVE_INSTANCES) {\n      this.logger.info('Redis enabled');\n      return await useMultiFileAuthStateRedisDb(this.instance.id, this.cache);\n    }\n\n    if (db.SAVE_DATA.INSTANCE) {\n      return await useMultiFileAuthStatePrisma(this.instance.id, this.cache);\n    }\n  }\n\n  private async createClient(number?: string): Promise<WASocket> {\n    this.instance.authState = await this.defineAuthState();\n\n    const session = this.configService.get<ConfigSessionPhone>('CONFIG_SESSION_PHONE');\n\n    let browserOptions = {};\n\n    if (number || this.phoneNumber) {\n      this.phoneNumber = number;\n\n      this.logger.info(`Phone number: ${number}`);\n    } else {\n      const browser: WABrowserDescription = [session.CLIENT, session.NAME, release()];\n      browserOptions = { browser };\n\n      this.logger.info(`Browser: ${browser}`);\n    }\n\n    let version;\n    let log;\n\n    if (session.VERSION) {\n      version = session.VERSION.split('.');\n      log = `Baileys version env: ${version}`;\n    } else {\n      const baileysVersion = await fetchLatestBaileysVersion();\n      version = baileysVersion.version;\n      log = `Baileys version: ${version}`;\n    }\n\n    this.logger.info(log);\n\n    this.logger.info(`Group Ignore: ${this.localSettings.groupsIgnore}`);\n\n    let options;\n\n    if (this.localProxy?.enabled) {\n      this.logger.info('Proxy enabled: ' + this.localProxy?.host);\n\n      if (this.localProxy?.host?.includes('proxyscrape')) {\n        try {\n          const response = await axios.get(this.localProxy?.host);\n          const text = response.data;\n          const proxyUrls = text.split('\\r\\n');\n          const rand = Math.floor(Math.random() * Math.floor(proxyUrls.length));\n          const proxyUrl = 'http://' + proxyUrls[rand];\n          options = {\n            agent: makeProxyAgent(proxyUrl),\n            fetchAgent: makeProxyAgent(proxyUrl),\n          };\n        } catch (error) {\n          this.localProxy.enabled = false;\n        }\n      } else {\n        options = {\n          agent: makeProxyAgent({\n            host: this.localProxy.host,\n            port: this.localProxy.port,\n            protocol: this.localProxy.protocol,\n            username: this.localProxy.username,\n            password: this.localProxy.password,\n          }),\n          fetchAgent: makeProxyAgent({\n            host: this.localProxy.host,\n            port: this.localProxy.port,\n            protocol: this.localProxy.protocol,\n            username: this.localProxy.username,\n            password: this.localProxy.password,\n          }),\n        };\n      }\n    }\n\n    const socketConfig: UserFacingSocketConfig = {\n      ...options,\n      version,\n      logger: P({ level: this.logBaileys }),\n      printQRInTerminal: false,\n      auth: {\n        creds: this.instance.authState.state.creds,\n        keys: makeCacheableSignalKeyStore(this.instance.authState.state.keys, P({ level: 'error' }) as any),\n      },\n      msgRetryCounterCache: this.msgRetryCounterCache,\n      generateHighQualityLinkPreview: true,\n      getMessage: async (key) => (await this.getMessage(key)) as Promise<proto.IMessage>,\n      ...browserOptions,\n      markOnlineOnConnect: this.localSettings.alwaysOnline,\n      retryRequestDelayMs: 350,\n      maxMsgRetryCount: 4,\n      fireInitQueries: true,\n      connectTimeoutMs: 30_000,\n      keepAliveIntervalMs: 30_000,\n      qrTimeout: 45_000,\n      emitOwnEvents: false,\n      shouldIgnoreJid: (jid) => {\n        const isGroupJid = this.localSettings.groupsIgnore && isJidGroup(jid);\n        const isBroadcast = !this.localSettings.readStatus && isJidBroadcast(jid);\n        const isNewsletter = isJidNewsletter(jid);\n\n        return isGroupJid || isBroadcast || isNewsletter;\n      },\n      syncFullHistory: this.localSettings.syncFullHistory,\n      shouldSyncHistoryMessage: (msg: proto.Message.IHistorySyncNotification) => {\n        return this.historySyncNotification(msg);\n      },\n      cachedGroupMetadata: this.getGroupMetadataCache,\n      userDevicesCache: this.userDevicesCache,\n      transactionOpts: { maxCommitRetries: 10, delayBetweenTriesMs: 3000 },\n      patchMessageBeforeSending(message) {\n        if (\n          message.deviceSentMessage?.message?.listMessage?.listType === proto.Message.ListMessage.ListType.PRODUCT_LIST\n        ) {\n          message = JSON.parse(JSON.stringify(message));\n\n          message.deviceSentMessage.message.listMessage.listType = proto.Message.ListMessage.ListType.SINGLE_SELECT;\n        }\n\n        if (message.listMessage?.listType == proto.Message.ListMessage.ListType.PRODUCT_LIST) {\n          message = JSON.parse(JSON.stringify(message));\n\n          message.listMessage.listType = proto.Message.ListMessage.ListType.SINGLE_SELECT;\n        }\n\n        return message;\n      },\n    };\n\n    this.endSession = false;\n\n    this.client = makeWASocket(socketConfig);\n\n    if (this.localSettings.wavoipToken && this.localSettings.wavoipToken.length > 0) {\n      useVoiceCallsBaileys(this.localSettings.wavoipToken, this.client, this.connectionStatus.state as any, true);\n    }\n\n    this.eventHandler();\n\n    this.client.ws.on('CB:call', (packet) => {\n      console.log('CB:call', packet);\n      const payload = {\n        event: 'CB:call',\n        packet: packet,\n      };\n      this.sendDataWebhook(Events.CALL, payload, true, ['websocket']);\n    });\n\n    this.client.ws.on('CB:ack,class:call', (packet) => {\n      console.log('CB:ack,class:call', packet);\n      const payload = {\n        event: 'CB:ack,class:call',\n        packet: packet,\n      };\n      this.sendDataWebhook(Events.CALL, payload, true, ['websocket']);\n    });\n\n    this.phoneNumber = number;\n\n    return this.client;\n  }\n\n  public async connectToWhatsapp(number?: string): Promise<WASocket> {\n    try {\n      this.loadChatwoot();\n      this.loadSettings();\n      this.loadWebhook();\n      this.loadProxy();\n\n      return await this.createClient(number);\n    } catch (error) {\n      this.logger.error(error);\n      throw new InternalServerErrorException(error?.toString());\n    }\n  }\n\n  public async reloadConnection(): Promise<WASocket> {\n    try {\n      return await this.createClient(this.phoneNumber);\n    } catch (error) {\n      this.logger.error(error);\n      throw new InternalServerErrorException(error?.toString());\n    }\n  }\n\n  private readonly chatHandle = {\n    'chats.upsert': async (chats: Chat[]) => {\n      const existingChatIds = await this.prismaRepository.chat.findMany({\n        where: { instanceId: this.instanceId },\n        select: { remoteJid: true },\n      });\n\n      const existingChatIdSet = new Set(existingChatIds.map((chat) => chat.remoteJid));\n\n      const chatsToInsert = chats\n        .filter((chat) => !existingChatIdSet?.has(chat.id))\n        .map((chat) => ({\n          remoteJid: chat.id,\n          instanceId: this.instanceId,\n          name: chat.name,\n          unreadMessages: chat.unreadCount !== undefined ? chat.unreadCount : 0,\n        }));\n\n      this.sendDataWebhook(Events.CHATS_UPSERT, chatsToInsert);\n\n      if (chatsToInsert.length > 0) {\n        if (this.configService.get<Database>('DATABASE').SAVE_DATA.CHATS)\n          await this.prismaRepository.chat.createMany({\n            data: chatsToInsert,\n            skipDuplicates: true,\n          });\n      }\n    },\n\n    'chats.update': async (\n      chats: Partial<\n        proto.IConversation & {\n          lastMessageRecvTimestamp?: number;\n        } & {\n          conditional: (bufferedData: BufferedEventData) => boolean;\n        }\n      >[],\n    ) => {\n      const chatsRaw = chats.map((chat) => {\n        return { remoteJid: chat.id, instanceId: this.instanceId };\n      });\n\n      this.sendDataWebhook(Events.CHATS_UPDATE, chatsRaw);\n\n      for (const chat of chats) {\n        await this.prismaRepository.chat.updateMany({\n          where: {\n            instanceId: this.instanceId,\n            remoteJid: chat.id,\n            name: chat.name,\n          },\n          data: { remoteJid: chat.id },\n        });\n      }\n    },\n\n    'chats.delete': async (chats: string[]) => {\n      chats.forEach(\n        async (chat) =>\n          await this.prismaRepository.chat.deleteMany({\n            where: { instanceId: this.instanceId, remoteJid: chat },\n          }),\n      );\n\n      this.sendDataWebhook(Events.CHATS_DELETE, [...chats]);\n    },\n  };\n\n  private readonly contactHandle = {\n    'contacts.upsert': async (contacts: Contact[]) => {\n      try {\n        const contactsRaw: any = contacts.map((contact) => ({\n          remoteJid: contact.id,\n          pushName: contact?.name || contact?.verifiedName || contact.id.split('@')[0],\n          profilePicUrl: null,\n          instanceId: this.instanceId,\n        }));\n\n        if (contactsRaw.length > 0) {\n          this.sendDataWebhook(Events.CONTACTS_UPSERT, contactsRaw);\n\n          if (this.configService.get<Database>('DATABASE').SAVE_DATA.CONTACTS)\n            await this.prismaRepository.contact.createMany({\n              data: contactsRaw,\n              skipDuplicates: true,\n            });\n\n          const usersContacts = contactsRaw.filter((c) => c.remoteJid.includes('@s.whatsapp'));\n          if (usersContacts) {\n            await saveOnWhatsappCache(usersContacts.map((c) => ({ remoteJid: c.remoteJid })));\n          }\n        }\n\n        if (\n          this.configService.get<Chatwoot>('CHATWOOT').ENABLED &&\n          this.localChatwoot?.enabled &&\n          this.localChatwoot.importContacts &&\n          contactsRaw.length\n        ) {\n          this.chatwootService.addHistoryContacts(\n            { instanceName: this.instance.name, instanceId: this.instance.id },\n            contactsRaw,\n          );\n          chatwootImport.importHistoryContacts(\n            { instanceName: this.instance.name, instanceId: this.instance.id },\n            this.localChatwoot,\n          );\n        }\n\n        const updatedContacts = await Promise.all(\n          contacts.map(async (contact) => ({\n            remoteJid: contact.id,\n            pushName: contact?.name || contact?.verifiedName || contact.id.split('@')[0],\n            profilePicUrl: (await this.profilePicture(contact.id)).profilePictureUrl,\n            instanceId: this.instanceId,\n          })),\n        );\n\n        if (updatedContacts.length > 0) {\n          const usersContacts = updatedContacts.filter((c) => c.remoteJid.includes('@s.whatsapp'));\n          if (usersContacts) {\n            await saveOnWhatsappCache(usersContacts.map((c) => ({ remoteJid: c.remoteJid })));\n          }\n\n          this.sendDataWebhook(Events.CONTACTS_UPDATE, updatedContacts);\n          await Promise.all(\n            updatedContacts.map(async (contact) => {\n              const update = this.prismaRepository.contact.updateMany({\n                where: { remoteJid: contact.remoteJid, instanceId: this.instanceId },\n                data: {\n                  profilePicUrl: contact.profilePicUrl,\n                },\n              });\n\n              if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED && this.localChatwoot?.enabled) {\n                const instance = { instanceName: this.instance.name, instanceId: this.instance.id };\n\n                const findParticipant = await this.chatwootService.findContact(\n                  instance,\n                  contact.remoteJid.split('@')[0],\n                );\n\n                if (!findParticipant) {\n                  return;\n                }\n\n                this.chatwootService.updateContact(instance, findParticipant.id, {\n                  name: contact.pushName,\n                  avatar_url: contact.profilePicUrl,\n                });\n              }\n\n              return update;\n            }),\n          );\n        }\n      } catch (error) {\n        console.error(error);\n        this.logger.error(`Error: ${error.message}`);\n      }\n    },\n\n    'contacts.update': async (contacts: Partial<Contact>[]) => {\n      const contactsRaw: {\n        remoteJid: string;\n        pushName?: string;\n        profilePicUrl?: string;\n        instanceId: string;\n      }[] = [];\n      for await (const contact of contacts) {\n        contactsRaw.push({\n          remoteJid: contact.id,\n          pushName: contact?.name ?? contact?.verifiedName,\n          profilePicUrl: (await this.profilePicture(contact.id)).profilePictureUrl,\n          instanceId: this.instanceId,\n        });\n      }\n\n      this.sendDataWebhook(Events.CONTACTS_UPDATE, contactsRaw);\n\n      const updateTransactions = contactsRaw.map((contact) =>\n        this.prismaRepository.contact.upsert({\n          where: { remoteJid_instanceId: { remoteJid: contact.remoteJid, instanceId: contact.instanceId } },\n          create: contact,\n          update: contact,\n        }),\n      );\n      await this.prismaRepository.$transaction(updateTransactions);\n\n      const usersContacts = contactsRaw.filter((c) => c.remoteJid.includes('@s.whatsapp'));\n      if (usersContacts) {\n        await saveOnWhatsappCache(usersContacts.map((c) => ({ remoteJid: c.remoteJid })));\n      }\n    },\n  };\n\n  private readonly messageHandle = {\n    'messaging-history.set': async ({\n      messages,\n      chats,\n      contacts,\n      isLatest,\n      progress,\n      syncType,\n    }: {\n      chats: Chat[];\n      contacts: Contact[];\n      messages: proto.IWebMessageInfo[];\n      isLatest?: boolean;\n      progress?: number;\n      syncType?: proto.HistorySync.HistorySyncType;\n    }) => {\n      try {\n        if (syncType === proto.HistorySync.HistorySyncType.ON_DEMAND) {\n          console.log('received on-demand history sync, messages=', messages);\n        }\n        console.log(\n          `recv ${chats.length} chats, ${contacts.length} contacts, ${messages.length} msgs (is latest: ${isLatest}, progress: ${progress}%), type: ${syncType}`,\n        );\n\n        const instance: InstanceDto = { instanceName: this.instance.name };\n\n        let timestampLimitToImport = null;\n\n        if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED) {\n          const daysLimitToImport = this.localChatwoot?.enabled ? this.localChatwoot.daysLimitImportMessages : 1000;\n\n          const date = new Date();\n          timestampLimitToImport = new Date(date.setDate(date.getDate() - daysLimitToImport)).getTime() / 1000;\n\n          const maxBatchTimestamp = Math.max(...messages.map((message) => message.messageTimestamp as number));\n\n          const processBatch = maxBatchTimestamp >= timestampLimitToImport;\n\n          if (!processBatch) {\n            return;\n          }\n        }\n\n        const chatsRaw: { remoteJid: string; instanceId: string; name?: string }[] = [];\n        const chatsRepository = new Set(\n          (\n            await this.prismaRepository.chat.findMany({\n              where: { instanceId: this.instanceId },\n            })\n          ).map((chat) => chat.remoteJid),\n        );\n\n        for (const chat of chats) {\n          if (chatsRepository?.has(chat.id)) {\n            continue;\n          }\n\n          chatsRaw.push({\n            remoteJid: chat.id,\n            instanceId: this.instanceId,\n            name: chat.name,\n          });\n        }\n\n        this.sendDataWebhook(Events.CHATS_SET, chatsRaw);\n\n        if (this.configService.get<Database>('DATABASE').SAVE_DATA.HISTORIC) {\n          await this.prismaRepository.chat.createMany({\n            data: chatsRaw,\n            skipDuplicates: true,\n          });\n        }\n\n        const messagesRaw: any[] = [];\n\n        const messagesRepository: Set<string> = new Set(\n          chatwootImport.getRepositoryMessagesCache(instance) ??\n            (\n              await this.prismaRepository.message.findMany({\n                select: { key: true },\n                where: { instanceId: this.instanceId },\n              })\n            ).map((message) => {\n              const key = message.key as {\n                id: string;\n              };\n\n              return key.id;\n            }),\n        );\n\n        if (chatwootImport.getRepositoryMessagesCache(instance) === null) {\n          chatwootImport.setRepositoryMessagesCache(instance, messagesRepository);\n        }\n\n        for (const m of messages) {\n          if (!m.message || !m.key || !m.messageTimestamp) {\n            continue;\n          }\n\n          if (Long.isLong(m?.messageTimestamp)) {\n            m.messageTimestamp = m.messageTimestamp?.toNumber();\n          }\n\n          if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED) {\n            if (m.messageTimestamp <= timestampLimitToImport) {\n              continue;\n            }\n          }\n\n          if (messagesRepository?.has(m.key.id)) {\n            continue;\n          }\n\n          messagesRaw.push(this.prepareMessage(m));\n        }\n\n        this.sendDataWebhook(Events.MESSAGES_SET, [...messagesRaw]);\n\n        if (this.configService.get<Database>('DATABASE').SAVE_DATA.HISTORIC) {\n          await this.prismaRepository.message.createMany({\n            data: messagesRaw,\n            skipDuplicates: true,\n          });\n        }\n\n        if (\n          this.configService.get<Chatwoot>('CHATWOOT').ENABLED &&\n          this.localChatwoot?.enabled &&\n          this.localChatwoot.importMessages &&\n          messagesRaw.length > 0\n        ) {\n          this.chatwootService.addHistoryMessages(\n            instance,\n            messagesRaw.filter((msg) => !chatwootImport.isIgnorePhoneNumber(msg.key?.remoteJid)),\n          );\n        }\n\n        await this.contactHandle['contacts.upsert'](\n          contacts\n            .filter((c) => !!c.notify || !!c.name)\n            .map((c) => ({\n              id: c.id,\n              name: c.name ?? c.notify,\n            })),\n        );\n\n        contacts = undefined;\n        messages = undefined;\n        chats = undefined;\n      } catch (error) {\n        this.logger.error(error);\n      }\n    },\n\n    'messages.upsert': async (\n      {\n        messages,\n        type,\n        requestId,\n      }: {\n        messages: proto.IWebMessageInfo[];\n        type: MessageUpsertType;\n        requestId?: string;\n      },\n      settings: any,\n    ) => {\n      try {\n        for (const received of messages) {\n          if (received.message?.conversation || received.message?.extendedTextMessage?.text) {\n            const text = received.message?.conversation || received.message?.extendedTextMessage?.text;\n\n            if (text == 'requestPlaceholder' && !requestId) {\n              const messageId = await this.client.requestPlaceholderResend(received.key);\n\n              console.log('requested placeholder resync, id=', messageId);\n            } else if (requestId) {\n              console.log('Message received from phone, id=', requestId, received);\n            }\n\n            if (text == 'onDemandHistSync') {\n              const messageId = await this.client.fetchMessageHistory(50, received.key, received.messageTimestamp!);\n              console.log('requested on-demand sync, id=', messageId);\n            }\n          }\n\n          if (received.message?.protocolMessage?.editedMessage || received.message?.editedMessage?.message) {\n            const editedMessage =\n              received.message?.protocolMessage || received.message?.editedMessage?.message?.protocolMessage;\n            if (editedMessage) {\n              if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED && this.localChatwoot?.enabled)\n                this.chatwootService.eventWhatsapp(\n                  'messages.edit',\n                  { instanceName: this.instance.name, instanceId: this.instance.id },\n                  editedMessage,\n                );\n\n              await this.sendDataWebhook(Events.MESSAGES_EDITED, editedMessage);\n              const oldMessage = await this.getMessage(editedMessage.key, true);\n              if ((oldMessage as any)?.id) {\n                await this.prismaRepository.message.update({\n                  where: { id: (oldMessage as any).id },\n                  data: {\n                    message: editedMessage.editedMessage as any,\n                    messageTimestamp: (editedMessage.timestampMs as Long.Long).toNumber(),\n                    status: 'EDITED',\n                  },\n                });\n                await this.prismaRepository.messageUpdate.create({\n                  data: {\n                    fromMe: editedMessage.key.fromMe,\n                    keyId: editedMessage.key.id,\n                    remoteJid: editedMessage.key.remoteJid,\n                    status: 'EDITED',\n                    instanceId: this.instanceId,\n                    messageId: (oldMessage as any).id,\n                  },\n                });\n              }\n            }\n          }\n\n          if (received.messageStubParameters && received.messageStubParameters[0] === 'Message absent from node') {\n            this.logger.info(`Recovering message lost messageId: ${received.key.id}`);\n\n            await this.baileysCache.set(received.key.id, {\n              message: received,\n              retry: 0,\n            });\n\n            continue;\n          }\n\n          const retryCache = (await this.baileysCache.get(received.key.id)) || null;\n\n          if (retryCache) {\n            this.logger.info('Recovered message lost');\n            await this.baileysCache.delete(received.key.id);\n          }\n\n          if (\n            (type !== 'notify' && type !== 'append') ||\n            received.message?.protocolMessage ||\n            received.message?.pollUpdateMessage ||\n            !received?.message\n          ) {\n            continue;\n          }\n\n          if (Long.isLong(received.messageTimestamp)) {\n            received.messageTimestamp = received.messageTimestamp?.toNumber();\n          }\n\n          if (settings?.groupsIgnore && received.key.remoteJid.includes('@g.us')) {\n            continue;\n          }\n          const existingChat = await this.prismaRepository.chat.findFirst({\n            where: { instanceId: this.instanceId, remoteJid: received.key.remoteJid },\n            select: { id: true, name: true },\n          });\n\n          if (\n            existingChat &&\n            received.pushName &&\n            existingChat.name !== received.pushName &&\n            received.pushName.trim().length > 0\n          ) {\n            this.sendDataWebhook(Events.CHATS_UPSERT, [{ ...existingChat, name: received.pushName }]);\n            if (this.configService.get<Database>('DATABASE').SAVE_DATA.CHATS) {\n              try {\n                await this.prismaRepository.chat.update({\n                  where: { id: existingChat.id },\n                  data: { name: received.pushName },\n                });\n              } catch (error) {\n                console.log(`Chat insert record ignored: ${received.key.remoteJid} - ${this.instanceId}`);\n              }\n            }\n          }\n\n          const messageRaw = this.prepareMessage(received);\n\n          const isMedia =\n            received?.message?.imageMessage ||\n            received?.message?.videoMessage ||\n            received?.message?.stickerMessage ||\n            received?.message?.documentMessage ||\n            received?.message?.documentWithCaptionMessage ||\n            received?.message?.ptvMessage ||\n            received?.message?.audioMessage;\n\n          if (this.localSettings.readMessages && received.key.id !== 'status@broadcast') {\n            await this.client.readMessages([received.key]);\n          }\n\n          if (this.localSettings.readStatus && received.key.id === 'status@broadcast') {\n            await this.client.readMessages([received.key]);\n          }\n\n          if (\n            this.configService.get<Chatwoot>('CHATWOOT').ENABLED &&\n            this.localChatwoot?.enabled &&\n            !received.key.id.includes('@broadcast')\n          ) {\n            const chatwootSentMessage = await this.chatwootService.eventWhatsapp(\n              Events.MESSAGES_UPSERT,\n              { instanceName: this.instance.name, instanceId: this.instance.id },\n              messageRaw,\n            );\n\n            if (chatwootSentMessage?.id) {\n              messageRaw.chatwootMessageId = chatwootSentMessage.id;\n              messageRaw.chatwootInboxId = chatwootSentMessage.inbox_id;\n              messageRaw.chatwootConversationId = chatwootSentMessage.conversation_id;\n            }\n          }\n\n          if (this.configService.get<Openai>('OPENAI').ENABLED && received?.message?.audioMessage) {\n            const openAiDefaultSettings = await this.prismaRepository.openaiSetting.findFirst({\n              where: {\n                instanceId: this.instanceId,\n              },\n              include: {\n                OpenaiCreds: true,\n              },\n            });\n\n            if (openAiDefaultSettings && openAiDefaultSettings.openaiCredsId && openAiDefaultSettings.speechToText) {\n              messageRaw.message.speechToText = await this.openaiService.speechToText(\n                openAiDefaultSettings.OpenaiCreds,\n                received,\n                this.client.updateMediaMessage,\n              );\n            }\n          }\n\n          if (this.configService.get<Database>('DATABASE').SAVE_DATA.NEW_MESSAGE) {\n            const msg = await this.prismaRepository.message.create({\n              data: messageRaw,\n            });\n\n            if (received.key.fromMe === false) {\n              if (msg.status === status[3]) {\n                this.logger.log(`Update not read messages ${received.key.remoteJid}`);\n\n                await this.updateChatUnreadMessages(received.key.remoteJid);\n              } else if (msg.status === status[4]) {\n                this.logger.log(`Update readed messages ${received.key.remoteJid} - ${msg.messageTimestamp}`);\n\n                await this.updateMessagesReadedByTimestamp(received.key.remoteJid, msg.messageTimestamp);\n              }\n            } else {\n              // is send message by me\n              this.logger.log(`Update readed messages ${received.key.remoteJid} - ${msg.messageTimestamp}`);\n\n              await this.updateMessagesReadedByTimestamp(received.key.remoteJid, msg.messageTimestamp);\n            }\n\n            if (isMedia) {\n              if (this.configService.get<S3>('S3').ENABLE) {\n                try {\n                  const message: any = received;\n                  const media = await this.getBase64FromMediaMessage(\n                    {\n                      message,\n                    },\n                    true,\n                  );\n\n                  const { buffer, mediaType, fileName, size } = media;\n                  const mimetype = mimeTypes.lookup(fileName).toString();\n                  const fullName = join(`${this.instance.id}`, received.key.remoteJid, mediaType, fileName);\n                  await s3Service.uploadFile(fullName, buffer, size.fileLength?.low, {\n                    'Content-Type': mimetype,\n                  });\n\n                  await this.prismaRepository.media.create({\n                    data: {\n                      messageId: msg.id,\n                      instanceId: this.instanceId,\n                      type: mediaType,\n                      fileName: fullName,\n                      mimetype,\n                    },\n                  });\n\n                  const mediaUrl = await s3Service.getObjectUrl(fullName);\n\n                  messageRaw.message.mediaUrl = mediaUrl;\n\n                  await this.prismaRepository.message.update({\n                    where: { id: msg.id },\n                    data: messageRaw,\n                  });\n                } catch (error) {\n                  this.logger.error(['Error on upload file to minio', error?.message, error?.stack]);\n                }\n              }\n            }\n          }\n\n          if (this.localWebhook.enabled) {\n            if (isMedia && this.localWebhook.webhookBase64) {\n              try {\n                const buffer = await downloadMediaMessage(\n                  { key: received.key, message: received?.message },\n                  'buffer',\n                  {},\n                  {\n                    logger: P({ level: 'error' }) as any,\n                    reuploadRequest: this.client.updateMediaMessage,\n                  },\n                );\n\n                messageRaw.message.base64 = buffer ? buffer.toString('base64') : undefined;\n              } catch (error) {\n                this.logger.error(['Error converting media to base64', error?.message]);\n              }\n            }\n          }\n\n          this.logger.log(messageRaw);\n\n          this.sendDataWebhook(Events.MESSAGES_UPSERT, messageRaw);\n\n          await chatbotController.emit({\n            instance: { instanceName: this.instance.name, instanceId: this.instanceId },\n            remoteJid: messageRaw.key.remoteJid,\n            msg: messageRaw,\n            pushName: messageRaw.pushName,\n          });\n\n          const contact = await this.prismaRepository.contact.findFirst({\n            where: { remoteJid: received.key.remoteJid, instanceId: this.instanceId },\n          });\n\n          const contactRaw: { remoteJid: string; pushName: string; profilePicUrl?: string; instanceId: string } = {\n            remoteJid: received.key.remoteJid,\n            pushName: received.key.fromMe ? '' : received.key.fromMe == null ? '' : received.pushName,\n            profilePicUrl: (await this.profilePicture(received.key.remoteJid)).profilePictureUrl,\n            instanceId: this.instanceId,\n          };\n\n          if (contactRaw.remoteJid === 'status@broadcast') {\n            continue;\n          }\n\n          if (contact) {\n            this.sendDataWebhook(Events.CONTACTS_UPDATE, contactRaw);\n\n            if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED && this.localChatwoot?.enabled) {\n              await this.chatwootService.eventWhatsapp(\n                Events.CONTACTS_UPDATE,\n                { instanceName: this.instance.name, instanceId: this.instanceId },\n                contactRaw,\n              );\n            }\n\n            if (this.configService.get<Database>('DATABASE').SAVE_DATA.CONTACTS)\n              await this.prismaRepository.contact.upsert({\n                where: { remoteJid_instanceId: { remoteJid: contactRaw.remoteJid, instanceId: contactRaw.instanceId } },\n                create: contactRaw,\n                update: contactRaw,\n              });\n\n            continue;\n          }\n\n          this.sendDataWebhook(Events.CONTACTS_UPSERT, contactRaw);\n\n          if (this.configService.get<Database>('DATABASE').SAVE_DATA.CONTACTS)\n            await this.prismaRepository.contact.upsert({\n              where: {\n                remoteJid_instanceId: {\n                  remoteJid: contactRaw.remoteJid,\n                  instanceId: contactRaw.instanceId,\n                },\n              },\n              update: contactRaw,\n              create: contactRaw,\n            });\n\n          if (contactRaw.remoteJid.includes('@s.whatsapp')) {\n            await saveOnWhatsappCache([{ remoteJid: contactRaw.remoteJid }]);\n          }\n        }\n      } catch (error) {\n        this.logger.error(error);\n      }\n    },\n\n    'messages.update': async (args: WAMessageUpdate[], settings: any) => {\n      this.logger.log(`Update messages ${JSON.stringify(args, undefined, 2)}`);\n\n      const readChatToUpdate: Record<string, true> = {}; // {remoteJid: true}\n\n      for await (const { key, update } of args) {\n        if (settings?.groupsIgnore && key.remoteJid?.includes('@g.us')) {\n          continue;\n        }\n\n        if (status[update.status] === 'READ' && key.fromMe) {\n          if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED && this.localChatwoot?.enabled) {\n            this.chatwootService.eventWhatsapp(\n              'messages.read',\n              { instanceName: this.instance.name, instanceId: this.instanceId },\n              { key: key },\n            );\n          }\n        }\n\n        if (key.remoteJid !== 'status@broadcast') {\n          let pollUpdates: any;\n\n          if (update.pollUpdates) {\n            const pollCreation = await this.getMessage(key);\n\n            if (pollCreation) {\n              pollUpdates = getAggregateVotesInPollMessage({\n                message: pollCreation as proto.IMessage,\n                pollUpdates: update.pollUpdates,\n              });\n            }\n          }\n\n          const findMessage = await this.prismaRepository.message.findFirst({\n            where: {\n              instanceId: this.instanceId,\n              key: {\n                path: ['id'],\n                equals: key.id,\n              },\n            },\n          });\n\n          if (!findMessage) {\n            continue;\n          }\n\n          if (update.message === null && update.status === undefined) {\n            this.sendDataWebhook(Events.MESSAGES_DELETE, key);\n\n            const message: any = {\n              messageId: findMessage.id,\n              keyId: key.id,\n              remoteJid: key.remoteJid,\n              fromMe: key.fromMe,\n              participant: key?.remoteJid,\n              status: 'DELETED',\n              instanceId: this.instanceId,\n            };\n\n            if (this.configService.get<Database>('DATABASE').SAVE_DATA.MESSAGE_UPDATE)\n              await this.prismaRepository.messageUpdate.create({\n                data: message,\n              });\n\n            if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED && this.localChatwoot?.enabled) {\n              this.chatwootService.eventWhatsapp(\n                Events.MESSAGES_DELETE,\n                { instanceName: this.instance.name, instanceId: this.instanceId },\n                { key: key },\n              );\n            }\n\n            continue;\n          } else if (update.status !== undefined && status[update.status] !== findMessage.status) {\n            if (!key.fromMe && key.remoteJid) {\n              readChatToUpdate[key.remoteJid] = true;\n\n              if (status[update.status] === status[4]) {\n                this.logger.log(`Update as read ${key.remoteJid} - ${findMessage.messageTimestamp}`);\n                this.updateMessagesReadedByTimestamp(key.remoteJid, findMessage.messageTimestamp);\n              }\n            }\n\n            await this.prismaRepository.message.update({\n              where: { id: findMessage.id },\n              data: { status: status[update.status] },\n            });\n          }\n\n          const message: any = {\n            messageId: findMessage.id,\n            keyId: key.id,\n            remoteJid: key.remoteJid,\n            fromMe: key.fromMe,\n            participant: key?.remoteJid,\n            status: status[update.status],\n            pollUpdates,\n            instanceId: this.instanceId,\n          };\n\n          this.sendDataWebhook(Events.MESSAGES_UPDATE, message);\n\n          if (this.configService.get<Database>('DATABASE').SAVE_DATA.MESSAGE_UPDATE)\n            await this.prismaRepository.messageUpdate.create({\n              data: message,\n            });\n\n          const existingChat = await this.prismaRepository.chat.findFirst({\n            where: { instanceId: this.instanceId, remoteJid: message.remoteJid },\n          });\n\n          if (existingChat) {\n            const chatToInsert = {\n              remoteJid: message.remoteJid,\n              instanceId: this.instanceId,\n              name: message.pushName || '',\n              unreadMessages: 0,\n            };\n\n            this.sendDataWebhook(Events.CHATS_UPSERT, [chatToInsert]);\n            if (this.configService.get<Database>('DATABASE').SAVE_DATA.CHATS) {\n              try {\n                await this.prismaRepository.chat.update({\n                  where: {\n                    id: existingChat.id,\n                  },\n                  data: chatToInsert,\n                });\n              } catch (error) {\n                console.log(`Chat insert record ignored: ${chatToInsert.remoteJid} - ${chatToInsert.instanceId}`);\n              }\n            }\n          }\n        }\n      }\n\n      await Promise.all(Object.keys(readChatToUpdate).map((remoteJid) => this.updateChatUnreadMessages(remoteJid)));\n    },\n  };\n\n  private readonly groupHandler = {\n    'groups.upsert': (groupMetadata: GroupMetadata[]) => {\n      this.sendDataWebhook(Events.GROUPS_UPSERT, groupMetadata);\n    },\n\n    'groups.update': (groupMetadataUpdate: Partial<GroupMetadata>[]) => {\n      this.sendDataWebhook(Events.GROUPS_UPDATE, groupMetadataUpdate);\n\n      groupMetadataUpdate.forEach((group) => {\n        if (isJidGroup(group.id)) {\n          this.updateGroupMetadataCache(group.id);\n        }\n      });\n    },\n\n    'group-participants.update': (participantsUpdate: {\n      id: string;\n      participants: string[];\n      action: ParticipantAction;\n    }) => {\n      this.sendDataWebhook(Events.GROUP_PARTICIPANTS_UPDATE, participantsUpdate);\n\n      this.updateGroupMetadataCache(participantsUpdate.id);\n    },\n  };\n\n  private readonly labelHandle = {\n    [Events.LABELS_EDIT]: async (label: Label) => {\n      this.sendDataWebhook(Events.LABELS_EDIT, { ...label, instance: this.instance.name });\n\n      const labelsRepository = await this.prismaRepository.label.findMany({\n        where: { instanceId: this.instanceId },\n      });\n\n      const savedLabel = labelsRepository.find((l) => l.labelId === label.id);\n      if (label.deleted && savedLabel) {\n        await this.prismaRepository.label.delete({\n          where: { labelId_instanceId: { instanceId: this.instanceId, labelId: label.id } },\n        });\n        this.sendDataWebhook(Events.LABELS_EDIT, { ...label, instance: this.instance.name });\n        return;\n      }\n\n      const labelName = label.name.replace(/[^\\x20-\\x7E]/g, '');\n      if (!savedLabel || savedLabel.color !== `${label.color}` || savedLabel.name !== labelName) {\n        if (this.configService.get<Database>('DATABASE').SAVE_DATA.LABELS) {\n          const labelData = {\n            color: `${label.color}`,\n            name: labelName,\n            labelId: label.id,\n            predefinedId: label.predefinedId,\n            instanceId: this.instanceId,\n          };\n          await this.prismaRepository.label.upsert({\n            where: {\n              labelId_instanceId: {\n                instanceId: labelData.instanceId,\n                labelId: labelData.labelId,\n              },\n            },\n            update: labelData,\n            create: labelData,\n          });\n        }\n      }\n    },\n\n    [Events.LABELS_ASSOCIATION]: async (\n      data: { association: LabelAssociation; type: 'remove' | 'add' },\n      database: Database,\n    ) => {\n      this.logger.info(\n        `labels association - ${data?.association?.chatId} (${data.type}-${data?.association?.type}): ${data?.association?.labelId}`,\n      );\n      if (database.SAVE_DATA.CHATS) {\n        const instanceId = this.instanceId;\n        const chatId = data.association.chatId;\n        const labelId = data.association.labelId;\n\n        if (data.type === 'add') {\n          await this.addLabel(labelId, instanceId, chatId);\n        } else if (data.type === 'remove') {\n          await this.removeLabel(labelId, instanceId, chatId);\n        }\n      }\n\n      this.sendDataWebhook(Events.LABELS_ASSOCIATION, {\n        instance: this.instance.name,\n        type: data.type,\n        chatId: data.association.chatId,\n        labelId: data.association.labelId,\n      });\n    },\n  };\n\n  private eventHandler() {\n    this.client.ev.process(async (events) => {\n      if (!this.endSession) {\n        const database = this.configService.get<Database>('DATABASE');\n        const settings = await this.findSettings();\n\n        if (events.call) {\n          const call = events.call[0];\n\n          if (settings?.rejectCall && call.status == 'offer') {\n            this.client.rejectCall(call.id, call.from);\n          }\n\n          if (settings?.msgCall?.trim().length > 0 && call.status == 'offer') {\n            const msg = await this.client.sendMessage(call.from, {\n              text: settings.msgCall,\n            });\n\n            this.client.ev.emit('messages.upsert', {\n              messages: [msg],\n              type: 'notify',\n            });\n          }\n\n          this.sendDataWebhook(Events.CALL, call);\n        }\n\n        if (events['connection.update']) {\n          this.connectionUpdate(events['connection.update']);\n        }\n\n        if (events['creds.update']) {\n          this.instance.authState.saveCreds();\n        }\n\n        if (events['messaging-history.set']) {\n          const payload = events['messaging-history.set'];\n          this.messageHandle['messaging-history.set'](payload);\n        }\n\n        if (events['messages.upsert']) {\n          const payload = events['messages.upsert'];\n          this.messageHandle['messages.upsert'](payload, settings);\n        }\n\n        if (events['messages.update']) {\n          const payload = events['messages.update'];\n          this.messageHandle['messages.update'](payload, settings);\n        }\n\n        if (events['message-receipt.update']) {\n          const payload = events['message-receipt.update'] as MessageUserReceiptUpdate[];\n          const remotesJidMap: Record<string, number> = {};\n\n          for (const event of payload) {\n            if (typeof event.key.remoteJid === 'string' && typeof event.receipt.readTimestamp === 'number') {\n              remotesJidMap[event.key.remoteJid] = event.receipt.readTimestamp;\n            }\n          }\n\n          await Promise.all(\n            Object.keys(remotesJidMap).map(async (remoteJid) =>\n              this.updateMessagesReadedByTimestamp(remoteJid, remotesJidMap[remoteJid]),\n            ),\n          );\n        }\n\n        if (events['presence.update']) {\n          const payload = events['presence.update'];\n\n          if (settings?.groupsIgnore && payload.id.includes('@g.us')) {\n            return;\n          }\n\n          this.sendDataWebhook(Events.PRESENCE_UPDATE, payload);\n        }\n\n        if (!settings?.groupsIgnore) {\n          if (events['groups.upsert']) {\n            const payload = events['groups.upsert'];\n            this.groupHandler['groups.upsert'](payload);\n          }\n\n          if (events['groups.update']) {\n            const payload = events['groups.update'];\n            this.groupHandler['groups.update'](payload);\n          }\n\n          if (events['group-participants.update']) {\n            const payload = events['group-participants.update'];\n            this.groupHandler['group-participants.update'](payload);\n          }\n        }\n\n        if (events['chats.upsert']) {\n          const payload = events['chats.upsert'];\n          this.chatHandle['chats.upsert'](payload);\n        }\n\n        if (events['chats.update']) {\n          const payload = events['chats.update'];\n          this.chatHandle['chats.update'](payload);\n        }\n\n        if (events['chats.delete']) {\n          const payload = events['chats.delete'];\n          this.chatHandle['chats.delete'](payload);\n        }\n\n        if (events['contacts.upsert']) {\n          const payload = events['contacts.upsert'];\n          this.contactHandle['contacts.upsert'](payload);\n        }\n\n        if (events['contacts.update']) {\n          const payload = events['contacts.update'];\n          this.contactHandle['contacts.update'](payload);\n        }\n\n        if (events[Events.LABELS_ASSOCIATION]) {\n          const payload = events[Events.LABELS_ASSOCIATION];\n          this.labelHandle[Events.LABELS_ASSOCIATION](payload, database);\n          return;\n        }\n\n        if (events[Events.LABELS_EDIT]) {\n          const payload = events[Events.LABELS_EDIT];\n          this.labelHandle[Events.LABELS_EDIT](payload);\n          return;\n        }\n      }\n    });\n  }\n\n  private historySyncNotification(msg: proto.Message.IHistorySyncNotification) {\n    const instance: InstanceDto = { instanceName: this.instance.name };\n\n    if (\n      this.configService.get<Chatwoot>('CHATWOOT').ENABLED &&\n      this.localChatwoot?.enabled &&\n      this.localChatwoot.importMessages &&\n      this.isSyncNotificationFromUsedSyncType(msg)\n    ) {\n      if (msg.chunkOrder === 1) {\n        this.chatwootService.startImportHistoryMessages(instance);\n      }\n\n      if (msg.progress === 100) {\n        setTimeout(() => {\n          this.chatwootService.importHistoryMessages(instance);\n        }, 10000);\n      }\n    }\n\n    return true;\n  }\n\n  private isSyncNotificationFromUsedSyncType(msg: proto.Message.IHistorySyncNotification) {\n    return (\n      (this.localSettings.syncFullHistory && msg?.syncType === 2) ||\n      (!this.localSettings.syncFullHistory && msg?.syncType === 3)\n    );\n  }\n\n  public async profilePicture(number: string) {\n    const jid = createJid(number);\n\n    try {\n      const profilePictureUrl = await this.client.profilePictureUrl(jid, 'image');\n\n      return {\n        wuid: jid,\n        profilePictureUrl,\n      };\n    } catch (error) {\n      return {\n        wuid: jid,\n        profilePictureUrl: null,\n      };\n    }\n  }\n\n  public async getStatus(number: string) {\n    const jid = createJid(number);\n\n    try {\n      return {\n        wuid: jid,\n        status: (await this.client.fetchStatus(jid))[0]?.status,\n      };\n    } catch (error) {\n      return {\n        wuid: jid,\n        status: null,\n      };\n    }\n  }\n\n  public async fetchProfile(instanceName: string, number?: string) {\n    const jid = number ? createJid(number) : this.client?.user?.id;\n\n    const onWhatsapp = (await this.whatsappNumber({ numbers: [jid] }))?.shift();\n\n    if (!onWhatsapp.exists) {\n      throw new BadRequestException(onWhatsapp);\n    }\n\n    try {\n      if (number) {\n        const info = (await this.whatsappNumber({ numbers: [jid] }))?.shift();\n        const picture = await this.profilePicture(info?.jid);\n        const status = await this.getStatus(info?.jid);\n        const business = await this.fetchBusinessProfile(info?.jid);\n\n        return {\n          wuid: info?.jid || jid,\n          name: info?.name,\n          numberExists: info?.exists,\n          picture: picture?.profilePictureUrl,\n          status: status?.status,\n          isBusiness: business.isBusiness,\n          email: business?.email,\n          description: business?.description,\n          website: business?.website?.shift(),\n        };\n      } else {\n        const instanceNames = instanceName ? [instanceName] : null;\n        const info: Instance = await waMonitor.instanceInfo(instanceNames);\n        const business = await this.fetchBusinessProfile(jid);\n\n        return {\n          wuid: jid,\n          name: info?.profileName,\n          numberExists: true,\n          picture: info?.profilePicUrl,\n          status: info?.connectionStatus,\n          isBusiness: business.isBusiness,\n          email: business?.email,\n          description: business?.description,\n          website: business?.website?.shift(),\n        };\n      }\n    } catch (error) {\n      return {\n        wuid: jid,\n        name: null,\n        picture: null,\n        status: null,\n        os: null,\n        isBusiness: false,\n      };\n    }\n  }\n\n  public async offerCall({ number, isVideo, callDuration }: OfferCallDto) {\n    const jid = createJid(number);\n\n    try {\n      const call = await this.client.offerCall(jid, isVideo);\n      setTimeout(() => this.client.terminateCall(call.id, call.to), callDuration * 1000);\n\n      return call;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  private async sendMessage(\n    sender: string,\n    message: any,\n    mentions: any,\n    linkPreview: any,\n    quoted: any,\n    messageId?: string,\n    ephemeralExpiration?: number,\n    // participants?: GroupParticipant[],\n  ) {\n    sender = sender.toLowerCase();\n\n    const option: any = {\n      quoted,\n    };\n\n    if (isJidGroup(sender)) {\n      option.useCachedGroupMetadata = true;\n      // if (participants)\n      //   option.cachedGroupMetadata = async () => {\n      //     return { participants: participants as GroupParticipant[] };\n      //   };\n    }\n\n    if (ephemeralExpiration) option.ephemeralExpiration = ephemeralExpiration;\n\n    if (messageId) option.messageId = messageId;\n    else option.messageId = '3EB0' + randomBytes(18).toString('hex').toUpperCase();\n\n    if (message['viewOnceMessage']) {\n      const m = generateWAMessageFromContent(sender, message, {\n        timestamp: new Date(),\n        userJid: this.instance.wuid,\n        messageId,\n        quoted,\n      });\n      const id = await this.client.relayMessage(sender, message, { messageId });\n      m.key = {\n        id: id,\n        remoteJid: sender,\n        participant: isJidUser(sender) ? sender : undefined,\n        fromMe: true,\n      };\n      for (const [key, value] of Object.entries(m)) {\n        if (!value || (isArray(value) && value.length) === 0) {\n          delete m[key];\n        }\n      }\n      return m;\n    }\n\n    if (\n      !message['audio'] &&\n      !message['poll'] &&\n      !message['sticker'] &&\n      !message['conversation'] &&\n      sender !== 'status@broadcast'\n    ) {\n      if (message['reactionMessage']) {\n        return await this.client.sendMessage(\n          sender,\n          {\n            react: {\n              text: message['reactionMessage']['text'],\n              key: message['reactionMessage']['key'],\n            },\n          } as unknown as AnyMessageContent,\n          option as unknown as MiscMessageGenerationOptions,\n        );\n      }\n    }\n\n    if (message['conversation']) {\n      return await this.client.sendMessage(\n        sender,\n        {\n          text: message['conversation'],\n          mentions,\n          linkPreview: linkPreview,\n        } as unknown as AnyMessageContent,\n        option as unknown as MiscMessageGenerationOptions,\n      );\n    }\n\n    if (!message['audio'] && !message['poll'] && !message['sticker'] && sender != 'status@broadcast') {\n      return await this.client.sendMessage(\n        sender,\n        {\n          forward: {\n            key: { remoteJid: this.instance.wuid, fromMe: true },\n            message,\n          },\n          mentions,\n        },\n        option as unknown as MiscMessageGenerationOptions,\n      );\n    }\n\n    if (sender === 'status@broadcast') {\n      let jidList;\n      if (message['status'].option.allContacts) {\n        const contacts = await this.prismaRepository.contact.findMany({\n          where: {\n            instanceId: this.instanceId,\n            remoteJid: {\n              not: {\n                endsWith: '@g.us',\n              },\n            },\n          },\n        });\n\n        jidList = contacts.map((contact) => contact.remoteJid);\n      } else {\n        jidList = message['status'].option.statusJidList;\n      }\n\n      const batchSize = 10;\n\n      const batches = Array.from({ length: Math.ceil(jidList.length / batchSize) }, (_, i) =>\n        jidList.slice(i * batchSize, i * batchSize + batchSize),\n      );\n\n      let msgId: string | null = null;\n\n      let firstMessage: WAMessage;\n\n      const firstBatch = batches.shift();\n\n      if (firstBatch) {\n        firstMessage = await this.client.sendMessage(\n          sender,\n          message['status'].content as unknown as AnyMessageContent,\n          {\n            backgroundColor: message['status'].option.backgroundColor,\n            font: message['status'].option.font,\n            statusJidList: firstBatch,\n          } as unknown as MiscMessageGenerationOptions,\n        );\n\n        msgId = firstMessage.key.id;\n      }\n\n      if (batches.length === 0) return firstMessage;\n\n      await Promise.allSettled(\n        batches.map(async (batch) => {\n          const messageSent = await this.client.sendMessage(\n            sender,\n            message['status'].content as unknown as AnyMessageContent,\n            {\n              backgroundColor: message['status'].option.backgroundColor,\n              font: message['status'].option.font,\n              statusJidList: batch,\n              messageId: msgId,\n            } as unknown as MiscMessageGenerationOptions,\n          );\n\n          return messageSent;\n        }),\n      );\n\n      return firstMessage;\n    }\n\n    return await this.client.sendMessage(\n      sender,\n      message as unknown as AnyMessageContent,\n      option as unknown as MiscMessageGenerationOptions,\n    );\n  }\n\n  private async sendMessageWithTyping<T = proto.IMessage>(\n    number: string,\n    message: T,\n    options?: Options,\n    isIntegration = false,\n  ) {\n    const isWA = (await this.whatsappNumber({ numbers: [number] }))?.shift();\n\n    if (!isWA.exists && !isJidGroup(isWA.jid) && !isWA.jid.includes('@broadcast')) {\n      throw new BadRequestException(isWA);\n    }\n\n    const sender = isWA.jid.toLowerCase();\n\n    this.logger.verbose(`Sending message to ${sender}`);\n\n    try {\n      if (options?.delay) {\n        this.logger.verbose(`Typing for ${options.delay}ms to ${sender}`);\n        if (options.delay > 20000) {\n          let remainingDelay = options.delay;\n          while (remainingDelay > 20000) {\n            await this.client.presenceSubscribe(sender);\n\n            await this.client.sendPresenceUpdate((options.presence as WAPresence) ?? 'composing', sender);\n\n            await delay(20000);\n\n            await this.client.sendPresenceUpdate('paused', sender);\n\n            remainingDelay -= 20000;\n          }\n          if (remainingDelay > 0) {\n            await this.client.presenceSubscribe(sender);\n\n            await this.client.sendPresenceUpdate((options.presence as WAPresence) ?? 'composing', sender);\n\n            await delay(remainingDelay);\n\n            await this.client.sendPresenceUpdate('paused', sender);\n          }\n        } else {\n          await this.client.presenceSubscribe(sender);\n\n          await this.client.sendPresenceUpdate((options.presence as WAPresence) ?? 'composing', sender);\n\n          await delay(options.delay);\n\n          await this.client.sendPresenceUpdate('paused', sender);\n        }\n      }\n\n      const linkPreview = options?.linkPreview != false ? undefined : false;\n\n      let quoted: WAMessage;\n\n      if (options?.quoted) {\n        const m = options?.quoted;\n\n        const msg = m?.message ? m : ((await this.getMessage(m.key, true)) as proto.IWebMessageInfo);\n\n        if (msg) {\n          quoted = msg;\n        }\n      }\n\n      let messageSent: WAMessage;\n\n      let mentions: string[];\n      if (isJidGroup(sender)) {\n        let group;\n        try {\n          const cache = this.configService.get<CacheConf>('CACHE');\n          if (!cache.REDIS.ENABLED && !cache.LOCAL.ENABLED) group = await this.findGroup({ groupJid: sender }, 'inner');\n          else group = await this.getGroupMetadataCache(sender);\n        } catch (error) {\n          throw new NotFoundException('Group not found');\n        }\n\n        if (!group) {\n          throw new NotFoundException('Group not found');\n        }\n\n        if (options?.mentionsEveryOne) {\n          mentions = group.participants.map((participant) => participant.id);\n        } else if (options?.mentioned?.length) {\n          mentions = options.mentioned.map((mention) => {\n            const jid = createJid(mention);\n            if (isJidGroup(jid)) {\n              return null;\n            }\n            return jid;\n          });\n        }\n\n        messageSent = await this.sendMessage(\n          sender,\n          message,\n          mentions,\n          linkPreview,\n          quoted,\n          null,\n          group?.ephemeralDuration,\n          // group?.participants,\n        );\n      } else {\n        messageSent = await this.sendMessage(sender, message, mentions, linkPreview, quoted);\n      }\n\n      if (Long.isLong(messageSent?.messageTimestamp)) {\n        messageSent.messageTimestamp = messageSent.messageTimestamp?.toNumber();\n      }\n\n      const messageRaw = this.prepareMessage(messageSent);\n\n      const isMedia =\n        messageSent?.message?.imageMessage ||\n        messageSent?.message?.videoMessage ||\n        messageSent?.message?.stickerMessage ||\n        messageSent?.message?.ptvMessage ||\n        messageSent?.message?.documentMessage ||\n        messageSent?.message?.documentWithCaptionMessage ||\n        messageSent?.message?.ptvMessage ||\n        messageSent?.message?.audioMessage;\n\n      if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED && this.localChatwoot?.enabled && !isIntegration) {\n        this.chatwootService.eventWhatsapp(\n          Events.SEND_MESSAGE,\n          { instanceName: this.instance.name, instanceId: this.instanceId },\n          messageRaw,\n        );\n      }\n\n      if (this.configService.get<Openai>('OPENAI').ENABLED && messageRaw?.message?.audioMessage) {\n        const openAiDefaultSettings = await this.prismaRepository.openaiSetting.findFirst({\n          where: {\n            instanceId: this.instanceId,\n          },\n          include: {\n            OpenaiCreds: true,\n          },\n        });\n\n        if (openAiDefaultSettings && openAiDefaultSettings.openaiCredsId && openAiDefaultSettings.speechToText) {\n          messageRaw.message.speechToText = await this.openaiService.speechToText(\n            openAiDefaultSettings.OpenaiCreds,\n            messageRaw,\n            this.client.updateMediaMessage,\n          );\n        }\n      }\n\n      if (this.configService.get<Database>('DATABASE').SAVE_DATA.NEW_MESSAGE) {\n        const msg = await this.prismaRepository.message.create({\n          data: messageRaw,\n        });\n\n        if (isMedia && this.configService.get<S3>('S3').ENABLE) {\n          try {\n            const message: any = messageRaw;\n            const media = await this.getBase64FromMediaMessage(\n              {\n                message,\n              },\n              true,\n            );\n\n            const { buffer, mediaType, fileName, size } = media;\n\n            const mimetype = mimeTypes.lookup(fileName).toString();\n\n            const fullName = join(\n              `${this.instance.id}`,\n              messageRaw.key.remoteJid,\n              `${messageRaw.key.id}`,\n              mediaType,\n              fileName,\n            );\n\n            await s3Service.uploadFile(fullName, buffer, size.fileLength?.low, {\n              'Content-Type': mimetype,\n            });\n\n            await this.prismaRepository.media.create({\n              data: {\n                messageId: msg.id,\n                instanceId: this.instanceId,\n                type: mediaType,\n                fileName: fullName,\n                mimetype,\n              },\n            });\n\n            const mediaUrl = await s3Service.getObjectUrl(fullName);\n\n            messageRaw.message.mediaUrl = mediaUrl;\n\n            await this.prismaRepository.message.update({\n              where: { id: msg.id },\n              data: messageRaw,\n            });\n          } catch (error) {\n            this.logger.error(['Error on upload file to minio', error?.message, error?.stack]);\n          }\n        }\n      }\n\n      if (this.localWebhook.enabled) {\n        if (isMedia && this.localWebhook.webhookBase64) {\n          try {\n            const buffer = await downloadMediaMessage(\n              { key: messageRaw.key, message: messageRaw?.message },\n              'buffer',\n              {},\n              {\n                logger: P({ level: 'error' }) as any,\n                reuploadRequest: this.client.updateMediaMessage,\n              },\n            );\n\n            messageRaw.message.base64 = buffer ? buffer.toString('base64') : undefined;\n          } catch (error) {\n            this.logger.error(['Error converting media to base64', error?.message]);\n          }\n        }\n      }\n\n      this.logger.log(messageRaw);\n\n      this.sendDataWebhook(Events.SEND_MESSAGE, messageRaw);\n\n      if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED && this.localChatwoot?.enabled && isIntegration) {\n        await chatbotController.emit({\n          instance: { instanceName: this.instance.name, instanceId: this.instanceId },\n          remoteJid: messageRaw.key.remoteJid,\n          msg: messageRaw,\n          pushName: messageRaw.pushName,\n          isIntegration,\n        });\n      }\n\n      return messageRaw;\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(error.toString());\n    }\n  }\n\n  // Instance Controller\n  public async sendPresence(data: SendPresenceDto) {\n    try {\n      const { number } = data;\n\n      const isWA = (await this.whatsappNumber({ numbers: [number] }))?.shift();\n\n      if (!isWA.exists && !isJidGroup(isWA.jid) && !isWA.jid.includes('@broadcast')) {\n        throw new BadRequestException(isWA);\n      }\n\n      const sender = isWA.jid;\n\n      if (data?.delay && data?.delay > 20000) {\n        let remainingDelay = data?.delay;\n        while (remainingDelay > 20000) {\n          await this.client.presenceSubscribe(sender);\n\n          await this.client.sendPresenceUpdate((data?.presence as WAPresence) ?? 'composing', sender);\n\n          await delay(20000);\n\n          await this.client.sendPresenceUpdate('paused', sender);\n\n          remainingDelay -= 20000;\n        }\n        if (remainingDelay > 0) {\n          await this.client.presenceSubscribe(sender);\n\n          await this.client.sendPresenceUpdate((data?.presence as WAPresence) ?? 'composing', sender);\n\n          await delay(remainingDelay);\n\n          await this.client.sendPresenceUpdate('paused', sender);\n        }\n      } else {\n        await this.client.presenceSubscribe(sender);\n\n        await this.client.sendPresenceUpdate((data?.presence as WAPresence) ?? 'composing', sender);\n\n        await delay(data?.delay);\n\n        await this.client.sendPresenceUpdate('paused', sender);\n      }\n\n      return { presence: data.presence };\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(error.toString());\n    }\n  }\n\n  // Presence Controller\n  public async setPresence(data: SetPresenceDto) {\n    try {\n      await this.client.sendPresenceUpdate(data.presence);\n\n      return { presence: data.presence };\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(error.toString());\n    }\n  }\n\n  // Send Message Controller\n  public async textMessage(data: SendTextDto, isIntegration = false) {\n    const text = data.text;\n\n    if (!text || text.trim().length === 0) {\n      throw new BadRequestException('Text is required');\n    }\n\n    return await this.sendMessageWithTyping(\n      data.number,\n      {\n        conversation: data.text,\n      },\n      {\n        delay: data?.delay,\n        presence: 'composing',\n        quoted: data?.quoted,\n        linkPreview: data?.linkPreview,\n        mentionsEveryOne: data?.mentionsEveryOne,\n        mentioned: data?.mentioned,\n      },\n      isIntegration,\n    );\n  }\n\n  public async pollMessage(data: SendPollDto) {\n    return await this.sendMessageWithTyping(\n      data.number,\n      {\n        poll: {\n          name: data.name,\n          selectableCount: data.selectableCount,\n          values: data.values,\n        },\n      },\n      {\n        delay: data?.delay,\n        presence: 'composing',\n        quoted: data?.quoted,\n        linkPreview: data?.linkPreview,\n        mentionsEveryOne: data?.mentionsEveryOne,\n        mentioned: data?.mentioned,\n      },\n    );\n  }\n\n  private async formatStatusMessage(status: StatusMessage) {\n    if (!status.type) {\n      throw new BadRequestException('Type is required');\n    }\n\n    if (!status.content) {\n      throw new BadRequestException('Content is required');\n    }\n\n    if (status.allContacts) {\n      const contacts = await this.prismaRepository.contact.findMany({\n        where: { instanceId: this.instanceId },\n      });\n\n      if (!contacts.length) {\n        throw new BadRequestException('Contacts not found');\n      }\n\n      status.statusJidList = contacts.filter((contact) => contact.pushName).map((contact) => contact.remoteJid);\n    }\n\n    if (!status.statusJidList?.length && !status.allContacts) {\n      throw new BadRequestException('StatusJidList is required');\n    }\n\n    if (status.type === 'text') {\n      if (!status.backgroundColor) {\n        throw new BadRequestException('Background color is required');\n      }\n\n      if (!status.font) {\n        throw new BadRequestException('Font is required');\n      }\n\n      return {\n        content: {\n          text: status.content,\n        },\n        option: {\n          backgroundColor: status.backgroundColor,\n          font: status.font,\n          statusJidList: status.statusJidList,\n        },\n      };\n    }\n    if (status.type === 'image') {\n      return {\n        content: {\n          image: {\n            url: status.content,\n          },\n          caption: status.caption,\n        },\n        option: {\n          statusJidList: status.statusJidList,\n        },\n      };\n    }\n\n    if (status.type === 'video') {\n      return {\n        content: {\n          video: {\n            url: status.content,\n          },\n          caption: status.caption,\n        },\n        option: {\n          statusJidList: status.statusJidList,\n        },\n      };\n    }\n\n    if (status.type === 'audio') {\n      const convert = await this.processAudioMp4(status.content);\n      if (Buffer.isBuffer(convert)) {\n        const result = {\n          content: {\n            audio: convert,\n            ptt: true,\n            mimetype: 'audio/ogg; codecs=opus',\n          },\n          option: {\n            statusJidList: status.statusJidList,\n          },\n        };\n\n        return result;\n      } else {\n        throw new InternalServerErrorException(convert);\n      }\n    }\n\n    throw new BadRequestException('Type not found');\n  }\n\n  public async statusMessage(data: SendStatusDto, file?: any) {\n    const mediaData: SendStatusDto = { ...data };\n\n    if (file) mediaData.content = file.buffer.toString('base64');\n\n    const status = await this.formatStatusMessage(mediaData);\n\n    const statusSent = await this.sendMessageWithTyping('status@broadcast', {\n      status,\n    });\n\n    return statusSent;\n  }\n\n  private async prepareMediaMessage(mediaMessage: MediaMessage) {\n    try {\n      const type = mediaMessage.mediatype === 'ptv' ? 'video' : mediaMessage.mediatype;\n\n      const prepareMedia = await prepareWAMessageMedia(\n        {\n          [type]: isURL(mediaMessage.media) ? { url: mediaMessage.media } : Buffer.from(mediaMessage.media, 'base64'),\n        } as any,\n        { upload: this.client.waUploadToServer },\n      );\n\n      const mediaType = mediaMessage.mediatype + 'Message';\n\n      if (mediaMessage.mediatype === 'document' && !mediaMessage.fileName) {\n        const regex = new RegExp(/.*\\/(.+?)\\./);\n        const arrayMatch = regex.exec(mediaMessage.media);\n        mediaMessage.fileName = arrayMatch[1];\n      }\n\n      if (mediaMessage.mediatype === 'image' && !mediaMessage.fileName) {\n        mediaMessage.fileName = 'image.png';\n      }\n\n      if (mediaMessage.mediatype === 'video' && !mediaMessage.fileName) {\n        mediaMessage.fileName = 'video.mp4';\n      }\n\n      let mimetype: string | false;\n\n      if (mediaMessage.mimetype) {\n        mimetype = mediaMessage.mimetype;\n      } else {\n        mimetype = mimeTypes.lookup(mediaMessage.fileName);\n\n        if (!mimetype && isURL(mediaMessage.media)) {\n          let config: any = {\n            responseType: 'arraybuffer',\n          };\n\n          if (this.localProxy?.enabled) {\n            config = {\n              ...config,\n              httpsAgent: makeProxyAgent({\n                host: this.localProxy.host,\n                port: this.localProxy.port,\n                protocol: this.localProxy.protocol,\n                username: this.localProxy.username,\n                password: this.localProxy.password,\n              }),\n            };\n          }\n\n          const response = await axios.get(mediaMessage.media, config);\n\n          mimetype = response.headers['content-type'];\n        }\n      }\n\n      if (mediaMessage.mediatype === 'ptv') {\n        prepareMedia[mediaType] = prepareMedia[type + 'Message'];\n        mimetype = 'video/mp4';\n\n        if (!prepareMedia[mediaType]) {\n          throw new Error('Failed to prepare video message');\n        }\n\n        try {\n          let mediaInput;\n          if (isURL(mediaMessage.media)) {\n            mediaInput = mediaMessage.media;\n          } else {\n            const mediaBuffer = Buffer.from(mediaMessage.media, 'base64');\n            if (!mediaBuffer || mediaBuffer.length === 0) {\n              throw new Error('Invalid media buffer');\n            }\n            mediaInput = mediaBuffer;\n          }\n\n          const duration = await getVideoDuration(mediaInput);\n          if (!duration || duration <= 0) {\n            throw new Error('Invalid media duration');\n          }\n\n          this.logger.verbose(`Video duration: ${duration} seconds`);\n          prepareMedia[mediaType].seconds = duration;\n        } catch (error) {\n          this.logger.error('Error getting video duration:');\n          this.logger.error(error);\n          throw new Error(`Failed to get video duration: ${error.message}`);\n        }\n      }\n\n      prepareMedia[mediaType].caption = mediaMessage?.caption;\n      prepareMedia[mediaType].mimetype = mimetype;\n      prepareMedia[mediaType].fileName = mediaMessage.fileName;\n\n      if (mediaMessage.mediatype === 'video') {\n        prepareMedia[mediaType].jpegThumbnail = Uint8Array.from(\n          readFileSync(join(process.cwd(), 'public', 'images', 'video-cover.png')),\n        );\n        prepareMedia[mediaType].gifPlayback = false;\n      }\n\n      return generateWAMessageFromContent(\n        '',\n        { [mediaType]: { ...prepareMedia[mediaType] } },\n        { userJid: this.instance.wuid },\n      );\n    } catch (error) {\n      this.logger.error(error);\n      throw new InternalServerErrorException(error?.toString() || error);\n    }\n  }\n\n  private async convertToWebP(image: string): Promise<Buffer> {\n    try {\n      let imageBuffer: Buffer;\n\n      if (isBase64(image)) {\n        const base64Data = image.replace(/^data:image\\/(jpeg|png|gif);base64,/, '');\n        imageBuffer = Buffer.from(base64Data, 'base64');\n      } else {\n        const timestamp = new Date().getTime();\n        const url = `${image}?timestamp=${timestamp}`;\n\n        let config: any = {\n          responseType: 'arraybuffer',\n        };\n\n        if (this.localProxy?.enabled) {\n          config = {\n            ...config,\n            httpsAgent: makeProxyAgent({\n              host: this.localProxy.host,\n              port: this.localProxy.port,\n              protocol: this.localProxy.protocol,\n              username: this.localProxy.username,\n              password: this.localProxy.password,\n            }),\n          };\n        }\n\n        const response = await axios.get(url, config);\n        imageBuffer = Buffer.from(response.data, 'binary');\n      }\n\n      const webpBuffer = await sharp(imageBuffer).webp().toBuffer();\n\n      return webpBuffer;\n    } catch (error) {\n      console.error('Erro ao converter a imagem para WebP:', error);\n      throw error;\n    }\n  }\n\n  public async mediaSticker(data: SendStickerDto, file?: any) {\n    const mediaData: SendStickerDto = { ...data };\n\n    if (file) mediaData.sticker = file.buffer.toString('base64');\n\n    const convert = await this.convertToWebP(data.sticker);\n    const gifPlayback = data.sticker.includes('.gif');\n    const result = await this.sendMessageWithTyping(\n      data.number,\n      {\n        sticker: convert,\n        gifPlayback,\n      },\n      {\n        delay: data?.delay,\n        presence: 'composing',\n        quoted: data?.quoted,\n        mentionsEveryOne: data?.mentionsEveryOne,\n        mentioned: data?.mentioned,\n      },\n    );\n\n    return result;\n  }\n\n  public async mediaMessage(data: SendMediaDto, file?: any, isIntegration = false) {\n    const mediaData: SendMediaDto = { ...data };\n\n    if (file) mediaData.media = file.buffer.toString('base64');\n\n    const generate = await this.prepareMediaMessage(mediaData);\n\n    const mediaSent = await this.sendMessageWithTyping(\n      data.number,\n      { ...generate.message },\n      {\n        delay: data?.delay,\n        presence: 'composing',\n        quoted: data?.quoted,\n        mentionsEveryOne: data?.mentionsEveryOne,\n        mentioned: data?.mentioned,\n      },\n      isIntegration,\n    );\n\n    return mediaSent;\n  }\n\n  public async ptvMessage(data: SendPtvDto, file?: any, isIntegration = false) {\n    const mediaData: SendMediaDto = {\n      number: data.number,\n      media: data.video,\n      mediatype: 'ptv',\n      delay: data?.delay,\n      quoted: data?.quoted,\n      mentionsEveryOne: data?.mentionsEveryOne,\n      mentioned: data?.mentioned,\n    };\n\n    if (file) mediaData.media = file.buffer.toString('base64');\n\n    const generate = await this.prepareMediaMessage(mediaData);\n\n    const mediaSent = await this.sendMessageWithTyping(\n      data.number,\n      { ...generate.message },\n      {\n        delay: data?.delay,\n        presence: 'composing',\n        quoted: data?.quoted,\n        mentionsEveryOne: data?.mentionsEveryOne,\n        mentioned: data?.mentioned,\n      },\n      isIntegration,\n    );\n\n    return mediaSent;\n  }\n\n  public async processAudioMp4(audio: string) {\n    let inputStream: PassThrough;\n\n    if (isURL(audio)) {\n      const response = await axios.get(audio, { responseType: 'stream' });\n      inputStream = response.data;\n    } else {\n      const audioBuffer = Buffer.from(audio, 'base64');\n      inputStream = new PassThrough();\n      inputStream.end(audioBuffer);\n    }\n\n    return new Promise<Buffer>((resolve, reject) => {\n      const ffmpegProcess = spawn(ffmpegPath.path, [\n        '-i',\n        'pipe:0',\n        '-vn',\n        '-ab',\n        '128k',\n        '-ar',\n        '44100',\n        '-f',\n        'mp4',\n        '-movflags',\n        'frag_keyframe+empty_moov',\n        'pipe:1',\n      ]);\n\n      const outputChunks: Buffer[] = [];\n      let stderrData = '';\n\n      ffmpegProcess.stdout.on('data', (chunk) => {\n        outputChunks.push(chunk);\n      });\n\n      ffmpegProcess.stderr.on('data', (data) => {\n        stderrData += data.toString();\n        this.logger.verbose(`ffmpeg stderr: ${data}`);\n      });\n\n      ffmpegProcess.on('error', (error) => {\n        console.error('Error in ffmpeg process', error);\n        reject(error);\n      });\n\n      ffmpegProcess.on('close', (code) => {\n        if (code === 0) {\n          this.logger.verbose('Audio converted to mp4');\n          const outputBuffer = Buffer.concat(outputChunks);\n          resolve(outputBuffer);\n        } else {\n          this.logger.error(`ffmpeg exited with code ${code}`);\n          this.logger.error(`ffmpeg stderr: ${stderrData}`);\n          reject(new Error(`ffmpeg exited with code ${code}: ${stderrData}`));\n        }\n      });\n\n      inputStream.pipe(ffmpegProcess.stdin);\n\n      inputStream.on('error', (err) => {\n        console.error('Error in inputStream', err);\n        ffmpegProcess.stdin.end();\n        reject(err);\n      });\n    });\n  }\n\n  public async processAudio(audio: string): Promise<Buffer> {\n    if (process.env.API_AUDIO_CONVERTER) {\n      this.logger.verbose('Using audio converter API');\n      const formData = new FormData();\n\n      if (isURL(audio)) {\n        formData.append('url', audio);\n      } else {\n        formData.append('base64', audio);\n      }\n\n      const { data } = await axios.post(process.env.API_AUDIO_CONVERTER, formData, {\n        headers: {\n          ...formData.getHeaders(),\n          apikey: process.env.API_AUDIO_CONVERTER_KEY,\n        },\n      });\n\n      if (!data.audio) {\n        throw new InternalServerErrorException('Failed to convert audio');\n      }\n\n      this.logger.verbose('Audio converted');\n      return Buffer.from(data.audio, 'base64');\n    } else {\n      let inputAudioStream: PassThrough;\n\n      if (isURL(audio)) {\n        const timestamp = new Date().getTime();\n        const url = `${audio}?timestamp=${timestamp}`;\n\n        const config: any = {\n          responseType: 'stream',\n        };\n\n        const response = await axios.get(url, config);\n        inputAudioStream = response.data.pipe(new PassThrough());\n      } else {\n        const audioBuffer = Buffer.from(audio, 'base64');\n        inputAudioStream = new PassThrough();\n        inputAudioStream.end(audioBuffer);\n      }\n\n      return new Promise((resolve, reject) => {\n        const outputAudioStream = new PassThrough();\n        const chunks: Buffer[] = [];\n\n        outputAudioStream.on('data', (chunk) => chunks.push(chunk));\n        outputAudioStream.on('end', () => {\n          const outputBuffer = Buffer.concat(chunks);\n          resolve(outputBuffer);\n        });\n\n        outputAudioStream.on('error', (error) => {\n          console.log('error', error);\n          reject(error);\n        });\n\n        ffmpeg.setFfmpegPath(ffmpegPath.path);\n\n        ffmpeg(inputAudioStream)\n          .outputFormat('ogg')\n          .noVideo()\n          .audioCodec('libopus')\n          .addOutputOptions('-avoid_negative_ts make_zero')\n          .audioChannels(1)\n          .pipe(outputAudioStream, { end: true })\n          .on('error', function (error) {\n            console.log('error', error);\n            reject(error);\n          });\n      });\n    }\n  }\n\n  public async audioWhatsapp(data: SendAudioDto, file?: any, isIntegration = false) {\n    const mediaData: SendAudioDto = { ...data };\n\n    if (file?.buffer) {\n      mediaData.audio = file.buffer.toString('base64');\n    } else if (!isURL(data.audio) && !isBase64(data.audio)) {\n      console.error('Invalid file or audio source');\n      throw new BadRequestException('File buffer, URL, or base64 audio is required');\n    }\n\n    if (!data?.encoding && data?.encoding !== false) {\n      data.encoding = true;\n    }\n\n    if (data?.encoding) {\n      const convert = await this.processAudio(mediaData.audio);\n\n      if (Buffer.isBuffer(convert)) {\n        const result = this.sendMessageWithTyping<AnyMessageContent>(\n          data.number,\n          {\n            audio: convert,\n            ptt: true,\n            mimetype: 'audio/ogg; codecs=opus',\n          },\n          { presence: 'recording', delay: data?.delay },\n          isIntegration,\n        );\n\n        return result;\n      } else {\n        throw new InternalServerErrorException('Failed to convert audio');\n      }\n    }\n\n    return await this.sendMessageWithTyping<AnyMessageContent>(\n      data.number,\n      {\n        audio: isURL(data.audio) ? { url: data.audio } : Buffer.from(data.audio, 'base64'),\n        ptt: true,\n        mimetype: 'audio/ogg; codecs=opus',\n      },\n      { presence: 'recording', delay: data?.delay },\n      isIntegration,\n    );\n  }\n\n  private generateRandomId(length = 11) {\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n    return result;\n  }\n\n  private toJSONString(button: Button): string {\n    const toString = (obj: any) => JSON.stringify(obj);\n\n    const json = {\n      call: () => toString({ display_text: button.displayText, phone_number: button.phoneNumber }),\n      reply: () => toString({ display_text: button.displayText, id: button.id }),\n      copy: () => toString({ display_text: button.displayText, copy_code: button.copyCode }),\n      url: () =>\n        toString({\n          display_text: button.displayText,\n          url: button.url,\n          merchant_url: button.url,\n        }),\n      pix: () =>\n        toString({\n          currency: button.currency,\n          total_amount: {\n            value: 0,\n            offset: 100,\n          },\n          reference_id: this.generateRandomId(),\n          type: 'physical-goods',\n          order: {\n            status: 'pending',\n            subtotal: {\n              value: 0,\n              offset: 100,\n            },\n            order_type: 'ORDER',\n            items: [\n              {\n                name: '',\n                amount: {\n                  value: 0,\n                  offset: 100,\n                },\n                quantity: 0,\n                sale_amount: {\n                  value: 0,\n                  offset: 100,\n                },\n              },\n            ],\n          },\n          payment_settings: [\n            {\n              type: 'pix_static_code',\n              pix_static_code: {\n                merchant_name: button.name,\n                key: button.key,\n                key_type: this.mapKeyType.get(button.keyType),\n              },\n            },\n          ],\n          share_payment_status: false,\n        }),\n    };\n\n    return json[button.type]?.() || '';\n  }\n\n  private readonly mapType = new Map<TypeButton, string>([\n    ['reply', 'quick_reply'],\n    ['copy', 'cta_copy'],\n    ['url', 'cta_url'],\n    ['call', 'cta_call'],\n    ['pix', 'payment_info'],\n  ]);\n\n  private readonly mapKeyType = new Map<KeyType, string>([\n    ['phone', 'PHONE'],\n    ['email', 'EMAIL'],\n    ['cpf', 'CPF'],\n    ['cnpj', 'CNPJ'],\n    ['random', 'EVP'],\n  ]);\n\n  public async buttonMessage(data: SendButtonsDto) {\n    if (data.buttons.length === 0) {\n      throw new BadRequestException('At least one button is required');\n    }\n\n    const hasReplyButtons = data.buttons.some((btn) => btn.type === 'reply');\n\n    const hasPixButton = data.buttons.some((btn) => btn.type === 'pix');\n\n    const hasOtherButtons = data.buttons.some((btn) => btn.type !== 'reply' && btn.type !== 'pix');\n\n    if (hasReplyButtons) {\n      if (data.buttons.length > 3) {\n        throw new BadRequestException('Maximum of 3 reply buttons allowed');\n      }\n      if (hasOtherButtons) {\n        throw new BadRequestException('Reply buttons cannot be mixed with other button types');\n      }\n    }\n\n    if (hasPixButton) {\n      if (data.buttons.length > 1) {\n        throw new BadRequestException('Only one PIX button is allowed');\n      }\n      if (hasOtherButtons) {\n        throw new BadRequestException('PIX button cannot be mixed with other button types');\n      }\n\n      const message: proto.IMessage = {\n        viewOnceMessage: {\n          message: {\n            interactiveMessage: {\n              nativeFlowMessage: {\n                buttons: [\n                  {\n                    name: this.mapType.get('pix'),\n                    buttonParamsJson: this.toJSONString(data.buttons[0]),\n                  },\n                ],\n                messageParamsJson: JSON.stringify({\n                  from: 'api',\n                  templateId: v4(),\n                }),\n              },\n            },\n          },\n        },\n      };\n\n      return await this.sendMessageWithTyping(data.number, message, {\n        delay: data?.delay,\n        presence: 'composing',\n        quoted: data?.quoted,\n        mentionsEveryOne: data?.mentionsEveryOne,\n        mentioned: data?.mentioned,\n      });\n    }\n\n    const generate = await (async () => {\n      if (data?.thumbnailUrl) {\n        return await this.prepareMediaMessage({\n          mediatype: 'image',\n          media: data.thumbnailUrl,\n        });\n      }\n    })();\n\n    const buttons = data.buttons.map((value) => {\n      return {\n        name: this.mapType.get(value.type),\n        buttonParamsJson: this.toJSONString(value),\n      };\n    });\n\n    const message: proto.IMessage = {\n      viewOnceMessage: {\n        message: {\n          interactiveMessage: {\n            body: {\n              text: (() => {\n                let t = '*' + data.title + '*';\n                if (data?.description) {\n                  t += '\\n\\n';\n                  t += data.description;\n                  t += '\\n';\n                }\n                return t;\n              })(),\n            },\n            footer: {\n              text: data?.footer,\n            },\n            header: (() => {\n              if (generate?.message?.imageMessage) {\n                return {\n                  hasMediaAttachment: !!generate.message.imageMessage,\n                  imageMessage: generate.message.imageMessage,\n                };\n              }\n            })(),\n            nativeFlowMessage: {\n              buttons: buttons,\n              messageParamsJson: JSON.stringify({\n                from: 'api',\n                templateId: v4(),\n              }),\n            },\n          },\n        },\n      },\n    };\n\n    return await this.sendMessageWithTyping(data.number, message, {\n      delay: data?.delay,\n      presence: 'composing',\n      quoted: data?.quoted,\n      mentionsEveryOne: data?.mentionsEveryOne,\n      mentioned: data?.mentioned,\n    });\n  }\n\n  public async locationMessage(data: SendLocationDto) {\n    return await this.sendMessageWithTyping(\n      data.number,\n      {\n        locationMessage: {\n          degreesLatitude: data.latitude,\n          degreesLongitude: data.longitude,\n          name: data?.name,\n          address: data?.address,\n        },\n      },\n      {\n        delay: data?.delay,\n        presence: 'composing',\n        quoted: data?.quoted,\n        mentionsEveryOne: data?.mentionsEveryOne,\n        mentioned: data?.mentioned,\n      },\n    );\n  }\n\n  public async listMessage(data: SendListDto) {\n    return await this.sendMessageWithTyping(\n      data.number,\n      {\n        listMessage: {\n          title: data.title,\n          description: data.description,\n          buttonText: data?.buttonText,\n          footerText: data?.footerText,\n          sections: data.sections,\n          listType: 2,\n        },\n      },\n      {\n        delay: data?.delay,\n        presence: 'composing',\n        quoted: data?.quoted,\n        mentionsEveryOne: data?.mentionsEveryOne,\n        mentioned: data?.mentioned,\n      },\n    );\n  }\n\n  public async contactMessage(data: SendContactDto) {\n    const message: proto.IMessage = {};\n\n    const vcard = (contact: ContactMessage) => {\n      let result = 'BEGIN:VCARD\\n' + 'VERSION:3.0\\n' + `N:${contact.fullName}\\n` + `FN:${contact.fullName}\\n`;\n\n      if (contact.organization) {\n        result += `ORG:${contact.organization};\\n`;\n      }\n\n      if (contact.email) {\n        result += `EMAIL:${contact.email}\\n`;\n      }\n\n      if (contact.url) {\n        result += `URL:${contact.url}\\n`;\n      }\n\n      if (!contact.wuid) {\n        contact.wuid = createJid(contact.phoneNumber);\n      }\n\n      result += `item1.TEL;waid=${contact.wuid}:${contact.phoneNumber}\\n` + 'item1.X-ABLabel:Celular\\n' + 'END:VCARD';\n\n      return result;\n    };\n\n    if (data.contact.length === 1) {\n      message.contactMessage = {\n        displayName: data.contact[0].fullName,\n        vcard: vcard(data.contact[0]),\n      };\n    } else {\n      message.contactsArrayMessage = {\n        displayName: `${data.contact.length} contacts`,\n        contacts: data.contact.map((contact) => {\n          return {\n            displayName: contact.fullName,\n            vcard: vcard(contact),\n          };\n        }),\n      };\n    }\n\n    return await this.sendMessageWithTyping(data.number, { ...message }, {});\n  }\n\n  public async reactionMessage(data: SendReactionDto) {\n    return await this.sendMessageWithTyping(data.key.remoteJid, {\n      reactionMessage: {\n        key: data.key,\n        text: data.reaction,\n      },\n    });\n  }\n\n  // Chat Controller\n  public async whatsappNumber(data: WhatsAppNumberDto) {\n    const jids: {\n      groups: { number: string; jid: string }[];\n      broadcast: { number: string; jid: string }[];\n      users: { number: string; jid: string; name?: string }[];\n    } = {\n      groups: [],\n      broadcast: [],\n      users: [],\n    };\n\n    data.numbers.forEach((number) => {\n      const jid = createJid(number);\n\n      if (isJidGroup(jid)) {\n        jids.groups.push({ number, jid });\n      } else if (jid === 'status@broadcast') {\n        jids.broadcast.push({ number, jid });\n      } else {\n        jids.users.push({ number, jid });\n      }\n    });\n\n    const onWhatsapp: OnWhatsAppDto[] = [];\n\n    // BROADCAST\n    onWhatsapp.push(...jids.broadcast.map(({ jid, number }) => new OnWhatsAppDto(jid, false, number)));\n\n    // GROUPS\n    const groups = await Promise.all(\n      jids.groups.map(async ({ jid, number }) => {\n        const group = await this.findGroup({ groupJid: jid }, 'inner');\n\n        if (!group) {\n          new OnWhatsAppDto(jid, false, number);\n        }\n\n        return new OnWhatsAppDto(group.id, !!group?.id, number, group?.subject);\n      }),\n    );\n    onWhatsapp.push(...groups);\n\n    // USERS\n    const contacts: any[] = await this.prismaRepository.contact.findMany({\n      where: {\n        instanceId: this.instanceId,\n        remoteJid: {\n          in: jids.users.map(({ jid }) => jid),\n        },\n      },\n    });\n\n    const numbersToVerify = jids.users.map(({ jid }) => jid.replace('+', ''));\n\n    const cachedNumbers = await getOnWhatsappCache(numbersToVerify);\n    const filteredNumbers = numbersToVerify.filter(\n      (jid) => !cachedNumbers.some((cached) => cached.jidOptions.includes(jid)),\n    );\n\n    const verify = await this.client.onWhatsApp(...filteredNumbers);\n    const users: OnWhatsAppDto[] = await Promise.all(\n      jids.users.map(async (user) => {\n        let numberVerified: (typeof verify)[0] | null = null;\n\n        const cached = cachedNumbers.find((cached) => cached.jidOptions.includes(user.jid.replace('+', '')));\n        if (cached) {\n          return {\n            exists: true,\n            jid: cached.remoteJid,\n            name: contacts.find((c) => c.remoteJid === cached.remoteJid)?.pushName,\n            number: user.number,\n          };\n        }\n\n        // Brazilian numbers\n        if (user.number.startsWith('55')) {\n          const numberWithDigit =\n            user.number.slice(4, 5) === '9' && user.number.length === 13\n              ? user.number\n              : `${user.number.slice(0, 4)}9${user.number.slice(4)}`;\n          const numberWithoutDigit =\n            user.number.length === 12 ? user.number : user.number.slice(0, 4) + user.number.slice(5);\n\n          numberVerified = verify.find(\n            (v) => v.jid === `${numberWithDigit}@s.whatsapp.net` || v.jid === `${numberWithoutDigit}@s.whatsapp.net`,\n          );\n        }\n\n        // Mexican/Argentina numbers\n        // Ref: https://faq.whatsapp.com/1294841057948784\n        if (!numberVerified && (user.number.startsWith('52') || user.number.startsWith('54'))) {\n          let prefix = '';\n          if (user.number.startsWith('52')) {\n            prefix = '';\n          }\n          if (user.number.startsWith('54')) {\n            prefix = '9';\n          }\n\n          const numberWithDigit =\n            user.number.slice(2, 3) === prefix && user.number.length === 13\n              ? user.number\n              : `${user.number.slice(0, 2)}${prefix}${user.number.slice(2)}`;\n          const numberWithoutDigit =\n            user.number.length === 12 ? user.number : user.number.slice(0, 2) + user.number.slice(3);\n\n          numberVerified = verify.find(\n            (v) => v.jid === `${numberWithDigit}@s.whatsapp.net` || v.jid === `${numberWithoutDigit}@s.whatsapp.net`,\n          );\n        }\n\n        if (!numberVerified) {\n          numberVerified = verify.find((v) => v.jid === user.jid);\n        }\n\n        const numberJid = numberVerified?.jid || user.jid;\n\n        return {\n          exists: !!numberVerified?.exists,\n          jid: numberJid,\n          name: contacts.find((c) => c.remoteJid === numberJid)?.pushName,\n          number: user.number,\n        };\n      }),\n    );\n\n    await saveOnWhatsappCache(users.filter((user) => user.exists).map((user) => ({ remoteJid: user.jid })));\n\n    onWhatsapp.push(...users);\n\n    return onWhatsapp;\n  }\n\n  public async markMessageAsRead(data: ReadMessageDto) {\n    try {\n      const keys: proto.IMessageKey[] = [];\n      data.readMessages.forEach((read) => {\n        if (isJidGroup(read.remoteJid) || isJidUser(read.remoteJid)) {\n          keys.push({\n            remoteJid: read.remoteJid,\n            fromMe: read.fromMe,\n            id: read.id,\n          });\n        }\n      });\n      await this.client.readMessages(keys);\n      return { message: 'Read messages', read: 'success' };\n    } catch (error) {\n      throw new InternalServerErrorException('Read messages fail', error.toString());\n    }\n  }\n\n  public async getLastMessage(number: string) {\n    const where: any = {\n      key: {\n        remoteJid: number,\n      },\n      instanceId: this.instance.id,\n    };\n\n    const messages = await this.prismaRepository.message.findMany({\n      where,\n      orderBy: {\n        messageTimestamp: 'desc',\n      },\n      take: 1,\n    });\n\n    if (messages.length === 0) {\n      throw new NotFoundException('Messages not found');\n    }\n\n    let lastMessage = messages.pop();\n\n    for (const message of messages) {\n      if (message.messageTimestamp >= lastMessage.messageTimestamp) {\n        lastMessage = message;\n      }\n    }\n\n    return lastMessage as unknown as LastMessage;\n  }\n\n  public async archiveChat(data: ArchiveChatDto) {\n    try {\n      let last_message = data.lastMessage;\n      let number = data.chat;\n\n      if (!last_message && number) {\n        last_message = await this.getLastMessage(number);\n      } else {\n        last_message = data.lastMessage;\n        last_message.messageTimestamp = last_message?.messageTimestamp ?? Date.now();\n        number = last_message?.key?.remoteJid;\n      }\n\n      if (!last_message || Object.keys(last_message).length === 0) {\n        throw new NotFoundException('Last message not found');\n      }\n\n      await this.client.chatModify(\n        {\n          archive: data.archive,\n          lastMessages: [last_message],\n        },\n        createJid(number),\n      );\n\n      return {\n        chatId: number,\n        archived: true,\n      };\n    } catch (error) {\n      throw new InternalServerErrorException({\n        archived: false,\n        message: ['An error occurred while archiving the chat. Open a calling.', error.toString()],\n      });\n    }\n  }\n\n  public async markChatUnread(data: MarkChatUnreadDto) {\n    try {\n      let last_message = data.lastMessage;\n      let number = data.chat;\n\n      if (!last_message && number) {\n        last_message = await this.getLastMessage(number);\n      } else {\n        last_message = data.lastMessage;\n        last_message.messageTimestamp = last_message?.messageTimestamp ?? Date.now();\n        number = last_message?.key?.remoteJid;\n      }\n\n      if (!last_message || Object.keys(last_message).length === 0) {\n        throw new NotFoundException('Last message not found');\n      }\n\n      await this.client.chatModify(\n        {\n          markRead: false,\n          lastMessages: [last_message],\n        },\n        createJid(number),\n      );\n\n      return {\n        chatId: number,\n        markedChatUnread: true,\n      };\n    } catch (error) {\n      throw new InternalServerErrorException({\n        markedChatUnread: false,\n        message: ['An error occurred while marked unread the chat. Open a calling.', error.toString()],\n      });\n    }\n  }\n\n  public async deleteMessage(del: DeleteMessage) {\n    try {\n      const response = await this.client.sendMessage(del.remoteJid, { delete: del });\n      if (response) {\n        const messageId = response.message?.protocolMessage?.key?.id;\n        if (messageId) {\n          const isLogicalDeleted = configService.get<Database>('DATABASE').DELETE_DATA.LOGICAL_MESSAGE_DELETE;\n          let message = await this.prismaRepository.message.findFirst({\n            where: {\n              key: {\n                path: ['id'],\n                equals: messageId,\n              },\n            },\n          });\n          if (isLogicalDeleted) {\n            if (!message) return response;\n            const existingKey = typeof message?.key === 'object' && message.key !== null ? message.key : {};\n            message = await this.prismaRepository.message.update({\n              where: { id: message.id },\n              data: {\n                key: {\n                  ...existingKey,\n                  deleted: true,\n                },\n                status: 'DELETED',\n              },\n            });\n            const messageUpdate: any = {\n              messageId: message.id,\n              keyId: messageId,\n              remoteJid: response.key.remoteJid,\n              fromMe: response.key.fromMe,\n              participant: response.key?.remoteJid,\n              status: 'DELETED',\n              instanceId: this.instanceId,\n            };\n            await this.prismaRepository.messageUpdate.create({\n              data: messageUpdate,\n            });\n          } else {\n            await this.prismaRepository.message.deleteMany({\n              where: {\n                id: message.id,\n              },\n            });\n          }\n          this.sendDataWebhook(Events.MESSAGES_DELETE, {\n            id: message.id,\n            instanceId: message.instanceId,\n            key: message.key,\n            messageType: message.messageType,\n            status: 'DELETED',\n            source: message.source,\n            messageTimestamp: message.messageTimestamp,\n            pushName: message.pushName,\n            participant: message.participant,\n            message: message.message,\n          });\n        }\n      }\n\n      return response;\n    } catch (error) {\n      throw new InternalServerErrorException('Error while deleting message for everyone', error?.toString());\n    }\n  }\n\n  public async getBase64FromMediaMessage(data: getBase64FromMediaMessageDto, getBuffer = false) {\n    try {\n      const m = data?.message;\n      const convertToMp4 = data?.convertToMp4 ?? false;\n\n      const msg = m?.message ? m : ((await this.getMessage(m.key, true)) as proto.IWebMessageInfo);\n\n      if (!msg) {\n        throw 'Message not found';\n      }\n\n      for (const subtype of MessageSubtype) {\n        if (msg.message[subtype]) {\n          msg.message = msg.message[subtype].message;\n        }\n      }\n\n      let mediaMessage: any;\n      let mediaType: string;\n\n      for (const type of TypeMediaMessage) {\n        mediaMessage = msg.message[type];\n        if (mediaMessage) {\n          mediaType = type;\n          break;\n        }\n      }\n\n      if (!mediaMessage) {\n        throw 'The message is not of the media type';\n      }\n\n      if (typeof mediaMessage['mediaKey'] === 'object') {\n        msg.message = JSON.parse(JSON.stringify(msg.message));\n      }\n\n      const buffer = await downloadMediaMessage(\n        { key: msg?.key, message: msg?.message },\n        'buffer',\n        {},\n        {\n          logger: P({ level: 'error' }) as any,\n          reuploadRequest: this.client.updateMediaMessage,\n        },\n      );\n      const typeMessage = getContentType(msg.message);\n\n      const ext = mimeTypes.extension(mediaMessage?.['mimetype']);\n      const fileName = mediaMessage?.['fileName'] || `${msg.key.id}.${ext}` || `${v4()}.${ext}`;\n\n      if (convertToMp4 && typeMessage === 'audioMessage') {\n        try {\n          const convert = await this.processAudioMp4(buffer.toString('base64'));\n\n          if (Buffer.isBuffer(convert)) {\n            const result = {\n              mediaType,\n              fileName,\n              caption: mediaMessage['caption'],\n              size: {\n                fileLength: mediaMessage['fileLength'],\n                height: mediaMessage['height'],\n                width: mediaMessage['width'],\n              },\n              mimetype: 'audio/mp4',\n              base64: convert.toString('base64'),\n              buffer: getBuffer ? convert : null,\n            };\n\n            return result;\n          }\n        } catch (error) {\n          this.logger.error('Error converting audio to mp4:');\n          this.logger.error(error);\n          throw new BadRequestException('Failed to convert audio to MP4');\n        }\n      }\n\n      return {\n        mediaType,\n        fileName,\n        caption: mediaMessage['caption'],\n        size: {\n          fileLength: mediaMessage['fileLength'],\n          height: mediaMessage['height'],\n          width: mediaMessage['width'],\n        },\n        mimetype: mediaMessage['mimetype'],\n        base64: buffer.toString('base64'),\n        buffer: getBuffer ? buffer : null,\n      };\n    } catch (error) {\n      this.logger.error('Error processing media message:');\n      this.logger.error(error);\n      throw new BadRequestException(error.toString());\n    }\n  }\n\n  public async fetchPrivacySettings() {\n    const privacy = await this.client.fetchPrivacySettings();\n\n    return {\n      readreceipts: privacy.readreceipts,\n      profile: privacy.profile,\n      status: privacy.status,\n      online: privacy.online,\n      last: privacy.last,\n      groupadd: privacy.groupadd,\n    };\n  }\n\n  public async updatePrivacySettings(settings: PrivacySettingDto) {\n    try {\n      await this.client.updateReadReceiptsPrivacy(settings.readreceipts);\n      await this.client.updateProfilePicturePrivacy(settings.profile);\n      await this.client.updateStatusPrivacy(settings.status);\n      await this.client.updateOnlinePrivacy(settings.online);\n      await this.client.updateLastSeenPrivacy(settings.last);\n      await this.client.updateGroupsAddPrivacy(settings.groupadd);\n\n      this.reloadConnection();\n\n      return {\n        update: 'success',\n        data: {\n          readreceipts: settings.readreceipts,\n          profile: settings.profile,\n          status: settings.status,\n          online: settings.online,\n          last: settings.last,\n          groupadd: settings.groupadd,\n        },\n      };\n    } catch (error) {\n      throw new InternalServerErrorException('Error updating privacy settings', error.toString());\n    }\n  }\n\n  public async fetchBusinessProfile(number: string): Promise<NumberBusiness> {\n    try {\n      const jid = number ? createJid(number) : this.instance.wuid;\n\n      const profile = await this.client.getBusinessProfile(jid);\n\n      if (!profile) {\n        const info = await this.whatsappNumber({ numbers: [jid] });\n\n        return {\n          isBusiness: false,\n          message: 'Not is business profile',\n          ...info?.shift(),\n        };\n      }\n\n      return {\n        isBusiness: true,\n        ...profile,\n      };\n    } catch (error) {\n      throw new InternalServerErrorException('Error updating profile name', error.toString());\n    }\n  }\n\n  public async updateProfileName(name: string) {\n    try {\n      await this.client.updateProfileName(name);\n\n      return { update: 'success' };\n    } catch (error) {\n      throw new InternalServerErrorException('Error updating profile name', error.toString());\n    }\n  }\n\n  public async updateProfileStatus(status: string) {\n    try {\n      await this.client.updateProfileStatus(status);\n\n      return { update: 'success' };\n    } catch (error) {\n      throw new InternalServerErrorException('Error updating profile status', error.toString());\n    }\n  }\n\n  public async updateProfilePicture(picture: string) {\n    try {\n      let pic: WAMediaUpload;\n      if (isURL(picture)) {\n        const timestamp = new Date().getTime();\n        const url = `${picture}?timestamp=${timestamp}`;\n\n        let config: any = {\n          responseType: 'arraybuffer',\n        };\n\n        if (this.localProxy?.enabled) {\n          config = {\n            ...config,\n            httpsAgent: makeProxyAgent({\n              host: this.localProxy.host,\n              port: this.localProxy.port,\n              protocol: this.localProxy.protocol,\n              username: this.localProxy.username,\n              password: this.localProxy.password,\n            }),\n          };\n        }\n\n        pic = (await axios.get(url, config)).data;\n      } else if (isBase64(picture)) {\n        pic = Buffer.from(picture, 'base64');\n      } else {\n        throw new BadRequestException('\"profilePicture\" must be a url or a base64');\n      }\n\n      await this.client.updateProfilePicture(this.instance.wuid, pic);\n\n      this.reloadConnection();\n\n      return { update: 'success' };\n    } catch (error) {\n      throw new InternalServerErrorException('Error updating profile picture', error.toString());\n    }\n  }\n\n  public async removeProfilePicture() {\n    try {\n      await this.client.removeProfilePicture(this.instance.wuid);\n\n      this.reloadConnection();\n\n      return { update: 'success' };\n    } catch (error) {\n      throw new InternalServerErrorException('Error removing profile picture', error.toString());\n    }\n  }\n\n  public async blockUser(data: BlockUserDto) {\n    try {\n      const { number } = data;\n\n      const isWA = (await this.whatsappNumber({ numbers: [number] }))?.shift();\n\n      if (!isWA.exists && !isJidGroup(isWA.jid) && !isWA.jid.includes('@broadcast')) {\n        throw new BadRequestException(isWA);\n      }\n\n      const sender = isWA.jid;\n\n      await this.client.updateBlockStatus(sender, data.status);\n\n      return { block: 'success' };\n    } catch (error) {\n      throw new InternalServerErrorException('Error blocking user', error.toString());\n    }\n  }\n\n  private async formatUpdateMessage(data: UpdateMessageDto) {\n    try {\n      const msg: any = await this.getMessage(data.key, true);\n\n      if (msg?.messageType === 'conversation' || msg?.messageType === 'extendedTextMessage') {\n        return {\n          text: data.text,\n        };\n      }\n\n      if (msg?.messageType === 'imageMessage') {\n        return {\n          image: msg?.message?.imageMessage,\n          caption: data.text,\n        };\n      }\n\n      if (msg?.messageType === 'videoMessage') {\n        return {\n          video: msg?.message?.videoMessage,\n          caption: data.text,\n        };\n      }\n\n      return null;\n    } catch (error) {\n      this.logger.error(error);\n      throw new BadRequestException(error.toString());\n    }\n  }\n\n  public async updateMessage(data: UpdateMessageDto) {\n    const jid = createJid(data.number);\n\n    const options = await this.formatUpdateMessage(data);\n\n    if (!options) {\n      this.logger.error('Message not compatible');\n      throw new BadRequestException('Message not compatible');\n    }\n\n    try {\n      const oldMessage: any = await this.getMessage(data.key, true);\n      if (!oldMessage) throw new NotFoundException('Message not found');\n      if (oldMessage?.key?.remoteJid !== jid) {\n        throw new BadRequestException('RemoteJid does not match');\n      }\n      if (oldMessage?.messageTimestamp > Date.now() + 900000) {\n        // 15 minutes in milliseconds\n        throw new BadRequestException('Message is older than 15 minutes');\n      }\n\n      const response = await this.client.sendMessage(jid, {\n        ...(options as any),\n        edit: data.key,\n      });\n      if (response) {\n        const messageId = response.message?.protocolMessage?.key?.id;\n        if (messageId) {\n          let message = await this.prismaRepository.message.findFirst({\n            where: {\n              key: {\n                path: ['id'],\n                equals: messageId,\n              },\n            },\n          });\n          if (!message) throw new NotFoundException('Message not found');\n\n          if (!(message.key.valueOf() as any).fromMe) {\n            new BadRequestException('You cannot edit others messages');\n          }\n          if ((message.key.valueOf() as any)?.deleted) {\n            new BadRequestException('You cannot edit deleted messages');\n          }\n          if (oldMessage.messageType === 'conversation' || oldMessage.messageType === 'extendedTextMessage') {\n            oldMessage.message.conversation = data.text;\n          } else {\n            oldMessage.message[oldMessage.messageType].caption = data.text;\n          }\n          message = await this.prismaRepository.message.update({\n            where: { id: message.id },\n            data: {\n              message: oldMessage.message,\n              status: 'EDITED',\n              messageTimestamp: Math.floor(Date.now() / 1000), // Convert to int32 by dividing by 1000 to get seconds\n            },\n          });\n          const messageUpdate: any = {\n            messageId: message.id,\n            keyId: messageId,\n            remoteJid: response.key.remoteJid,\n            fromMe: response.key.fromMe,\n            participant: response.key?.remoteJid,\n            status: 'EDITED',\n            instanceId: this.instanceId,\n          };\n          await this.prismaRepository.messageUpdate.create({\n            data: messageUpdate,\n          });\n\n          this.sendDataWebhook(Events.MESSAGES_EDITED, {\n            id: message.id,\n            instanceId: message.instanceId,\n            key: message.key,\n            messageType: message.messageType,\n            status: 'EDITED',\n            source: message.source,\n            messageTimestamp: message.messageTimestamp,\n            pushName: message.pushName,\n            participant: message.participant,\n            message: message.message,\n          });\n        }\n      }\n\n      return response;\n    } catch (error) {\n      this.logger.error(error);\n      throw error;\n    }\n  }\n\n  public async fetchLabels(): Promise<LabelDto[]> {\n    const labels = await this.prismaRepository.label.findMany({\n      where: {\n        instanceId: this.instanceId,\n      },\n    });\n\n    return labels.map((label) => ({\n      color: label.color,\n      name: label.name,\n      id: label.labelId,\n      predefinedId: label.predefinedId,\n    }));\n  }\n\n  public async handleLabel(data: HandleLabelDto) {\n    const whatsappContact = await this.whatsappNumber({ numbers: [data.number] });\n    if (whatsappContact.length === 0) {\n      throw new NotFoundException('Number not found');\n    }\n    const contact = whatsappContact[0];\n    if (!contact.exists) {\n      throw new NotFoundException('Number is not on WhatsApp');\n    }\n\n    try {\n      if (data.action === 'add') {\n        await this.client.addChatLabel(contact.jid, data.labelId);\n        await this.addLabel(data.labelId, this.instanceId, contact.jid);\n\n        return { numberJid: contact.jid, labelId: data.labelId, add: true };\n      }\n      if (data.action === 'remove') {\n        await this.client.removeChatLabel(contact.jid, data.labelId);\n        await this.removeLabel(data.labelId, this.instanceId, contact.jid);\n\n        return { numberJid: contact.jid, labelId: data.labelId, remove: true };\n      }\n    } catch (error) {\n      throw new BadRequestException(`Unable to ${data.action} label to chat`, error.toString());\n    }\n  }\n\n  // Group\n  private async updateGroupMetadataCache(groupJid: string) {\n    try {\n      const meta = await this.client.groupMetadata(groupJid);\n\n      const cacheConf = this.configService.get<CacheConf>('CACHE');\n\n      if ((cacheConf?.REDIS?.ENABLED && cacheConf?.REDIS?.URI !== '') || cacheConf?.LOCAL?.ENABLED) {\n        this.logger.verbose(`Updating cache for group: ${groupJid}`);\n        await groupMetadataCache.set(groupJid, {\n          timestamp: Date.now(),\n          data: meta,\n        });\n      }\n\n      return meta;\n    } catch (error) {\n      this.logger.error(error);\n      return null;\n    }\n  }\n\n  private getGroupMetadataCache = async (groupJid: string) => {\n    if (!isJidGroup(groupJid)) return null;\n\n    const cacheConf = this.configService.get<CacheConf>('CACHE');\n\n    if ((cacheConf?.REDIS?.ENABLED && cacheConf?.REDIS?.URI !== '') || cacheConf?.LOCAL?.ENABLED) {\n      if (await groupMetadataCache?.has(groupJid)) {\n        console.log(`Cache request for group: ${groupJid}`);\n        const meta = await groupMetadataCache.get(groupJid);\n\n        if (Date.now() - meta.timestamp > 3600000) {\n          await this.updateGroupMetadataCache(groupJid);\n        }\n\n        return meta.data;\n      }\n\n      console.log(`Cache request for group: ${groupJid} - not found`);\n      return await this.updateGroupMetadataCache(groupJid);\n    }\n\n    return await this.findGroup({ groupJid }, 'inner');\n  };\n\n  public async createGroup(create: CreateGroupDto) {\n    try {\n      const participants = (await this.whatsappNumber({ numbers: create.participants }))\n        .filter((participant) => participant.exists)\n        .map((participant) => participant.jid);\n      const { id } = await this.client.groupCreate(create.subject, participants);\n\n      if (create?.description) {\n        await this.client.groupUpdateDescription(id, create.description);\n      }\n\n      if (create?.promoteParticipants) {\n        await this.updateGParticipant({\n          groupJid: id,\n          action: 'promote',\n          participants: participants,\n        });\n      }\n\n      const group = await this.client.groupMetadata(id);\n\n      return group;\n    } catch (error) {\n      this.logger.error(error);\n      throw new InternalServerErrorException('Error creating group', error.toString());\n    }\n  }\n\n  public async updateGroupPicture(picture: GroupPictureDto) {\n    try {\n      let pic: WAMediaUpload;\n      if (isURL(picture.image)) {\n        const timestamp = new Date().getTime();\n        const url = `${picture.image}?timestamp=${timestamp}`;\n\n        let config: any = {\n          responseType: 'arraybuffer',\n        };\n\n        if (this.localProxy?.enabled) {\n          config = {\n            ...config,\n            httpsAgent: makeProxyAgent({\n              host: this.localProxy.host,\n              port: this.localProxy.port,\n              protocol: this.localProxy.protocol,\n              username: this.localProxy.username,\n              password: this.localProxy.password,\n            }),\n          };\n        }\n\n        pic = (await axios.get(url, config)).data;\n      } else if (isBase64(picture.image)) {\n        pic = Buffer.from(picture.image, 'base64');\n      } else {\n        throw new BadRequestException('\"profilePicture\" must be a url or a base64');\n      }\n      await this.client.updateProfilePicture(picture.groupJid, pic);\n\n      return { update: 'success' };\n    } catch (error) {\n      throw new InternalServerErrorException('Error update group picture', error.toString());\n    }\n  }\n\n  public async updateGroupSubject(data: GroupSubjectDto) {\n    try {\n      await this.client.groupUpdateSubject(data.groupJid, data.subject);\n\n      return { update: 'success' };\n    } catch (error) {\n      throw new InternalServerErrorException('Error updating group subject', error.toString());\n    }\n  }\n\n  public async updateGroupDescription(data: GroupDescriptionDto) {\n    try {\n      await this.client.groupUpdateDescription(data.groupJid, data.description);\n\n      return { update: 'success' };\n    } catch (error) {\n      throw new InternalServerErrorException('Error updating group description', error.toString());\n    }\n  }\n\n  public async findGroup(id: GroupJid, reply: 'inner' | 'out' = 'out') {\n    try {\n      const group = await this.client.groupMetadata(id.groupJid);\n\n      if (!group) {\n        this.logger.error('Group not found');\n        return null;\n      }\n\n      const picture = await this.profilePicture(group.id);\n\n      return {\n        id: group.id,\n        subject: group.subject,\n        subjectOwner: group.subjectOwner,\n        subjectTime: group.subjectTime,\n        pictureUrl: picture.profilePictureUrl,\n        size: group.participants.length,\n        creation: group.creation,\n        owner: group.owner,\n        desc: group.desc,\n        descId: group.descId,\n        restrict: group.restrict,\n        announce: group.announce,\n        participants: group.participants,\n        isCommunity: group.isCommunity,\n        isCommunityAnnounce: group.isCommunityAnnounce,\n        linkedParent: group.linkedParent,\n      };\n    } catch (error) {\n      if (reply === 'inner') {\n        return;\n      }\n      throw new NotFoundException('Error fetching group', error.toString());\n    }\n  }\n\n  public async fetchAllGroups(getParticipants: GetParticipant) {\n    const fetch = Object.values(await this?.client?.groupFetchAllParticipating());\n\n    let groups = [];\n    for (const group of fetch) {\n      const picture = await this.profilePicture(group.id);\n\n      const result = {\n        id: group.id,\n        subject: group.subject,\n        subjectOwner: group.subjectOwner,\n        subjectTime: group.subjectTime,\n        pictureUrl: picture?.profilePictureUrl,\n        size: group.participants.length,\n        creation: group.creation,\n        owner: group.owner,\n        desc: group.desc,\n        descId: group.descId,\n        restrict: group.restrict,\n        announce: group.announce,\n        isCommunity: group.isCommunity,\n        isCommunityAnnounce: group.isCommunityAnnounce,\n        linkedParent: group.linkedParent,\n      };\n\n      if (getParticipants.getParticipants == 'true') {\n        result['participants'] = group.participants;\n      }\n\n      groups = [...groups, result];\n    }\n\n    return groups;\n  }\n\n  public async inviteCode(id: GroupJid) {\n    try {\n      const code = await this.client.groupInviteCode(id.groupJid);\n      return { inviteUrl: `https://chat.whatsapp.com/${code}`, inviteCode: code };\n    } catch (error) {\n      throw new NotFoundException('No invite code', error.toString());\n    }\n  }\n\n  public async inviteInfo(id: GroupInvite) {\n    try {\n      return await this.client.groupGetInviteInfo(id.inviteCode);\n    } catch (error) {\n      throw new NotFoundException('No invite info', id.inviteCode);\n    }\n  }\n\n  public async sendInvite(id: GroupSendInvite) {\n    try {\n      const inviteCode = await this.inviteCode({ groupJid: id.groupJid });\n\n      const inviteUrl = inviteCode.inviteUrl;\n\n      const numbers = id.numbers.map((number) => createJid(number));\n      const description = id.description ?? '';\n\n      const msg = `${description}\\n\\n${inviteUrl}`;\n\n      const message = {\n        conversation: msg,\n      };\n\n      for await (const number of numbers) {\n        await this.sendMessageWithTyping(number, message);\n      }\n\n      return { send: true, inviteUrl };\n    } catch (error) {\n      throw new NotFoundException('No send invite');\n    }\n  }\n\n  public async acceptInviteCode(id: AcceptGroupInvite) {\n    try {\n      const groupJid = await this.client.groupAcceptInvite(id.inviteCode);\n      return { accepted: true, groupJid: groupJid };\n    } catch (error) {\n      throw new NotFoundException('Accept invite error', error.toString());\n    }\n  }\n\n  public async revokeInviteCode(id: GroupJid) {\n    try {\n      const inviteCode = await this.client.groupRevokeInvite(id.groupJid);\n      return { revoked: true, inviteCode };\n    } catch (error) {\n      throw new NotFoundException('Revoke error', error.toString());\n    }\n  }\n\n  public async findParticipants(id: GroupJid) {\n    try {\n      const participants = (await this.client.groupMetadata(id.groupJid)).participants;\n      const contacts = await this.prismaRepository.contact.findMany({\n        where: {\n          instanceId: this.instanceId,\n          remoteJid: {\n            in: participants.map((p) => p.id),\n          },\n        },\n      });\n      const parsedParticipants = participants.map((participant) => {\n        const contact = contacts.find((c) => c.remoteJid === participant.id);\n        return {\n          ...participant,\n          name: participant.name ?? contact?.pushName,\n          imgUrl: participant.imgUrl ?? contact?.profilePicUrl,\n        };\n      });\n\n      const usersContacts = parsedParticipants.filter((c) => c.id.includes('@s.whatsapp'));\n      if (usersContacts) {\n        await saveOnWhatsappCache(usersContacts.map((c) => ({ remoteJid: c.id })));\n      }\n\n      return { participants: parsedParticipants };\n    } catch (error) {\n      console.error(error);\n      throw new NotFoundException('No participants', error.toString());\n    }\n  }\n\n  public async updateGParticipant(update: GroupUpdateParticipantDto) {\n    try {\n      const participants = update.participants.map((p) => createJid(p));\n      const updateParticipants = await this.client.groupParticipantsUpdate(\n        update.groupJid,\n        participants,\n        update.action,\n      );\n      return { updateParticipants: updateParticipants };\n    } catch (error) {\n      throw new BadRequestException('Error updating participants', error.toString());\n    }\n  }\n\n  public async updateGSetting(update: GroupUpdateSettingDto) {\n    try {\n      const updateSetting = await this.client.groupSettingUpdate(update.groupJid, update.action);\n      return { updateSetting: updateSetting };\n    } catch (error) {\n      throw new BadRequestException('Error updating setting', error.toString());\n    }\n  }\n\n  public async toggleEphemeral(update: GroupToggleEphemeralDto) {\n    try {\n      await this.client.groupToggleEphemeral(update.groupJid, update.expiration);\n      return { success: true };\n    } catch (error) {\n      throw new BadRequestException('Error updating setting', error.toString());\n    }\n  }\n\n  public async leaveGroup(id: GroupJid) {\n    try {\n      await this.client.groupLeave(id.groupJid);\n      return { groupJid: id.groupJid, leave: true };\n    } catch (error) {\n      throw new BadRequestException('Unable to leave the group', error.toString());\n    }\n  }\n\n  public async templateMessage() {\n    throw new Error('Method not available in the Baileys service');\n  }\n\n  private prepareMessage(message: proto.IWebMessageInfo): any {\n    const contentType = getContentType(message.message);\n    const contentMsg = message?.message[contentType] as any;\n\n    const messageRaw = {\n      key: message.key,\n      pushName: message.pushName,\n      status: status[message.status],\n      message: { ...message.message },\n      contextInfo: contentMsg?.contextInfo,\n      messageType: contentType || 'unknown',\n      messageTimestamp: message.messageTimestamp as number,\n      instanceId: this.instanceId,\n      source: getDevice(message.key.id),\n    };\n\n    if (!messageRaw.status && message.key.fromMe === false) {\n      messageRaw.status = status[3]; // DELIVERED MESSAGE\n    }\n\n    if (messageRaw.message.extendedTextMessage) {\n      messageRaw.messageType = 'conversation';\n      messageRaw.message.conversation = messageRaw.message.extendedTextMessage.text;\n      delete messageRaw.message.extendedTextMessage;\n    }\n\n    if (messageRaw.message.documentWithCaptionMessage) {\n      messageRaw.messageType = 'documentMessage';\n      messageRaw.message.documentMessage = messageRaw.message.documentWithCaptionMessage.message.documentMessage;\n      delete messageRaw.message.documentWithCaptionMessage;\n    }\n\n    const quotedMessage = messageRaw?.contextInfo?.quotedMessage;\n    if (quotedMessage) {\n      if (quotedMessage.extendedTextMessage) {\n        quotedMessage.conversation = quotedMessage.extendedTextMessage.text;\n        delete quotedMessage.extendedTextMessage;\n      }\n\n      if (quotedMessage.documentWithCaptionMessage) {\n        quotedMessage.documentMessage = quotedMessage.documentWithCaptionMessage.message.documentMessage;\n        delete quotedMessage.documentWithCaptionMessage;\n      }\n    }\n\n    return messageRaw;\n  }\n\n  private async syncChatwootLostMessages() {\n    if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED && this.localChatwoot?.enabled) {\n      const chatwootConfig = await this.findChatwoot();\n      const prepare = (message: any) => this.prepareMessage(message);\n      this.chatwootService.syncLostMessages({ instanceName: this.instance.name }, chatwootConfig, prepare);\n\n      const task = cron.schedule('0,30 * * * *', async () => {\n        this.chatwootService.syncLostMessages({ instanceName: this.instance.name }, chatwootConfig, prepare);\n      });\n      task.start();\n    }\n  }\n\n  private async updateMessagesReadedByTimestamp(remoteJid: string, timestamp?: number): Promise<number> {\n    if (timestamp === undefined || timestamp === null) return 0;\n\n    const result = await this.prismaRepository.message.updateMany({\n      where: {\n        AND: [\n          { key: { path: ['remoteJid'], equals: remoteJid } },\n          { key: { path: ['fromMe'], equals: false } },\n          { messageTimestamp: { lte: timestamp } },\n          {\n            OR: [{ status: null }, { status: status[3] }],\n          },\n        ],\n      },\n      data: { status: status[4] },\n    });\n\n    if (result) {\n      if (result.count > 0) {\n        this.updateChatUnreadMessages(remoteJid);\n      }\n\n      return result.count;\n    }\n\n    return 0;\n  }\n\n  private async updateChatUnreadMessages(remoteJid: string): Promise<number> {\n    const [chat, unreadMessages] = await Promise.all([\n      this.prismaRepository.chat.findFirst({ where: { remoteJid } }),\n      this.prismaRepository.message.count({\n        where: {\n          AND: [\n            { key: { path: ['remoteJid'], equals: remoteJid } },\n            { key: { path: ['fromMe'], equals: false } },\n            { status: { equals: status[3] } },\n          ],\n        },\n      }),\n    ]);\n\n    if (chat && chat.unreadMessages !== unreadMessages) {\n      await this.prismaRepository.chat.update({\n        where: { id: chat.id },\n        data: { unreadMessages },\n      });\n    }\n\n    return unreadMessages;\n  }\n\n  private async addLabel(labelId: string, instanceId: string, chatId: string) {\n    const id = cuid();\n\n    await this.prismaRepository.$executeRawUnsafe(\n      `INSERT INTO \"Chat\" (\"id\", \"instanceId\", \"remoteJid\", \"labels\", \"createdAt\", \"updatedAt\")\n       VALUES ($4, $2, $3, to_jsonb(ARRAY[$1]::text[]), NOW(), NOW()) ON CONFLICT (\"instanceId\", \"remoteJid\")\n     DO\n      UPDATE\n          SET \"labels\" = (\n          SELECT to_jsonb(array_agg(DISTINCT elem))\n          FROM (\n          SELECT jsonb_array_elements_text(\"Chat\".\"labels\") AS elem\n          UNION\n          SELECT $1::text AS elem\n          ) sub\n          ),\n          \"updatedAt\" = NOW();`,\n      labelId,\n      instanceId,\n      chatId,\n      id,\n    );\n  }\n\n  private async removeLabel(labelId: string, instanceId: string, chatId: string) {\n    const id = cuid();\n\n    await this.prismaRepository.$executeRawUnsafe(\n      `INSERT INTO \"Chat\" (\"id\", \"instanceId\", \"remoteJid\", \"labels\", \"createdAt\", \"updatedAt\")\n       VALUES ($4, $2, $3, '[]'::jsonb, NOW(), NOW()) ON CONFLICT (\"instanceId\", \"remoteJid\")\n     DO\n      UPDATE\n          SET \"labels\" = COALESCE (\n          (\n          SELECT jsonb_agg(elem)\n          FROM jsonb_array_elements_text(\"Chat\".\"labels\") AS elem\n          WHERE elem <> $1\n          ),\n          '[]'::jsonb\n          ),\n          \"updatedAt\" = NOW();`,\n      labelId,\n      instanceId,\n      chatId,\n      id,\n    );\n  }\n\n  public async baileysOnWhatsapp(jid: string) {\n    const response = await this.client.onWhatsApp(jid);\n\n    return response;\n  }\n\n  public async baileysProfilePictureUrl(jid: string, type: 'image' | 'preview', timeoutMs: number) {\n    const response = await this.client.profilePictureUrl(jid, type, timeoutMs);\n\n    return response;\n  }\n\n  public async baileysAssertSessions(jids: string[], force: boolean) {\n    const response = await this.client.assertSessions(jids, force);\n\n    return response;\n  }\n\n  public async baileysCreateParticipantNodes(jids: string[], message: proto.IMessage, extraAttrs: any) {\n    const response = await this.client.createParticipantNodes(jids, message, extraAttrs);\n\n    const convertedResponse = {\n      ...response,\n      nodes: response.nodes.map((node: any) => ({\n        ...node,\n        content: node.content?.map((c: any) => ({\n          ...c,\n          content: c.content instanceof Uint8Array ? Buffer.from(c.content).toString('base64') : c.content,\n        })),\n      })),\n    };\n\n    return convertedResponse;\n  }\n\n  public async baileysSendNode(stanza: any) {\n    console.log('stanza', JSON.stringify(stanza));\n    const response = await this.client.sendNode(stanza);\n\n    return response;\n  }\n\n  public async baileysGetUSyncDevices(jids: string[], useCache: boolean, ignoreZeroDevices: boolean) {\n    const response = await this.client.getUSyncDevices(jids, useCache, ignoreZeroDevices);\n\n    return response;\n  }\n\n  public async baileysGenerateMessageTag() {\n    const response = await this.client.generateMessageTag();\n\n    return response;\n  }\n\n  public async baileysSignalRepositoryDecryptMessage(jid: string, type: 'pkmsg' | 'msg', ciphertext: string) {\n    try {\n      const ciphertextBuffer = Buffer.from(ciphertext, 'base64');\n\n      const response = await this.client.signalRepository.decryptMessage({\n        jid,\n        type,\n        ciphertext: ciphertextBuffer,\n      });\n\n      return response instanceof Uint8Array ? Buffer.from(response).toString('base64') : response;\n    } catch (error) {\n      this.logger.error('Error decrypting message:');\n      this.logger.error(error);\n      throw error;\n    }\n  }\n\n  public async baileysGetAuthState() {\n    const response = {\n      me: this.client.authState.creds.me,\n      account: this.client.authState.creds.account,\n    };\n\n    return response;\n  }\n}\n","import { prismaRepository } from '@api/server.module';\nimport { configService, Database } from '@config/env.config';\nimport dayjs from 'dayjs';\n\nfunction getAvailableNumbers(remoteJid: string) {\n  const numbersAvailable: string[] = [];\n\n  if (remoteJid.startsWith('+')) {\n    remoteJid = remoteJid.slice(1);\n  }\n\n  const [number, domain] = remoteJid.split('@');\n\n  // Brazilian numbers\n  if (remoteJid.startsWith('55')) {\n    const numberWithDigit =\n      number.slice(4, 5) === '9' && number.length === 13 ? number : `${number.slice(0, 4)}9${number.slice(4)}`;\n    const numberWithoutDigit = number.length === 12 ? number : number.slice(0, 4) + number.slice(5);\n\n    numbersAvailable.push(numberWithDigit);\n    numbersAvailable.push(numberWithoutDigit);\n  }\n\n  // Mexican/Argentina numbers\n  // Ref: https://faq.whatsapp.com/1294841057948784\n  else if (number.startsWith('52') || number.startsWith('54')) {\n    let prefix = '';\n    if (number.startsWith('52')) {\n      prefix = '1';\n    }\n    if (number.startsWith('54')) {\n      prefix = '9';\n    }\n\n    const numberWithDigit =\n      number.slice(2, 3) === prefix && number.length === 13\n        ? number\n        : `${number.slice(0, 2)}${prefix}${number.slice(2)}`;\n    const numberWithoutDigit = number.length === 12 ? number : number.slice(0, 2) + number.slice(3);\n\n    numbersAvailable.push(numberWithDigit);\n    numbersAvailable.push(numberWithoutDigit);\n  }\n\n  // Other countries\n  else {\n    numbersAvailable.push(remoteJid);\n  }\n\n  return numbersAvailable.map((number) => `${number}@${domain}`);\n}\n\ninterface ISaveOnWhatsappCacheParams {\n  remoteJid: string;\n}\nexport async function saveOnWhatsappCache(data: ISaveOnWhatsappCacheParams[]) {\n  if (configService.get<Database>('DATABASE').SAVE_DATA.IS_ON_WHATSAPP) {\n    const upsertsQuery = data.map((item) => {\n      const remoteJid = item.remoteJid.startsWith('+') ? item.remoteJid.slice(1) : item.remoteJid;\n      const numbersAvailable = getAvailableNumbers(remoteJid);\n\n      return prismaRepository.isOnWhatsapp.upsert({\n        create: { remoteJid: remoteJid, jidOptions: numbersAvailable.join(',') },\n        update: { jidOptions: numbersAvailable.join(',') },\n        where: { remoteJid: remoteJid },\n      });\n    });\n\n    await prismaRepository.$transaction(upsertsQuery);\n  }\n}\n\nexport async function getOnWhatsappCache(remoteJids: string[]) {\n  let results: {\n    remoteJid: string;\n    number: string;\n    jidOptions: string[];\n  }[] = [];\n\n  if (configService.get<Database>('DATABASE').SAVE_DATA.IS_ON_WHATSAPP) {\n    const remoteJidsWithoutPlus = remoteJids.map((remoteJid) => getAvailableNumbers(remoteJid)).flat();\n\n    const onWhatsappCache = await prismaRepository.isOnWhatsapp.findMany({\n      where: {\n        OR: remoteJidsWithoutPlus.map((remoteJid) => ({ jidOptions: { contains: remoteJid } })),\n        updatedAt: {\n          gte: dayjs().subtract(configService.get<Database>('DATABASE').SAVE_DATA.IS_ON_WHATSAPP_DAYS, 'days').toDate(),\n        },\n      },\n    });\n\n    results = onWhatsappCache.map((item) => ({\n      remoteJid: item.remoteJid,\n      number: item.remoteJid.split('@')[0],\n      jidOptions: item.jidOptions.split(','),\n    }));\n  }\n\n  return results;\n}\n","import { join } from 'path';\n\nexport const ROOT_DIR = process.cwd();\nexport const INSTANCE_DIR = join(ROOT_DIR, 'instances');\nexport const SRC_DIR = join(ROOT_DIR, 'src');\nexport const AUTH_DIR = join(ROOT_DIR, 'store', 'auth');\nexport const STORE_DIR = join(ROOT_DIR, 'store');\n","import { prismaRepository } from '@api/server.module';\nimport { CacheService } from '@api/services/cache.service';\nimport { INSTANCE_DIR } from '@config/path.config';\nimport { AuthenticationState, BufferJSON, initAuthCreds, WAProto as proto } from 'baileys';\nimport fs from 'fs/promises';\nimport path from 'path';\n\n// const fixFileName = (file: string): string | undefined => {\n//   if (!file) {\n//     return undefined;\n//   }\n//   const replacedSlash = file.replace(/\\//g, '__');\n//   const replacedColon = replacedSlash.replace(/:/g, '-');\n//   return replacedColon;\n// };\n\nexport async function keyExists(sessionId: string): Promise<any> {\n  try {\n    const key = await prismaRepository.session.findUnique({ where: { sessionId: sessionId } });\n    return !!key;\n  } catch (error) {\n    return false;\n  }\n}\n\nexport async function saveKey(sessionId: string, keyJson: any): Promise<any> {\n  const exists = await keyExists(sessionId);\n  try {\n    if (!exists)\n      return await prismaRepository.session.create({\n        data: {\n          sessionId: sessionId,\n          creds: JSON.stringify(keyJson),\n        },\n      });\n    await prismaRepository.session.update({\n      where: { sessionId: sessionId },\n      data: { creds: JSON.stringify(keyJson) },\n    });\n  } catch (error) {\n    return null;\n  }\n}\n\nexport async function getAuthKey(sessionId: string): Promise<any> {\n  try {\n    const register = await keyExists(sessionId);\n    if (!register) return null;\n    const auth = await prismaRepository.session.findUnique({ where: { sessionId: sessionId } });\n    return JSON.parse(auth?.creds);\n  } catch (error) {\n    return null;\n  }\n}\n\nasync function deleteAuthKey(sessionId: string): Promise<any> {\n  try {\n    const register = await keyExists(sessionId);\n    if (!register) return;\n    await prismaRepository.session.delete({ where: { sessionId: sessionId } });\n  } catch (error) {\n    return;\n  }\n}\n\n// async function fileExists(file: string): Promise<any> {\n//   try {\n//     const stat = await fs.stat(file);\n//     if (stat.isFile()) return true;\n//   } catch (error) {\n//     return;\n//   }\n// }\n\nexport default async function useMultiFileAuthStatePrisma(\n  sessionId: string,\n  cache: CacheService,\n): Promise<{\n  state: AuthenticationState;\n  saveCreds: () => Promise<void>;\n}> {\n  const localFolder = path.join(INSTANCE_DIR, sessionId);\n  // const localFile = (key: string) => path.join(localFolder, fixFileName(key) + '.json');\n  await fs.mkdir(localFolder, { recursive: true });\n\n  async function writeData(data: any, key: string): Promise<any> {\n    const dataString = JSON.stringify(data, BufferJSON.replacer);\n\n    if (key != 'creds') {\n      return await cache.hSet(sessionId, key, data);\n      // await fs.writeFile(localFile(key), dataString);\n      // return;\n    }\n    await saveKey(sessionId, dataString);\n    return;\n  }\n\n  async function readData(key: string): Promise<any> {\n    try {\n      let rawData;\n\n      if (key != 'creds') {\n        return await cache.hGet(sessionId, key);\n        // if (!(await fileExists(localFile(key)))) return null;\n        // rawData = await fs.readFile(localFile(key), { encoding: 'utf-8' });\n      } else {\n        rawData = await getAuthKey(sessionId);\n      }\n\n      const parsedData = JSON.parse(rawData, BufferJSON.reviver);\n      return parsedData;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  async function removeData(key: string): Promise<any> {\n    try {\n      if (key != 'creds') {\n        return await cache.hDelete(sessionId, key);\n        // await fs.unlink(localFile(key));\n      } else {\n        await deleteAuthKey(sessionId);\n      }\n    } catch (error) {\n      return;\n    }\n  }\n\n  let creds = await readData('creds');\n  if (!creds) {\n    creds = initAuthCreds();\n    await writeData(creds, 'creds');\n  }\n\n  return {\n    state: {\n      creds,\n      keys: {\n        get: async (type, ids) => {\n          const data = {};\n          await Promise.all(\n            ids.map(async (id) => {\n              let value = await readData(`${type}-${id}`);\n              if (type === 'app-state-sync-key' && value) {\n                value = proto.Message.AppStateSyncKeyData.fromObject(value);\n              }\n\n              data[id] = value;\n            }),\n          );\n          return data;\n        },\n        set: async (data) => {\n          const tasks = [];\n          for (const category in data) {\n            for (const id in data[category]) {\n              const value = data[category][id];\n              const key = `${category}-${id}`;\n\n              tasks.push(value ? writeData(value, key) : removeData(key));\n            }\n          }\n          await Promise.all(tasks);\n        },\n      },\n    },\n    saveCreds: () => {\n      return writeData(creds, 'creds');\n    },\n  };\n}\n","/**\n * ┌──────────────────────────────────────────────────────────────────────────────┐\n * │ @author jrCleber                                                             │\n * │ @filename use-multi-file-auth-state-provider-files.ts                              │\n * │ Developed by: Cleber Wilson                                                  │\n * │ Creation date: May 31, 2024                                                 │\n * │ Contact: contato@codechat.dev                                                │\n * ├──────────────────────────────────────────────────────────────────────────────┤\n * │ @copyright © Cleber Wilson 2023. All rights reserved.                        │\n * │ Licensed under the Apache License, Version 2.0                               │\n * │                                                                              │\n * │  @license \"https://github.com/code-chat-br/whatsapp-api/blob/main/LICENSE\"   │\n * │                                                                              │\n * │ You may not use this file except in compliance with the License.             │\n * │ You may obtain a copy of the License at                                      │\n * │                                                                              │\n * │    http://www.apache.org/licenses/LICENSE-2.0                                │\n * │                                                                              │\n * │ Unless required by applicable law or agreed to in writing, software          │\n * │ distributed under the License is distributed on an \"AS IS\" BASIS,            │\n * │ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     │\n * │                                                                              │\n * │ See the License for the specific language governing permissions and          │\n * │ limitations under the License.                                               │\n * │                                                                              │\n * │ @type {AuthState}                                                            │\n * │ @function useMultiFileAuthStateRedisDb                                       │\n * │ @returns {Promise<AuthState>}                                                │\n * ├──────────────────────────────────────────────────────────────────────────────┤\n * │ @important                                                                   │\n * │ For any future changes to the code in this file, it is recommended to        │\n * │ contain, together with the modification, the information of the developer    │\n * │ who changed it and the date of modification.                                 │\n * └──────────────────────────────────────────────────────────────────────────────┘\n */\n\nimport { ProviderFiles } from '@api/provider/sessions';\nimport { Logger } from '@config/logger.config';\nimport { AuthenticationCreds, AuthenticationState, BufferJSON, initAuthCreds, proto, SignalDataTypeMap } from 'baileys';\nimport { isNotEmpty } from 'class-validator';\n\nexport type AuthState = { state: AuthenticationState; saveCreds: () => Promise<void> };\n\nexport class AuthStateProvider {\n  constructor(private readonly providerFiles: ProviderFiles) {}\n\n  private readonly logger = new Logger('AuthStateProvider');\n\n  public async authStateProvider(instance: string): Promise<AuthState> {\n    const [, error] = await this.providerFiles.create(instance);\n    if (error) {\n      this.logger.error(['Failed to create folder on file server', error?.message, error?.stack]);\n      return;\n    }\n\n    const writeData = async (data: any, key: string): Promise<any> => {\n      const json = JSON.stringify(data, BufferJSON.replacer);\n      const [response, error] = await this.providerFiles.write(instance, key, {\n        data: json,\n      });\n      if (error) {\n        // this.logger.error(['writeData', error?.message, error?.stack]);\n        return;\n      }\n      return response;\n    };\n\n    const readData = async (key: string): Promise<any> => {\n      const [response, error] = await this.providerFiles.read(instance, key);\n      if (error) {\n        // this.logger.error(['readData', error?.message, error?.stack]);\n        return;\n      }\n      if (isNotEmpty(response?.data)) {\n        return JSON.parse(JSON.stringify(response.data), BufferJSON.reviver);\n      }\n    };\n\n    const removeData = async (key: string) => {\n      const [response, error] = await this.providerFiles.delete(instance, key);\n      if (error) {\n        // this.logger.error(['removeData', error?.message, error?.stack]);\n        return;\n      }\n\n      return response;\n    };\n\n    const creds: AuthenticationCreds = (await readData('creds')) || initAuthCreds();\n\n    return {\n      state: {\n        creds,\n        keys: {\n          get: async (type, ids: string[]) => {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            const data: { [_: string]: SignalDataTypeMap[type] } = {};\n            await Promise.all(\n              ids.map(async (id) => {\n                let value = await readData(`${type}-${id}`);\n                if (type === 'app-state-sync-key' && value) {\n                  value = proto.Message.AppStateSyncKeyData.fromObject(value);\n                }\n\n                data[id] = value;\n              }),\n            );\n\n            return data;\n          },\n          set: async (data: any) => {\n            const tasks: Promise<void>[] = [];\n            for (const category in data) {\n              for (const id in data[category]) {\n                const value = data[category][id];\n                const key = `${category}-${id}`;\n                tasks.push(value ? await writeData(value, key) : await removeData(key));\n              }\n            }\n\n            await Promise.all(tasks);\n          },\n        },\n      },\n      saveCreds: async () => {\n        return await writeData(creds, 'creds');\n      },\n    };\n  }\n}\n","import { CacheService } from '@api/services/cache.service';\nimport { Logger } from '@config/logger.config';\nimport { AuthenticationCreds, AuthenticationState, initAuthCreds, proto, SignalDataTypeMap } from 'baileys';\n\nexport async function useMultiFileAuthStateRedisDb(\n  instanceName: string,\n  cache: CacheService,\n): Promise<{\n  state: AuthenticationState;\n  saveCreds: () => Promise<void>;\n}> {\n  const logger = new Logger('useMultiFileAuthStateRedisDb');\n\n  const writeData = async (data: any, key: string): Promise<any> => {\n    try {\n      return await cache.hSet(instanceName, key, data);\n    } catch (error) {\n      return logger.error({ localError: 'writeData', error });\n    }\n  };\n\n  const readData = async (key: string): Promise<any> => {\n    try {\n      return await cache.hGet(instanceName, key);\n    } catch (error) {\n      logger.error({ localError: 'readData', error });\n      return;\n    }\n  };\n\n  const removeData = async (key: string) => {\n    try {\n      return await cache.hDelete(instanceName, key);\n    } catch (error) {\n      logger.error({ readData: 'removeData', error });\n    }\n  };\n\n  const creds: AuthenticationCreds = (await readData('creds')) || initAuthCreds();\n\n  return {\n    state: {\n      creds,\n      keys: {\n        get: async (type, ids: string[]) => {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          const data: { [_: string]: SignalDataTypeMap[type] } = {};\n          await Promise.all(\n            ids.map(async (id) => {\n              let value = await readData(`${type}-${id}`);\n              if (type === 'app-state-sync-key' && value) {\n                value = proto.Message.AppStateSyncKeyData.fromObject(value);\n              }\n\n              data[id] = value;\n            }),\n          );\n\n          return data;\n        },\n        set: async (data: any) => {\n          const tasks: Promise<void>[] = [];\n          for (const category in data) {\n            for (const id in data[category]) {\n              const value = data[category][id];\n              const key = `${category}-${id}`;\n              tasks.push(value ? await writeData(value, key) : await removeData(key));\n            }\n          }\n\n          await Promise.all(tasks);\n        },\n      },\n    },\n    saveCreds: async () => {\n      return await writeData(creds, 'creds');\n    },\n  };\n}\n","import { ConnectionState, WAConnectionState, WASocket } from 'baileys';\nimport { io, Socket } from 'socket.io-client';\n\nimport { ClientToServerEvents, ServerToClientEvents } from './transport.type';\n\nlet baileys_connection_state: WAConnectionState = 'close';\n\nexport const useVoiceCallsBaileys = async (\n  wavoip_token: string,\n  baileys_sock: WASocket,\n  status?: WAConnectionState,\n  logger?: boolean,\n) => {\n  baileys_connection_state = status ?? 'close';\n\n  const socket: Socket<ServerToClientEvents, ClientToServerEvents> = io('https://devices.wavoip.com/baileys', {\n    transports: ['websocket'],\n    path: `/${wavoip_token}/websocket`,\n  });\n\n  socket.on('connect', () => {\n    if (logger) console.log('[*] - Wavoip connected', socket.id);\n\n    socket.emit(\n      'init',\n      baileys_sock.authState.creds.me,\n      baileys_sock.authState.creds.account,\n      baileys_connection_state,\n    );\n  });\n\n  socket.on('disconnect', () => {\n    if (logger) console.log('[*] - Wavoip disconnect');\n  });\n\n  socket.on('connect_error', (error) => {\n    if (socket.active) {\n      if (logger)\n        console.log(\n          '[*] - Wavoip connection error temporary failure, the socket will automatically try to reconnect',\n          error,\n        );\n    } else {\n      if (logger) console.log('[*] - Wavoip connection error', error.message);\n    }\n  });\n\n  socket.on('onWhatsApp', async (jid, callback) => {\n    try {\n      const response: any = await baileys_sock.onWhatsApp(jid);\n\n      callback(response);\n\n      if (logger) console.log('[*] Success on call onWhatsApp function', response, jid);\n    } catch (error) {\n      if (logger) console.error('[*] Error on call onWhatsApp function', error);\n    }\n  });\n\n  socket.on('profilePictureUrl', async (jid, type, timeoutMs, callback) => {\n    try {\n      const response = await baileys_sock.profilePictureUrl(jid, type, timeoutMs);\n\n      callback(response);\n\n      if (logger) console.log('[*] Success on call profilePictureUrl function', response);\n    } catch (error) {\n      if (logger) console.error('[*] Error on call profilePictureUrl function', error);\n    }\n  });\n\n  socket.on('assertSessions', async (jids, force, callback) => {\n    try {\n      const response = await baileys_sock.assertSessions(jids, force);\n\n      callback(response);\n\n      if (logger) console.log('[*] Success on call assertSessions function', response);\n    } catch (error) {\n      if (logger) console.error('[*] Error on call assertSessions function', error);\n    }\n  });\n\n  socket.on('createParticipantNodes', async (jids, message, extraAttrs, callback) => {\n    try {\n      const response = await baileys_sock.createParticipantNodes(jids, message, extraAttrs);\n\n      callback(response, true);\n\n      if (logger) console.log('[*] Success on call createParticipantNodes function', response);\n    } catch (error) {\n      if (logger) console.error('[*] Error on call createParticipantNodes function', error);\n    }\n  });\n\n  socket.on('getUSyncDevices', async (jids, useCache, ignoreZeroDevices, callback) => {\n    try {\n      const response = await baileys_sock.getUSyncDevices(jids, useCache, ignoreZeroDevices);\n\n      callback(response);\n\n      if (logger) console.log('[*] Success on call getUSyncDevices function', response);\n    } catch (error) {\n      if (logger) console.error('[*] Error on call getUSyncDevices function', error);\n    }\n  });\n\n  socket.on('generateMessageTag', async (callback) => {\n    try {\n      const response = await baileys_sock.generateMessageTag();\n\n      callback(response);\n\n      if (logger) console.log('[*] Success on call generateMessageTag function', response);\n    } catch (error) {\n      if (logger) console.error('[*] Error on call generateMessageTag function', error);\n    }\n  });\n\n  socket.on('sendNode', async (stanza, callback) => {\n    try {\n      console.log('sendNode', JSON.stringify(stanza));\n      const response = await baileys_sock.sendNode(stanza);\n\n      callback(true);\n\n      if (logger) console.log('[*] Success on call sendNode function', response);\n    } catch (error) {\n      if (logger) console.error('[*] Error on call sendNode function', error);\n    }\n  });\n\n  socket.on('signalRepository:decryptMessage', async (jid, type, ciphertext, callback) => {\n    try {\n      const response = await baileys_sock.signalRepository.decryptMessage({\n        jid: jid,\n        type: type,\n        ciphertext: ciphertext,\n      });\n\n      callback(response);\n\n      if (logger) console.log('[*] Success on call signalRepository:decryptMessage function', response);\n    } catch (error) {\n      if (logger) console.error('[*] Error on call signalRepository:decryptMessage function', error);\n    }\n  });\n\n  // we only use this connection data to inform the webphone that the device is connected and creeds account to generate e2e whatsapp key for make call packets\n  baileys_sock.ev.on('connection.update', (update: Partial<ConnectionState>) => {\n    const { connection } = update;\n\n    if (connection) {\n      baileys_connection_state = connection;\n      socket\n        .timeout(1000)\n        .emit(\n          'connection.update:status',\n          baileys_sock.authState.creds.me,\n          baileys_sock.authState.creds.account,\n          connection,\n        );\n    }\n\n    if (update.qr) {\n      socket.timeout(1000).emit('connection.update:qr', update.qr);\n    }\n  });\n\n  baileys_sock.ws.on('CB:call', (packet) => {\n    if (logger) console.log('[*] Signling received');\n    socket.volatile.timeout(1000).emit('CB:call', packet);\n  });\n\n  baileys_sock.ws.on('CB:ack,class:call', (packet) => {\n    if (logger) console.log('[*] Signling ack received');\n    socket.volatile.timeout(1000).emit('CB:ack,class:call', packet);\n  });\n\n  return socket;\n};\n","import { InstanceDto } from '@api/dto/instance.dto';\nimport { ProviderFiles } from '@api/provider/sessions';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport { CacheService } from '@api/services/cache.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { Integration } from '@api/types/wa.types';\nimport { ConfigService } from '@config/env.config';\nimport { BadRequestException } from '@exceptions';\nimport EventEmitter2 from 'eventemitter2';\n\nimport { EvolutionStartupService } from './evolution/evolution.channel.service';\nimport { BusinessStartupService } from './meta/whatsapp.business.service';\nimport { BaileysStartupService } from './whatsapp/whatsapp.baileys.service';\n\ntype ChannelDataType = {\n  configService: ConfigService;\n  eventEmitter: EventEmitter2;\n  prismaRepository: PrismaRepository;\n  cache: CacheService;\n  chatwootCache: CacheService;\n  baileysCache: CacheService;\n  providerFiles: ProviderFiles;\n};\n\nexport interface ChannelControllerInterface {\n  receiveWebhook(data: any): Promise<any>;\n}\n\nexport class ChannelController {\n  public prismaRepository: PrismaRepository;\n  public waMonitor: WAMonitoringService;\n\n  constructor(prismaRepository: PrismaRepository, waMonitor: WAMonitoringService) {\n    this.prisma = prismaRepository;\n    this.monitor = waMonitor;\n  }\n\n  public set prisma(prisma: PrismaRepository) {\n    this.prismaRepository = prisma;\n  }\n\n  public get prisma() {\n    return this.prismaRepository;\n  }\n\n  public set monitor(waMonitor: WAMonitoringService) {\n    this.waMonitor = waMonitor;\n  }\n\n  public get monitor() {\n    return this.waMonitor;\n  }\n\n  public init(instanceData: InstanceDto, data: ChannelDataType) {\n    if (!instanceData.token && instanceData.integration === Integration.WHATSAPP_BUSINESS) {\n      throw new BadRequestException('token is required');\n    }\n\n    if (instanceData.integration === Integration.WHATSAPP_BUSINESS) {\n      return new BusinessStartupService(\n        data.configService,\n        data.eventEmitter,\n        data.prismaRepository,\n        data.cache,\n        data.chatwootCache,\n        data.baileysCache,\n        data.providerFiles,\n      );\n    }\n\n    if (instanceData.integration === Integration.EVOLUTION) {\n      return new EvolutionStartupService(\n        data.configService,\n        data.eventEmitter,\n        data.prismaRepository,\n        data.cache,\n        data.chatwootCache,\n      );\n    }\n\n    if (instanceData.integration === Integration.WHATSAPP_BAILEYS) {\n      return new BaileysStartupService(\n        data.configService,\n        data.eventEmitter,\n        data.prismaRepository,\n        data.cache,\n        data.chatwootCache,\n        data.baileysCache,\n        data.providerFiles,\n      );\n    }\n\n    return null;\n  }\n}\n","import { PrismaRepository } from '@api/repository/repository.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { Logger } from '@config/logger.config';\n\nimport { ChannelController, ChannelControllerInterface } from '../channel.controller';\n\nexport class EvolutionController extends ChannelController implements ChannelControllerInterface {\n  private readonly logger = new Logger('EvolutionController');\n\n  constructor(prismaRepository: PrismaRepository, waMonitor: WAMonitoringService) {\n    super(prismaRepository, waMonitor);\n  }\n\n  integrationEnabled: boolean;\n\n  public async receiveWebhook(data: any) {\n    const numberId = data.numberId;\n\n    if (!numberId) {\n      this.logger.error('WebhookService -> receiveWebhookEvolution -> numberId not found');\n      return;\n    }\n\n    const instance = await this.prismaRepository.instance.findFirst({\n      where: { number: numberId },\n    });\n\n    if (!instance) {\n      this.logger.error('WebhookService -> receiveWebhook -> instance not found');\n      return;\n    }\n\n    await this.waMonitor.waInstances[instance.name].connectToWhatsapp(data);\n\n    return {\n      status: 'success',\n    };\n  }\n}\n","import { PrismaRepository } from '@api/repository/repository.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { Logger } from '@config/logger.config';\nimport axios from 'axios';\n\nimport { ChannelController, ChannelControllerInterface } from '../channel.controller';\n\nexport class MetaController extends ChannelController implements ChannelControllerInterface {\n  private readonly logger = new Logger('MetaController');\n\n  constructor(prismaRepository: PrismaRepository, waMonitor: WAMonitoringService) {\n    super(prismaRepository, waMonitor);\n  }\n\n  integrationEnabled: boolean;\n\n  public async receiveWebhook(data: any) {\n    if (data.object === 'whatsapp_business_account') {\n      if (data.entry[0]?.changes[0]?.field === 'message_template_status_update') {\n        const template = await this.prismaRepository.template.findFirst({\n          where: { templateId: `${data.entry[0].changes[0].value.message_template_id}` },\n        });\n\n        if (!template) {\n          console.log('template not found');\n          return;\n        }\n\n        const { webhookUrl } = template;\n\n        await axios.post(webhookUrl, data.entry[0].changes[0].value, {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n        return;\n      }\n\n      data.entry?.forEach(async (entry: any) => {\n        const numberId = entry.changes[0].value.metadata.phone_number_id;\n\n        if (!numberId) {\n          this.logger.error('WebhookService -> receiveWebhookMeta -> numberId not found');\n          return {\n            status: 'success',\n          };\n        }\n\n        const instance = await this.prismaRepository.instance.findFirst({\n          where: { number: numberId },\n        });\n\n        if (!instance) {\n          this.logger.error('WebhookService -> receiveWebhookMeta -> instance not found');\n          return {\n            status: 'success',\n          };\n        }\n\n        await this.waMonitor.waInstances[instance.name].connectToWhatsapp(data);\n\n        return {\n          status: 'success',\n        };\n      });\n    }\n\n    return {\n      status: 'success',\n    };\n  }\n}\n","import { InstanceDto } from '@api/dto/instance.dto';\nimport { WAMonitoringService } from '@api/services/monitor.service';\n\nexport class BaileysController {\n  constructor(private readonly waMonitor: WAMonitoringService) {}\n\n  public async onWhatsapp({ instanceName }: InstanceDto, body: any) {\n    const instance = this.waMonitor.waInstances[instanceName];\n\n    return instance.baileysOnWhatsapp(body?.jid);\n  }\n\n  public async profilePictureUrl({ instanceName }: InstanceDto, body: any) {\n    const instance = this.waMonitor.waInstances[instanceName];\n\n    return instance.baileysProfilePictureUrl(body?.jid, body?.type, body?.timeoutMs);\n  }\n\n  public async assertSessions({ instanceName }: InstanceDto, body: any) {\n    const instance = this.waMonitor.waInstances[instanceName];\n\n    return instance.baileysAssertSessions(body?.jids, body?.force);\n  }\n\n  public async createParticipantNodes({ instanceName }: InstanceDto, body: any) {\n    const instance = this.waMonitor.waInstances[instanceName];\n\n    return instance.baileysCreateParticipantNodes(body?.jids, body?.message, body?.extraAttrs);\n  }\n\n  public async getUSyncDevices({ instanceName }: InstanceDto, body: any) {\n    const instance = this.waMonitor.waInstances[instanceName];\n\n    return instance.baileysGetUSyncDevices(body?.jids, body?.useCache, body?.ignoreZeroDevices);\n  }\n\n  public async generateMessageTag({ instanceName }: InstanceDto) {\n    const instance = this.waMonitor.waInstances[instanceName];\n\n    return instance.baileysGenerateMessageTag();\n  }\n\n  public async sendNode({ instanceName }: InstanceDto, body: any) {\n    const instance = this.waMonitor.waInstances[instanceName];\n\n    return instance.baileysSendNode(body?.stanza);\n  }\n\n  public async signalRepositoryDecryptMessage({ instanceName }: InstanceDto, body: any) {\n    const instance = this.waMonitor.waInstances[instanceName];\n\n    return instance.baileysSignalRepositoryDecryptMessage(body?.jid, body?.type, body?.ciphertext);\n  }\n\n  public async getAuthState({ instanceName }: InstanceDto) {\n    const instance = this.waMonitor.waInstances[instanceName];\n\n    return instance.baileysGetAuthState();\n  }\n}\n","function normalizeString(str: string): string {\n  return str\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '')\n    .toLowerCase();\n}\n\nexport function advancedOperatorsSearch(data: string, query: string): boolean {\n  const filters = query.split(' ').reduce((acc: Record<string, string[]>, filter) => {\n    const [operator, ...values] = filter.split(':');\n    const value = values.join(':');\n\n    if (!acc[operator]) {\n      acc[operator] = [];\n    }\n    acc[operator].push(value);\n    return acc;\n  }, {});\n\n  const normalizedItem = normalizeString(data);\n\n  return Object.entries(filters).every(([operator, values]) => {\n    return values.some((val) => {\n      const subValues = val.split(',');\n      return subValues.every((subVal) => {\n        const normalizedSubVal = normalizeString(subVal);\n\n        switch (operator.toLowerCase()) {\n          case 'contains':\n            return normalizedItem.includes(normalizedSubVal);\n          case 'notcontains':\n            return !normalizedItem.includes(normalizedSubVal);\n          case 'startswith':\n            return normalizedItem.startsWith(normalizedSubVal);\n          case 'endswith':\n            return normalizedItem.endsWith(normalizedSubVal);\n          case 'exact':\n            return normalizedItem === normalizedSubVal;\n          default:\n            return false;\n        }\n      });\n    });\n  });\n}\n","import { advancedOperatorsSearch } from './advancedOperatorsSearch';\n\nexport const findBotByTrigger = async (botRepository: any, content: string, instanceId: string) => {\n  // Check for triggerType 'all'\n  const findTriggerAll = await botRepository.findFirst({\n    where: {\n      enabled: true,\n      triggerType: 'all',\n      instanceId: instanceId,\n    },\n  });\n\n  if (findTriggerAll) return findTriggerAll;\n\n  const findTriggerAdvanced = await botRepository.findMany({\n    where: {\n      enabled: true,\n      triggerType: 'advanced',\n      instanceId: instanceId,\n    },\n  });\n  for (const advanced of findTriggerAdvanced) {\n    if (advancedOperatorsSearch(content, advanced.triggerValue)) {\n      return advanced;\n    }\n  }\n\n  // Check for exact match\n  const findTriggerEquals = await botRepository.findFirst({\n    where: {\n      enabled: true,\n      triggerType: 'keyword',\n      triggerOperator: 'equals',\n      triggerValue: content,\n      instanceId: instanceId,\n    },\n  });\n\n  if (findTriggerEquals) return findTriggerEquals;\n\n  // Check for regex match\n  const findRegex = await botRepository.findMany({\n    where: {\n      enabled: true,\n      triggerType: 'keyword',\n      triggerOperator: 'regex',\n      instanceId: instanceId,\n    },\n  });\n\n  let findTriggerRegex = null;\n\n  for (const regex of findRegex) {\n    const regexValue = new RegExp(regex.triggerValue);\n\n    if (regexValue.test(content)) {\n      findTriggerRegex = regex;\n      break;\n    }\n  }\n\n  if (findTriggerRegex) return findTriggerRegex;\n\n  // Check for startsWith match\n  const findStartsWith = await botRepository.findMany({\n    where: {\n      enabled: true,\n      triggerType: 'keyword',\n      triggerOperator: 'startsWith',\n      instanceId: instanceId,\n    },\n  });\n\n  let findTriggerStartsWith = null;\n\n  for (const startsWith of findStartsWith) {\n    if (content.startsWith(startsWith.triggerValue)) {\n      findTriggerStartsWith = startsWith;\n      break;\n    }\n  }\n\n  if (findTriggerStartsWith) return findTriggerStartsWith;\n\n  // Check for endsWith match\n  const findEndsWith = await botRepository.findMany({\n    where: {\n      enabled: true,\n      triggerType: 'keyword',\n      triggerOperator: 'endsWith',\n      instanceId: instanceId,\n    },\n  });\n\n  let findTriggerEndsWith = null;\n\n  for (const endsWith of findEndsWith) {\n    if (content.endsWith(endsWith.triggerValue)) {\n      findTriggerEndsWith = endsWith;\n      break;\n    }\n  }\n\n  if (findTriggerEndsWith) return findTriggerEndsWith;\n\n  // Check for contains match\n  const findContains = await botRepository.findMany({\n    where: {\n      enabled: true,\n      triggerType: 'keyword',\n      triggerOperator: 'contains',\n      instanceId: instanceId,\n    },\n  });\n\n  let findTriggerContains = null;\n\n  for (const contains of findContains) {\n    if (content.includes(contains.triggerValue)) {\n      findTriggerContains = contains;\n      break;\n    }\n  }\n\n  if (findTriggerContains) return findTriggerContains;\n\n  return null;\n};\n","import { InstanceDto } from '@api/dto/instance.dto';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport {\n  difyController,\n  evolutionBotController,\n  flowiseController,\n  openaiController,\n  typebotController,\n} from '@api/server.module';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { Logger } from '@config/logger.config';\nimport { IntegrationSession } from '@prisma/client';\nimport { findBotByTrigger } from '@utils/findBotByTrigger';\n\nexport type EmitData = {\n  instance: InstanceDto;\n  remoteJid: string;\n  msg: any;\n  pushName?: string;\n};\n\nexport interface ChatbotControllerInterface {\n  integrationEnabled: boolean;\n  botRepository: any;\n  settingsRepository: any;\n  sessionRepository: any;\n  userMessageDebounce: { [key: string]: { message: string; timeoutId: NodeJS.Timeout } };\n\n  createBot(instance: InstanceDto, data: any): Promise<any>;\n  findBot(instance: InstanceDto): Promise<any>;\n  fetchBot(instance: InstanceDto, botId: string): Promise<any>;\n  updateBot(instance: InstanceDto, botId: string, data: any): Promise<any>;\n  deleteBot(instance: InstanceDto, botId: string): Promise<any>;\n\n  settings(instance: InstanceDto, data: any): Promise<any>;\n  fetchSettings(instance: InstanceDto): Promise<any>;\n\n  changeStatus(instance: InstanceDto, botId: string, status: string): Promise<any>;\n  fetchSessions(instance: InstanceDto, botId: string, remoteJid?: string): Promise<any>;\n  ignoreJid(instance: InstanceDto, data: any): Promise<any>;\n\n  emit(data: EmitData): Promise<void>;\n}\n\nexport class ChatbotController {\n  public prismaRepository: PrismaRepository;\n  public waMonitor: WAMonitoringService;\n\n  public readonly logger = new Logger('ChatbotController');\n\n  constructor(prismaRepository: PrismaRepository, waMonitor: WAMonitoringService) {\n    this.prisma = prismaRepository;\n    this.monitor = waMonitor;\n  }\n\n  public set prisma(prisma: PrismaRepository) {\n    this.prismaRepository = prisma;\n  }\n\n  public get prisma() {\n    return this.prismaRepository;\n  }\n\n  public set monitor(waMonitor: WAMonitoringService) {\n    this.waMonitor = waMonitor;\n  }\n\n  public get monitor() {\n    return this.waMonitor;\n  }\n\n  public async emit({\n    instance,\n    remoteJid,\n    msg,\n    pushName,\n    isIntegration = false,\n  }: {\n    instance: InstanceDto;\n    remoteJid: string;\n    msg: any;\n    pushName?: string;\n    isIntegration?: boolean;\n  }): Promise<void> {\n    const emitData = {\n      instance,\n      remoteJid,\n      msg,\n      pushName,\n      isIntegration,\n    };\n    await evolutionBotController.emit(emitData);\n\n    await typebotController.emit(emitData);\n\n    await openaiController.emit(emitData);\n\n    await difyController.emit(emitData);\n\n    await flowiseController.emit(emitData);\n  }\n\n  public processDebounce(\n    userMessageDebounce: any,\n    content: string,\n    remoteJid: string,\n    debounceTime: number,\n    callback: any,\n  ) {\n    if (userMessageDebounce[remoteJid]) {\n      userMessageDebounce[remoteJid].message += `\\n${content}`;\n      this.logger.log('message debounced: ' + userMessageDebounce[remoteJid].message);\n      clearTimeout(userMessageDebounce[remoteJid].timeoutId);\n    } else {\n      userMessageDebounce[remoteJid] = {\n        message: content,\n        timeoutId: null,\n      };\n    }\n\n    userMessageDebounce[remoteJid].timeoutId = setTimeout(() => {\n      const myQuestion = userMessageDebounce[remoteJid].message;\n      this.logger.log('Debounce complete. Processing message: ' + myQuestion);\n\n      delete userMessageDebounce[remoteJid];\n      callback(myQuestion);\n    }, debounceTime * 1000);\n  }\n\n  public checkIgnoreJids(ignoreJids: any, remoteJid: string) {\n    if (ignoreJids && ignoreJids.length > 0) {\n      let ignoreGroups = false;\n      let ignoreContacts = false;\n\n      if (ignoreJids.includes('@g.us')) {\n        ignoreGroups = true;\n      }\n\n      if (ignoreJids.includes('@s.whatsapp.net')) {\n        ignoreContacts = true;\n      }\n\n      if (ignoreGroups && remoteJid.endsWith('@g.us')) {\n        this.logger.warn('Ignoring message from group: ' + remoteJid);\n        return true;\n      }\n\n      if (ignoreContacts && remoteJid.endsWith('@s.whatsapp.net')) {\n        this.logger.warn('Ignoring message from contact: ' + remoteJid);\n        return true;\n      }\n\n      if (ignoreJids.includes(remoteJid)) {\n        this.logger.warn('Ignoring message from jid: ' + remoteJid);\n        return true;\n      }\n\n      return false;\n    }\n\n    return false;\n  }\n\n  public async getSession(remoteJid: string, instance: InstanceDto) {\n    let session = await this.prismaRepository.integrationSession.findFirst({\n      where: {\n        remoteJid: remoteJid,\n        instanceId: instance.instanceId,\n      },\n      orderBy: { createdAt: 'desc' },\n    });\n\n    if (session) {\n      if (session.status !== 'closed' && !session.botId) {\n        this.logger.warn('Session is already opened in another integration');\n        return;\n      } else if (!session.botId) {\n        session = null;\n      }\n    }\n\n    return session;\n  }\n\n  public async findBotTrigger(\n    botRepository: any,\n    content: string,\n    instance: InstanceDto,\n    session?: IntegrationSession,\n  ) {\n    let findBot: null;\n\n    if (!session) {\n      findBot = await findBotByTrigger(botRepository, content, instance.instanceId);\n\n      if (!findBot) {\n        return;\n      }\n    } else {\n      findBot = await botRepository.findFirst({\n        where: {\n          id: session.botId,\n        },\n      });\n    }\n\n    return findBot;\n  }\n}\n","import { InstanceDto } from '@api/dto/instance.dto';\nimport { ChatwootDto } from '@api/integrations/chatbot/chatwoot/dto/chatwoot.dto';\nimport { ChatwootService } from '@api/integrations/chatbot/chatwoot/services/chatwoot.service';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport { waMonitor } from '@api/server.module';\nimport { CacheService } from '@api/services/cache.service';\nimport { CacheEngine } from '@cache/cacheengine';\nimport { Chatwoot, ConfigService, HttpServer } from '@config/env.config';\nimport { BadRequestException } from '@exceptions';\nimport { isURL } from 'class-validator';\n\nexport class ChatwootController {\n  constructor(\n    private readonly chatwootService: ChatwootService,\n    private readonly configService: ConfigService,\n    private readonly prismaRepository: PrismaRepository,\n  ) {}\n\n  public async createChatwoot(instance: InstanceDto, data: ChatwootDto) {\n    if (!this.configService.get<Chatwoot>('CHATWOOT').ENABLED) throw new BadRequestException('Chatwoot is disabled');\n\n    if (data?.enabled) {\n      if (!isURL(data.url, { require_tld: false })) {\n        throw new BadRequestException('url is not valid');\n      }\n\n      if (!data.accountId) {\n        throw new BadRequestException('accountId is required');\n      }\n\n      if (!data.token) {\n        throw new BadRequestException('token is required');\n      }\n\n      if (data.signMsg !== true && data.signMsg !== false) {\n        throw new BadRequestException('signMsg is required');\n      }\n      if (data.signMsg === false) data.signDelimiter = null;\n    }\n\n    if (!data.nameInbox || data.nameInbox === '') {\n      data.nameInbox = instance.instanceName;\n    }\n\n    const result = await this.chatwootService.create(instance, data);\n\n    const urlServer = this.configService.get<HttpServer>('SERVER').URL;\n\n    const response = {\n      ...result,\n      webhook_url: `${urlServer}/chatwoot/webhook/${encodeURIComponent(instance.instanceName)}`,\n    };\n\n    return response;\n  }\n\n  public async findChatwoot(instance: InstanceDto): Promise<ChatwootDto & { webhook_url: string }> {\n    if (!this.configService.get<Chatwoot>('CHATWOOT').ENABLED) throw new BadRequestException('Chatwoot is disabled');\n\n    const result = await this.chatwootService.find(instance);\n\n    const urlServer = this.configService.get<HttpServer>('SERVER').URL;\n\n    if (Object.keys(result || {}).length === 0) {\n      return {\n        enabled: false,\n        url: '',\n        accountId: '',\n        token: '',\n        signMsg: false,\n        nameInbox: '',\n        webhook_url: '',\n      };\n    }\n\n    const response = {\n      ...result,\n      webhook_url: `${urlServer}/chatwoot/webhook/${encodeURIComponent(instance.instanceName)}`,\n    };\n\n    return response;\n  }\n\n  public async receiveWebhook(instance: InstanceDto, data: any) {\n    if (!this.configService.get<Chatwoot>('CHATWOOT').ENABLED) throw new BadRequestException('Chatwoot is disabled');\n\n    const chatwootCache = new CacheService(new CacheEngine(this.configService, ChatwootService.name).getEngine());\n    const chatwootService = new ChatwootService(waMonitor, this.configService, this.prismaRepository, chatwootCache);\n\n    return chatwootService.receiveWebhook(instance, data);\n  }\n}\n","import { IgnoreJidDto } from '@api/dto/chatbot.dto';\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { DifyDto } from '@api/integrations/chatbot/dify/dto/dify.dto';\nimport { DifyService } from '@api/integrations/chatbot/dify/services/dify.service';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { configService, Dify } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport { BadRequestException } from '@exceptions';\nimport { Dify as DifyModel } from '@prisma/client';\nimport { getConversationMessage } from '@utils/getConversationMessage';\n\nimport { ChatbotController, ChatbotControllerInterface, EmitData } from '../../chatbot.controller';\n\nexport class DifyController extends ChatbotController implements ChatbotControllerInterface {\n  constructor(\n    private readonly difyService: DifyService,\n    prismaRepository: PrismaRepository,\n    waMonitor: WAMonitoringService,\n  ) {\n    super(prismaRepository, waMonitor);\n\n    this.botRepository = this.prismaRepository.dify;\n    this.settingsRepository = this.prismaRepository.difySetting;\n    this.sessionRepository = this.prismaRepository.integrationSession;\n  }\n\n  public readonly logger = new Logger('DifyController');\n\n  integrationEnabled = configService.get<Dify>('DIFY').ENABLED;\n  botRepository: any;\n  settingsRepository: any;\n  sessionRepository: any;\n  userMessageDebounce: { [key: string]: { message: string; timeoutId: NodeJS.Timeout } } = {};\n\n  // Bots\n  public async createBot(instance: InstanceDto, data: DifyDto) {\n    if (!this.integrationEnabled) throw new BadRequestException('Dify is disabled');\n\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    if (\n      !data.expire ||\n      !data.keywordFinish ||\n      !data.delayMessage ||\n      !data.unknownMessage ||\n      !data.listeningFromMe ||\n      !data.stopBotFromMe ||\n      !data.keepOpen ||\n      !data.debounceTime ||\n      !data.ignoreJids ||\n      !data.splitMessages ||\n      !data.timePerChar\n    ) {\n      const defaultSettingCheck = await this.settingsRepository.findFirst({\n        where: {\n          instanceId: instanceId,\n        },\n      });\n\n      if (data.expire === undefined || data.expire === null) data.expire = defaultSettingCheck.expire;\n      if (data.keywordFinish === undefined || data.keywordFinish === null)\n        data.keywordFinish = defaultSettingCheck.keywordFinish;\n      if (data.delayMessage === undefined || data.delayMessage === null)\n        data.delayMessage = defaultSettingCheck.delayMessage;\n      if (data.unknownMessage === undefined || data.unknownMessage === null)\n        data.unknownMessage = defaultSettingCheck.unknownMessage;\n      if (data.listeningFromMe === undefined || data.listeningFromMe === null)\n        data.listeningFromMe = defaultSettingCheck.listeningFromMe;\n      if (data.stopBotFromMe === undefined || data.stopBotFromMe === null)\n        data.stopBotFromMe = defaultSettingCheck.stopBotFromMe;\n      if (data.keepOpen === undefined || data.keepOpen === null) data.keepOpen = defaultSettingCheck.keepOpen;\n      if (data.debounceTime === undefined || data.debounceTime === null)\n        data.debounceTime = defaultSettingCheck.debounceTime;\n      if (data.ignoreJids === undefined || data.ignoreJids === null) data.ignoreJids = defaultSettingCheck.ignoreJids;\n      if (data.splitMessages === undefined || data.splitMessages === null)\n        data.splitMessages = defaultSettingCheck?.splitMessages ?? false;\n      if (data.timePerChar === undefined || data.timePerChar === null)\n        data.timePerChar = defaultSettingCheck?.timePerChar ?? 0;\n\n      if (!defaultSettingCheck) {\n        await this.settings(instance, {\n          expire: data.expire,\n          keywordFinish: data.keywordFinish,\n          delayMessage: data.delayMessage,\n          unknownMessage: data.unknownMessage,\n          listeningFromMe: data.listeningFromMe,\n          stopBotFromMe: data.stopBotFromMe,\n          keepOpen: data.keepOpen,\n          debounceTime: data.debounceTime,\n          ignoreJids: data.ignoreJids,\n          splitMessages: data.splitMessages,\n          timePerChar: data.timePerChar,\n        });\n      }\n    }\n\n    const checkTriggerAll = await this.botRepository.findFirst({\n      where: {\n        enabled: true,\n        triggerType: 'all',\n        instanceId: instanceId,\n      },\n    });\n\n    if (checkTriggerAll && data.triggerType === 'all') {\n      throw new Error('You already have a dify with an \"All\" trigger, you cannot have more bots while it is active');\n    }\n\n    const checkDuplicate = await this.botRepository.findFirst({\n      where: {\n        instanceId: instanceId,\n        botType: data.botType,\n        apiUrl: data.apiUrl,\n        apiKey: data.apiKey,\n      },\n    });\n\n    if (checkDuplicate) {\n      throw new Error('Dify already exists');\n    }\n\n    if (data.triggerType === 'keyword') {\n      if (!data.triggerOperator || !data.triggerValue) {\n        throw new Error('Trigger operator and value are required');\n      }\n\n      const checkDuplicate = await this.botRepository.findFirst({\n        where: {\n          triggerOperator: data.triggerOperator,\n          triggerValue: data.triggerValue,\n          instanceId: instanceId,\n        },\n      });\n\n      if (checkDuplicate) {\n        throw new Error('Trigger already exists');\n      }\n    }\n\n    if (data.triggerType === 'advanced') {\n      if (!data.triggerValue) {\n        throw new Error('Trigger value is required');\n      }\n\n      const checkDuplicate = await this.botRepository.findFirst({\n        where: {\n          triggerValue: data.triggerValue,\n          instanceId: instanceId,\n        },\n      });\n\n      if (checkDuplicate) {\n        throw new Error('Trigger already exists');\n      }\n    }\n\n    try {\n      const bot = await this.botRepository.create({\n        data: {\n          enabled: data?.enabled,\n          description: data.description,\n          botType: data.botType,\n          apiUrl: data.apiUrl,\n          apiKey: data.apiKey,\n          expire: data.expire,\n          keywordFinish: data.keywordFinish,\n          delayMessage: data.delayMessage,\n          unknownMessage: data.unknownMessage,\n          listeningFromMe: data.listeningFromMe,\n          stopBotFromMe: data.stopBotFromMe,\n          keepOpen: data.keepOpen,\n          debounceTime: data.debounceTime,\n          instanceId: instanceId,\n          triggerType: data.triggerType,\n          triggerOperator: data.triggerOperator,\n          triggerValue: data.triggerValue,\n          ignoreJids: data.ignoreJids,\n          splitMessages: data.splitMessages,\n          timePerChar: data.timePerChar,\n        },\n      });\n\n      return bot;\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error creating dify');\n    }\n  }\n\n  public async findBot(instance: InstanceDto) {\n    if (!this.integrationEnabled) throw new BadRequestException('Dify is disabled');\n\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    const bots = await this.botRepository.findMany({\n      where: {\n        instanceId: instanceId,\n      },\n    });\n\n    if (!bots.length) {\n      return null;\n    }\n\n    return bots;\n  }\n\n  public async fetchBot(instance: InstanceDto, botId: string) {\n    if (!this.integrationEnabled) throw new BadRequestException('Dify is disabled');\n\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    const bot = await this.botRepository.findFirst({\n      where: {\n        id: botId,\n      },\n    });\n\n    if (!bot) {\n      throw new Error('Dify not found');\n    }\n\n    if (bot.instanceId !== instanceId) {\n      throw new Error('Dify not found');\n    }\n\n    return bot;\n  }\n\n  public async updateBot(instance: InstanceDto, botId: string, data: DifyDto) {\n    if (!this.integrationEnabled) throw new BadRequestException('Dify is disabled');\n\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    const bot = await this.botRepository.findFirst({\n      where: {\n        id: botId,\n      },\n    });\n\n    if (!bot) {\n      throw new Error('Dify not found');\n    }\n\n    if (bot.instanceId !== instanceId) {\n      throw new Error('Dify not found');\n    }\n\n    if (data.triggerType === 'all') {\n      const checkTriggerAll = await this.botRepository.findFirst({\n        where: {\n          enabled: true,\n          triggerType: 'all',\n          id: {\n            not: botId,\n          },\n          instanceId: instanceId,\n        },\n      });\n\n      if (checkTriggerAll) {\n        throw new Error('You already have a dify with an \"All\" trigger, you cannot have more bots while it is active');\n      }\n    }\n\n    const checkDuplicate = await this.botRepository.findFirst({\n      where: {\n        id: {\n          not: botId,\n        },\n        instanceId: instanceId,\n        botType: data.botType,\n        apiUrl: data.apiUrl,\n        apiKey: data.apiKey,\n      },\n    });\n\n    if (checkDuplicate) {\n      throw new Error('Dify already exists');\n    }\n\n    if (data.triggerType === 'keyword') {\n      if (!data.triggerOperator || !data.triggerValue) {\n        throw new Error('Trigger operator and value are required');\n      }\n\n      const checkDuplicate = await this.botRepository.findFirst({\n        where: {\n          triggerOperator: data.triggerOperator,\n          triggerValue: data.triggerValue,\n          id: { not: botId },\n          instanceId: instanceId,\n        },\n      });\n\n      if (checkDuplicate) {\n        throw new Error('Trigger already exists');\n      }\n    }\n\n    if (data.triggerType === 'advanced') {\n      if (!data.triggerValue) {\n        throw new Error('Trigger value is required');\n      }\n\n      const checkDuplicate = await this.botRepository.findFirst({\n        where: {\n          triggerValue: data.triggerValue,\n          id: { not: botId },\n          instanceId: instanceId,\n        },\n      });\n\n      if (checkDuplicate) {\n        throw new Error('Trigger already exists');\n      }\n    }\n\n    try {\n      const bot = await this.botRepository.update({\n        where: {\n          id: botId,\n        },\n        data: {\n          enabled: data?.enabled,\n          description: data.description,\n          botType: data.botType,\n          apiUrl: data.apiUrl,\n          apiKey: data.apiKey,\n          expire: data.expire,\n          keywordFinish: data.keywordFinish,\n          delayMessage: data.delayMessage,\n          unknownMessage: data.unknownMessage,\n          listeningFromMe: data.listeningFromMe,\n          stopBotFromMe: data.stopBotFromMe,\n          keepOpen: data.keepOpen,\n          debounceTime: data.debounceTime,\n          instanceId: instanceId,\n          triggerType: data.triggerType,\n          triggerOperator: data.triggerOperator,\n          triggerValue: data.triggerValue,\n          ignoreJids: data.ignoreJids,\n          splitMessages: data.splitMessages,\n          timePerChar: data.timePerChar,\n        },\n      });\n\n      return bot;\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error updating dify');\n    }\n  }\n\n  public async deleteBot(instance: InstanceDto, botId: string) {\n    if (!this.integrationEnabled) throw new BadRequestException('Dify is disabled');\n\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    const bot = await this.botRepository.findFirst({\n      where: {\n        id: botId,\n      },\n    });\n\n    if (!bot) {\n      throw new Error('Dify not found');\n    }\n\n    if (bot.instanceId !== instanceId) {\n      throw new Error('Dify not found');\n    }\n    try {\n      await this.prismaRepository.integrationSession.deleteMany({\n        where: {\n          botId: botId,\n        },\n      });\n\n      await this.botRepository.delete({\n        where: {\n          id: botId,\n        },\n      });\n\n      return { bot: { id: botId } };\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error deleting dify bot');\n    }\n  }\n\n  // Settings\n  public async settings(instance: InstanceDto, data: any) {\n    if (!this.integrationEnabled) throw new BadRequestException('Dify is disabled');\n\n    try {\n      const instanceId = await this.prismaRepository.instance\n        .findFirst({\n          where: {\n            name: instance.instanceName,\n          },\n        })\n        .then((instance) => instance.id);\n\n      const settings = await this.settingsRepository.findFirst({\n        where: {\n          instanceId: instanceId,\n        },\n      });\n\n      if (settings) {\n        const updateSettings = await this.settingsRepository.update({\n          where: {\n            id: settings.id,\n          },\n          data: {\n            expire: data.expire,\n            keywordFinish: data.keywordFinish,\n            delayMessage: data.delayMessage,\n            unknownMessage: data.unknownMessage,\n            listeningFromMe: data.listeningFromMe,\n            stopBotFromMe: data.stopBotFromMe,\n            keepOpen: data.keepOpen,\n            debounceTime: data.debounceTime,\n            difyIdFallback: data.difyIdFallback,\n            ignoreJids: data.ignoreJids,\n            splitMessages: data.splitMessages,\n            timePerChar: data.timePerChar,\n          },\n        });\n\n        return {\n          expire: updateSettings.expire,\n          keywordFinish: updateSettings.keywordFinish,\n          delayMessage: updateSettings.delayMessage,\n          unknownMessage: updateSettings.unknownMessage,\n          listeningFromMe: updateSettings.listeningFromMe,\n          stopBotFromMe: updateSettings.stopBotFromMe,\n          keepOpen: updateSettings.keepOpen,\n          debounceTime: updateSettings.debounceTime,\n          difyIdFallback: updateSettings.difyIdFallback,\n          ignoreJids: updateSettings.ignoreJids,\n          splitMessages: updateSettings.splitMessages,\n          timePerChar: updateSettings.timePerChar,\n        };\n      }\n\n      const newSetttings = await this.settingsRepository.create({\n        data: {\n          expire: data.expire,\n          keywordFinish: data.keywordFinish,\n          delayMessage: data.delayMessage,\n          unknownMessage: data.unknownMessage,\n          listeningFromMe: data.listeningFromMe,\n          stopBotFromMe: data.stopBotFromMe,\n          keepOpen: data.keepOpen,\n          debounceTime: data.debounceTime,\n          difyIdFallback: data.difyIdFallback,\n          ignoreJids: data.ignoreJids,\n          instanceId: instanceId,\n          splitMessages: data.splitMessages,\n          timePerChar: data.timePerChar,\n        },\n      });\n\n      return {\n        expire: newSetttings.expire,\n        keywordFinish: newSetttings.keywordFinish,\n        delayMessage: newSetttings.delayMessage,\n        unknownMessage: newSetttings.unknownMessage,\n        listeningFromMe: newSetttings.listeningFromMe,\n        stopBotFromMe: newSetttings.stopBotFromMe,\n        keepOpen: newSetttings.keepOpen,\n        debounceTime: newSetttings.debounceTime,\n        difyIdFallback: newSetttings.difyIdFallback,\n        ignoreJids: newSetttings.ignoreJids,\n        splitMessages: newSetttings.splitMessages,\n        timePerChar: newSetttings.timePerChar,\n      };\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error setting default settings');\n    }\n  }\n\n  public async fetchSettings(instance: InstanceDto) {\n    if (!this.integrationEnabled) throw new BadRequestException('Dify is disabled');\n\n    try {\n      const instanceId = await this.prismaRepository.instance\n        .findFirst({\n          where: {\n            name: instance.instanceName,\n          },\n        })\n        .then((instance) => instance.id);\n\n      const settings = await this.settingsRepository.findFirst({\n        where: {\n          instanceId: instanceId,\n        },\n        include: {\n          Fallback: true,\n        },\n      });\n\n      if (!settings) {\n        return {\n          expire: 0,\n          keywordFinish: '',\n          delayMessage: 0,\n          unknownMessage: '',\n          listeningFromMe: false,\n          stopBotFromMe: false,\n          keepOpen: false,\n          ignoreJids: [],\n          splitMessages: false,\n          timePerChar: 0,\n          difyIdFallback: '',\n          fallback: null,\n        };\n      }\n\n      return {\n        expire: settings.expire,\n        keywordFinish: settings.keywordFinish,\n        delayMessage: settings.delayMessage,\n        unknownMessage: settings.unknownMessage,\n        listeningFromMe: settings.listeningFromMe,\n        stopBotFromMe: settings.stopBotFromMe,\n        keepOpen: settings.keepOpen,\n        ignoreJids: settings.ignoreJids,\n        splitMessages: settings.splitMessages,\n        timePerChar: settings.timePerChar,\n        difyIdFallback: settings.difyIdFallback,\n        fallback: settings.Fallback,\n      };\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error fetching default settings');\n    }\n  }\n\n  // Sessions\n  public async changeStatus(instance: InstanceDto, data: any) {\n    if (!this.integrationEnabled) throw new BadRequestException('Dify is disabled');\n\n    try {\n      const instanceId = await this.prismaRepository.instance\n        .findFirst({\n          where: {\n            name: instance.instanceName,\n          },\n        })\n        .then((instance) => instance.id);\n\n      const defaultSettingCheck = await this.settingsRepository.findFirst({\n        where: {\n          instanceId,\n        },\n      });\n\n      const remoteJid = data.remoteJid;\n      const status = data.status;\n\n      if (status === 'delete') {\n        await this.sessionRepository.deleteMany({\n          where: {\n            remoteJid: remoteJid,\n            botId: { not: null },\n          },\n        });\n\n        return { bot: { remoteJid: remoteJid, status: status } };\n      }\n\n      if (status === 'closed') {\n        if (defaultSettingCheck?.keepOpen) {\n          await this.sessionRepository.updateMany({\n            where: {\n              remoteJid: remoteJid,\n              botId: { not: null },\n            },\n            data: {\n              status: 'closed',\n            },\n          });\n        } else {\n          await this.sessionRepository.deleteMany({\n            where: {\n              remoteJid: remoteJid,\n              botId: { not: null },\n            },\n          });\n        }\n\n        return { bot: { ...instance, bot: { remoteJid: remoteJid, status: status } } };\n      } else {\n        const session = await this.sessionRepository.updateMany({\n          where: {\n            instanceId: instanceId,\n            remoteJid: remoteJid,\n            botId: { not: null },\n          },\n          data: {\n            status: status,\n          },\n        });\n\n        const botData = {\n          remoteJid: remoteJid,\n          status: status,\n          session,\n        };\n\n        return { bot: { ...instance, bot: botData } };\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error changing status');\n    }\n  }\n\n  public async fetchSessions(instance: InstanceDto, botId: string, remoteJid?: string) {\n    if (!this.integrationEnabled) throw new BadRequestException('Dify is disabled');\n\n    try {\n      const instanceId = await this.prismaRepository.instance\n        .findFirst({\n          where: {\n            name: instance.instanceName,\n          },\n        })\n        .then((instance) => instance.id);\n\n      const bot = await this.botRepository.findFirst({\n        where: {\n          id: botId,\n        },\n      });\n\n      if (bot && bot.instanceId !== instanceId) {\n        throw new Error('Dify not found');\n      }\n\n      return await this.sessionRepository.findMany({\n        where: {\n          instanceId: instanceId,\n          remoteJid,\n          botId: bot ? botId : { not: null },\n          type: 'dify',\n        },\n      });\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error fetching sessions');\n    }\n  }\n\n  public async ignoreJid(instance: InstanceDto, data: IgnoreJidDto) {\n    if (!this.integrationEnabled) throw new BadRequestException('Dify is disabled');\n\n    try {\n      const instanceId = await this.prismaRepository.instance\n        .findFirst({\n          where: {\n            name: instance.instanceName,\n          },\n        })\n        .then((instance) => instance.id);\n\n      const settings = await this.settingsRepository.findFirst({\n        where: {\n          instanceId: instanceId,\n        },\n      });\n\n      if (!settings) {\n        throw new Error('Settings not found');\n      }\n\n      let ignoreJids: any = settings?.ignoreJids || [];\n\n      if (data.action === 'add') {\n        if (ignoreJids.includes(data.remoteJid)) return { ignoreJids: ignoreJids };\n\n        ignoreJids.push(data.remoteJid);\n      } else {\n        ignoreJids = ignoreJids.filter((jid) => jid !== data.remoteJid);\n      }\n\n      const updateSettings = await this.settingsRepository.update({\n        where: {\n          id: settings.id,\n        },\n        data: {\n          ignoreJids: ignoreJids,\n        },\n      });\n\n      return {\n        ignoreJids: updateSettings.ignoreJids,\n      };\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error setting default settings');\n    }\n  }\n\n  // Emit\n  public async emit({ instance, remoteJid, msg }: EmitData) {\n    if (!this.integrationEnabled) return;\n\n    try {\n      const settings = await this.settingsRepository.findFirst({\n        where: {\n          instanceId: instance.instanceId,\n        },\n      });\n\n      if (this.checkIgnoreJids(settings?.ignoreJids, remoteJid)) return;\n\n      const session = await this.getSession(remoteJid, instance);\n\n      const content = getConversationMessage(msg);\n\n      let findBot = (await this.findBotTrigger(this.botRepository, content, instance, session)) as DifyModel;\n\n      if (!findBot) {\n        const fallback = await this.settingsRepository.findFirst({\n          where: {\n            instanceId: instance.instanceId,\n          },\n        });\n\n        if (fallback?.difyIdFallback) {\n          const findFallback = await this.botRepository.findFirst({\n            where: {\n              id: fallback.difyIdFallback,\n            },\n          });\n\n          findBot = findFallback;\n        } else {\n          return;\n        }\n      }\n\n      let expire = findBot?.expire;\n      let keywordFinish = findBot?.keywordFinish;\n      let delayMessage = findBot?.delayMessage;\n      let unknownMessage = findBot?.unknownMessage;\n      let listeningFromMe = findBot?.listeningFromMe;\n      let stopBotFromMe = findBot?.stopBotFromMe;\n      let keepOpen = findBot?.keepOpen;\n      let debounceTime = findBot?.debounceTime;\n      let ignoreJids = findBot?.ignoreJids;\n      let splitMessages = findBot?.splitMessages;\n      let timePerChar = findBot?.timePerChar;\n\n      if (expire === undefined || expire === null) expire = settings.expire;\n      if (keywordFinish === undefined || keywordFinish === null) keywordFinish = settings.keywordFinish;\n      if (delayMessage === undefined || delayMessage === null) delayMessage = settings.delayMessage;\n      if (unknownMessage === undefined || unknownMessage === null) unknownMessage = settings.unknownMessage;\n      if (listeningFromMe === undefined || listeningFromMe === null) listeningFromMe = settings.listeningFromMe;\n      if (stopBotFromMe === undefined || stopBotFromMe === null) stopBotFromMe = settings.stopBotFromMe;\n      if (keepOpen === undefined || keepOpen === null) keepOpen = settings.keepOpen;\n      if (debounceTime === undefined || debounceTime === null) debounceTime = settings.debounceTime;\n      if (ignoreJids === undefined || ignoreJids === null) ignoreJids = settings.ignoreJids;\n      if (splitMessages === undefined || splitMessages === null) splitMessages = settings?.splitMessages ?? false;\n      if (timePerChar === undefined || timePerChar === null) timePerChar = settings?.timePerChar ?? 0;\n\n      const key = msg.key as {\n        id: string;\n        remoteJid: string;\n        fromMe: boolean;\n        participant: string;\n      };\n\n      if (stopBotFromMe && key.fromMe && session) {\n        await this.prismaRepository.integrationSession.update({\n          where: {\n            id: session.id,\n          },\n          data: {\n            status: 'paused',\n          },\n        });\n        return;\n      }\n\n      if (!listeningFromMe && key.fromMe) {\n        return;\n      }\n\n      if (session && !session.awaitUser) {\n        return;\n      }\n\n      if (debounceTime && debounceTime > 0) {\n        this.processDebounce(this.userMessageDebounce, content, remoteJid, debounceTime, async (debouncedContent) => {\n          await this.difyService.processDify(\n            this.waMonitor.waInstances[instance.instanceName],\n            remoteJid,\n            findBot,\n            session,\n            {\n              ...settings,\n              expire,\n              keywordFinish,\n              delayMessage,\n              unknownMessage,\n              listeningFromMe,\n              stopBotFromMe,\n              keepOpen,\n              debounceTime,\n              ignoreJids,\n              splitMessages,\n              timePerChar,\n            },\n            debouncedContent,\n            msg?.pushName,\n          );\n        });\n      } else {\n        await this.difyService.processDify(\n          this.waMonitor.waInstances[instance.instanceName],\n          remoteJid,\n          findBot,\n          session,\n          {\n            ...settings,\n            expire,\n            keywordFinish,\n            delayMessage,\n            unknownMessage,\n            listeningFromMe,\n            stopBotFromMe,\n            keepOpen,\n            debounceTime,\n            ignoreJids,\n            splitMessages,\n            timePerChar,\n          },\n          content,\n          msg?.pushName,\n        );\n      }\n\n      return;\n    } catch (error) {\n      this.logger.error(error);\n      return;\n    }\n  }\n}\n","import { IgnoreJidDto } from '@api/dto/chatbot.dto';\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { Logger } from '@config/logger.config';\nimport { EvolutionBot } from '@prisma/client';\nimport { getConversationMessage } from '@utils/getConversationMessage';\n\nimport { ChatbotController, ChatbotControllerInterface, EmitData } from '../../chatbot.controller';\nimport { EvolutionBotDto } from '../dto/evolutionBot.dto';\nimport { EvolutionBotService } from '../services/evolutionBot.service';\n\nexport class EvolutionBotController extends ChatbotController implements ChatbotControllerInterface {\n  constructor(\n    private readonly evolutionBotService: EvolutionBotService,\n    prismaRepository: PrismaRepository,\n    waMonitor: WAMonitoringService,\n  ) {\n    super(prismaRepository, waMonitor);\n\n    this.botRepository = this.prismaRepository.evolutionBot;\n    this.settingsRepository = this.prismaRepository.evolutionBotSetting;\n    this.sessionRepository = this.prismaRepository.integrationSession;\n  }\n\n  public readonly logger = new Logger('EvolutionBotController');\n\n  integrationEnabled: boolean;\n  botRepository: any;\n  settingsRepository: any;\n  sessionRepository: any;\n  userMessageDebounce: { [key: string]: { message: string; timeoutId: NodeJS.Timeout } } = {};\n\n  // Bots\n  public async createBot(instance: InstanceDto, data: EvolutionBotDto) {\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    if (\n      !data.expire ||\n      !data.keywordFinish ||\n      !data.delayMessage ||\n      !data.unknownMessage ||\n      !data.listeningFromMe ||\n      !data.stopBotFromMe ||\n      !data.keepOpen ||\n      !data.debounceTime ||\n      !data.ignoreJids ||\n      !data.splitMessages ||\n      !data.timePerChar\n    ) {\n      const defaultSettingCheck = await this.settingsRepository.findFirst({\n        where: {\n          instanceId: instanceId,\n        },\n      });\n\n      if (data.expire === undefined || data.expire === null) data.expire = defaultSettingCheck.expire;\n      if (data.keywordFinish === undefined || data.keywordFinish === null)\n        data.keywordFinish = defaultSettingCheck.keywordFinish;\n      if (data.delayMessage === undefined || data.delayMessage === null)\n        data.delayMessage = defaultSettingCheck.delayMessage;\n      if (data.unknownMessage === undefined || data.unknownMessage === null)\n        data.unknownMessage = defaultSettingCheck.unknownMessage;\n      if (data.listeningFromMe === undefined || data.listeningFromMe === null)\n        data.listeningFromMe = defaultSettingCheck.listeningFromMe;\n      if (data.stopBotFromMe === undefined || data.stopBotFromMe === null)\n        data.stopBotFromMe = defaultSettingCheck.stopBotFromMe;\n      if (data.keepOpen === undefined || data.keepOpen === null) data.keepOpen = defaultSettingCheck.keepOpen;\n      if (data.debounceTime === undefined || data.debounceTime === null)\n        data.debounceTime = defaultSettingCheck.debounceTime;\n      if (data.ignoreJids === undefined || data.ignoreJids === null) data.ignoreJids = defaultSettingCheck.ignoreJids;\n      if (data.splitMessages === undefined || data.splitMessages === null)\n        data.splitMessages = defaultSettingCheck?.splitMessages ?? false;\n      if (data.timePerChar === undefined || data.timePerChar === null)\n        data.timePerChar = defaultSettingCheck?.timePerChar ?? 0;\n\n      if (!defaultSettingCheck) {\n        await this.settings(instance, {\n          expire: data.expire,\n          keywordFinish: data.keywordFinish,\n          delayMessage: data.delayMessage,\n          unknownMessage: data.unknownMessage,\n          listeningFromMe: data.listeningFromMe,\n          stopBotFromMe: data.stopBotFromMe,\n          keepOpen: data.keepOpen,\n          debounceTime: data.debounceTime,\n          ignoreJids: data.ignoreJids,\n          splitMessages: data.splitMessages,\n          timePerChar: data.timePerChar,\n        });\n      }\n    }\n\n    const checkTriggerAll = await this.botRepository.findFirst({\n      where: {\n        enabled: true,\n        triggerType: 'all',\n        instanceId: instanceId,\n      },\n    });\n\n    if (checkTriggerAll && data.triggerType === 'all') {\n      throw new Error('You already have a dify with an \"All\" trigger, you cannot have more bots while it is active');\n    }\n\n    const checkDuplicate = await this.botRepository.findFirst({\n      where: {\n        instanceId: instanceId,\n        apiUrl: data.apiUrl,\n        apiKey: data.apiKey,\n      },\n    });\n\n    if (checkDuplicate) {\n      throw new Error('Dify already exists');\n    }\n\n    if (data.triggerType === 'keyword') {\n      if (!data.triggerOperator || !data.triggerValue) {\n        throw new Error('Trigger operator and value are required');\n      }\n\n      const checkDuplicate = await this.botRepository.findFirst({\n        where: {\n          triggerOperator: data.triggerOperator,\n          triggerValue: data.triggerValue,\n          instanceId: instanceId,\n        },\n      });\n\n      if (checkDuplicate) {\n        throw new Error('Trigger already exists');\n      }\n    }\n\n    if (data.triggerType === 'advanced') {\n      if (!data.triggerValue) {\n        throw new Error('Trigger value is required');\n      }\n\n      const checkDuplicate = await this.botRepository.findFirst({\n        where: {\n          triggerValue: data.triggerValue,\n          instanceId: instanceId,\n        },\n      });\n\n      if (checkDuplicate) {\n        throw new Error('Trigger already exists');\n      }\n    }\n\n    try {\n      const bot = await this.botRepository.create({\n        data: {\n          enabled: data?.enabled,\n          description: data.description,\n          apiUrl: data.apiUrl,\n          apiKey: data.apiKey,\n          expire: data.expire,\n          keywordFinish: data.keywordFinish,\n          delayMessage: data.delayMessage,\n          unknownMessage: data.unknownMessage,\n          listeningFromMe: data.listeningFromMe,\n          stopBotFromMe: data.stopBotFromMe,\n          keepOpen: data.keepOpen,\n          debounceTime: data.debounceTime,\n          instanceId: instanceId,\n          triggerType: data.triggerType,\n          triggerOperator: data.triggerOperator,\n          triggerValue: data.triggerValue,\n          ignoreJids: data.ignoreJids,\n          splitMessages: data.splitMessages,\n          timePerChar: data.timePerChar,\n        },\n      });\n\n      return bot;\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error creating bot');\n    }\n  }\n\n  public async findBot(instance: InstanceDto) {\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    const bots = await this.botRepository.findMany({\n      where: {\n        instanceId: instanceId,\n      },\n    });\n\n    if (!bots.length) {\n      return null;\n    }\n\n    return bots;\n  }\n\n  public async fetchBot(instance: InstanceDto, botId: string) {\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    const bot = await this.botRepository.findFirst({\n      where: {\n        id: botId,\n      },\n    });\n\n    if (!bot) {\n      throw new Error('Bot not found');\n    }\n\n    if (bot.instanceId !== instanceId) {\n      throw new Error('Bot not found');\n    }\n\n    return bot;\n  }\n\n  public async updateBot(instance: InstanceDto, botId: string, data: EvolutionBotDto) {\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    const bot = await this.botRepository.findFirst({\n      where: {\n        id: botId,\n      },\n    });\n\n    if (!bot) {\n      throw new Error('Bot not found');\n    }\n\n    if (bot.instanceId !== instanceId) {\n      throw new Error('Bot not found');\n    }\n\n    if (data.triggerType === 'all') {\n      const checkTriggerAll = await this.botRepository.findFirst({\n        where: {\n          enabled: true,\n          triggerType: 'all',\n          id: {\n            not: botId,\n          },\n          instanceId: instanceId,\n        },\n      });\n\n      if (checkTriggerAll) {\n        throw new Error('You already have a bot with an \"All\" trigger, you cannot have more bots while it is active');\n      }\n    }\n\n    const checkDuplicate = await this.botRepository.findFirst({\n      where: {\n        id: {\n          not: botId,\n        },\n        instanceId: instanceId,\n        apiUrl: data.apiUrl,\n        apiKey: data.apiKey,\n      },\n    });\n\n    if (checkDuplicate) {\n      throw new Error('Bot already exists');\n    }\n\n    if (data.triggerType === 'keyword') {\n      if (!data.triggerOperator || !data.triggerValue) {\n        throw new Error('Trigger operator and value are required');\n      }\n\n      const checkDuplicate = await this.botRepository.findFirst({\n        where: {\n          triggerOperator: data.triggerOperator,\n          triggerValue: data.triggerValue,\n          id: { not: botId },\n          instanceId: instanceId,\n        },\n      });\n\n      if (checkDuplicate) {\n        throw new Error('Trigger already exists');\n      }\n    }\n\n    if (data.triggerType === 'advanced') {\n      if (!data.triggerValue) {\n        throw new Error('Trigger value is required');\n      }\n\n      const checkDuplicate = await this.botRepository.findFirst({\n        where: {\n          triggerValue: data.triggerValue,\n          id: { not: botId },\n          instanceId: instanceId,\n        },\n      });\n\n      if (checkDuplicate) {\n        throw new Error('Trigger already exists');\n      }\n    }\n\n    try {\n      const bot = await this.botRepository.update({\n        where: {\n          id: botId,\n        },\n        data: {\n          enabled: data?.enabled,\n          description: data.description,\n          apiUrl: data.apiUrl,\n          apiKey: data.apiKey,\n          expire: data.expire,\n          keywordFinish: data.keywordFinish,\n          delayMessage: data.delayMessage,\n          unknownMessage: data.unknownMessage,\n          listeningFromMe: data.listeningFromMe,\n          stopBotFromMe: data.stopBotFromMe,\n          keepOpen: data.keepOpen,\n          debounceTime: data.debounceTime,\n          instanceId: instanceId,\n          triggerType: data.triggerType,\n          triggerOperator: data.triggerOperator,\n          triggerValue: data.triggerValue,\n          ignoreJids: data.ignoreJids,\n          splitMessages: data.splitMessages,\n          timePerChar: data.timePerChar,\n        },\n      });\n\n      return bot;\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error updating bot');\n    }\n  }\n\n  public async deleteBot(instance: InstanceDto, botId: string) {\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    const bot = await this.botRepository.findFirst({\n      where: {\n        id: botId,\n      },\n    });\n\n    if (!bot) {\n      throw new Error('Bot not found');\n    }\n\n    if (bot.instanceId !== instanceId) {\n      throw new Error('Bot not found');\n    }\n    try {\n      await this.prismaRepository.integrationSession.deleteMany({\n        where: {\n          botId: botId,\n        },\n      });\n\n      await this.botRepository.delete({\n        where: {\n          id: botId,\n        },\n      });\n\n      return { bot: { id: botId } };\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error deleting bot');\n    }\n  }\n\n  // Settings\n  public async settings(instance: InstanceDto, data: any) {\n    try {\n      const instanceId = await this.prismaRepository.instance\n        .findFirst({\n          where: {\n            name: instance.instanceName,\n          },\n        })\n        .then((instance) => instance.id);\n\n      const settings = await this.settingsRepository.findFirst({\n        where: {\n          instanceId: instanceId,\n        },\n      });\n\n      if (settings) {\n        const updateSettings = await this.settingsRepository.update({\n          where: {\n            id: settings.id,\n          },\n          data: {\n            expire: data.expire,\n            keywordFinish: data.keywordFinish,\n            delayMessage: data.delayMessage,\n            unknownMessage: data.unknownMessage,\n            listeningFromMe: data.listeningFromMe,\n            stopBotFromMe: data.stopBotFromMe,\n            keepOpen: data.keepOpen,\n            debounceTime: data.debounceTime,\n            botIdFallback: data.botIdFallback,\n            ignoreJids: data.ignoreJids,\n            splitMessages: data.splitMessages,\n            timePerChar: data.timePerChar,\n          },\n        });\n\n        return {\n          expire: updateSettings.expire,\n          keywordFinish: updateSettings.keywordFinish,\n          delayMessage: updateSettings.delayMessage,\n          unknownMessage: updateSettings.unknownMessage,\n          listeningFromMe: updateSettings.listeningFromMe,\n          stopBotFromMe: updateSettings.stopBotFromMe,\n          keepOpen: updateSettings.keepOpen,\n          debounceTime: updateSettings.debounceTime,\n          botIdFallback: updateSettings.botIdFallback,\n          ignoreJids: updateSettings.ignoreJids,\n          splitMessages: updateSettings.splitMessages,\n          timePerChar: updateSettings.timePerChar,\n        };\n      }\n\n      const newSetttings = await this.settingsRepository.create({\n        data: {\n          expire: data.expire,\n          keywordFinish: data.keywordFinish,\n          delayMessage: data.delayMessage,\n          unknownMessage: data.unknownMessage,\n          listeningFromMe: data.listeningFromMe,\n          stopBotFromMe: data.stopBotFromMe,\n          keepOpen: data.keepOpen,\n          debounceTime: data.debounceTime,\n          botIdFallback: data.botIdFallback,\n          ignoreJids: data.ignoreJids,\n          splitMessages: data.splitMessages,\n          timePerChar: data.timePerChar,\n          instanceId: instanceId,\n        },\n      });\n\n      return {\n        expire: newSetttings.expire,\n        keywordFinish: newSetttings.keywordFinish,\n        delayMessage: newSetttings.delayMessage,\n        unknownMessage: newSetttings.unknownMessage,\n        listeningFromMe: newSetttings.listeningFromMe,\n        stopBotFromMe: newSetttings.stopBotFromMe,\n        keepOpen: newSetttings.keepOpen,\n        debounceTime: newSetttings.debounceTime,\n        botIdFallback: newSetttings.botIdFallback,\n        ignoreJids: newSetttings.ignoreJids,\n        splitMessages: newSetttings.splitMessages,\n        timePerChar: newSetttings.timePerChar,\n      };\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error setting default settings');\n    }\n  }\n\n  public async fetchSettings(instance: InstanceDto) {\n    try {\n      const instanceId = await this.prismaRepository.instance\n        .findFirst({\n          where: {\n            name: instance.instanceName,\n          },\n        })\n        .then((instance) => instance.id);\n\n      const settings = await this.settingsRepository.findFirst({\n        where: {\n          instanceId: instanceId,\n        },\n        include: {\n          Fallback: true,\n        },\n      });\n\n      if (!settings) {\n        return {\n          expire: 0,\n          keywordFinish: '',\n          delayMessage: 0,\n          unknownMessage: '',\n          listeningFromMe: false,\n          stopBotFromMe: false,\n          keepOpen: false,\n          ignoreJids: [],\n          splitMessages: false,\n          timePerChar: 0,\n          botIdFallback: '',\n          fallback: null,\n        };\n      }\n\n      return {\n        expire: settings.expire,\n        keywordFinish: settings.keywordFinish,\n        delayMessage: settings.delayMessage,\n        unknownMessage: settings.unknownMessage,\n        listeningFromMe: settings.listeningFromMe,\n        stopBotFromMe: settings.stopBotFromMe,\n        keepOpen: settings.keepOpen,\n        ignoreJids: settings.ignoreJids,\n        splitMessages: settings.splitMessages,\n        timePerChar: settings.timePerChar,\n        botIdFallback: settings.botIdFallback,\n        fallback: settings.Fallback,\n      };\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error fetching default settings');\n    }\n  }\n\n  // Sessions\n  public async changeStatus(instance: InstanceDto, data: any) {\n    try {\n      const instanceId = await this.prismaRepository.instance\n        .findFirst({\n          where: {\n            name: instance.instanceName,\n          },\n        })\n        .then((instance) => instance.id);\n\n      const defaultSettingCheck = await this.settingsRepository.findFirst({\n        where: {\n          instanceId,\n        },\n      });\n\n      const remoteJid = data.remoteJid;\n      const status = data.status;\n\n      if (status === 'delete') {\n        await this.sessionRepository.deleteMany({\n          where: {\n            remoteJid: remoteJid,\n            botId: { not: null },\n          },\n        });\n\n        return { bot: { remoteJid: remoteJid, status: status } };\n      }\n\n      if (status === 'closed') {\n        if (defaultSettingCheck?.keepOpen) {\n          await this.sessionRepository.updateMany({\n            where: {\n              remoteJid: remoteJid,\n              botId: { not: null },\n            },\n            data: {\n              status: 'closed',\n            },\n          });\n        } else {\n          await this.sessionRepository.deleteMany({\n            where: {\n              remoteJid: remoteJid,\n              botId: { not: null },\n            },\n          });\n        }\n\n        return { bot: { ...instance, bot: { remoteJid: remoteJid, status: status } } };\n      } else {\n        const session = await this.sessionRepository.updateMany({\n          where: {\n            instanceId: instanceId,\n            remoteJid: remoteJid,\n            botId: { not: null },\n          },\n          data: {\n            status: status,\n          },\n        });\n\n        const botData = {\n          remoteJid: remoteJid,\n          status: status,\n          session,\n        };\n\n        return { bot: { ...instance, bot: botData } };\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error changing status');\n    }\n  }\n\n  public async fetchSessions(instance: InstanceDto, botId: string, remoteJid?: string) {\n    try {\n      const instanceId = await this.prismaRepository.instance\n        .findFirst({\n          where: {\n            name: instance.instanceName,\n          },\n        })\n        .then((instance) => instance.id);\n\n      const bot = await this.botRepository.findFirst({\n        where: {\n          id: botId,\n        },\n      });\n\n      if (bot && bot.instanceId !== instanceId) {\n        throw new Error('Dify not found');\n      }\n\n      return await this.sessionRepository.findMany({\n        where: {\n          instanceId: instanceId,\n          remoteJid,\n          botId: bot ? botId : { not: null },\n          type: 'evolution',\n        },\n      });\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error fetching sessions');\n    }\n  }\n\n  public async ignoreJid(instance: InstanceDto, data: IgnoreJidDto) {\n    try {\n      const instanceId = await this.prismaRepository.instance\n        .findFirst({\n          where: {\n            name: instance.instanceName,\n          },\n        })\n        .then((instance) => instance.id);\n\n      const settings = await this.settingsRepository.findFirst({\n        where: {\n          instanceId: instanceId,\n        },\n      });\n\n      if (!settings) {\n        throw new Error('Settings not found');\n      }\n\n      let ignoreJids: any = settings?.ignoreJids || [];\n\n      if (data.action === 'add') {\n        if (ignoreJids.includes(data.remoteJid)) return { ignoreJids: ignoreJids };\n\n        ignoreJids.push(data.remoteJid);\n      } else {\n        ignoreJids = ignoreJids.filter((jid) => jid !== data.remoteJid);\n      }\n\n      const updateSettings = await this.settingsRepository.update({\n        where: {\n          id: settings.id,\n        },\n        data: {\n          ignoreJids: ignoreJids,\n        },\n      });\n\n      return {\n        ignoreJids: updateSettings.ignoreJids,\n      };\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error setting default settings');\n    }\n  }\n\n  // Emit\n  public async emit({ instance, remoteJid, msg }: EmitData) {\n    try {\n      const settings = await this.settingsRepository.findFirst({\n        where: {\n          instanceId: instance.instanceId,\n        },\n      });\n\n      if (this.checkIgnoreJids(settings?.ignoreJids, remoteJid)) return;\n\n      const session = await this.getSession(remoteJid, instance);\n\n      const content = getConversationMessage(msg);\n\n      let findBot = (await this.findBotTrigger(this.botRepository, content, instance, session)) as EvolutionBot;\n\n      if (!findBot) {\n        const fallback = await this.settingsRepository.findFirst({\n          where: {\n            instanceId: instance.instanceId,\n          },\n        });\n\n        if (fallback?.botIdFallback) {\n          const findFallback = await this.botRepository.findFirst({\n            where: {\n              id: fallback.botIdFallback,\n            },\n          });\n\n          findBot = findFallback;\n        } else {\n          return;\n        }\n      }\n\n      let expire = findBot?.expire;\n      let keywordFinish = findBot?.keywordFinish;\n      let delayMessage = findBot?.delayMessage;\n      let unknownMessage = findBot?.unknownMessage;\n      let listeningFromMe = findBot?.listeningFromMe;\n      let stopBotFromMe = findBot?.stopBotFromMe;\n      let keepOpen = findBot?.keepOpen;\n      let debounceTime = findBot?.debounceTime;\n      let ignoreJids = findBot?.ignoreJids;\n      let splitMessages = findBot?.splitMessages;\n      let timePerChar = findBot?.timePerChar;\n\n      if (expire === undefined || expire === null) expire = settings.expire;\n      if (keywordFinish === undefined || keywordFinish === null) keywordFinish = settings.keywordFinish;\n      if (delayMessage === undefined || delayMessage === null) delayMessage = settings.delayMessage;\n      if (unknownMessage === undefined || unknownMessage === null) unknownMessage = settings.unknownMessage;\n      if (listeningFromMe === undefined || listeningFromMe === null) listeningFromMe = settings.listeningFromMe;\n      if (stopBotFromMe === undefined || stopBotFromMe === null) stopBotFromMe = settings.stopBotFromMe;\n      if (keepOpen === undefined || keepOpen === null) keepOpen = settings.keepOpen;\n      if (debounceTime === undefined || debounceTime === null) debounceTime = settings.debounceTime;\n      if (ignoreJids === undefined || ignoreJids === null) ignoreJids = settings.ignoreJids;\n      if (splitMessages === undefined || splitMessages === null) splitMessages = settings?.splitMessages ?? false;\n      if (timePerChar === undefined || timePerChar === null) timePerChar = settings?.timePerChar ?? 0;\n\n      const key = msg.key as {\n        id: string;\n        remoteJid: string;\n        fromMe: boolean;\n        participant: string;\n      };\n\n      if (stopBotFromMe && key.fromMe && session) {\n        await this.prismaRepository.integrationSession.update({\n          where: {\n            id: session.id,\n          },\n          data: {\n            status: 'paused',\n          },\n        });\n        return;\n      }\n\n      if (!listeningFromMe && key.fromMe) {\n        return;\n      }\n\n      if (session && !session.awaitUser) {\n        return;\n      }\n\n      if (debounceTime && debounceTime > 0) {\n        this.processDebounce(this.userMessageDebounce, content, remoteJid, debounceTime, async (debouncedContent) => {\n          await this.evolutionBotService.processBot(\n            this.waMonitor.waInstances[instance.instanceName],\n            remoteJid,\n            findBot,\n            session,\n            {\n              ...settings,\n              expire,\n              keywordFinish,\n              delayMessage,\n              unknownMessage,\n              listeningFromMe,\n              stopBotFromMe,\n              keepOpen,\n              debounceTime,\n              ignoreJids,\n              splitMessages,\n              timePerChar,\n            },\n            debouncedContent,\n            msg?.pushName,\n          );\n        });\n      } else {\n        await this.evolutionBotService.processBot(\n          this.waMonitor.waInstances[instance.instanceName],\n          remoteJid,\n          findBot,\n          session,\n          {\n            ...settings,\n            expire,\n            keywordFinish,\n            delayMessage,\n            unknownMessage,\n            listeningFromMe,\n            stopBotFromMe,\n            keepOpen,\n            debounceTime,\n            ignoreJids,\n            splitMessages,\n            timePerChar,\n          },\n          content,\n          msg?.pushName,\n        );\n      }\n\n      return;\n    } catch (error) {\n      this.logger.error(error);\n      return;\n    }\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { Integration } from '@api/types/wa.types';\nimport { Auth, ConfigService, HttpServer } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport { EvolutionBot, EvolutionBotSetting, IntegrationSession } from '@prisma/client';\nimport { sendTelemetry } from '@utils/sendTelemetry';\nimport axios from 'axios';\n\nexport class EvolutionBotService {\n  constructor(\n    private readonly waMonitor: WAMonitoringService,\n    private readonly configService: ConfigService,\n    private readonly prismaRepository: PrismaRepository,\n  ) {}\n\n  private readonly logger = new Logger('EvolutionBotService');\n\n  public async createNewSession(instance: InstanceDto, data: any) {\n    try {\n      const session = await this.prismaRepository.integrationSession.create({\n        data: {\n          remoteJid: data.remoteJid,\n          pushName: data.pushName,\n          sessionId: data.remoteJid,\n          status: 'opened',\n          awaitUser: false,\n          botId: data.botId,\n          instanceId: instance.instanceId,\n          type: 'evolution',\n        },\n      });\n\n      return { session };\n    } catch (error) {\n      this.logger.error(error);\n      return;\n    }\n  }\n\n  private isImageMessage(content: string) {\n    return content.includes('imageMessage');\n  }\n\n  private async sendMessageToBot(\n    instance: any,\n    session: IntegrationSession,\n    bot: EvolutionBot,\n    remoteJid: string,\n    pushName: string,\n    content: string,\n  ) {\n    const payload: any = {\n      inputs: {\n        sessionId: session.id,\n        remoteJid: remoteJid,\n        pushName: pushName,\n        instanceName: instance.instanceName,\n        serverUrl: this.configService.get<HttpServer>('SERVER').URL,\n        apiKey: this.configService.get<Auth>('AUTHENTICATION').API_KEY.KEY,\n      },\n      query: content,\n      conversation_id: session.sessionId === remoteJid ? undefined : session.sessionId,\n      user: remoteJid,\n    };\n\n    if (this.isImageMessage(content)) {\n      const contentSplit = content.split('|');\n\n      payload.files = [\n        {\n          type: 'image',\n          url: contentSplit[1].split('?')[0],\n        },\n      ];\n      payload.query = contentSplit[2] || content;\n    }\n\n    if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n      await instance.client.presenceSubscribe(remoteJid);\n      await instance.client.sendPresenceUpdate('composing', remoteJid);\n    }\n\n    let headers: any = {\n      'Content-Type': 'application/json',\n    };\n\n    if (bot.apiKey) {\n      headers = {\n        ...headers,\n        Authorization: `Bearer ${bot.apiKey}`,\n      };\n    }\n\n    const response = await axios.post(bot.apiUrl, payload, {\n      headers,\n    });\n\n    if (instance.integration === Integration.WHATSAPP_BAILEYS)\n      await instance.client.sendPresenceUpdate('paused', remoteJid);\n\n    const message = response?.data?.message;\n\n    return message;\n  }\n\n  private async sendMessageWhatsApp(\n    instance: any,\n    remoteJid: string,\n    session: IntegrationSession,\n    settings: EvolutionBotSetting,\n    message: string,\n  ) {\n    const linkRegex = /(!?)\\[(.*?)\\]\\((.*?)\\)/g;\n\n    let textBuffer = '';\n    let lastIndex = 0;\n\n    let match: RegExpExecArray | null;\n\n    const getMediaType = (url: string): string | null => {\n      const extension = url.split('.').pop()?.toLowerCase();\n      const imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp'];\n      const audioExtensions = ['mp3', 'wav', 'aac', 'ogg'];\n      const videoExtensions = ['mp4', 'avi', 'mkv', 'mov'];\n      const documentExtensions = ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'txt'];\n\n      if (imageExtensions.includes(extension || '')) return 'image';\n      if (audioExtensions.includes(extension || '')) return 'audio';\n      if (videoExtensions.includes(extension || '')) return 'video';\n      if (documentExtensions.includes(extension || '')) return 'document';\n      return null;\n    };\n\n    while ((match = linkRegex.exec(message)) !== null) {\n      const [fullMatch, exclMark, altText, url] = match;\n      const mediaType = getMediaType(url);\n\n      const beforeText = message.slice(lastIndex, match.index);\n      if (beforeText) {\n        textBuffer += beforeText;\n      }\n\n      if (mediaType) {\n        const splitMessages = settings.splitMessages ?? false;\n        const timePerChar = settings.timePerChar ?? 0;\n        const minDelay = 1000;\n        const maxDelay = 20000;\n\n        if (textBuffer.trim()) {\n          if (splitMessages) {\n            const multipleMessages = textBuffer.trim().split('\\n\\n');\n\n            for (let index = 0; index < multipleMessages.length; index++) {\n              const message = multipleMessages[index];\n\n              const delay = Math.min(Math.max(message.length * timePerChar, minDelay), maxDelay);\n\n              if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n                await instance.client.presenceSubscribe(remoteJid);\n                await instance.client.sendPresenceUpdate('composing', remoteJid);\n              }\n\n              await new Promise<void>((resolve) => {\n                setTimeout(async () => {\n                  await instance.textMessage(\n                    {\n                      number: remoteJid.split('@')[0],\n                      delay: settings?.delayMessage || 1000,\n                      text: message,\n                    },\n                    false,\n                  );\n                  resolve();\n                }, delay);\n              });\n\n              if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n                await instance.client.sendPresenceUpdate('paused', remoteJid);\n              }\n            }\n          } else {\n            await instance.textMessage(\n              {\n                number: remoteJid.split('@')[0],\n                delay: settings?.delayMessage || 1000,\n                text: textBuffer.trim(),\n              },\n              false,\n            );\n          }\n          textBuffer = '';\n        }\n\n        if (mediaType === 'audio') {\n          await instance.audioWhatsapp({\n            number: remoteJid.split('@')[0],\n            delay: settings?.delayMessage || 1000,\n            audio: url,\n            caption: altText,\n          });\n        } else {\n          await instance.mediaMessage(\n            {\n              number: remoteJid.split('@')[0],\n              delay: settings?.delayMessage || 1000,\n              mediatype: mediaType,\n              media: url,\n              caption: altText,\n            },\n            null,\n            false,\n          );\n        }\n      } else {\n        textBuffer += `[${altText}](${url})`;\n      }\n\n      lastIndex = linkRegex.lastIndex;\n    }\n\n    if (lastIndex < message.length) {\n      const remainingText = message.slice(lastIndex);\n      if (remainingText.trim()) {\n        textBuffer += remainingText;\n      }\n    }\n\n    const splitMessages = settings.splitMessages ?? false;\n    const timePerChar = settings.timePerChar ?? 0;\n    const minDelay = 1000;\n    const maxDelay = 20000;\n\n    if (textBuffer.trim()) {\n      if (splitMessages) {\n        const multipleMessages = textBuffer.trim().split('\\n\\n');\n\n        for (let index = 0; index < multipleMessages.length; index++) {\n          const message = multipleMessages[index];\n\n          const delay = Math.min(Math.max(message.length * timePerChar, minDelay), maxDelay);\n\n          if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n            await instance.client.presenceSubscribe(remoteJid);\n            await instance.client.sendPresenceUpdate('composing', remoteJid);\n          }\n\n          await new Promise<void>((resolve) => {\n            setTimeout(async () => {\n              await instance.textMessage(\n                {\n                  number: remoteJid.split('@')[0],\n                  delay: settings?.delayMessage || 1000,\n                  text: message,\n                },\n                false,\n              );\n              resolve();\n            }, delay);\n          });\n\n          if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n            await instance.client.sendPresenceUpdate('paused', remoteJid);\n          }\n        }\n      } else {\n        await instance.textMessage(\n          {\n            number: remoteJid.split('@')[0],\n            delay: settings?.delayMessage || 1000,\n            text: textBuffer.trim(),\n          },\n          false,\n        );\n      }\n      textBuffer = '';\n    }\n\n    sendTelemetry('/message/sendText');\n\n    await this.prismaRepository.integrationSession.update({\n      where: {\n        id: session.id,\n      },\n      data: {\n        status: 'opened',\n        awaitUser: true,\n      },\n    });\n  }\n\n  private async initNewSession(\n    instance: any,\n    remoteJid: string,\n    bot: EvolutionBot,\n    settings: EvolutionBotSetting,\n    session: IntegrationSession,\n    content: string,\n    pushName?: string,\n  ) {\n    const data = await this.createNewSession(instance, {\n      remoteJid,\n      pushName,\n      botId: bot.id,\n    });\n\n    if (data.session) {\n      session = data.session;\n    }\n\n    const message = await this.sendMessageToBot(instance, session, bot, remoteJid, pushName, content);\n\n    if (!message) return;\n\n    await this.sendMessageWhatsApp(instance, remoteJid, session, settings, message);\n\n    return;\n  }\n\n  public async processBot(\n    instance: any,\n    remoteJid: string,\n    bot: EvolutionBot,\n    session: IntegrationSession,\n    settings: EvolutionBotSetting,\n    content: string,\n    pushName?: string,\n  ) {\n    if (session && session.status !== 'opened') {\n      return;\n    }\n\n    if (session && settings.expire && settings.expire > 0) {\n      const now = Date.now();\n\n      const sessionUpdatedAt = new Date(session.updatedAt).getTime();\n\n      const diff = now - sessionUpdatedAt;\n\n      const diffInMinutes = Math.floor(diff / 1000 / 60);\n\n      if (diffInMinutes > settings.expire) {\n        if (settings.keepOpen) {\n          await this.prismaRepository.integrationSession.update({\n            where: {\n              id: session.id,\n            },\n            data: {\n              status: 'closed',\n            },\n          });\n        } else {\n          await this.prismaRepository.integrationSession.deleteMany({\n            where: {\n              botId: bot.id,\n              remoteJid: remoteJid,\n            },\n          });\n        }\n\n        await this.initNewSession(instance, remoteJid, bot, settings, session, content, pushName);\n        return;\n      }\n    }\n\n    if (!session) {\n      await this.initNewSession(instance, remoteJid, bot, settings, session, content, pushName);\n      return;\n    }\n\n    await this.prismaRepository.integrationSession.update({\n      where: {\n        id: session.id,\n      },\n      data: {\n        status: 'opened',\n        awaitUser: false,\n      },\n    });\n\n    if (!content) {\n      if (settings.unknownMessage) {\n        this.waMonitor.waInstances[instance.instanceName].textMessage(\n          {\n            number: remoteJid.split('@')[0],\n            delay: settings.delayMessage || 1000,\n            text: settings.unknownMessage,\n          },\n          false,\n        );\n\n        sendTelemetry('/message/sendText');\n      }\n      return;\n    }\n\n    if (settings.keywordFinish && content.toLowerCase() === settings.keywordFinish.toLowerCase()) {\n      if (settings.keepOpen) {\n        await this.prismaRepository.integrationSession.update({\n          where: {\n            id: session.id,\n          },\n          data: {\n            status: 'closed',\n          },\n        });\n      } else {\n        await this.prismaRepository.integrationSession.deleteMany({\n          where: {\n            botId: bot.id,\n            remoteJid: remoteJid,\n          },\n        });\n      }\n      return;\n    }\n\n    const message = await this.sendMessageToBot(instance, session, bot, remoteJid, pushName, content);\n\n    if (!message) return;\n\n    await this.sendMessageWhatsApp(instance, remoteJid, session, settings, message);\n\n    return;\n  }\n}\n","import { IgnoreJidDto } from '@api/dto/chatbot.dto';\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { Logger } from '@config/logger.config';\nimport { Flowise } from '@prisma/client';\nimport { getConversationMessage } from '@utils/getConversationMessage';\n\nimport { ChatbotController, ChatbotControllerInterface, EmitData } from '../../chatbot.controller';\nimport { FlowiseDto } from '../dto/flowise.dto';\nimport { FlowiseService } from '../services/flowise.service';\n\nexport class FlowiseController extends ChatbotController implements ChatbotControllerInterface {\n  constructor(\n    private readonly flowiseService: FlowiseService,\n    prismaRepository: PrismaRepository,\n    waMonitor: WAMonitoringService,\n  ) {\n    super(prismaRepository, waMonitor);\n\n    this.botRepository = this.prismaRepository.flowise;\n    this.settingsRepository = this.prismaRepository.flowiseSetting;\n    this.sessionRepository = this.prismaRepository.integrationSession;\n  }\n\n  public readonly logger = new Logger('FlowiseController');\n\n  integrationEnabled: boolean;\n  botRepository: any;\n  settingsRepository: any;\n  sessionRepository: any;\n  userMessageDebounce: { [key: string]: { message: string; timeoutId: NodeJS.Timeout } } = {};\n\n  // Bots\n  public async createBot(instance: InstanceDto, data: FlowiseDto) {\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    if (\n      !data.expire ||\n      !data.keywordFinish ||\n      !data.delayMessage ||\n      !data.unknownMessage ||\n      !data.listeningFromMe ||\n      !data.stopBotFromMe ||\n      !data.keepOpen ||\n      !data.debounceTime ||\n      !data.ignoreJids ||\n      !data.splitMessages ||\n      !data.timePerChar\n    ) {\n      const defaultSettingCheck = await this.settingsRepository.findFirst({\n        where: {\n          instanceId: instanceId,\n        },\n      });\n\n      if (data.expire === undefined || data.expire === null) data.expire = defaultSettingCheck.expire;\n      if (data.keywordFinish === undefined || data.keywordFinish === null)\n        data.keywordFinish = defaultSettingCheck.keywordFinish;\n      if (data.delayMessage === undefined || data.delayMessage === null)\n        data.delayMessage = defaultSettingCheck.delayMessage;\n      if (data.unknownMessage === undefined || data.unknownMessage === null)\n        data.unknownMessage = defaultSettingCheck.unknownMessage;\n      if (data.listeningFromMe === undefined || data.listeningFromMe === null)\n        data.listeningFromMe = defaultSettingCheck.listeningFromMe;\n      if (data.stopBotFromMe === undefined || data.stopBotFromMe === null)\n        data.stopBotFromMe = defaultSettingCheck.stopBotFromMe;\n      if (data.keepOpen === undefined || data.keepOpen === null) data.keepOpen = defaultSettingCheck.keepOpen;\n      if (data.debounceTime === undefined || data.debounceTime === null)\n        data.debounceTime = defaultSettingCheck.debounceTime;\n      if (data.ignoreJids === undefined || data.ignoreJids === null) data.ignoreJids = defaultSettingCheck.ignoreJids;\n      if (data.splitMessages === undefined || data.splitMessages === null)\n        data.splitMessages = defaultSettingCheck?.splitMessages ?? false;\n      if (data.timePerChar === undefined || data.timePerChar === null)\n        data.timePerChar = defaultSettingCheck?.timePerChar ?? 0;\n\n      if (!defaultSettingCheck) {\n        await this.settings(instance, {\n          expire: data.expire,\n          keywordFinish: data.keywordFinish,\n          delayMessage: data.delayMessage,\n          unknownMessage: data.unknownMessage,\n          listeningFromMe: data.listeningFromMe,\n          stopBotFromMe: data.stopBotFromMe,\n          keepOpen: data.keepOpen,\n          debounceTime: data.debounceTime,\n          ignoreJids: data.ignoreJids,\n          splitMessages: data.splitMessages,\n          timePerChar: data.timePerChar,\n        });\n      }\n    }\n\n    const checkTriggerAll = await this.botRepository.findFirst({\n      where: {\n        enabled: true,\n        triggerType: 'all',\n        instanceId: instanceId,\n      },\n    });\n\n    if (checkTriggerAll && data.triggerType === 'all') {\n      throw new Error('You already have a Flowise with an \"All\" trigger, you cannot have more bots while it is active');\n    }\n\n    const checkDuplicate = await this.botRepository.findFirst({\n      where: {\n        instanceId: instanceId,\n        apiUrl: data.apiUrl,\n        apiKey: data.apiKey,\n      },\n    });\n\n    if (checkDuplicate) {\n      throw new Error('Flowise already exists');\n    }\n\n    if (data.triggerType === 'keyword') {\n      if (!data.triggerOperator || !data.triggerValue) {\n        throw new Error('Trigger operator and value are required');\n      }\n\n      const checkDuplicate = await this.botRepository.findFirst({\n        where: {\n          triggerOperator: data.triggerOperator,\n          triggerValue: data.triggerValue,\n          instanceId: instanceId,\n        },\n      });\n\n      if (checkDuplicate) {\n        throw new Error('Trigger already exists');\n      }\n    }\n\n    if (data.triggerType === 'advanced') {\n      if (!data.triggerValue) {\n        throw new Error('Trigger value is required');\n      }\n\n      const checkDuplicate = await this.botRepository.findFirst({\n        where: {\n          triggerValue: data.triggerValue,\n          instanceId: instanceId,\n        },\n      });\n\n      if (checkDuplicate) {\n        throw new Error('Trigger already exists');\n      }\n    }\n\n    try {\n      const bot = await this.botRepository.create({\n        data: {\n          enabled: data?.enabled,\n          description: data.description,\n          apiUrl: data.apiUrl,\n          apiKey: data.apiKey,\n          expire: data.expire,\n          keywordFinish: data.keywordFinish,\n          delayMessage: data.delayMessage,\n          unknownMessage: data.unknownMessage,\n          listeningFromMe: data.listeningFromMe,\n          stopBotFromMe: data.stopBotFromMe,\n          keepOpen: data.keepOpen,\n          debounceTime: data.debounceTime,\n          instanceId: instanceId,\n          triggerType: data.triggerType,\n          triggerOperator: data.triggerOperator,\n          triggerValue: data.triggerValue,\n          ignoreJids: data.ignoreJids,\n          splitMessages: data.splitMessages,\n          timePerChar: data.timePerChar,\n        },\n      });\n\n      return bot;\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error creating bot');\n    }\n  }\n\n  public async findBot(instance: InstanceDto) {\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    const bots = await this.botRepository.findMany({\n      where: {\n        instanceId: instanceId,\n      },\n    });\n\n    if (!bots.length) {\n      return null;\n    }\n\n    return bots;\n  }\n\n  public async fetchBot(instance: InstanceDto, botId: string) {\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    const bot = await this.botRepository.findFirst({\n      where: {\n        id: botId,\n      },\n    });\n\n    if (!bot) {\n      throw new Error('Bot not found');\n    }\n\n    if (bot.instanceId !== instanceId) {\n      throw new Error('Bot not found');\n    }\n\n    return bot;\n  }\n\n  public async updateBot(instance: InstanceDto, botId: string, data: FlowiseDto) {\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    const bot = await this.botRepository.findFirst({\n      where: {\n        id: botId,\n      },\n    });\n\n    if (!bot) {\n      throw new Error('Bot not found');\n    }\n\n    if (bot.instanceId !== instanceId) {\n      throw new Error('Bot not found');\n    }\n\n    if (data.triggerType === 'all') {\n      const checkTriggerAll = await this.botRepository.findFirst({\n        where: {\n          enabled: true,\n          triggerType: 'all',\n          id: {\n            not: botId,\n          },\n          instanceId: instanceId,\n        },\n      });\n\n      if (checkTriggerAll) {\n        throw new Error('You already have a bot with an \"All\" trigger, you cannot have more bots while it is active');\n      }\n    }\n\n    const checkDuplicate = await this.botRepository.findFirst({\n      where: {\n        id: {\n          not: botId,\n        },\n        instanceId: instanceId,\n        apiUrl: data.apiUrl,\n        apiKey: data.apiKey,\n      },\n    });\n\n    if (checkDuplicate) {\n      throw new Error('Bot already exists');\n    }\n\n    if (data.triggerType === 'keyword') {\n      if (!data.triggerOperator || !data.triggerValue) {\n        throw new Error('Trigger operator and value are required');\n      }\n\n      const checkDuplicate = await this.botRepository.findFirst({\n        where: {\n          triggerOperator: data.triggerOperator,\n          triggerValue: data.triggerValue,\n          id: { not: botId },\n          instanceId: instanceId,\n        },\n      });\n\n      if (checkDuplicate) {\n        throw new Error('Trigger already exists');\n      }\n    }\n\n    if (data.triggerType === 'advanced') {\n      if (!data.triggerValue) {\n        throw new Error('Trigger value is required');\n      }\n\n      const checkDuplicate = await this.botRepository.findFirst({\n        where: {\n          triggerValue: data.triggerValue,\n          id: { not: botId },\n          instanceId: instanceId,\n        },\n      });\n\n      if (checkDuplicate) {\n        throw new Error('Trigger already exists');\n      }\n    }\n\n    try {\n      const bot = await this.botRepository.update({\n        where: {\n          id: botId,\n        },\n        data: {\n          enabled: data?.enabled,\n          description: data.description,\n          apiUrl: data.apiUrl,\n          apiKey: data.apiKey,\n          expire: data.expire,\n          keywordFinish: data.keywordFinish,\n          delayMessage: data.delayMessage,\n          unknownMessage: data.unknownMessage,\n          listeningFromMe: data.listeningFromMe,\n          stopBotFromMe: data.stopBotFromMe,\n          keepOpen: data.keepOpen,\n          debounceTime: data.debounceTime,\n          instanceId: instanceId,\n          triggerType: data.triggerType,\n          triggerOperator: data.triggerOperator,\n          triggerValue: data.triggerValue,\n          ignoreJids: data.ignoreJids,\n          splitMessages: data.splitMessages,\n          timePerChar: data.timePerChar,\n        },\n      });\n\n      return bot;\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error updating bot');\n    }\n  }\n\n  public async deleteBot(instance: InstanceDto, botId: string) {\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    const bot = await this.botRepository.findFirst({\n      where: {\n        id: botId,\n      },\n    });\n\n    if (!bot) {\n      throw new Error('Bot not found');\n    }\n\n    if (bot.instanceId !== instanceId) {\n      throw new Error('Bot not found');\n    }\n    try {\n      await this.prismaRepository.integrationSession.deleteMany({\n        where: {\n          botId: botId,\n        },\n      });\n\n      await this.botRepository.delete({\n        where: {\n          id: botId,\n        },\n      });\n\n      return { bot: { id: botId } };\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error deleting bot');\n    }\n  }\n\n  // Settings\n  public async settings(instance: InstanceDto, data: any) {\n    try {\n      const instanceId = await this.prismaRepository.instance\n        .findFirst({\n          where: {\n            name: instance.instanceName,\n          },\n        })\n        .then((instance) => instance.id);\n\n      const settings = await this.settingsRepository.findFirst({\n        where: {\n          instanceId: instanceId,\n        },\n      });\n\n      if (settings) {\n        const updateSettings = await this.settingsRepository.update({\n          where: {\n            id: settings.id,\n          },\n          data: {\n            expire: data.expire,\n            keywordFinish: data.keywordFinish,\n            delayMessage: data.delayMessage,\n            unknownMessage: data.unknownMessage,\n            listeningFromMe: data.listeningFromMe,\n            stopBotFromMe: data.stopBotFromMe,\n            keepOpen: data.keepOpen,\n            debounceTime: data.debounceTime,\n            flowiseIdFallback: data.flowiseIdFallback,\n            ignoreJids: data.ignoreJids,\n            splitMessages: data.splitMessages,\n            timePerChar: data.timePerChar,\n          },\n        });\n\n        return {\n          expire: updateSettings.expire,\n          keywordFinish: updateSettings.keywordFinish,\n          delayMessage: updateSettings.delayMessage,\n          unknownMessage: updateSettings.unknownMessage,\n          listeningFromMe: updateSettings.listeningFromMe,\n          stopBotFromMe: updateSettings.stopBotFromMe,\n          keepOpen: updateSettings.keepOpen,\n          debounceTime: updateSettings.debounceTime,\n          flowiseIdFallback: updateSettings.flowiseIdFallback,\n          ignoreJids: updateSettings.ignoreJids,\n          splitMessages: updateSettings.splitMessages,\n          timePerChar: updateSettings.timePerChar,\n        };\n      }\n\n      const newSetttings = await this.settingsRepository.create({\n        data: {\n          expire: data.expire,\n          keywordFinish: data.keywordFinish,\n          delayMessage: data.delayMessage,\n          unknownMessage: data.unknownMessage,\n          listeningFromMe: data.listeningFromMe,\n          stopBotFromMe: data.stopBotFromMe,\n          keepOpen: data.keepOpen,\n          debounceTime: data.debounceTime,\n          flowiseIdFallback: data.flowiseIdFallback,\n          ignoreJids: data.ignoreJids,\n          instanceId: instanceId,\n          splitMessages: data.splitMessages,\n          timePerChar: data.timePerChar,\n        },\n      });\n\n      return {\n        expire: newSetttings.expire,\n        keywordFinish: newSetttings.keywordFinish,\n        delayMessage: newSetttings.delayMessage,\n        unknownMessage: newSetttings.unknownMessage,\n        listeningFromMe: newSetttings.listeningFromMe,\n        stopBotFromMe: newSetttings.stopBotFromMe,\n        keepOpen: newSetttings.keepOpen,\n        debounceTime: newSetttings.debounceTime,\n        flowiseIdFallback: newSetttings.flowiseIdFallback,\n        ignoreJids: newSetttings.ignoreJids,\n        splitMessages: newSetttings.splitMessages,\n        timePerChar: newSetttings.timePerChar,\n      };\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error setting default settings');\n    }\n  }\n\n  public async fetchSettings(instance: InstanceDto) {\n    try {\n      const instanceId = await this.prismaRepository.instance\n        .findFirst({\n          where: {\n            name: instance.instanceName,\n          },\n        })\n        .then((instance) => instance.id);\n\n      const settings = await this.settingsRepository.findFirst({\n        where: {\n          instanceId: instanceId,\n        },\n        include: {\n          Fallback: true,\n        },\n      });\n\n      if (!settings) {\n        return {\n          expire: 0,\n          keywordFinish: '',\n          delayMessage: 0,\n          unknownMessage: '',\n          listeningFromMe: false,\n          stopBotFromMe: false,\n          keepOpen: false,\n          ignoreJids: [],\n          splitMessages: false,\n          timePerChar: 0,\n          flowiseIdFallback: '',\n          fallback: null,\n        };\n      }\n\n      return {\n        expire: settings.expire,\n        keywordFinish: settings.keywordFinish,\n        delayMessage: settings.delayMessage,\n        unknownMessage: settings.unknownMessage,\n        listeningFromMe: settings.listeningFromMe,\n        stopBotFromMe: settings.stopBotFromMe,\n        keepOpen: settings.keepOpen,\n        ignoreJids: settings.ignoreJids,\n        splitMessages: settings.splitMessages,\n        timePerChar: settings.timePerChar,\n        flowiseIdFallback: settings.flowiseIdFallback,\n        fallback: settings.Fallback,\n      };\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error fetching default settings');\n    }\n  }\n\n  // Sessions\n  public async changeStatus(instance: InstanceDto, data: any) {\n    try {\n      const instanceId = await this.prismaRepository.instance\n        .findFirst({\n          where: {\n            name: instance.instanceName,\n          },\n        })\n        .then((instance) => instance.id);\n\n      const defaultSettingCheck = await this.settingsRepository.findFirst({\n        where: {\n          instanceId,\n        },\n      });\n\n      const remoteJid = data.remoteJid;\n      const status = data.status;\n\n      if (status === 'delete') {\n        await this.sessionRepository.deleteMany({\n          where: {\n            remoteJid: remoteJid,\n            botId: { not: null },\n          },\n        });\n\n        return { bot: { remoteJid: remoteJid, status: status } };\n      }\n\n      if (status === 'closed') {\n        if (defaultSettingCheck?.keepOpen) {\n          await this.sessionRepository.updateMany({\n            where: {\n              remoteJid: remoteJid,\n              botId: { not: null },\n            },\n            data: {\n              status: 'closed',\n            },\n          });\n        } else {\n          await this.sessionRepository.deleteMany({\n            where: {\n              remoteJid: remoteJid,\n              botId: { not: null },\n            },\n          });\n        }\n\n        return { bot: { ...instance, bot: { remoteJid: remoteJid, status: status } } };\n      } else {\n        const session = await this.sessionRepository.updateMany({\n          where: {\n            instanceId: instanceId,\n            remoteJid: remoteJid,\n            botId: { not: null },\n          },\n          data: {\n            status: status,\n          },\n        });\n\n        const botData = {\n          remoteJid: remoteJid,\n          status: status,\n          session,\n        };\n\n        return { bot: { ...instance, bot: botData } };\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error changing status');\n    }\n  }\n\n  public async fetchSessions(instance: InstanceDto, botId: string, remoteJid?: string) {\n    try {\n      const instanceId = await this.prismaRepository.instance\n        .findFirst({\n          where: {\n            name: instance.instanceName,\n          },\n        })\n        .then((instance) => instance.id);\n\n      const bot = await this.botRepository.findFirst({\n        where: {\n          id: botId,\n        },\n      });\n\n      if (bot && bot.instanceId !== instanceId) {\n        throw new Error('Dify not found');\n      }\n\n      return await this.sessionRepository.findMany({\n        where: {\n          instanceId: instanceId,\n          remoteJid,\n          botId: bot ? botId : { not: null },\n          type: 'flowise',\n        },\n      });\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error fetching sessions');\n    }\n  }\n\n  public async ignoreJid(instance: InstanceDto, data: IgnoreJidDto) {\n    try {\n      const instanceId = await this.prismaRepository.instance\n        .findFirst({\n          where: {\n            name: instance.instanceName,\n          },\n        })\n        .then((instance) => instance.id);\n\n      const settings = await this.settingsRepository.findFirst({\n        where: {\n          instanceId: instanceId,\n        },\n      });\n\n      if (!settings) {\n        throw new Error('Settings not found');\n      }\n\n      let ignoreJids: any = settings?.ignoreJids || [];\n\n      if (data.action === 'add') {\n        if (ignoreJids.includes(data.remoteJid)) return { ignoreJids: ignoreJids };\n\n        ignoreJids.push(data.remoteJid);\n      } else {\n        ignoreJids = ignoreJids.filter((jid) => jid !== data.remoteJid);\n      }\n\n      const updateSettings = await this.settingsRepository.update({\n        where: {\n          id: settings.id,\n        },\n        data: {\n          ignoreJids: ignoreJids,\n        },\n      });\n\n      return {\n        ignoreJids: updateSettings.ignoreJids,\n      };\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error setting default settings');\n    }\n  }\n\n  // Emit\n  public async emit({ instance, remoteJid, msg }: EmitData) {\n    try {\n      const settings = await this.settingsRepository.findFirst({\n        where: {\n          instanceId: instance.instanceId,\n        },\n      });\n\n      if (this.checkIgnoreJids(settings?.ignoreJids, remoteJid)) return;\n\n      const session = await this.getSession(remoteJid, instance);\n\n      const content = getConversationMessage(msg);\n\n      let findBot = (await this.findBotTrigger(this.botRepository, content, instance, session)) as Flowise;\n\n      if (!findBot) {\n        const fallback = await this.settingsRepository.findFirst({\n          where: {\n            instanceId: instance.instanceId,\n          },\n        });\n\n        if (fallback?.flowiseIdFallback) {\n          const findFallback = await this.botRepository.findFirst({\n            where: {\n              id: fallback.flowiseIdFallback,\n            },\n          });\n\n          findBot = findFallback;\n        } else {\n          return;\n        }\n      }\n\n      let expire = findBot?.expire;\n      let keywordFinish = findBot?.keywordFinish;\n      let delayMessage = findBot?.delayMessage;\n      let unknownMessage = findBot?.unknownMessage;\n      let listeningFromMe = findBot?.listeningFromMe;\n      let stopBotFromMe = findBot?.stopBotFromMe;\n      let keepOpen = findBot?.keepOpen;\n      let debounceTime = findBot?.debounceTime;\n      let ignoreJids = findBot?.ignoreJids;\n      let splitMessages = findBot?.splitMessages;\n      let timePerChar = findBot?.timePerChar;\n\n      if (expire === undefined || expire === null) expire = settings.expire;\n      if (keywordFinish === undefined || keywordFinish === null) keywordFinish = settings.keywordFinish;\n      if (delayMessage === undefined || delayMessage === null) delayMessage = settings.delayMessage;\n      if (unknownMessage === undefined || unknownMessage === null) unknownMessage = settings.unknownMessage;\n      if (listeningFromMe === undefined || listeningFromMe === null) listeningFromMe = settings.listeningFromMe;\n      if (stopBotFromMe === undefined || stopBotFromMe === null) stopBotFromMe = settings.stopBotFromMe;\n      if (keepOpen === undefined || keepOpen === null) keepOpen = settings.keepOpen;\n      if (debounceTime === undefined || debounceTime === null) debounceTime = settings.debounceTime;\n      if (ignoreJids === undefined || ignoreJids === null) ignoreJids = settings.ignoreJids;\n      if (splitMessages === undefined || splitMessages === null) splitMessages = settings?.splitMessages ?? false;\n      if (timePerChar === undefined || timePerChar === null) timePerChar = settings?.timePerChar ?? 0;\n\n      const key = msg.key as {\n        id: string;\n        remoteJid: string;\n        fromMe: boolean;\n        participant: string;\n      };\n\n      if (stopBotFromMe && key.fromMe && session) {\n        await this.prismaRepository.integrationSession.update({\n          where: {\n            id: session.id,\n          },\n          data: {\n            status: 'paused',\n          },\n        });\n        return;\n      }\n\n      if (!listeningFromMe && key.fromMe) {\n        return;\n      }\n\n      if (session && !session.awaitUser) {\n        return;\n      }\n\n      if (debounceTime && debounceTime > 0) {\n        this.processDebounce(this.userMessageDebounce, content, remoteJid, debounceTime, async (debouncedContent) => {\n          await this.flowiseService.processBot(\n            this.waMonitor.waInstances[instance.instanceName],\n            remoteJid,\n            findBot,\n            session,\n            {\n              ...settings,\n              expire,\n              keywordFinish,\n              delayMessage,\n              unknownMessage,\n              listeningFromMe,\n              stopBotFromMe,\n              keepOpen,\n              debounceTime,\n              ignoreJids,\n              splitMessages,\n              timePerChar,\n            },\n            debouncedContent,\n            msg?.pushName,\n          );\n        });\n      } else {\n        await this.flowiseService.processBot(\n          this.waMonitor.waInstances[instance.instanceName],\n          remoteJid,\n          findBot,\n          session,\n          {\n            ...settings,\n            expire,\n            keywordFinish,\n            delayMessage,\n            unknownMessage,\n            listeningFromMe,\n            stopBotFromMe,\n            keepOpen,\n            debounceTime,\n            ignoreJids,\n            splitMessages,\n            timePerChar,\n          },\n          content,\n          msg?.pushName,\n        );\n      }\n\n      return;\n    } catch (error) {\n      this.logger.error(error);\n      return;\n    }\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { Integration } from '@api/types/wa.types';\nimport { Auth, ConfigService, HttpServer } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport { Flowise, FlowiseSetting, IntegrationSession } from '@prisma/client';\nimport { sendTelemetry } from '@utils/sendTelemetry';\nimport axios from 'axios';\n\nexport class FlowiseService {\n  constructor(\n    private readonly waMonitor: WAMonitoringService,\n    private readonly configService: ConfigService,\n    private readonly prismaRepository: PrismaRepository,\n  ) {}\n\n  private readonly logger = new Logger('FlowiseService');\n\n  public async createNewSession(instance: InstanceDto, data: any) {\n    try {\n      const session = await this.prismaRepository.integrationSession.create({\n        data: {\n          remoteJid: data.remoteJid,\n          pushName: data.pushName,\n          sessionId: data.remoteJid,\n          status: 'opened',\n          awaitUser: false,\n          botId: data.botId,\n          instanceId: instance.instanceId,\n          type: 'flowise',\n        },\n      });\n\n      return { session };\n    } catch (error) {\n      this.logger.error(error);\n      return;\n    }\n  }\n\n  private isImageMessage(content: string) {\n    return content.includes('imageMessage');\n  }\n\n  private async sendMessageToBot(instance: any, bot: Flowise, remoteJid: string, pushName: string, content: string) {\n    const payload: any = {\n      question: content,\n      overrideConfig: {\n        sessionId: remoteJid,\n        vars: {\n          remoteJid: remoteJid,\n          pushName: pushName,\n          instanceName: instance.instanceName,\n          serverUrl: this.configService.get<HttpServer>('SERVER').URL,\n          apiKey: this.configService.get<Auth>('AUTHENTICATION').API_KEY.KEY,\n        },\n      },\n    };\n\n    if (this.isImageMessage(content)) {\n      const contentSplit = content.split('|');\n\n      payload.uploads = [\n        {\n          data: contentSplit[1].split('?')[0],\n          type: 'url',\n          name: 'Flowise.png',\n          mime: 'image/png',\n        },\n      ];\n      payload.question = contentSplit[2] || content;\n    }\n\n    if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n      await instance.client.presenceSubscribe(remoteJid);\n      await instance.client.sendPresenceUpdate('composing', remoteJid);\n    }\n\n    let headers: any = {\n      'Content-Type': 'application/json',\n    };\n\n    if (bot.apiKey) {\n      headers = {\n        ...headers,\n        Authorization: `Bearer ${bot.apiKey}`,\n      };\n    }\n\n    const endpoint = bot.apiUrl;\n\n    if (!endpoint) return null;\n\n    const response = await axios.post(endpoint, payload, {\n      headers,\n    });\n\n    if (instance.integration === Integration.WHATSAPP_BAILEYS)\n      await instance.client.sendPresenceUpdate('paused', remoteJid);\n\n    const message = response?.data?.text;\n\n    return message;\n  }\n\n  private async sendMessageWhatsApp(\n    instance: any,\n    remoteJid: string,\n    session: IntegrationSession,\n    settings: FlowiseSetting,\n    message: string,\n  ) {\n    const linkRegex = /(!?)\\[(.*?)\\]\\((.*?)\\)/g;\n\n    let textBuffer = '';\n    let lastIndex = 0;\n\n    let match: RegExpExecArray | null;\n\n    const getMediaType = (url: string): string | null => {\n      const extension = url.split('.').pop()?.toLowerCase();\n      const imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp'];\n      const audioExtensions = ['mp3', 'wav', 'aac', 'ogg'];\n      const videoExtensions = ['mp4', 'avi', 'mkv', 'mov'];\n      const documentExtensions = ['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'txt'];\n\n      if (imageExtensions.includes(extension || '')) return 'image';\n      if (audioExtensions.includes(extension || '')) return 'audio';\n      if (videoExtensions.includes(extension || '')) return 'video';\n      if (documentExtensions.includes(extension || '')) return 'document';\n      return null;\n    };\n\n    while ((match = linkRegex.exec(message)) !== null) {\n      const [fullMatch, exclMark, altText, url] = match;\n      const mediaType = getMediaType(url);\n\n      const beforeText = message.slice(lastIndex, match.index);\n      if (beforeText) {\n        textBuffer += beforeText;\n      }\n\n      if (mediaType) {\n        const splitMessages = settings.splitMessages ?? false;\n        const timePerChar = settings.timePerChar ?? 0;\n        const minDelay = 1000;\n        const maxDelay = 20000;\n\n        if (textBuffer.trim()) {\n          if (splitMessages) {\n            const multipleMessages = textBuffer.trim().split('\\n\\n');\n\n            for (let index = 0; index < multipleMessages.length; index++) {\n              const message = multipleMessages[index];\n\n              const delay = Math.min(Math.max(message.length * timePerChar, minDelay), maxDelay);\n\n              if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n                await instance.client.presenceSubscribe(remoteJid);\n                await instance.client.sendPresenceUpdate('composing', remoteJid);\n              }\n\n              await new Promise<void>((resolve) => {\n                setTimeout(async () => {\n                  await instance.textMessage(\n                    {\n                      number: remoteJid.split('@')[0],\n                      delay: settings?.delayMessage || 1000,\n                      text: message,\n                    },\n                    false,\n                  );\n                  resolve();\n                }, delay);\n              });\n\n              if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n                await instance.client.sendPresenceUpdate('paused', remoteJid);\n              }\n            }\n          } else {\n            await instance.textMessage(\n              {\n                number: remoteJid.split('@')[0],\n                delay: settings?.delayMessage || 1000,\n                text: textBuffer.trim(),\n              },\n              false,\n            );\n          }\n          textBuffer = '';\n        }\n\n        if (mediaType === 'audio') {\n          await instance.audioWhatsapp({\n            number: remoteJid.split('@')[0],\n            delay: settings?.delayMessage || 1000,\n            audio: url,\n            caption: altText,\n          });\n        } else {\n          await instance.mediaMessage(\n            {\n              number: remoteJid.split('@')[0],\n              delay: settings?.delayMessage || 1000,\n              mediatype: mediaType,\n              media: url,\n              caption: altText,\n            },\n            null,\n            false,\n          );\n        }\n      } else {\n        textBuffer += `[${altText}](${url})`;\n      }\n\n      lastIndex = linkRegex.lastIndex;\n    }\n\n    if (lastIndex < message.length) {\n      const remainingText = message.slice(lastIndex);\n      if (remainingText.trim()) {\n        textBuffer += remainingText;\n      }\n    }\n\n    const splitMessages = settings.splitMessages ?? false;\n    const timePerChar = settings.timePerChar ?? 0;\n    const minDelay = 1000;\n    const maxDelay = 20000;\n\n    if (textBuffer.trim()) {\n      if (splitMessages) {\n        const multipleMessages = textBuffer.trim().split('\\n\\n');\n\n        for (let index = 0; index < multipleMessages.length; index++) {\n          const message = multipleMessages[index];\n\n          const delay = Math.min(Math.max(message.length * timePerChar, minDelay), maxDelay);\n\n          if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n            await instance.client.presenceSubscribe(remoteJid);\n            await instance.client.sendPresenceUpdate('composing', remoteJid);\n          }\n\n          await new Promise<void>((resolve) => {\n            setTimeout(async () => {\n              await instance.textMessage(\n                {\n                  number: remoteJid.split('@')[0],\n                  delay: settings?.delayMessage || 1000,\n                  text: message,\n                },\n                false,\n              );\n              resolve();\n            }, delay);\n          });\n\n          if (instance.integration === Integration.WHATSAPP_BAILEYS) {\n            await instance.client.sendPresenceUpdate('paused', remoteJid);\n          }\n        }\n      } else {\n        await instance.textMessage(\n          {\n            number: remoteJid.split('@')[0],\n            delay: settings?.delayMessage || 1000,\n            text: textBuffer.trim(),\n          },\n          false,\n        );\n      }\n      textBuffer = '';\n    }\n\n    sendTelemetry('/message/sendText');\n\n    await this.prismaRepository.integrationSession.update({\n      where: {\n        id: session.id,\n      },\n      data: {\n        status: 'opened',\n        awaitUser: true,\n      },\n    });\n\n    return;\n  }\n\n  private async initNewSession(\n    instance: any,\n    remoteJid: string,\n    bot: Flowise,\n    settings: FlowiseSetting,\n    session: IntegrationSession,\n    content: string,\n    pushName?: string,\n  ) {\n    const data = await this.createNewSession(instance, {\n      remoteJid,\n      pushName,\n      botId: bot.id,\n    });\n\n    if (data.session) {\n      session = data.session;\n    }\n\n    const message = await this.sendMessageToBot(instance, bot, remoteJid, pushName, content);\n\n    await this.sendMessageWhatsApp(instance, remoteJid, session, settings, message);\n\n    return;\n  }\n\n  public async processBot(\n    instance: any,\n    remoteJid: string,\n    bot: Flowise,\n    session: IntegrationSession,\n    settings: FlowiseSetting,\n    content: string,\n    pushName?: string,\n  ) {\n    if (session && session.status !== 'opened') {\n      return;\n    }\n\n    if (session && settings.expire && settings.expire > 0) {\n      const now = Date.now();\n\n      const sessionUpdatedAt = new Date(session.updatedAt).getTime();\n\n      const diff = now - sessionUpdatedAt;\n\n      const diffInMinutes = Math.floor(diff / 1000 / 60);\n\n      if (diffInMinutes > settings.expire) {\n        if (settings.keepOpen) {\n          await this.prismaRepository.integrationSession.update({\n            where: {\n              id: session.id,\n            },\n            data: {\n              status: 'closed',\n            },\n          });\n        } else {\n          await this.prismaRepository.integrationSession.deleteMany({\n            where: {\n              botId: bot.id,\n              remoteJid: remoteJid,\n            },\n          });\n        }\n\n        await this.initNewSession(instance, remoteJid, bot, settings, session, content, pushName);\n        return;\n      }\n    }\n\n    if (!session) {\n      await this.initNewSession(instance, remoteJid, bot, settings, session, content, pushName);\n      return;\n    }\n\n    await this.prismaRepository.integrationSession.update({\n      where: {\n        id: session.id,\n      },\n      data: {\n        status: 'opened',\n        awaitUser: false,\n      },\n    });\n\n    if (!content) {\n      if (settings.unknownMessage) {\n        this.waMonitor.waInstances[instance.instanceName].textMessage(\n          {\n            number: remoteJid.split('@')[0],\n            delay: settings.delayMessage || 1000,\n            text: settings.unknownMessage,\n          },\n          false,\n        );\n\n        sendTelemetry('/message/sendText');\n      }\n      return;\n    }\n\n    if (settings.keywordFinish && content.toLowerCase() === settings.keywordFinish.toLowerCase()) {\n      if (settings.keepOpen) {\n        await this.prismaRepository.integrationSession.update({\n          where: {\n            id: session.id,\n          },\n          data: {\n            status: 'closed',\n          },\n        });\n      } else {\n        await this.prismaRepository.integrationSession.deleteMany({\n          where: {\n            botId: bot.id,\n            remoteJid: remoteJid,\n          },\n        });\n      }\n      return;\n    }\n\n    const message = await this.sendMessageToBot(instance, bot, remoteJid, pushName, content);\n\n    await this.sendMessageWhatsApp(instance, remoteJid, session, settings, message);\n\n    return;\n  }\n}\n","import { IgnoreJidDto } from '@api/dto/chatbot.dto';\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { OpenaiCredsDto, OpenaiDto } from '@api/integrations/chatbot/openai/dto/openai.dto';\nimport { OpenaiService } from '@api/integrations/chatbot/openai/services/openai.service';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { configService, Openai } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport { BadRequestException } from '@exceptions';\nimport { OpenaiBot } from '@prisma/client';\nimport { getConversationMessage } from '@utils/getConversationMessage';\nimport OpenAI from 'openai';\n\nimport { ChatbotController, ChatbotControllerInterface, EmitData } from '../../chatbot.controller';\n\nexport class OpenaiController extends ChatbotController implements ChatbotControllerInterface {\n  constructor(\n    private readonly openaiService: OpenaiService,\n    prismaRepository: PrismaRepository,\n    waMonitor: WAMonitoringService,\n  ) {\n    super(prismaRepository, waMonitor);\n\n    this.botRepository = this.prismaRepository.openaiBot;\n    this.settingsRepository = this.prismaRepository.openaiSetting;\n    this.sessionRepository = this.prismaRepository.integrationSession;\n    this.credsRepository = this.prismaRepository.openaiCreds;\n  }\n\n  public readonly logger = new Logger('OpenaiController');\n\n  integrationEnabled = configService.get<Openai>('OPENAI').ENABLED;\n  botRepository: any;\n  settingsRepository: any;\n  sessionRepository: any;\n  userMessageDebounce: { [key: string]: { message: string; timeoutId: NodeJS.Timeout } } = {};\n  private client: OpenAI;\n  private credsRepository: any;\n\n  // Credentials\n  public async createOpenaiCreds(instance: InstanceDto, data: OpenaiCredsDto) {\n    if (!this.integrationEnabled) throw new BadRequestException('Openai is disabled');\n\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    if (!data.apiKey) throw new Error('API Key is required');\n    if (!data.name) throw new Error('Name is required');\n\n    try {\n      const creds = await this.credsRepository.create({\n        data: {\n          name: data.name,\n          apiKey: data.apiKey,\n          instanceId: instanceId,\n        },\n      });\n\n      return creds;\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error creating openai creds');\n    }\n  }\n\n  public async findOpenaiCreds(instance: InstanceDto) {\n    if (!this.integrationEnabled) throw new BadRequestException('Openai is disabled');\n\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    const creds = await this.credsRepository.findMany({\n      where: {\n        instanceId: instanceId,\n      },\n      include: {\n        OpenaiAssistant: true,\n      },\n    });\n\n    return creds;\n  }\n\n  public async deleteCreds(instance: InstanceDto, openaiCredsId: string) {\n    if (!this.integrationEnabled) throw new BadRequestException('Openai is disabled');\n\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    const creds = await this.credsRepository.findFirst({\n      where: {\n        id: openaiCredsId,\n      },\n    });\n\n    if (!creds) {\n      throw new Error('Openai Creds not found');\n    }\n\n    if (creds.instanceId !== instanceId) {\n      throw new Error('Openai Creds not found');\n    }\n\n    try {\n      await this.credsRepository.delete({\n        where: {\n          id: openaiCredsId,\n        },\n      });\n\n      return { openaiCreds: { id: openaiCredsId } };\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error deleting openai creds');\n    }\n  }\n\n  // Models\n  public async getModels(instance: InstanceDto) {\n    if (!this.integrationEnabled) throw new BadRequestException('Openai is disabled');\n\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    if (!instanceId) throw new Error('Instance not found');\n\n    const defaultSettings = await this.settingsRepository.findFirst({\n      where: {\n        instanceId: instanceId,\n      },\n      include: {\n        OpenaiCreds: true,\n      },\n    });\n\n    if (!defaultSettings) throw new Error('Settings not found');\n\n    const { apiKey } = defaultSettings.OpenaiCreds;\n\n    try {\n      this.client = new OpenAI({ apiKey });\n\n      const models: any = await this.client.models.list();\n\n      return models?.body?.data;\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error fetching models');\n    }\n  }\n\n  // Bots\n  public async createBot(instance: InstanceDto, data: OpenaiDto) {\n    if (!this.integrationEnabled) throw new BadRequestException('Openai is disabled');\n\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    if (\n      !data.openaiCredsId ||\n      !data.expire ||\n      !data.keywordFinish ||\n      !data.delayMessage ||\n      !data.unknownMessage ||\n      !data.listeningFromMe ||\n      !data.stopBotFromMe ||\n      !data.keepOpen ||\n      !data.debounceTime ||\n      !data.ignoreJids ||\n      !data.splitMessages ||\n      !data.timePerChar\n    ) {\n      const defaultSettingCheck = await this.settingsRepository.findFirst({\n        where: {\n          instanceId: instanceId,\n        },\n      });\n\n      if (data.expire === undefined || data.expire === null) data.expire = defaultSettingCheck.expire;\n      if (data.keywordFinish === undefined || data.keywordFinish === null)\n        data.keywordFinish = defaultSettingCheck.keywordFinish;\n      if (data.delayMessage === undefined || data.delayMessage === null)\n        data.delayMessage = defaultSettingCheck.delayMessage;\n      if (data.unknownMessage === undefined || data.unknownMessage === null)\n        data.unknownMessage = defaultSettingCheck.unknownMessage;\n      if (data.listeningFromMe === undefined || data.listeningFromMe === null)\n        data.listeningFromMe = defaultSettingCheck.listeningFromMe;\n      if (data.stopBotFromMe === undefined || data.stopBotFromMe === null)\n        data.stopBotFromMe = defaultSettingCheck.stopBotFromMe;\n      if (data.keepOpen === undefined || data.keepOpen === null) data.keepOpen = defaultSettingCheck.keepOpen;\n      if (data.debounceTime === undefined || data.debounceTime === null)\n        data.debounceTime = defaultSettingCheck.debounceTime;\n      if (data.ignoreJids === undefined || data.ignoreJids === null) data.ignoreJids = defaultSettingCheck.ignoreJids;\n      if (data.splitMessages === undefined || data.splitMessages === null)\n        data.splitMessages = defaultSettingCheck?.splitMessages ?? false;\n      if (data.timePerChar === undefined || data.timePerChar === null)\n        data.timePerChar = defaultSettingCheck?.timePerChar ?? 0;\n\n      if (!data.openaiCredsId) {\n        throw new Error('Openai Creds Id is required');\n      }\n\n      if (!defaultSettingCheck) {\n        await this.settings(instance, {\n          openaiCredsId: data.openaiCredsId,\n          expire: data.expire,\n          keywordFinish: data.keywordFinish,\n          delayMessage: data.delayMessage,\n          unknownMessage: data.unknownMessage,\n          listeningFromMe: data.listeningFromMe,\n          stopBotFromMe: data.stopBotFromMe,\n          keepOpen: data.keepOpen,\n          debounceTime: data.debounceTime,\n          ignoreJids: data.ignoreJids,\n          splitMessages: data.splitMessages,\n          timePerChar: data.timePerChar,\n        });\n      }\n    }\n\n    const checkTriggerAll = await this.botRepository.findFirst({\n      where: {\n        enabled: true,\n        triggerType: 'all',\n        instanceId: instanceId,\n      },\n    });\n\n    if (checkTriggerAll && data.triggerType === 'all') {\n      throw new Error('You already have a openai with an \"All\" trigger, you cannot have more bots while it is active');\n    }\n\n    let whereDuplication: any = {\n      instanceId: instanceId,\n    };\n\n    if (data.botType === 'assistant') {\n      if (!data.assistantId) throw new Error('Assistant ID is required');\n\n      whereDuplication = {\n        ...whereDuplication,\n        assistantId: data.assistantId,\n        botType: data.botType,\n      };\n    } else if (data.botType === 'chatCompletion') {\n      if (!data.model) throw new Error('Model is required');\n      if (!data.maxTokens) throw new Error('Max tokens is required');\n\n      whereDuplication = {\n        ...whereDuplication,\n        model: data.model,\n        maxTokens: data.maxTokens,\n        botType: data.botType,\n      };\n    } else {\n      throw new Error('Bot type is required');\n    }\n\n    const checkDuplicate = await this.botRepository.findFirst({\n      where: whereDuplication,\n    });\n\n    if (checkDuplicate) {\n      throw new Error('Openai Bot already exists');\n    }\n\n    if (data.triggerType === 'keyword') {\n      if (!data.triggerOperator || !data.triggerValue) {\n        throw new Error('Trigger operator and value are required');\n      }\n\n      const checkDuplicate = await this.botRepository.findFirst({\n        where: {\n          triggerOperator: data.triggerOperator,\n          triggerValue: data.triggerValue,\n          instanceId: instanceId,\n        },\n      });\n\n      if (checkDuplicate) {\n        throw new Error('Trigger already exists');\n      }\n    }\n\n    if (data.triggerType === 'advanced') {\n      if (!data.triggerValue) {\n        throw new Error('Trigger value is required');\n      }\n\n      const checkDuplicate = await this.botRepository.findFirst({\n        where: {\n          triggerValue: data.triggerValue,\n          instanceId: instanceId,\n        },\n      });\n\n      if (checkDuplicate) {\n        throw new Error('Trigger already exists');\n      }\n    }\n\n    try {\n      const bot = await this.botRepository.create({\n        data: {\n          enabled: data?.enabled,\n          description: data.description,\n          openaiCredsId: data.openaiCredsId,\n          botType: data.botType,\n          assistantId: data.assistantId,\n          functionUrl: data.functionUrl,\n          model: data.model,\n          systemMessages: data.systemMessages,\n          assistantMessages: data.assistantMessages,\n          userMessages: data.userMessages,\n          maxTokens: data.maxTokens,\n          expire: data.expire,\n          keywordFinish: data.keywordFinish,\n          delayMessage: data.delayMessage,\n          unknownMessage: data.unknownMessage,\n          listeningFromMe: data.listeningFromMe,\n          stopBotFromMe: data.stopBotFromMe,\n          keepOpen: data.keepOpen,\n          debounceTime: data.debounceTime,\n          instanceId: instanceId,\n          triggerType: data.triggerType,\n          triggerOperator: data.triggerOperator,\n          triggerValue: data.triggerValue,\n          ignoreJids: data.ignoreJids,\n          splitMessages: data.splitMessages,\n          timePerChar: data.timePerChar,\n        },\n      });\n\n      return bot;\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error creating openai bot');\n    }\n  }\n\n  public async findBot(instance: InstanceDto) {\n    if (!this.integrationEnabled) throw new BadRequestException('Openai is disabled');\n\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    const bots = await this.botRepository.findMany({\n      where: {\n        instanceId,\n      },\n    });\n\n    if (!bots.length) {\n      return null;\n    }\n\n    return bots;\n  }\n\n  public async fetchBot(instance: InstanceDto, botId: string) {\n    if (!this.integrationEnabled) throw new BadRequestException('Openai is disabled');\n\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    const bot = await this.botRepository.findFirst({\n      where: {\n        id: botId,\n      },\n    });\n\n    if (!bot) {\n      throw new Error('Openai Bot not found');\n    }\n\n    if (bot.instanceId !== instanceId) {\n      throw new Error('Openai Bot not found');\n    }\n\n    return bot;\n  }\n\n  public async updateBot(instance: InstanceDto, botId: string, data: OpenaiDto) {\n    if (!this.integrationEnabled) throw new BadRequestException('Openai is disabled');\n\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    const bot = await this.botRepository.findFirst({\n      where: {\n        id: botId,\n      },\n    });\n\n    if (!bot) {\n      throw new Error('Openai Bot not found');\n    }\n\n    if (bot.instanceId !== instanceId) {\n      throw new Error('Openai Bot not found');\n    }\n\n    if (data.triggerType === 'all') {\n      const checkTriggerAll = await this.botRepository.findFirst({\n        where: {\n          enabled: true,\n          triggerType: 'all',\n          id: {\n            not: botId,\n          },\n          instanceId: instanceId,\n        },\n      });\n\n      if (checkTriggerAll) {\n        throw new Error(\n          'You already have a openai bot with an \"All\" trigger, you cannot have more bots while it is active',\n        );\n      }\n    }\n\n    let whereDuplication: any = {\n      id: {\n        not: botId,\n      },\n      instanceId: instanceId,\n    };\n\n    if (data.botType === 'assistant') {\n      if (!data.assistantId) throw new Error('Assistant ID is required');\n\n      whereDuplication = {\n        ...whereDuplication,\n        assistantId: data.assistantId,\n      };\n    } else if (data.botType === 'chatCompletion') {\n      if (!data.model) throw new Error('Model is required');\n      if (!data.maxTokens) throw new Error('Max tokens is required');\n\n      whereDuplication = {\n        ...whereDuplication,\n        model: data.model,\n        maxTokens: data.maxTokens,\n      };\n    } else {\n      throw new Error('Bot type is required');\n    }\n\n    const checkDuplicate = await this.botRepository.findFirst({\n      where: whereDuplication,\n    });\n\n    if (checkDuplicate) {\n      throw new Error('Openai Bot already exists');\n    }\n\n    if (data.triggerType === 'keyword') {\n      if (!data.triggerOperator || !data.triggerValue) {\n        throw new Error('Trigger operator and value are required');\n      }\n\n      const checkDuplicate = await this.botRepository.findFirst({\n        where: {\n          triggerOperator: data.triggerOperator,\n          triggerValue: data.triggerValue,\n          id: { not: botId },\n          instanceId: instanceId,\n        },\n      });\n\n      if (checkDuplicate) {\n        throw new Error('Trigger already exists');\n      }\n    }\n\n    if (data.triggerType === 'advanced') {\n      if (!data.triggerValue) {\n        throw new Error('Trigger value is required');\n      }\n\n      const checkDuplicate = await this.botRepository.findFirst({\n        where: {\n          triggerValue: data.triggerValue,\n          id: { not: botId },\n          instanceId: instanceId,\n        },\n      });\n\n      if (checkDuplicate) {\n        throw new Error('Trigger already exists');\n      }\n    }\n\n    try {\n      const bot = await this.botRepository.update({\n        where: {\n          id: botId,\n        },\n        data: {\n          enabled: data?.enabled,\n          description: data.description,\n          openaiCredsId: data.openaiCredsId,\n          botType: data.botType,\n          assistantId: data.assistantId,\n          functionUrl: data.functionUrl,\n          model: data.model,\n          systemMessages: data.systemMessages,\n          assistantMessages: data.assistantMessages,\n          userMessages: data.userMessages,\n          maxTokens: data.maxTokens,\n          expire: data.expire,\n          keywordFinish: data.keywordFinish,\n          delayMessage: data.delayMessage,\n          unknownMessage: data.unknownMessage,\n          listeningFromMe: data.listeningFromMe,\n          stopBotFromMe: data.stopBotFromMe,\n          keepOpen: data.keepOpen,\n          debounceTime: data.debounceTime,\n          instanceId: instanceId,\n          triggerType: data.triggerType,\n          triggerOperator: data.triggerOperator,\n          triggerValue: data.triggerValue,\n          ignoreJids: data.ignoreJids,\n          splitMessages: data.splitMessages,\n          timePerChar: data.timePerChar,\n        },\n      });\n\n      return bot;\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error updating openai bot');\n    }\n  }\n\n  public async deleteBot(instance: InstanceDto, botId: string) {\n    if (!this.integrationEnabled) throw new BadRequestException('Openai is disabled');\n\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    const bot = await this.botRepository.findFirst({\n      where: {\n        id: botId,\n      },\n    });\n\n    if (!bot) {\n      throw new Error('Openai bot not found');\n    }\n\n    if (bot.instanceId !== instanceId) {\n      throw new Error('Openai bot not found');\n    }\n    try {\n      await this.sessionRepository.deleteMany({\n        where: {\n          botId: botId,\n        },\n      });\n\n      await this.botRepository.delete({\n        where: {\n          id: botId,\n        },\n      });\n\n      return { bot: { id: botId } };\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error deleting openai bot');\n    }\n  }\n\n  // Settings\n  public async settings(instance: InstanceDto, data: any) {\n    if (!this.integrationEnabled) throw new BadRequestException('Openai is disabled');\n\n    try {\n      const instanceId = await this.prismaRepository.instance\n        .findFirst({\n          where: {\n            name: instance.instanceName,\n          },\n        })\n        .then((instance) => instance.id);\n\n      const settings = await this.settingsRepository.findFirst({\n        where: {\n          instanceId: instanceId,\n        },\n      });\n\n      if (settings) {\n        const updateSettings = await this.settingsRepository.update({\n          where: {\n            id: settings.id,\n          },\n          data: {\n            openaiCredsId: data.openaiCredsId,\n            expire: data.expire,\n            keywordFinish: data.keywordFinish,\n            delayMessage: data.delayMessage,\n            unknownMessage: data.unknownMessage,\n            listeningFromMe: data.listeningFromMe,\n            stopBotFromMe: data.stopBotFromMe,\n            keepOpen: data.keepOpen,\n            debounceTime: data.debounceTime,\n            speechToText: data.speechToText,\n            openaiIdFallback: data.openaiIdFallback,\n            ignoreJids: data.ignoreJids,\n            splitMessages: data.splitMessages,\n            timePerChar: data.timePerChar,\n          },\n        });\n\n        return {\n          openaiCredsId: updateSettings.openaiCredsId,\n          expire: updateSettings.expire,\n          keywordFinish: updateSettings.keywordFinish,\n          delayMessage: updateSettings.delayMessage,\n          unknownMessage: updateSettings.unknownMessage,\n          listeningFromMe: updateSettings.listeningFromMe,\n          stopBotFromMe: updateSettings.stopBotFromMe,\n          keepOpen: updateSettings.keepOpen,\n          debounceTime: updateSettings.debounceTime,\n          speechToText: updateSettings.speechToText,\n          openaiIdFallback: updateSettings.openaiIdFallback,\n          ignoreJids: updateSettings.ignoreJids,\n          splitMessages: updateSettings.splitMessages,\n          timePerChar: updateSettings.timePerChar,\n        };\n      }\n\n      const newSetttings = await this.settingsRepository.create({\n        data: {\n          openaiCredsId: data.openaiCredsId,\n          expire: data.expire,\n          keywordFinish: data.keywordFinish,\n          delayMessage: data.delayMessage,\n          unknownMessage: data.unknownMessage,\n          listeningFromMe: data.listeningFromMe,\n          stopBotFromMe: data.stopBotFromMe,\n          keepOpen: data.keepOpen,\n          debounceTime: data.debounceTime,\n          openaiIdFallback: data.openaiIdFallback,\n          ignoreJids: data.ignoreJids,\n          speechToText: data.speechToText,\n          instanceId: instanceId,\n          splitMessages: data.splitMessages,\n          timePerChar: data.timePerChar,\n        },\n      });\n\n      return {\n        openaiCredsId: newSetttings.openaiCredsId,\n        expire: newSetttings.expire,\n        keywordFinish: newSetttings.keywordFinish,\n        delayMessage: newSetttings.delayMessage,\n        unknownMessage: newSetttings.unknownMessage,\n        listeningFromMe: newSetttings.listeningFromMe,\n        stopBotFromMe: newSetttings.stopBotFromMe,\n        keepOpen: newSetttings.keepOpen,\n        debounceTime: newSetttings.debounceTime,\n        openaiIdFallback: newSetttings.openaiIdFallback,\n        ignoreJids: newSetttings.ignoreJids,\n        speechToText: newSetttings.speechToText,\n        splitMessages: newSetttings.splitMessages,\n        timePerChar: newSetttings.timePerChar,\n      };\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error setting default settings');\n    }\n  }\n\n  public async fetchSettings(instance: InstanceDto) {\n    if (!this.integrationEnabled) throw new BadRequestException('Openai is disabled');\n\n    try {\n      const instanceId = (\n        await this.prismaRepository.instance.findFirst({\n          select: { id: true },\n          where: {\n            name: instance.instanceName,\n          },\n        })\n      )?.id;\n\n      const settings = await this.settingsRepository.findFirst({\n        where: {\n          instanceId: instanceId,\n        },\n        include: {\n          Fallback: true,\n        },\n      });\n\n      if (!settings) {\n        return {\n          openaiCredsId: null,\n          expire: 0,\n          keywordFinish: '',\n          delayMessage: 0,\n          unknownMessage: '',\n          listeningFromMe: false,\n          stopBotFromMe: false,\n          keepOpen: false,\n          ignoreJids: [],\n          splitMessages: false,\n          timePerChar: 0,\n          openaiIdFallback: null,\n          speechToText: false,\n          fallback: null,\n        };\n      }\n\n      return {\n        openaiCredsId: settings.openaiCredsId,\n        expire: settings.expire,\n        keywordFinish: settings.keywordFinish,\n        delayMessage: settings.delayMessage,\n        unknownMessage: settings.unknownMessage,\n        listeningFromMe: settings.listeningFromMe,\n        stopBotFromMe: settings.stopBotFromMe,\n        keepOpen: settings.keepOpen,\n        ignoreJids: settings.ignoreJids,\n        splitMessages: settings.splitMessages,\n        timePerChar: settings.timePerChar,\n        openaiIdFallback: settings.openaiIdFallback,\n        speechToText: settings.speechToText,\n        fallback: settings.Fallback,\n      };\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error fetching default settings');\n    }\n  }\n\n  // Sessions\n  public async changeStatus(instance: InstanceDto, data: any) {\n    if (!this.integrationEnabled) throw new BadRequestException('Openai is disabled');\n\n    try {\n      const instanceId = await this.prismaRepository.instance\n        .findFirst({\n          where: {\n            name: instance.instanceName,\n          },\n        })\n        .then((instance) => instance.id);\n\n      const defaultSettingCheck = await this.settingsRepository.findFirst({\n        where: {\n          instanceId,\n        },\n      });\n\n      const remoteJid = data.remoteJid;\n      const status = data.status;\n\n      if (status === 'delete') {\n        await this.sessionRepository.deleteMany({\n          where: {\n            remoteJid: remoteJid,\n            botId: { not: null },\n          },\n        });\n\n        return { openai: { remoteJid: remoteJid, status: status } };\n      }\n\n      if (status === 'closed') {\n        if (defaultSettingCheck?.keepOpen) {\n          await this.sessionRepository.updateMany({\n            where: {\n              remoteJid: remoteJid,\n              botId: { not: null },\n              status: { not: 'closed' },\n            },\n            data: {\n              status: 'closed',\n            },\n          });\n        } else {\n          await this.sessionRepository.deleteMany({\n            where: {\n              remoteJid: remoteJid,\n            },\n          });\n        }\n\n        return { openai: { ...instance, openai: { remoteJid: remoteJid, status: status } } };\n      } else {\n        const session = await this.sessionRepository.updateMany({\n          where: {\n            instanceId: instanceId,\n            remoteJid: remoteJid,\n            botId: { not: null },\n          },\n          data: {\n            status: status,\n          },\n        });\n\n        const openaiData = {\n          remoteJid: remoteJid,\n          status: status,\n          session,\n        };\n\n        return { openai: { ...instance, openai: openaiData } };\n      }\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error changing status');\n    }\n  }\n\n  public async fetchSessions(instance: InstanceDto, botId: string, remoteJid?: string) {\n    if (!this.integrationEnabled) throw new BadRequestException('Openai is disabled');\n\n    try {\n      const instanceId = await this.prismaRepository.instance\n        .findFirst({\n          where: {\n            name: instance.instanceName,\n          },\n        })\n        .then((instance) => instance.id);\n\n      const openaiBot = await this.botRepository.findFirst({\n        where: {\n          id: botId,\n        },\n      });\n\n      if (openaiBot && openaiBot.instanceId !== instanceId) {\n        throw new Error('Openai Bot not found');\n      }\n\n      return await this.sessionRepository.findMany({\n        where: {\n          instanceId: instanceId,\n          remoteJid,\n          botId: openaiBot ? botId : { not: null },\n          type: 'openai',\n        },\n      });\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error fetching sessions');\n    }\n  }\n\n  public async ignoreJid(instance: InstanceDto, data: IgnoreJidDto) {\n    if (!this.integrationEnabled) throw new BadRequestException('Openai is disabled');\n\n    try {\n      const instanceId = await this.prismaRepository.instance\n        .findFirst({\n          where: {\n            name: instance.instanceName,\n          },\n        })\n        .then((instance) => instance.id);\n\n      const settings = await this.settingsRepository.findFirst({\n        where: {\n          instanceId: instanceId,\n        },\n      });\n\n      if (!settings) {\n        throw new Error('Settings not found');\n      }\n\n      let ignoreJids: any = settings?.ignoreJids || [];\n\n      if (data.action === 'add') {\n        if (ignoreJids.includes(data.remoteJid)) return { ignoreJids: ignoreJids };\n\n        ignoreJids.push(data.remoteJid);\n      } else {\n        ignoreJids = ignoreJids.filter((jid) => jid !== data.remoteJid);\n      }\n\n      const updateSettings = await this.settingsRepository.update({\n        where: {\n          id: settings.id,\n        },\n        data: {\n          ignoreJids: ignoreJids,\n        },\n      });\n\n      return {\n        ignoreJids: updateSettings.ignoreJids,\n      };\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error setting default settings');\n    }\n  }\n\n  // Emit\n  public async emit({ instance, remoteJid, msg, pushName }: EmitData) {\n    if (!this.integrationEnabled) return;\n\n    try {\n      const settings = await this.settingsRepository.findFirst({\n        where: {\n          instanceId: instance.instanceId,\n        },\n      });\n\n      if (this.checkIgnoreJids(settings?.ignoreJids, remoteJid)) return;\n\n      let session = await this.getSession(remoteJid, instance);\n\n      const content = getConversationMessage(msg);\n\n      let findBot = (await this.findBotTrigger(this.botRepository, content, instance, session)) as OpenaiBot;\n\n      if (!findBot) {\n        const fallback = await this.settingsRepository.findFirst({\n          where: {\n            instanceId: instance.instanceId,\n          },\n        });\n\n        if (fallback?.openaiIdFallback) {\n          const findFallback = await this.botRepository.findFirst({\n            where: {\n              id: fallback.openaiIdFallback,\n            },\n          });\n\n          findBot = findFallback;\n        } else {\n          return;\n        }\n      }\n\n      let expire = findBot?.expire;\n      let keywordFinish = findBot?.keywordFinish;\n      let delayMessage = findBot?.delayMessage;\n      let unknownMessage = findBot?.unknownMessage;\n      let listeningFromMe = findBot?.listeningFromMe;\n      let stopBotFromMe = findBot?.stopBotFromMe;\n      let keepOpen = findBot?.keepOpen;\n      let debounceTime = findBot?.debounceTime;\n      let ignoreJids = findBot?.ignoreJids;\n      let splitMessages = findBot?.splitMessages;\n      let timePerChar = findBot?.timePerChar;\n\n      if (expire === undefined || expire === null) expire = settings.expire;\n      if (keywordFinish === undefined || keywordFinish === null) keywordFinish = settings.keywordFinish;\n      if (delayMessage === undefined || delayMessage === null) delayMessage = settings.delayMessage;\n      if (unknownMessage === undefined || unknownMessage === null) unknownMessage = settings.unknownMessage;\n      if (listeningFromMe === undefined || listeningFromMe === null) listeningFromMe = settings.listeningFromMe;\n      if (stopBotFromMe === undefined || stopBotFromMe === null) stopBotFromMe = settings.stopBotFromMe;\n      if (keepOpen === undefined || keepOpen === null) keepOpen = settings.keepOpen;\n      if (debounceTime === undefined || debounceTime === null) debounceTime = settings.debounceTime;\n      if (ignoreJids === undefined || ignoreJids === null) ignoreJids = settings.ignoreJids;\n      if (splitMessages === undefined || splitMessages === null) splitMessages = settings?.splitMessages ?? false;\n      if (timePerChar === undefined || timePerChar === null) timePerChar = settings?.timePerChar ?? 0;\n\n      const key = msg.key as {\n        id: string;\n        remoteJid: string;\n        fromMe: boolean;\n        participant: string;\n      };\n\n      if (stopBotFromMe && key.fromMe && session) {\n        session = await this.sessionRepository.update({\n          where: {\n            id: session.id,\n          },\n          data: {\n            status: 'paused',\n          },\n        });\n      }\n\n      if (!listeningFromMe && key.fromMe) {\n        return;\n      }\n\n      if (session && !session.awaitUser) {\n        return;\n      }\n\n      if (debounceTime && debounceTime > 0) {\n        this.processDebounce(this.userMessageDebounce, content, remoteJid, debounceTime, async (debouncedContent) => {\n          if (findBot.botType === 'assistant') {\n            await this.openaiService.processOpenaiAssistant(\n              this.waMonitor.waInstances[instance.instanceName],\n              remoteJid,\n              pushName,\n              key.fromMe,\n              findBot,\n              session,\n              {\n                ...settings,\n                expire,\n                keywordFinish,\n                delayMessage,\n                unknownMessage,\n                listeningFromMe,\n                stopBotFromMe,\n                keepOpen,\n                debounceTime,\n                ignoreJids,\n                splitMessages,\n                timePerChar,\n              },\n              debouncedContent,\n            );\n          }\n\n          if (findBot.botType === 'chatCompletion') {\n            await this.openaiService.processOpenaiChatCompletion(\n              this.waMonitor.waInstances[instance.instanceName],\n              remoteJid,\n              pushName,\n              findBot,\n              session,\n              {\n                ...settings,\n                expire,\n                keywordFinish,\n                delayMessage,\n                unknownMessage,\n                listeningFromMe,\n                stopBotFromMe,\n                keepOpen,\n                debounceTime,\n                ignoreJids,\n                splitMessages,\n                timePerChar,\n              },\n              debouncedContent,\n            );\n          }\n        });\n      } else {\n        if (findBot.botType === 'assistant') {\n          await this.openaiService.processOpenaiAssistant(\n            this.waMonitor.waInstances[instance.instanceName],\n            remoteJid,\n            pushName,\n            key.fromMe,\n            findBot,\n            session,\n            settings,\n            content,\n          );\n        }\n\n        if (findBot.botType === 'chatCompletion') {\n          await this.openaiService.processOpenaiChatCompletion(\n            this.waMonitor.waInstances[instance.instanceName],\n            remoteJid,\n            pushName,\n            findBot,\n            session,\n            settings,\n            content,\n          );\n        }\n      }\n\n      return;\n    } catch (error) {\n      this.logger.error(error);\n      return;\n    }\n  }\n}\n","import { IgnoreJidDto } from '@api/dto/chatbot.dto';\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { TypebotDto } from '@api/integrations/chatbot/typebot/dto/typebot.dto';\nimport { TypebotService } from '@api/integrations/chatbot/typebot/services/typebot.service';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { Events } from '@api/types/wa.types';\nimport { configService, Typebot } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport { BadRequestException } from '@exceptions';\nimport { Typebot as TypebotModel } from '@prisma/client';\nimport { getConversationMessage } from '@utils/getConversationMessage';\nimport axios from 'axios';\n\nimport { ChatbotController, ChatbotControllerInterface } from '../../chatbot.controller';\n\nexport class TypebotController extends ChatbotController implements ChatbotControllerInterface {\n  constructor(\n    private readonly typebotService: TypebotService,\n    prismaRepository: PrismaRepository,\n    waMonitor: WAMonitoringService,\n  ) {\n    super(prismaRepository, waMonitor);\n\n    this.botRepository = this.prismaRepository.typebot;\n    this.settingsRepository = this.prismaRepository.typebotSetting;\n    this.sessionRepository = this.prismaRepository.integrationSession;\n  }\n\n  public readonly logger = new Logger('TypebotController');\n\n  integrationEnabled = configService.get<Typebot>('TYPEBOT').ENABLED;\n  botRepository: any;\n  settingsRepository: any;\n  sessionRepository: any;\n  userMessageDebounce: { [key: string]: { message: string; timeoutId: NodeJS.Timeout } } = {};\n\n  // Bots\n  public async createBot(instance: InstanceDto, data: TypebotDto) {\n    if (!this.integrationEnabled) throw new BadRequestException('Typebot is disabled');\n\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    if (\n      !data.expire ||\n      !data.keywordFinish ||\n      !data.delayMessage ||\n      !data.unknownMessage ||\n      !data.listeningFromMe ||\n      !data.stopBotFromMe ||\n      !data.keepOpen ||\n      !data.debounceTime ||\n      !data.ignoreJids\n    ) {\n      const defaultSettingCheck = await this.settingsRepository.findFirst({\n        where: {\n          instanceId: instanceId,\n        },\n      });\n\n      if (!data.expire) data.expire = defaultSettingCheck?.expire || 0;\n      if (!data.keywordFinish) data.keywordFinish = defaultSettingCheck?.keywordFinish || '#SAIR';\n      if (!data.delayMessage) data.delayMessage = defaultSettingCheck?.delayMessage || 1000;\n      if (!data.unknownMessage) data.unknownMessage = defaultSettingCheck?.unknownMessage || 'Desculpe, não entendi';\n      if (!data.listeningFromMe) data.listeningFromMe = defaultSettingCheck?.listeningFromMe || false;\n      if (!data.stopBotFromMe) data.stopBotFromMe = defaultSettingCheck?.stopBotFromMe || false;\n      if (!data.keepOpen) data.keepOpen = defaultSettingCheck?.keepOpen || false;\n      if (!data.debounceTime) data.debounceTime = defaultSettingCheck?.debounceTime || 0;\n      if (!data.ignoreJids) data.ignoreJids = defaultSettingCheck?.ignoreJids || [];\n\n      if (!defaultSettingCheck) {\n        await this.settings(instance, {\n          expire: data.expire,\n          keywordFinish: data.keywordFinish,\n          delayMessage: data.delayMessage,\n          unknownMessage: data.unknownMessage,\n          listeningFromMe: data.listeningFromMe,\n          stopBotFromMe: data.stopBotFromMe,\n          keepOpen: data.keepOpen,\n          debounceTime: data.debounceTime,\n          ignoreJids: data.ignoreJids,\n        });\n      }\n    }\n\n    const checkTriggerAll = await this.botRepository.findFirst({\n      where: {\n        enabled: true,\n        triggerType: 'all',\n        instanceId: instanceId,\n      },\n    });\n\n    if (checkTriggerAll && data.triggerType === 'all') {\n      throw new Error('You already have a typebot with an \"All\" trigger, you cannot have more bots while it is active');\n    }\n\n    const checkDuplicate = await this.botRepository.findFirst({\n      where: {\n        url: data.url,\n        typebot: data.typebot,\n        instanceId: instanceId,\n      },\n    });\n\n    if (checkDuplicate) {\n      throw new Error('Typebot already exists');\n    }\n\n    if (data.triggerType === 'keyword') {\n      if (!data.triggerOperator || !data.triggerValue) {\n        throw new Error('Trigger operator and value are required');\n      }\n\n      const checkDuplicate = await this.botRepository.findFirst({\n        where: {\n          triggerOperator: data.triggerOperator,\n          triggerValue: data.triggerValue,\n          instanceId: instanceId,\n        },\n      });\n\n      if (checkDuplicate) {\n        throw new Error('Trigger already exists');\n      }\n    }\n\n    if (data.triggerType === 'advanced') {\n      if (!data.triggerValue) {\n        throw new Error('Trigger value is required');\n      }\n\n      const checkDuplicate = await this.botRepository.findFirst({\n        where: {\n          triggerValue: data.triggerValue,\n          instanceId: instanceId,\n        },\n      });\n\n      if (checkDuplicate) {\n        throw new Error('Trigger already exists');\n      }\n    }\n\n    try {\n      const bot = await this.botRepository.create({\n        data: {\n          enabled: data?.enabled,\n          description: data.description,\n          url: data.url,\n          typebot: data.typebot,\n          expire: data.expire,\n          keywordFinish: data.keywordFinish,\n          delayMessage: data.delayMessage,\n          unknownMessage: data.unknownMessage,\n          listeningFromMe: data.listeningFromMe,\n          stopBotFromMe: data.stopBotFromMe,\n          keepOpen: data.keepOpen,\n          debounceTime: data.debounceTime,\n          instanceId: instanceId,\n          triggerType: data.triggerType,\n          triggerOperator: data.triggerOperator,\n          triggerValue: data.triggerValue,\n          ignoreJids: data.ignoreJids,\n        },\n      });\n\n      return bot;\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error creating typebot');\n    }\n  }\n\n  public async findBot(instance: InstanceDto) {\n    if (!this.integrationEnabled) throw new BadRequestException('Typebot is disabled');\n\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    const bots = await this.botRepository.findMany({\n      where: {\n        instanceId: instanceId,\n      },\n    });\n\n    if (!bots.length) {\n      return null;\n    }\n\n    return bots;\n  }\n\n  public async fetchBot(instance: InstanceDto, botId: string) {\n    if (!this.integrationEnabled) throw new BadRequestException('Typebot is disabled');\n\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    const bot = await this.botRepository.findFirst({\n      where: {\n        id: botId,\n      },\n    });\n\n    if (!bot) {\n      throw new Error('Typebot not found');\n    }\n\n    if (bot.instanceId !== instanceId) {\n      throw new Error('Typebot not found');\n    }\n\n    return bot;\n  }\n\n  public async updateBot(instance: InstanceDto, botId: string, data: TypebotDto) {\n    if (!this.integrationEnabled) throw new BadRequestException('Typebot is disabled');\n\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    const typebot = await this.botRepository.findFirst({\n      where: {\n        id: botId,\n      },\n    });\n\n    if (!typebot) {\n      throw new Error('Typebot not found');\n    }\n\n    if (typebot.instanceId !== instanceId) {\n      throw new Error('Typebot not found');\n    }\n\n    if (data.triggerType === 'all') {\n      const checkTriggerAll = await this.botRepository.findFirst({\n        where: {\n          enabled: true,\n          triggerType: 'all',\n          id: {\n            not: botId,\n          },\n          instanceId: instanceId,\n        },\n      });\n\n      if (checkTriggerAll) {\n        throw new Error(\n          'You already have a typebot with an \"All\" trigger, you cannot have more bots while it is active',\n        );\n      }\n    }\n\n    const checkDuplicate = await this.botRepository.findFirst({\n      where: {\n        url: data.url,\n        typebot: data.typebot,\n        id: {\n          not: botId,\n        },\n        instanceId: instanceId,\n      },\n    });\n\n    if (checkDuplicate) {\n      throw new Error('Typebot already exists');\n    }\n\n    if (data.triggerType === 'keyword') {\n      if (!data.triggerOperator || !data.triggerValue) {\n        throw new Error('Trigger operator and value are required');\n      }\n\n      const checkDuplicate = await this.botRepository.findFirst({\n        where: {\n          triggerOperator: data.triggerOperator,\n          triggerValue: data.triggerValue,\n          id: {\n            not: botId,\n          },\n          instanceId: instanceId,\n        },\n      });\n\n      if (checkDuplicate) {\n        throw new Error('Trigger already exists');\n      }\n    }\n\n    if (data.triggerType === 'advanced') {\n      if (!data.triggerValue) {\n        throw new Error('Trigger value is required');\n      }\n\n      const checkDuplicate = await this.botRepository.findFirst({\n        where: {\n          triggerValue: data.triggerValue,\n          id: { not: botId },\n          instanceId: instanceId,\n        },\n      });\n\n      if (checkDuplicate) {\n        throw new Error('Trigger already exists');\n      }\n    }\n\n    try {\n      const bot = await this.botRepository.update({\n        where: {\n          id: botId,\n        },\n        data: {\n          enabled: data?.enabled,\n          description: data.description,\n          url: data.url,\n          typebot: data.typebot,\n          expire: data.expire,\n          keywordFinish: data.keywordFinish,\n          delayMessage: data.delayMessage,\n          unknownMessage: data.unknownMessage,\n          listeningFromMe: data.listeningFromMe,\n          stopBotFromMe: data.stopBotFromMe,\n          keepOpen: data.keepOpen,\n          debounceTime: data.debounceTime,\n          triggerType: data.triggerType,\n          triggerOperator: data.triggerOperator,\n          triggerValue: data.triggerValue,\n          ignoreJids: data.ignoreJids,\n        },\n      });\n\n      return bot;\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error updating typebot');\n    }\n  }\n\n  public async deleteBot(instance: InstanceDto, botId: string) {\n    if (!this.integrationEnabled) throw new BadRequestException('Typebot is disabled');\n\n    const instanceId = await this.prismaRepository.instance\n      .findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      })\n      .then((instance) => instance.id);\n\n    const typebot = await this.botRepository.findFirst({\n      where: {\n        id: botId,\n      },\n    });\n\n    if (!typebot) {\n      throw new Error('Typebot not found');\n    }\n\n    if (typebot.instanceId !== instanceId) {\n      throw new Error('Typebot not found');\n    }\n    try {\n      await this.prismaRepository.integrationSession.deleteMany({\n        where: {\n          botId: botId,\n        },\n      });\n\n      await this.botRepository.delete({\n        where: {\n          id: botId,\n        },\n      });\n\n      return { typebot: { id: botId } };\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error deleting typebot');\n    }\n  }\n\n  // Settings\n  public async settings(instance: InstanceDto, data: any) {\n    if (!this.integrationEnabled) throw new BadRequestException('Typebot is disabled');\n\n    try {\n      const instanceId = await this.prismaRepository.instance\n        .findFirst({\n          where: {\n            name: instance.instanceName,\n          },\n        })\n        .then((instance) => instance.id);\n\n      const settings = await this.settingsRepository.findFirst({\n        where: {\n          instanceId: instanceId,\n        },\n      });\n\n      if (settings) {\n        const updateSettings = await this.settingsRepository.update({\n          where: {\n            id: settings.id,\n          },\n          data: {\n            expire: data.expire,\n            keywordFinish: data.keywordFinish,\n            delayMessage: data.delayMessage,\n            unknownMessage: data.unknownMessage,\n            listeningFromMe: data.listeningFromMe,\n            stopBotFromMe: data.stopBotFromMe,\n            keepOpen: data.keepOpen,\n            debounceTime: data.debounceTime,\n            typebotIdFallback: data.typebotIdFallback,\n            ignoreJids: data.ignoreJids,\n          },\n        });\n\n        return {\n          expire: updateSettings.expire,\n          keywordFinish: updateSettings.keywordFinish,\n          delayMessage: updateSettings.delayMessage,\n          unknownMessage: updateSettings.unknownMessage,\n          listeningFromMe: updateSettings.listeningFromMe,\n          stopBotFromMe: updateSettings.stopBotFromMe,\n          keepOpen: updateSettings.keepOpen,\n          debounceTime: updateSettings.debounceTime,\n          typebotIdFallback: updateSettings.typebotIdFallback,\n          ignoreJids: updateSettings.ignoreJids,\n        };\n      }\n\n      const newSetttings = await this.settingsRepository.create({\n        data: {\n          expire: data.expire,\n          keywordFinish: data.keywordFinish,\n          delayMessage: data.delayMessage,\n          unknownMessage: data.unknownMessage,\n          listeningFromMe: data.listeningFromMe,\n          stopBotFromMe: data.stopBotFromMe,\n          keepOpen: data.keepOpen,\n          debounceTime: data.debounceTime,\n          typebotIdFallback: data.typebotIdFallback,\n          ignoreJids: data.ignoreJids,\n          instanceId: instanceId,\n        },\n      });\n\n      return {\n        expire: newSetttings.expire,\n        keywordFinish: newSetttings.keywordFinish,\n        delayMessage: newSetttings.delayMessage,\n        unknownMessage: newSetttings.unknownMessage,\n        listeningFromMe: newSetttings.listeningFromMe,\n        stopBotFromMe: newSetttings.stopBotFromMe,\n        keepOpen: newSetttings.keepOpen,\n        debounceTime: newSetttings.debounceTime,\n        typebotIdFallback: newSetttings.typebotIdFallback,\n        ignoreJids: newSetttings.ignoreJids,\n      };\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error setting default settings');\n    }\n  }\n\n  public async fetchSettings(instance: InstanceDto) {\n    if (!this.integrationEnabled) throw new BadRequestException('Typebot is disabled');\n\n    try {\n      const instanceId = await this.prismaRepository.instance\n        .findFirst({\n          where: {\n            name: instance.instanceName,\n          },\n        })\n        .then((instance) => instance.id);\n\n      const settings = await this.settingsRepository.findFirst({\n        where: {\n          instanceId: instanceId,\n        },\n        include: {\n          Fallback: true,\n        },\n      });\n\n      if (!settings) {\n        return {\n          expire: 0,\n          keywordFinish: '',\n          delayMessage: 0,\n          unknownMessage: '',\n          listeningFromMe: false,\n          stopBotFromMe: false,\n          keepOpen: false,\n          ignoreJids: [],\n          typebotIdFallback: null,\n          fallback: null,\n        };\n      }\n\n      return {\n        expire: settings.expire,\n        keywordFinish: settings.keywordFinish,\n        delayMessage: settings.delayMessage,\n        unknownMessage: settings.unknownMessage,\n        listeningFromMe: settings.listeningFromMe,\n        stopBotFromMe: settings.stopBotFromMe,\n        keepOpen: settings.keepOpen,\n        ignoreJids: settings.ignoreJids,\n        typebotIdFallback: settings.typebotIdFallback,\n        fallback: settings.Fallback,\n      };\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error fetching default settings');\n    }\n  }\n\n  // Sessions\n  public async startBot(instance: InstanceDto, data: any) {\n    if (!this.integrationEnabled) throw new BadRequestException('Typebot is disabled');\n\n    if (data.remoteJid === 'status@broadcast') return;\n\n    const instanceData = await this.prismaRepository.instance.findFirst({\n      where: {\n        name: instance.instanceName,\n      },\n    });\n\n    if (!instanceData) throw new Error('Instance not found');\n\n    const remoteJid = data.remoteJid;\n    const url = data.url;\n    const typebot = data.typebot;\n    const startSession = data.startSession;\n    const variables = data.variables;\n    let expire = data?.typebot?.expire;\n    let keywordFinish = data?.typebot?.keywordFinish;\n    let delayMessage = data?.typebot?.delayMessage;\n    let unknownMessage = data?.typebot?.unknownMessage;\n    let listeningFromMe = data?.typebot?.listeningFromMe;\n    let stopBotFromMe = data?.typebot?.stopBotFromMe;\n    let keepOpen = data?.typebot?.keepOpen;\n    let debounceTime = data?.typebot?.debounceTime;\n    let ignoreJids = data?.typebot?.ignoreJids;\n\n    const defaultSettingCheck = await this.settingsRepository.findFirst({\n      where: {\n        instanceId: instanceData.id,\n      },\n    });\n\n    if (this.checkIgnoreJids(defaultSettingCheck?.ignoreJids, remoteJid)) throw new Error('Jid not allowed');\n\n    if (\n      !expire ||\n      !keywordFinish ||\n      !delayMessage ||\n      !unknownMessage ||\n      !listeningFromMe ||\n      !stopBotFromMe ||\n      !keepOpen ||\n      !debounceTime ||\n      !ignoreJids\n    ) {\n      if (expire === undefined || expire === null) expire = defaultSettingCheck.expire;\n      if (keywordFinish === undefined || keywordFinish === null) keywordFinish = defaultSettingCheck.keywordFinish;\n      if (delayMessage === undefined || delayMessage === null) delayMessage = defaultSettingCheck.delayMessage;\n      if (unknownMessage === undefined || unknownMessage === null) unknownMessage = defaultSettingCheck.unknownMessage;\n      if (listeningFromMe === undefined || listeningFromMe === null)\n        listeningFromMe = defaultSettingCheck.listeningFromMe;\n      if (stopBotFromMe === undefined || stopBotFromMe === null) stopBotFromMe = defaultSettingCheck.stopBotFromMe;\n      if (keepOpen === undefined || keepOpen === null) keepOpen = defaultSettingCheck.keepOpen;\n      if (debounceTime === undefined || debounceTime === null) debounceTime = defaultSettingCheck.debounceTime;\n      if (ignoreJids === undefined || ignoreJids === null) ignoreJids = defaultSettingCheck.ignoreJids;\n\n      if (!defaultSettingCheck) {\n        await this.settings(instance, {\n          expire: expire,\n          keywordFinish: keywordFinish,\n          delayMessage: delayMessage,\n          unknownMessage: unknownMessage,\n          listeningFromMe: listeningFromMe,\n          stopBotFromMe: stopBotFromMe,\n          keepOpen: keepOpen,\n          debounceTime: debounceTime,\n          ignoreJids: ignoreJids,\n        });\n      }\n    }\n\n    const prefilledVariables: any = {};\n\n    if (variables?.length) {\n      variables.forEach((variable: { name: string | number; value: string }) => {\n        prefilledVariables[variable.name] = variable.value;\n      });\n    }\n\n    if (startSession) {\n      let findBot: any = await this.botRepository.findFirst({\n        where: {\n          url: url,\n          typebot: typebot,\n          instanceId: instanceData.id,\n        },\n      });\n\n      if (!findBot) {\n        findBot = await this.botRepository.create({\n          data: {\n            enabled: true,\n            url: url,\n            typebot: typebot,\n            instanceId: instanceData.id,\n            expire: expire,\n            keywordFinish: keywordFinish,\n            delayMessage: delayMessage,\n            unknownMessage: unknownMessage,\n            listeningFromMe: listeningFromMe,\n            stopBotFromMe: stopBotFromMe,\n            keepOpen: keepOpen,\n          },\n        });\n      }\n\n      await this.prismaRepository.integrationSession.deleteMany({\n        where: {\n          remoteJid: remoteJid,\n          instanceId: instanceData.id,\n          botId: { not: null },\n        },\n      });\n\n      await this.typebotService.processTypebot(\n        instanceData,\n        remoteJid,\n        null,\n        null,\n        findBot,\n        url,\n        expire,\n        typebot,\n        keywordFinish,\n        delayMessage,\n        unknownMessage,\n        listeningFromMe,\n        stopBotFromMe,\n        keepOpen,\n        'init',\n        prefilledVariables,\n      );\n    } else {\n      const id = Math.floor(Math.random() * 10000000000).toString();\n\n      try {\n        const version = configService.get<Typebot>('TYPEBOT').API_VERSION;\n        let url: string;\n        let reqData: {};\n        if (version === 'latest') {\n          url = `${data.url}/api/v1/typebots/${data.typebot}/startChat`;\n\n          reqData = {\n            prefilledVariables: prefilledVariables,\n          };\n        } else {\n          url = `${data.url}/api/v1/sendMessage`;\n\n          reqData = {\n            startParams: {\n              publicId: data.typebot,\n              prefilledVariables: prefilledVariables,\n            },\n          };\n        }\n        const request = await axios.post(url, reqData);\n\n        await this.typebotService.sendWAMessage(\n          instanceData,\n          null,\n          {\n            expire: expire,\n            keywordFinish: keywordFinish,\n            delayMessage: delayMessage,\n            unknownMessage: unknownMessage,\n            listeningFromMe: listeningFromMe,\n            stopBotFromMe: stopBotFromMe,\n            keepOpen: keepOpen,\n          },\n          remoteJid,\n          request.data.messages,\n          request.data.input,\n          request.data.clientSideActions,\n        );\n\n        this.waMonitor.waInstances[instance.instanceName].sendDataWebhook(Events.TYPEBOT_START, {\n          remoteJid: remoteJid,\n          url: url,\n          typebot: typebot,\n          variables: variables,\n          sessionId: id,\n        });\n      } catch (error) {\n        this.logger.error(error);\n        return;\n      }\n    }\n\n    return {\n      typebot: {\n        ...instance,\n        typebot: {\n          url: url,\n          remoteJid: remoteJid,\n          typebot: typebot,\n          prefilledVariables: prefilledVariables,\n        },\n      },\n    };\n  }\n\n  public async changeStatus(instance: InstanceDto, data: any) {\n    if (!this.integrationEnabled) throw new BadRequestException('Typebot is disabled');\n\n    try {\n      const instanceId = await this.prismaRepository.instance\n        .findFirst({\n          where: {\n            name: instance.instanceName,\n          },\n        })\n        .then((instance) => instance.id);\n\n      const remoteJid = data.remoteJid;\n      const status = data.status;\n\n      const defaultSettingCheck = await this.settingsRepository.findFirst({\n        where: {\n          instanceId,\n        },\n      });\n\n      if (status === 'delete') {\n        await this.sessionRepository.deleteMany({\n          where: {\n            remoteJid: remoteJid,\n            instanceId: instanceId,\n            botId: { not: null },\n          },\n        });\n\n        return { typebot: { ...instance, typebot: { remoteJid: remoteJid, status: status } } };\n      }\n\n      if (status === 'closed') {\n        if (defaultSettingCheck?.keepOpen) {\n          await this.sessionRepository.updateMany({\n            where: {\n              instanceId: instanceId,\n              remoteJid: remoteJid,\n              botId: { not: null },\n            },\n            data: {\n              status: status,\n            },\n          });\n        } else {\n          await this.sessionRepository.deleteMany({\n            where: {\n              remoteJid: remoteJid,\n              instanceId: instanceId,\n              botId: { not: null },\n            },\n          });\n        }\n\n        return { typebot: { ...instance, typebot: { remoteJid: remoteJid, status: status } } };\n      }\n\n      const session = await this.sessionRepository.updateMany({\n        where: {\n          instanceId: instanceId,\n          remoteJid: remoteJid,\n          botId: { not: null },\n        },\n        data: {\n          status: status,\n        },\n      });\n\n      const typebotData = {\n        remoteJid: remoteJid,\n        status: status,\n        session,\n      };\n\n      this.waMonitor.waInstances[instance.instanceName].sendDataWebhook(Events.TYPEBOT_CHANGE_STATUS, typebotData);\n\n      return { typebot: { ...instance, typebot: typebotData } };\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error changing status');\n    }\n  }\n\n  public async fetchSessions(instance: InstanceDto, botId: string, remoteJid?: string) {\n    if (!this.integrationEnabled) throw new BadRequestException('Typebot is disabled');\n\n    try {\n      const instanceId = await this.prismaRepository.instance\n        .findFirst({\n          where: {\n            name: instance.instanceName,\n          },\n        })\n        .then((instance) => instance.id);\n\n      const typebot = await this.botRepository.findFirst({\n        where: {\n          id: botId,\n        },\n      });\n\n      if (typebot && typebot.instanceId !== instanceId) {\n        throw new Error('Typebot not found');\n      }\n\n      return await this.sessionRepository.findMany({\n        where: {\n          instanceId: instanceId,\n          remoteJid,\n          botId: botId ?? { not: null },\n          type: 'typebot',\n        },\n      });\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error fetching sessions');\n    }\n  }\n\n  public async ignoreJid(instance: InstanceDto, data: IgnoreJidDto) {\n    if (!this.integrationEnabled) throw new BadRequestException('Typebot is disabled');\n\n    try {\n      const instanceId = await this.prismaRepository.instance\n        .findFirst({\n          where: {\n            name: instance.instanceName,\n          },\n        })\n        .then((instance) => instance.id);\n\n      const settings = await this.settingsRepository.findFirst({\n        where: {\n          instanceId: instanceId,\n        },\n      });\n\n      if (!settings) {\n        throw new Error('Settings not found');\n      }\n\n      let ignoreJids: any = settings?.ignoreJids || [];\n\n      if (data.action === 'add') {\n        if (ignoreJids.includes(data.remoteJid)) return { ignoreJids: ignoreJids };\n\n        ignoreJids.push(data.remoteJid);\n      } else {\n        ignoreJids = ignoreJids.filter((jid) => jid !== data.remoteJid);\n      }\n\n      const updateSettings = await this.settingsRepository.update({\n        where: {\n          id: settings.id,\n        },\n        data: {\n          ignoreJids: ignoreJids,\n        },\n      });\n\n      return {\n        ignoreJids: updateSettings.ignoreJids,\n      };\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error setting default settings');\n    }\n  }\n\n  public async emit({\n    instance,\n    remoteJid,\n    msg,\n  }: {\n    instance: InstanceDto;\n    remoteJid: string;\n    msg: any;\n    pushName?: string;\n  }) {\n    if (!this.integrationEnabled) return;\n\n    try {\n      const instanceData = await this.prismaRepository.instance.findFirst({\n        where: {\n          name: instance.instanceName,\n        },\n      });\n\n      if (!instanceData) throw new Error('Instance not found');\n\n      const session = await this.getSession(remoteJid, instance);\n\n      const content = getConversationMessage(msg);\n\n      let findBot = (await this.findBotTrigger(this.botRepository, content, instance, session)) as TypebotModel;\n\n      if (!findBot) {\n        const fallback = await this.settingsRepository.findFirst({\n          where: {\n            instanceId: instance.instanceId,\n          },\n        });\n\n        if (fallback?.typebotIdFallback) {\n          const findFallback = await this.botRepository.findFirst({\n            where: {\n              id: fallback.typebotIdFallback,\n            },\n          });\n\n          findBot = findFallback;\n        } else {\n          return;\n        }\n      }\n\n      const settings = await this.prismaRepository.typebotSetting.findFirst({\n        where: {\n          instanceId: instance.instanceId,\n        },\n      });\n\n      const url = findBot?.url;\n      const typebot = findBot?.typebot;\n      let expire = findBot?.expire;\n      let keywordFinish = findBot?.keywordFinish;\n      let delayMessage = findBot?.delayMessage;\n      let unknownMessage = findBot?.unknownMessage;\n      let listeningFromMe = findBot?.listeningFromMe;\n      let stopBotFromMe = findBot?.stopBotFromMe;\n      let keepOpen = findBot?.keepOpen;\n      let debounceTime = findBot?.debounceTime;\n      let ignoreJids = findBot?.ignoreJids;\n\n      if (expire === undefined || expire === null) expire = settings.expire;\n      if (keywordFinish === undefined || keywordFinish === null) keywordFinish = settings.keywordFinish;\n      if (delayMessage === undefined || delayMessage === null) delayMessage = settings.delayMessage;\n      if (unknownMessage === undefined || unknownMessage === null) unknownMessage = settings.unknownMessage;\n      if (listeningFromMe === undefined || listeningFromMe === null) listeningFromMe = settings.listeningFromMe;\n      if (stopBotFromMe === undefined || stopBotFromMe === null) stopBotFromMe = settings.stopBotFromMe;\n      if (keepOpen === undefined || keepOpen === null) keepOpen = settings.keepOpen;\n      if (debounceTime === undefined || debounceTime === null) debounceTime = settings.debounceTime;\n      if (ignoreJids === undefined || ignoreJids === null) ignoreJids = settings.ignoreJids;\n\n      if (this.checkIgnoreJids(ignoreJids, remoteJid)) return;\n\n      const key = msg.key as {\n        id: string;\n        remoteJid: string;\n        fromMe: boolean;\n        participant: string;\n      };\n\n      if (stopBotFromMe && key.fromMe && session) {\n        await this.sessionRepository.update({\n          where: {\n            id: session.id,\n          },\n          data: {\n            status: 'paused',\n          },\n        });\n        return;\n      }\n\n      if (!listeningFromMe && key.fromMe) {\n        return;\n      }\n\n      if (session && !session.awaitUser) {\n        return;\n      }\n\n      if (debounceTime && debounceTime > 0) {\n        this.processDebounce(this.userMessageDebounce, content, remoteJid, debounceTime, async (debouncedContent) => {\n          await this.typebotService.processTypebot(\n            instanceData,\n            remoteJid,\n            msg,\n            session,\n            findBot,\n            url,\n            expire,\n            typebot,\n            keywordFinish,\n            delayMessage,\n            unknownMessage,\n            listeningFromMe,\n            stopBotFromMe,\n            keepOpen,\n            debouncedContent,\n          );\n        });\n      } else {\n        await this.typebotService.processTypebot(\n          instanceData,\n          remoteJid,\n          msg,\n          session,\n          findBot,\n          url,\n          expire,\n          typebot,\n          keywordFinish,\n          delayMessage,\n          unknownMessage,\n          listeningFromMe,\n          stopBotFromMe,\n          keepOpen,\n          content,\n        );\n      }\n\n      if (session && !session.awaitUser) return;\n    } catch (error) {\n      this.logger.error(error);\n      return;\n    }\n  }\n}\n","import { EventDto } from '@api/integrations/event/event.dto';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { wa } from '@api/types/wa.types';\nimport { configService, Log, Pusher as ConfigPusher } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport Pusher from 'pusher';\n\nimport { EmitData, EventController, EventControllerInterface } from '../event.controller';\nexport class PusherController extends EventController implements EventControllerInterface {\n  private readonly logger = new Logger('PusherController');\n  private pusherClients: { [instanceName: string]: Pusher } = {};\n  private globalPusherClient: Pusher | null = null;\n  private pusherConfig: ConfigPusher = configService.get<ConfigPusher>('PUSHER');\n  constructor(prismaRepository: PrismaRepository, waMonitor: WAMonitoringService) {\n    super(prismaRepository, waMonitor, configService.get<ConfigPusher>('PUSHER')?.ENABLED, 'pusher');\n    this.init();\n  }\n  public async init(): Promise<void> {\n    if (!this.status) {\n      return;\n    }\n    if (this.pusherConfig.GLOBAL?.ENABLED) {\n      const { APP_ID, KEY, SECRET, CLUSTER, USE_TLS } = this.pusherConfig.GLOBAL;\n      if (APP_ID && KEY && SECRET && CLUSTER) {\n        this.globalPusherClient = new Pusher({\n          appId: APP_ID,\n          key: KEY,\n          secret: SECRET,\n          cluster: CLUSTER,\n          useTLS: USE_TLS,\n        });\n        this.logger.info('Pusher global client initialized');\n      }\n    }\n    const instances = await this.prismaRepository.instance.findMany({\n      where: {\n        Pusher: {\n          isNot: null,\n        },\n      },\n      include: {\n        Pusher: true,\n      },\n    });\n    instances.forEach((instance) => {\n      if (\n        instance.Pusher.enabled &&\n        instance.Pusher.appId &&\n        instance.Pusher.key &&\n        instance.Pusher.secret &&\n        instance.Pusher.cluster\n      ) {\n        this.pusherClients[instance.name] = new Pusher({\n          appId: instance.Pusher.appId,\n          key: instance.Pusher.key,\n          secret: instance.Pusher.secret,\n          cluster: instance.Pusher.cluster,\n          useTLS: instance.Pusher.useTLS,\n        });\n        this.logger.info(`Pusher client initialized for instance ${instance.name}`);\n      } else {\n        delete this.pusherClients[instance.name];\n        this.logger.warn(`Pusher client disabled or misconfigured for instance ${instance.name}`);\n      }\n    });\n  }\n  override async set(instanceName: string, data: EventDto): Promise<wa.LocalPusher> {\n    if (!data.pusher?.enabled) {\n      data.pusher.events = [];\n    } else if (data.pusher.events.length === 0) {\n      data.pusher.events = EventController.events;\n    }\n    const instance = await this.prisma.pusher.upsert({\n      where: {\n        instanceId: this.monitor.waInstances[instanceName].instanceId,\n      },\n      update: {\n        enabled: data.pusher.enabled,\n        events: data.pusher.events,\n        appId: data.pusher.appId,\n        key: data.pusher.key,\n        secret: data.pusher.secret,\n        cluster: data.pusher.cluster,\n        useTLS: data.pusher.useTLS,\n      },\n      create: {\n        enabled: data.pusher.enabled,\n        events: data.pusher.events,\n        instanceId: this.monitor.waInstances[instanceName].instanceId,\n        appId: data.pusher.appId,\n        key: data.pusher.key,\n        secret: data.pusher.secret,\n        cluster: data.pusher.cluster,\n        useTLS: data.pusher.useTLS,\n      },\n    });\n    if (instance.enabled && instance.appId && instance.key && instance.secret && instance.cluster) {\n      this.pusherClients[instanceName] = new Pusher({\n        appId: instance.appId,\n        key: instance.key,\n        secret: instance.secret,\n        cluster: instance.cluster,\n        useTLS: instance.useTLS,\n      });\n      this.logger.info(`Pusher client initialized for instance ${instanceName}`);\n    } else {\n      delete this.pusherClients[instanceName];\n      this.logger.warn(`Pusher client disabled or misconfigured for instance ${instanceName}`);\n    }\n    return instance;\n  }\n  public async emit({\n    instanceName,\n    origin,\n    event,\n    data,\n    serverUrl,\n    dateTime,\n    sender,\n    apiKey,\n    local,\n    integration,\n  }: EmitData): Promise<void> {\n    if (integration && !integration.includes('pusher')) {\n      return;\n    }\n    if (!this.status) {\n      return;\n    }\n    const instance = (await this.get(instanceName)) as wa.LocalPusher;\n    const we = event.replace(/[.-]/gm, '_').toUpperCase();\n    const enabledLog = configService.get<Log>('LOG').LEVEL.includes('WEBHOOKS');\n    const eventName = event.replace(/_/g, '.').toLowerCase();\n    const pusherData = {\n      event,\n      instance: instanceName,\n      data,\n      destination: instance?.appId || this.pusherConfig.GLOBAL?.APP_ID,\n      date_time: dateTime,\n      sender,\n      server_url: serverUrl,\n      apikey: apiKey,\n    };\n    if (event == 'qrcode.updated') {\n      delete pusherData.data.qrcode.base64;\n    }\n    const payload = JSON.stringify(pusherData);\n    const payloadSize = Buffer.byteLength(payload, 'utf8');\n    const MAX_SIZE = 10240;\n    if (payloadSize > MAX_SIZE) {\n      this.logger.error({\n        local: `${origin}.sendData-Pusher`,\n        message: 'Payload size exceeds Pusher limit',\n        event,\n        instanceName,\n        payloadSize,\n      });\n      return;\n    }\n    if (local && instance && instance.enabled) {\n      const pusherLocalEvents = instance.events;\n      if (Array.isArray(pusherLocalEvents) && pusherLocalEvents.includes(we)) {\n        if (enabledLog) {\n          this.logger.log({\n            local: `${origin}.sendData-Pusher`,\n            appId: instance.appId,\n            ...pusherData,\n          });\n        }\n        try {\n          const pusher = this.pusherClients[instanceName];\n          if (pusher) {\n            pusher.trigger(instanceName, eventName, pusherData);\n          } else {\n            this.logger.error(`Pusher client not found for instance ${instanceName}`);\n          }\n        } catch (error) {\n          this.logger.error({\n            local: `${origin}.sendData-Pusher`,\n            message: error?.message,\n            error,\n          });\n        }\n      }\n    }\n    if (this.pusherConfig.GLOBAL?.ENABLED) {\n      const globalEvents = this.pusherConfig.EVENTS;\n      if (globalEvents[we]) {\n        if (enabledLog) {\n          this.logger.log({\n            local: `${origin}.sendData-Pusher-Global`,\n            appId: this.pusherConfig.GLOBAL?.APP_ID,\n            ...pusherData,\n          });\n        }\n        try {\n          if (this.globalPusherClient) {\n            this.globalPusherClient.trigger(instanceName, eventName, pusherData);\n          } else {\n            this.logger.error('Global Pusher client not initialized');\n          }\n        } catch (error) {\n          this.logger.error({\n            local: `${origin}.sendData-Pusher-Global`,\n            message: error?.message,\n            error,\n          });\n        }\n      }\n    }\n  }\n}\n","import { EventDto } from '@api/integrations/event/event.dto';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { wa } from '@api/types/wa.types';\n\nexport type EmitData = {\n  instanceName: string;\n  origin: string;\n  event: string;\n  data: any;\n  serverUrl: string;\n  dateTime: string;\n  sender: string;\n  apiKey?: string;\n  local?: boolean;\n  integration?: string[];\n};\n\nexport interface EventControllerInterface {\n  set(instanceName: string, data: any): Promise<any>;\n  get(instanceName: string): Promise<any>;\n  emit({ instanceName, origin, event, data, serverUrl, dateTime, sender, apiKey, local }: EmitData): Promise<void>;\n}\n\nexport class EventController {\n  public prismaRepository: PrismaRepository;\n  protected waMonitor: WAMonitoringService;\n  private integrationStatus: boolean;\n  private integrationName: string;\n\n  constructor(\n    prismaRepository: PrismaRepository,\n    waMonitor: WAMonitoringService,\n    integrationStatus: boolean,\n    integrationName: string,\n  ) {\n    this.prisma = prismaRepository;\n    this.monitor = waMonitor;\n    this.status = integrationStatus;\n    this.name = integrationName;\n  }\n\n  public set prisma(prisma: PrismaRepository) {\n    this.prismaRepository = prisma;\n  }\n\n  public get prisma() {\n    return this.prismaRepository;\n  }\n\n  public set monitor(waMonitor: WAMonitoringService) {\n    this.waMonitor = waMonitor;\n  }\n\n  public get monitor() {\n    return this.waMonitor;\n  }\n\n  public set name(name: string) {\n    this.integrationName = name;\n  }\n\n  public get name() {\n    return this.integrationName;\n  }\n\n  public set status(status: boolean) {\n    this.integrationStatus = status;\n  }\n\n  public get status() {\n    return this.integrationStatus;\n  }\n\n  public async set(instanceName: string, data: EventDto): Promise<wa.LocalEvent> {\n    if (!this.status) {\n      return;\n    }\n\n    if (!data[this.name]?.enabled) {\n      data[this.name].events = [];\n    } else {\n      if (0 === data[this.name].events.length) {\n        data[this.name].events = EventController.events;\n      }\n    }\n\n    return this.prisma[this.name].upsert({\n      where: {\n        instanceId: this.monitor.waInstances[instanceName].instanceId,\n      },\n      update: {\n        enabled: data[this.name]?.enabled,\n        events: data[this.name].events,\n      },\n      create: {\n        enabled: data[this.name]?.enabled,\n        events: data[this.name].events,\n        instanceId: this.monitor.waInstances[instanceName].instanceId,\n      },\n    });\n  }\n\n  public async get(instanceName: string): Promise<wa.LocalEvent> {\n    if (!this.status) {\n      return;\n    }\n\n    if (undefined === this.monitor.waInstances[instanceName]) {\n      return null;\n    }\n\n    const data = await this.prisma[this.name].findUnique({\n      where: {\n        instanceId: this.monitor.waInstances[instanceName].instanceId,\n      },\n    });\n\n    if (!data) {\n      return null;\n    }\n\n    return data;\n  }\n\n  public static readonly events = [\n    'APPLICATION_STARTUP',\n    'QRCODE_UPDATED',\n    'MESSAGES_SET',\n    'MESSAGES_UPSERT',\n    'MESSAGES_EDITED',\n    'MESSAGES_UPDATE',\n    'MESSAGES_DELETE',\n    'SEND_MESSAGE',\n    'CONTACTS_SET',\n    'CONTACTS_UPSERT',\n    'CONTACTS_UPDATE',\n    'PRESENCE_UPDATE',\n    'CHATS_SET',\n    'CHATS_UPSERT',\n    'CHATS_UPDATE',\n    'CHATS_DELETE',\n    'GROUPS_UPSERT',\n    'GROUP_UPDATE',\n    'GROUP_PARTICIPANTS_UPDATE',\n    'CONNECTION_UPDATE',\n    'LABELS_EDIT',\n    'LABELS_ASSOCIATION',\n    'CALL',\n    'TYPEBOT_START',\n    'TYPEBOT_CHANGE_STATUS',\n    'REMOVE_INSTANCE',\n    'LOGOUT_INSTANCE',\n  ];\n}\n","import { PrismaRepository } from '@api/repository/repository.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { configService, Log, Rabbitmq } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport * as amqp from 'amqplib/callback_api';\n\nimport { EmitData, EventController, EventControllerInterface } from '../event.controller';\n\nexport class RabbitmqController extends EventController implements EventControllerInterface {\n  public amqpChannel: amqp.Channel | null = null;\n  private readonly logger = new Logger('RabbitmqController');\n\n  constructor(prismaRepository: PrismaRepository, waMonitor: WAMonitoringService) {\n    super(prismaRepository, waMonitor, configService.get<Rabbitmq>('RABBITMQ')?.ENABLED, 'rabbitmq');\n  }\n\n  public async init(): Promise<void> {\n    if (!this.status) {\n      return;\n    }\n\n    await new Promise<void>((resolve, reject) => {\n      const uri = configService.get<Rabbitmq>('RABBITMQ').URI;\n      const rabbitmqExchangeName = configService.get<Rabbitmq>('RABBITMQ').EXCHANGE_NAME;\n\n      amqp.connect(uri, (error, connection) => {\n        if (error) {\n          reject(error);\n\n          return;\n        }\n\n        connection.createChannel((channelError, channel) => {\n          if (channelError) {\n            reject(channelError);\n\n            return;\n          }\n\n          const exchangeName = rabbitmqExchangeName;\n\n          channel.assertExchange(exchangeName, 'topic', {\n            durable: true,\n            autoDelete: false,\n          });\n\n          this.amqpChannel = channel;\n\n          this.logger.info('AMQP initialized');\n\n          resolve();\n        });\n      });\n    }).then(() => {\n      if (configService.get<Rabbitmq>('RABBITMQ')?.GLOBAL_ENABLED) this.initGlobalQueues();\n    });\n  }\n\n  private set channel(channel: amqp.Channel) {\n    this.amqpChannel = channel;\n  }\n\n  public get channel(): amqp.Channel {\n    return this.amqpChannel;\n  }\n\n  public async emit({\n    instanceName,\n    origin,\n    event,\n    data,\n    serverUrl,\n    dateTime,\n    sender,\n    apiKey,\n    integration,\n  }: EmitData): Promise<void> {\n    if (integration && !integration.includes('rabbitmq')) {\n      return;\n    }\n\n    if (!this.status) {\n      return;\n    }\n\n    const instanceRabbitmq = await this.get(instanceName);\n    const rabbitmqLocal = instanceRabbitmq?.events;\n    const rabbitmqGlobal = configService.get<Rabbitmq>('RABBITMQ').GLOBAL_ENABLED;\n    const rabbitmqEvents = configService.get<Rabbitmq>('RABBITMQ').EVENTS;\n    const prefixKey = configService.get<Rabbitmq>('RABBITMQ').PREFIX_KEY;\n    const rabbitmqExchangeName = configService.get<Rabbitmq>('RABBITMQ').EXCHANGE_NAME;\n    const we = event.replace(/[.-]/gm, '_').toUpperCase();\n    const logEnabled = configService.get<Log>('LOG').LEVEL.includes('WEBHOOKS');\n\n    const message = {\n      event,\n      instance: instanceName,\n      data,\n      server_url: serverUrl,\n      date_time: dateTime,\n      sender,\n      apikey: apiKey,\n    };\n\n    if (instanceRabbitmq?.enabled && this.amqpChannel) {\n      if (Array.isArray(rabbitmqLocal) && rabbitmqLocal.includes(we)) {\n        const exchangeName = instanceName ?? rabbitmqExchangeName;\n\n        let retry = 0;\n\n        while (retry < 3) {\n          try {\n            await this.amqpChannel.assertExchange(exchangeName, 'topic', {\n              durable: true,\n              autoDelete: false,\n            });\n\n            const eventName = event.replace(/_/g, '.').toLowerCase();\n\n            const queueName = `${instanceName}.${eventName}`;\n\n            await this.amqpChannel.assertQueue(queueName, {\n              durable: true,\n              autoDelete: false,\n              arguments: {\n                'x-queue-type': 'quorum',\n              },\n            });\n\n            await this.amqpChannel.bindQueue(queueName, exchangeName, eventName);\n\n            await this.amqpChannel.publish(exchangeName, event, Buffer.from(JSON.stringify(message)));\n\n            if (logEnabled) {\n              const logData = {\n                local: `${origin}.sendData-RabbitMQ`,\n                ...message,\n              };\n\n              this.logger.log(logData);\n            }\n\n            break;\n          } catch (error) {\n            retry++;\n          }\n        }\n      }\n    }\n\n    if (rabbitmqGlobal && rabbitmqEvents[we] && this.amqpChannel) {\n      const exchangeName = rabbitmqExchangeName;\n\n      let retry = 0;\n\n      while (retry < 3) {\n        try {\n          await this.amqpChannel.assertExchange(exchangeName, 'topic', {\n            durable: true,\n            autoDelete: false,\n          });\n\n          const queueName = prefixKey\n            ? `${prefixKey}.${event.replace(/_/g, '.').toLowerCase()}`\n            : event.replace(/_/g, '.').toLowerCase();\n\n          await this.amqpChannel.assertQueue(queueName, {\n            durable: true,\n            autoDelete: false,\n            arguments: {\n              'x-queue-type': 'quorum',\n            },\n          });\n\n          await this.amqpChannel.bindQueue(queueName, exchangeName, event);\n\n          await this.amqpChannel.publish(exchangeName, event, Buffer.from(JSON.stringify(message)));\n\n          if (logEnabled) {\n            const logData = {\n              local: `${origin}.sendData-RabbitMQ-Global`,\n              ...message,\n            };\n\n            this.logger.log(logData);\n          }\n\n          break;\n        } catch (error) {\n          retry++;\n        }\n      }\n    }\n  }\n\n  private async initGlobalQueues(): Promise<void> {\n    this.logger.info('Initializing global queues');\n\n    const rabbitmqExchangeName = configService.get<Rabbitmq>('RABBITMQ').EXCHANGE_NAME;\n    const events = configService.get<Rabbitmq>('RABBITMQ').EVENTS;\n    const prefixKey = configService.get<Rabbitmq>('RABBITMQ').PREFIX_KEY;\n\n    if (!events) {\n      this.logger.warn('No events to initialize on AMQP');\n\n      return;\n    }\n\n    const eventKeys = Object.keys(events);\n\n    eventKeys.forEach((event) => {\n      if (events[event] === false) return;\n\n      const queueName =\n        prefixKey !== ''\n          ? `${prefixKey}.${event.replace(/_/g, '.').toLowerCase()}`\n          : `${event.replace(/_/g, '.').toLowerCase()}`;\n      const exchangeName = rabbitmqExchangeName;\n\n      this.amqpChannel.assertExchange(exchangeName, 'topic', {\n        durable: true,\n        autoDelete: false,\n      });\n\n      this.amqpChannel.assertQueue(queueName, {\n        durable: true,\n        autoDelete: false,\n        arguments: {\n          'x-queue-type': 'quorum',\n        },\n      });\n\n      this.amqpChannel.bindQueue(queueName, exchangeName, event);\n    });\n  }\n}\n","import { PrismaRepository } from '@api/repository/repository.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { SQS } from '@aws-sdk/client-sqs';\nimport { configService, Log, Sqs } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\n\nimport { EmitData, EventController, EventControllerInterface } from '../event.controller';\n\nexport class SqsController extends EventController implements EventControllerInterface {\n  private sqs: SQS;\n  private readonly logger = new Logger('SqsController');\n\n  constructor(prismaRepository: PrismaRepository, waMonitor: WAMonitoringService) {\n    super(prismaRepository, waMonitor, configService.get<Sqs>('SQS')?.ENABLED, 'sqs');\n  }\n\n  public init(): void {\n    if (!this.status) {\n      return;\n    }\n\n    new Promise<void>((resolve) => {\n      const awsConfig = configService.get<Sqs>('SQS');\n\n      this.sqs = new SQS({\n        credentials: {\n          accessKeyId: awsConfig.ACCESS_KEY_ID,\n          secretAccessKey: awsConfig.SECRET_ACCESS_KEY,\n        },\n\n        region: awsConfig.REGION,\n      });\n\n      this.logger.info('SQS initialized');\n\n      resolve();\n    });\n  }\n\n  private set channel(sqs: SQS) {\n    this.sqs = sqs;\n  }\n\n  public get channel(): SQS {\n    return this.sqs;\n  }\n\n  public async emit({\n    instanceName,\n    origin,\n    event,\n    data,\n    serverUrl,\n    dateTime,\n    sender,\n    apiKey,\n    integration,\n  }: EmitData): Promise<void> {\n    if (integration && !integration.includes('sqs')) {\n      return;\n    }\n\n    if (!this.status) {\n      return;\n    }\n\n    const instanceSqs = await this.get(instanceName);\n    const sqsLocal = instanceSqs?.events;\n    const we = event.replace(/[.-]/gm, '_').toUpperCase();\n\n    if (instanceSqs?.enabled) {\n      if (this.sqs) {\n        if (Array.isArray(sqsLocal) && sqsLocal.includes(we)) {\n          const eventFormatted = `${event.replace('.', '_').toLowerCase()}`;\n          const queueName = `${instanceName}_${eventFormatted}.fifo`;\n          const sqsConfig = configService.get<Sqs>('SQS');\n          const sqsUrl = `https://sqs.${sqsConfig.REGION}.amazonaws.com/${sqsConfig.ACCOUNT_ID}/${queueName}`;\n\n          const message = {\n            event,\n            instance: instanceName,\n            data,\n            server_url: serverUrl,\n            date_time: dateTime,\n            sender,\n            apikey: apiKey,\n          };\n\n          const params = {\n            MessageBody: JSON.stringify(message),\n            MessageGroupId: 'evolution',\n            MessageDeduplicationId: `${instanceName}_${eventFormatted}_${Date.now()}`,\n            QueueUrl: sqsUrl,\n          };\n\n          this.sqs.sendMessage(params, (err) => {\n            if (err) {\n              this.logger.error({\n                local: `${origin}.sendData-SQS`,\n                message: err?.message,\n                hostName: err?.hostname,\n                code: err?.code,\n                stack: err?.stack,\n                name: err?.name,\n                url: queueName,\n                server_url: serverUrl,\n              });\n            } else {\n              if (configService.get<Log>('LOG').LEVEL.includes('WEBHOOKS')) {\n                const logData = {\n                  local: `${origin}.sendData-SQS`,\n                  ...message,\n                };\n\n                this.logger.log(logData);\n              }\n            }\n          });\n        }\n      }\n    }\n  }\n\n  public async initQueues(instanceName: string, events: string[]) {\n    if (!events || !events.length) return;\n\n    const queues = events.map((event) => {\n      return `${event.replace(/_/g, '_').toLowerCase()}`;\n    });\n\n    queues.forEach((event) => {\n      const queueName = `${instanceName}_${event}.fifo`;\n\n      this.sqs.createQueue(\n        {\n          QueueName: queueName,\n          Attributes: {\n            FifoQueue: 'true',\n          },\n        },\n        (err, data) => {\n          if (err) {\n            this.logger.error(`Error creating queue ${queueName}: ${err.message}`);\n          } else {\n            this.logger.info(`Queue ${queueName} created: ${data.QueueUrl}`);\n          }\n        },\n      );\n    });\n  }\n\n  public async removeQueues(instanceName: string, events: any) {\n    const eventsArray = Array.isArray(events) ? events.map((event) => String(event)) : [];\n    if (!events || !eventsArray.length) return;\n\n    const queues = eventsArray.map((event) => {\n      return `${event.replace(/_/g, '_').toLowerCase()}`;\n    });\n\n    queues.forEach((event) => {\n      const queueName = `${instanceName}_${event}.fifo`;\n\n      this.sqs.getQueueUrl(\n        {\n          QueueName: queueName,\n        },\n        (err, data) => {\n          if (err) {\n            this.logger.error(`Error getting queue URL for ${queueName}: ${err.message}`);\n          } else {\n            const queueUrl = data.QueueUrl;\n\n            this.sqs.deleteQueue(\n              {\n                QueueUrl: queueUrl,\n              },\n              (deleteErr) => {\n                if (deleteErr) {\n                  this.logger.error(`Error deleting queue ${queueName}: ${deleteErr.message}`);\n                } else {\n                  this.logger.info(`Queue ${queueName} deleted`);\n                }\n              },\n            );\n          }\n        },\n      );\n    });\n  }\n}\n","import { EventDto } from '@api/integrations/event/event.dto';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { wa } from '@api/types/wa.types';\nimport { configService, Log, Webhook } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport { BadRequestException } from '@exceptions';\nimport axios, { AxiosInstance } from 'axios';\nimport { isURL } from 'class-validator';\n\nimport { EmitData, EventController, EventControllerInterface } from '../event.controller';\n\nexport class WebhookController extends EventController implements EventControllerInterface {\n  private readonly logger = new Logger('WebhookController');\n\n  constructor(prismaRepository: PrismaRepository, waMonitor: WAMonitoringService) {\n    super(prismaRepository, waMonitor, true, 'webhook');\n  }\n\n  override async set(instanceName: string, data: EventDto): Promise<wa.LocalWebHook> {\n    if (!isURL(data.webhook.url, { require_tld: false })) {\n      throw new BadRequestException('Invalid \"url\" property');\n    }\n\n    if (!data.webhook?.enabled) {\n      data.webhook.events = [];\n    } else {\n      if (0 === data.webhook.events.length) {\n        data.webhook.events = EventController.events;\n      }\n    }\n\n    return this.prisma.webhook.upsert({\n      where: {\n        instanceId: this.monitor.waInstances[instanceName].instanceId,\n      },\n      update: {\n        enabled: data.webhook?.enabled,\n        events: data.webhook?.events,\n        url: data.webhook?.url,\n        headers: data.webhook?.headers,\n        webhookBase64: data.webhook.base64,\n        webhookByEvents: data.webhook.byEvents,\n      },\n      create: {\n        enabled: data.webhook?.enabled,\n        events: data.webhook?.events,\n        instanceId: this.monitor.waInstances[instanceName].instanceId,\n        url: data.webhook?.url,\n        headers: data.webhook?.headers,\n        webhookBase64: data.webhook.base64,\n        webhookByEvents: data.webhook.byEvents,\n      },\n    });\n  }\n\n  public async emit({\n    instanceName,\n    origin,\n    event,\n    data,\n    serverUrl,\n    dateTime,\n    sender,\n    apiKey,\n    local,\n    integration,\n  }: EmitData): Promise<void> {\n    if (integration && !integration.includes('webhook')) {\n      return;\n    }\n\n    const instance = (await this.get(instanceName)) as wa.LocalWebHook;\n\n    const webhookConfig = configService.get<Webhook>('WEBHOOK');\n    const webhookLocal = instance?.events;\n    const webhookHeaders = instance?.headers;\n    const we = event.replace(/[.-]/gm, '_').toUpperCase();\n    const transformedWe = we.replace(/_/gm, '-').toLowerCase();\n    const enabledLog = configService.get<Log>('LOG').LEVEL.includes('WEBHOOKS');\n\n    const webhookData = {\n      event,\n      instance: instanceName,\n      data,\n      destination: instance?.url || `${webhookConfig.GLOBAL.URL}/${transformedWe}`,\n      date_time: dateTime,\n      sender,\n      server_url: serverUrl,\n      apikey: apiKey,\n    };\n\n    if (local && instance?.enabled) {\n      if (Array.isArray(webhookLocal) && webhookLocal.includes(we)) {\n        let baseURL: string;\n\n        if (instance?.webhookByEvents) {\n          baseURL = `${instance?.url}/${transformedWe}`;\n        } else {\n          baseURL = instance?.url;\n        }\n\n        if (enabledLog) {\n          const logData = {\n            local: `${origin}.sendData-Webhook`,\n            url: baseURL,\n            ...webhookData,\n          };\n\n          this.logger.log(logData);\n        }\n\n        try {\n          if (instance?.enabled && isURL(instance.url, { require_tld: false })) {\n            const httpService = axios.create({\n              baseURL,\n              headers: webhookHeaders as Record<string, string> | undefined,\n            });\n\n            await this.retryWebhookRequest(httpService, webhookData, `${origin}.sendData-Webhook`, baseURL, serverUrl);\n          }\n        } catch (error) {\n          this.logger.error({\n            local: `${origin}.sendData-Webhook`,\n            message: `Todas as tentativas falharam: ${error?.message}`,\n            hostName: error?.hostname,\n            syscall: error?.syscall,\n            code: error?.code,\n            error: error?.errno,\n            stack: error?.stack,\n            name: error?.name,\n            url: baseURL,\n            server_url: serverUrl,\n          });\n        }\n      }\n    }\n\n    if (webhookConfig.GLOBAL?.ENABLED) {\n      if (webhookConfig.EVENTS[we]) {\n        let globalURL = webhookConfig.GLOBAL.URL;\n\n        if (webhookConfig.GLOBAL.WEBHOOK_BY_EVENTS) {\n          globalURL = `${globalURL}/${transformedWe}`;\n        }\n\n        if (enabledLog) {\n          const logData = {\n            local: `${origin}.sendData-Webhook-Global`,\n            url: globalURL,\n            ...webhookData,\n          };\n\n          this.logger.log(logData);\n        }\n\n        try {\n          if (isURL(globalURL)) {\n            const httpService = axios.create({ baseURL: globalURL });\n\n            await this.retryWebhookRequest(\n              httpService,\n              webhookData,\n              `${origin}.sendData-Webhook-Global`,\n              globalURL,\n              serverUrl,\n            );\n          }\n        } catch (error) {\n          this.logger.error({\n            local: `${origin}.sendData-Webhook-Global`,\n            message: `Todas as tentativas falharam: ${error?.message}`,\n            hostName: error?.hostname,\n            syscall: error?.syscall,\n            code: error?.code,\n            error: error?.errno,\n            stack: error?.stack,\n            name: error?.name,\n            url: globalURL,\n            server_url: serverUrl,\n          });\n        }\n      }\n    }\n  }\n\n  private async retryWebhookRequest(\n    httpService: AxiosInstance,\n    webhookData: any,\n    origin: string,\n    baseURL: string,\n    serverUrl: string,\n    maxRetries = 10,\n    delaySeconds = 30,\n  ): Promise<void> {\n    let attempts = 0;\n\n    while (attempts < maxRetries) {\n      try {\n        await httpService.post('', webhookData);\n        if (attempts > 0) {\n          this.logger.log({\n            local: `${origin}`,\n            message: `Sucesso no envio após ${attempts + 1} tentativas`,\n            url: baseURL,\n          });\n        }\n        return;\n      } catch (error) {\n        attempts++;\n\n        this.logger.error({\n          local: `${origin}`,\n          message: `Tentativa ${attempts}/${maxRetries} falhou: ${error?.message}`,\n          hostName: error?.hostname,\n          syscall: error?.syscall,\n          code: error?.code,\n          error: error?.errno,\n          stack: error?.stack,\n          name: error?.name,\n          url: baseURL,\n          server_url: serverUrl,\n        });\n\n        if (attempts === maxRetries) {\n          throw error;\n        }\n\n        await new Promise((resolve) => setTimeout(resolve, delaySeconds * 1000));\n      }\n    }\n  }\n}\n","import { PrismaRepository } from '@api/repository/repository.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { configService, Cors, Log, Websocket } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport { Server } from 'http';\nimport { Server as SocketIO } from 'socket.io';\n\nimport { EmitData, EventController, EventControllerInterface } from '../event.controller';\n\nexport class WebsocketController extends EventController implements EventControllerInterface {\n  private io: SocketIO;\n  private corsConfig: Array<any>;\n  private readonly logger = new Logger('WebsocketController');\n\n  constructor(prismaRepository: PrismaRepository, waMonitor: WAMonitoringService) {\n    super(prismaRepository, waMonitor, configService.get<Websocket>('WEBSOCKET')?.ENABLED, 'websocket');\n\n    this.cors = configService.get<Cors>('CORS').ORIGIN;\n  }\n\n  public init(httpServer: Server): void {\n    if (!this.status) {\n      return;\n    }\n\n    this.socket = new SocketIO(httpServer, {\n      cors: {\n        origin: this.cors,\n      },\n    });\n\n    this.socket.on('connection', (socket) => {\n      this.logger.info('User connected');\n\n      socket.on('disconnect', () => {\n        this.logger.info('User disconnected');\n      });\n\n      socket.on('sendNode', async (data) => {\n        try {\n          await this.waMonitor.waInstances[data.instanceId].baileysSendNode(data.stanza);\n          this.logger.info('Node sent successfully');\n        } catch (error) {\n          this.logger.error('Error sending node:');\n          this.logger.error(error);\n        }\n      });\n    });\n\n    this.logger.info('Socket.io initialized');\n  }\n\n  private set cors(cors: Array<any>) {\n    this.corsConfig = cors;\n  }\n\n  private get cors(): string | Array<any> {\n    return this.corsConfig?.includes('*') ? '*' : this.corsConfig;\n  }\n\n  private set socket(socket: SocketIO) {\n    this.io = socket;\n  }\n\n  public get socket(): SocketIO {\n    return this.io;\n  }\n\n  public async emit({\n    instanceName,\n    origin,\n    event,\n    data,\n    serverUrl,\n    dateTime,\n    sender,\n    apiKey,\n    integration,\n  }: EmitData): Promise<void> {\n    if (integration && !integration.includes('websocket')) {\n      return;\n    }\n\n    if (!this.status) {\n      return;\n    }\n\n    const configEv = event.replace(/[.-]/gm, '_').toUpperCase();\n    const logEnabled = configService.get<Log>('LOG').LEVEL.includes('WEBSOCKET');\n    const message = {\n      event,\n      instance: instanceName,\n      data,\n      server_url: serverUrl,\n      date_time: dateTime,\n      sender,\n      apikey: apiKey,\n    };\n\n    if (configService.get<Websocket>('WEBSOCKET')?.GLOBAL_EVENTS) {\n      this.socket.emit(event, message);\n\n      if (logEnabled) {\n        this.logger.log({\n          local: `${origin}.sendData-WebsocketGlobal`,\n          ...message,\n        });\n      }\n    }\n\n    try {\n      const instance = await this.get(instanceName);\n\n      if (!instance?.enabled) {\n        return;\n      }\n\n      if (Array.isArray(instance?.events) && instance?.events.includes(configEv)) {\n        this.socket.of(`/${instanceName}`).emit(event, message);\n\n        if (logEnabled) {\n          this.logger.log({\n            local: `${origin}.sendData-Websocket`,\n            ...message,\n          });\n        }\n      }\n    } catch (err) {\n      if (logEnabled) {\n        this.logger.log(err);\n      }\n    }\n  }\n}\n","import { PusherController } from '@api/integrations/event/pusher/pusher.controller';\nimport { RabbitmqController } from '@api/integrations/event/rabbitmq/rabbitmq.controller';\nimport { SqsController } from '@api/integrations/event/sqs/sqs.controller';\nimport { WebhookController } from '@api/integrations/event/webhook/webhook.controller';\nimport { WebsocketController } from '@api/integrations/event/websocket/websocket.controller';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport { WAMonitoringService } from '@api/services/monitor.service';\nimport { Server } from 'http';\n\nexport class EventManager {\n  private prismaRepository: PrismaRepository;\n  private waMonitor: WAMonitoringService;\n  private websocketController: WebsocketController;\n  private webhookController: WebhookController;\n  private rabbitmqController: RabbitmqController;\n  private sqsController: SqsController;\n  private pusherController: PusherController;\n\n  constructor(prismaRepository: PrismaRepository, waMonitor: WAMonitoringService) {\n    this.prisma = prismaRepository;\n    this.monitor = waMonitor;\n\n    this.websocket = new WebsocketController(prismaRepository, waMonitor);\n    this.webhook = new WebhookController(prismaRepository, waMonitor);\n    this.rabbitmq = new RabbitmqController(prismaRepository, waMonitor);\n    this.sqs = new SqsController(prismaRepository, waMonitor);\n    this.pusher = new PusherController(prismaRepository, waMonitor);\n  }\n\n  public set prisma(prisma: PrismaRepository) {\n    this.prismaRepository = prisma;\n  }\n\n  public get prisma() {\n    return this.prismaRepository;\n  }\n\n  public set monitor(waMonitor: WAMonitoringService) {\n    this.waMonitor = waMonitor;\n  }\n\n  public get monitor() {\n    return this.waMonitor;\n  }\n\n  public set websocket(websocket: WebsocketController) {\n    this.websocketController = websocket;\n  }\n\n  public get websocket() {\n    return this.websocketController;\n  }\n\n  public set webhook(webhook: WebhookController) {\n    this.webhookController = webhook;\n  }\n\n  public get webhook() {\n    return this.webhookController;\n  }\n\n  public set rabbitmq(rabbitmq: RabbitmqController) {\n    this.rabbitmqController = rabbitmq;\n  }\n\n  public get rabbitmq() {\n    return this.rabbitmqController;\n  }\n\n  public set sqs(sqs: SqsController) {\n    this.sqsController = sqs;\n  }\n\n  public get sqs() {\n    return this.sqsController;\n  }\n\n  public set pusher(pusher: PusherController) {\n    this.pusherController = pusher;\n  }\n  public get pusher() {\n    return this.pusherController;\n  }\n\n  public init(httpServer: Server): void {\n    this.websocket.init(httpServer);\n    this.rabbitmq.init();\n    this.sqs.init();\n    this.pusher.init();\n  }\n\n  public async emit(eventData: {\n    instanceName: string;\n    origin: string;\n    event: string;\n    data: Object;\n    serverUrl: string;\n    dateTime: string;\n    sender: string;\n    apiKey?: string;\n    local?: boolean;\n    integration?: string[];\n  }): Promise<void> {\n    await this.websocket.emit(eventData);\n    await this.rabbitmq.emit(eventData);\n    await this.sqs.emit(eventData);\n    await this.webhook.emit(eventData);\n    await this.pusher.emit(eventData);\n  }\n\n  public async setInstance(instanceName: string, data: any): Promise<any> {\n    if (data.websocket)\n      await this.websocket.set(instanceName, {\n        websocket: {\n          enabled: true,\n          events: data.websocket?.events,\n        },\n      });\n\n    if (data.rabbitmq)\n      await this.rabbitmq.set(instanceName, {\n        rabbitmq: {\n          enabled: true,\n          events: data.rabbitmq?.events,\n        },\n      });\n\n    if (data.sqs)\n      await this.sqs.set(instanceName, {\n        sqs: {\n          enabled: true,\n          events: data.sqs?.events,\n        },\n      });\n\n    if (data.webhook)\n      await this.webhook.set(instanceName, {\n        webhook: {\n          enabled: true,\n          events: data.webhook?.events,\n          url: data.webhook?.url,\n          headers: data.webhook?.headers,\n          base64: data.webhook?.base64,\n          byEvents: data.webhook?.byEvents,\n        },\n      });\n\n    if (data.pusher)\n      await this.pusher.set(instanceName, {\n        pusher: {\n          enabled: true,\n          events: data.pusher?.events,\n          appId: data.pusher?.appId,\n          key: data.pusher?.key,\n          secret: data.pusher?.secret,\n          cluster: data.pusher?.cluster,\n          useTLS: data.pusher?.useTLS,\n        },\n      });\n  }\n}\n","import { InstanceDto } from '@api/dto/instance.dto';\nimport { MediaDto } from '@api/integrations/storage/s3/dto/media.dto';\nimport { S3Service } from '@api/integrations/storage/s3/services/s3.service';\n\nexport class S3Controller {\n  constructor(private readonly s3Service: S3Service) {}\n\n  public async getMedia(instance: InstanceDto, data: MediaDto) {\n    return this.s3Service.getMedia(instance, data);\n  }\n\n  public async getMediaUrl(instance: InstanceDto, data: MediaDto) {\n    return this.s3Service.getMediaUrl(instance, data);\n  }\n}\n","import { InstanceDto } from '@api/dto/instance.dto';\nimport { MediaDto } from '@api/integrations/storage/s3/dto/media.dto';\nimport { getObjectUrl } from '@api/integrations/storage/s3/libs/minio.server';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport { Logger } from '@config/logger.config';\nimport { BadRequestException } from '@exceptions';\n\nexport class S3Service {\n  constructor(private readonly prismaRepository: PrismaRepository) {}\n\n  private readonly logger = new Logger('S3Service');\n\n  public async getMedia(instance: InstanceDto, query?: MediaDto) {\n    try {\n      const where: any = {\n        instanceId: instance.instanceId,\n        ...query,\n      };\n\n      const media = await this.prismaRepository.media.findMany({\n        where,\n        select: {\n          id: true,\n          fileName: true,\n          type: true,\n          mimetype: true,\n          createdAt: true,\n          Message: true,\n        },\n      });\n\n      if (!media || media.length === 0) {\n        throw 'Media not found';\n      }\n\n      return media;\n    } catch (error) {\n      throw new BadRequestException(error);\n    }\n  }\n\n  public async getMediaUrl(instance: InstanceDto, data: MediaDto) {\n    const media = (await this.getMedia(instance, { id: data.id }))[0];\n    const mediaUrl = await getObjectUrl(media.fileName, data.expiry);\n    return {\n      mediaUrl,\n      ...media,\n    };\n  }\n}\n","import { Auth, ConfigService, ProviderSession } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport axios from 'axios';\nimport { execSync } from 'child_process';\n\ntype ResponseSuccess = { status: number; data?: any };\ntype ResponseProvider = Promise<[ResponseSuccess?, Error?]>;\n\nexport class ProviderFiles {\n  constructor(private readonly configService: ConfigService) {\n    this.baseUrl = `http://${this.config.HOST}:${this.config.PORT}/session/${this.config.PREFIX}`;\n    this.globalApiToken = this.configService.get<Auth>('AUTHENTICATION').API_KEY.KEY;\n  }\n\n  private readonly logger = new Logger('ProviderFiles');\n\n  private baseUrl: string;\n  private globalApiToken: string;\n\n  private readonly config = Object.freeze(this.configService.get<ProviderSession>('PROVIDER'));\n\n  get isEnabled() {\n    return !!this.config?.ENABLED;\n  }\n\n  public async onModuleInit() {\n    if (this.config.ENABLED) {\n      const url = `http://${this.config.HOST}:${this.config.PORT}`;\n      try {\n        const response = await axios.options(url + '/ping');\n        if (response?.data != 'pong') {\n          throw new Error('Offline file provider.');\n        }\n\n        await axios.post(`${url}/session`, { group: this.config.PREFIX }, { headers: { apikey: this.globalApiToken } });\n      } catch (error) {\n        this.logger.error(['Failed to connect to the file server', error?.message, error?.stack]);\n        const pid = process.pid;\n        execSync(`kill -9 ${pid}`);\n      }\n    }\n  }\n\n  public async onModuleDestroy() {\n    //\n  }\n\n  public async create(instance: string): ResponseProvider {\n    try {\n      const response = await axios.post(\n        `${this.baseUrl}`,\n        {\n          instance,\n        },\n        { headers: { apikey: this.globalApiToken } },\n      );\n      return [{ status: response.status, data: response?.data }];\n    } catch (error) {\n      return [\n        {\n          status: error?.response?.status,\n          data: error?.response?.data,\n        },\n        error,\n      ];\n    }\n  }\n\n  public async write(instance: string, key: string, data: any): ResponseProvider {\n    try {\n      const response = await axios.post(`${this.baseUrl}/${instance}/${key}`, data, {\n        headers: { apikey: this.globalApiToken },\n      });\n      return [{ status: response.status, data: response?.data }];\n    } catch (error) {\n      return [\n        {\n          status: error?.response?.status,\n          data: error?.response?.data,\n        },\n        error,\n      ];\n    }\n  }\n\n  public async read(instance: string, key: string): ResponseProvider {\n    try {\n      const response = await axios.get(`${this.baseUrl}/${instance}/${key}`, {\n        headers: { apikey: this.globalApiToken },\n      });\n      return [{ status: response.status, data: response?.data }];\n    } catch (error) {\n      return [\n        {\n          status: error?.response?.status,\n          data: error?.response?.data,\n        },\n        error,\n      ];\n    }\n  }\n\n  public async delete(instance: string, key: string): ResponseProvider {\n    try {\n      const response = await axios.delete(`${this.baseUrl}/${instance}/${key}`, {\n        headers: { apikey: this.globalApiToken },\n      });\n      return [{ status: response.status, data: response?.data }];\n    } catch (error) {\n      return [\n        {\n          status: error?.response?.status,\n          data: error?.response?.data,\n        },\n        error,\n      ];\n    }\n  }\n\n  public async allInstances(): ResponseProvider {\n    try {\n      const response = await axios.get(`${this.baseUrl}/list-instances`, { headers: { apikey: this.globalApiToken } });\n      return [{ status: response.status, data: response?.data as string[] }];\n    } catch (error) {\n      return [\n        {\n          status: error?.response?.status,\n          data: error?.response?.data,\n        },\n        error,\n      ];\n    }\n  }\n\n  public async removeSession(instance: string): ResponseProvider {\n    try {\n      const response = await axios.delete(`${this.baseUrl}/${instance}`, { headers: { apikey: this.globalApiToken } });\n      return [{ status: response.status, data: response?.data }];\n    } catch (error) {\n      return [\n        {\n          status: error?.response?.status,\n          data: error?.response?.data,\n        },\n        error,\n      ];\n    }\n  }\n}\n","import { ConfigService } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport { PrismaClient } from '@prisma/client';\n\nexport class Query<T> {\n  where?: T;\n  sort?: 'asc' | 'desc';\n  page?: number;\n  offset?: number;\n}\n\nexport class PrismaRepository extends PrismaClient {\n  constructor(private readonly configService: ConfigService) {\n    super();\n  }\n\n  private readonly logger = new Logger('PrismaRepository');\n\n  public async onModuleInit() {\n    await this.$connect();\n    this.logger.info('Repository:Prisma - ON');\n  }\n\n  public async onModuleDestroy() {\n    await this.$disconnect();\n    this.logger.warn('Repository:Prisma - OFF');\n  }\n}\n","import { InstanceDto } from '@api/dto/instance.dto';\nimport { ProviderFiles } from '@api/provider/sessions';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport { channelController } from '@api/server.module';\nimport { Events, Integration } from '@api/types/wa.types';\nimport { CacheConf, Chatwoot, ConfigService, Database, DelInstance, ProviderSession } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport { INSTANCE_DIR, STORE_DIR } from '@config/path.config';\nimport { NotFoundException } from '@exceptions';\nimport { execSync } from 'child_process';\nimport EventEmitter2 from 'eventemitter2';\nimport { rmSync } from 'fs';\nimport { join } from 'path';\n\nimport { CacheService } from './cache.service';\n\nexport class WAMonitoringService {\n  constructor(\n    private readonly eventEmitter: EventEmitter2,\n    private readonly configService: ConfigService,\n    private readonly prismaRepository: PrismaRepository,\n    private readonly providerFiles: ProviderFiles,\n    private readonly cache: CacheService,\n    private readonly chatwootCache: CacheService,\n    private readonly baileysCache: CacheService,\n  ) {\n    this.removeInstance();\n    this.noConnection();\n\n    Object.assign(this.db, configService.get<Database>('DATABASE'));\n    Object.assign(this.redis, configService.get<CacheConf>('CACHE'));\n  }\n\n  private readonly db: Partial<Database> = {};\n  private readonly redis: Partial<CacheConf> = {};\n\n  private readonly logger = new Logger('WAMonitoringService');\n  public readonly waInstances: Record<string, any> = {};\n\n  private readonly providerSession = Object.freeze(this.configService.get<ProviderSession>('PROVIDER'));\n\n  public delInstanceTime(instance: string) {\n    const time = this.configService.get<DelInstance>('DEL_INSTANCE');\n    if (typeof time === 'number' && time > 0) {\n      setTimeout(\n        async () => {\n          if (this.waInstances[instance]?.connectionStatus?.state !== 'open') {\n            if (this.waInstances[instance]?.connectionStatus?.state === 'connecting') {\n              if ((await this.waInstances[instance].integration) === Integration.WHATSAPP_BAILEYS) {\n                await this.waInstances[instance]?.client?.logout('Log out instance: ' + instance);\n                this.waInstances[instance]?.client?.ws?.close();\n                this.waInstances[instance]?.client?.end(undefined);\n              }\n              this.eventEmitter.emit('remove.instance', instance, 'inner');\n            } else {\n              this.eventEmitter.emit('remove.instance', instance, 'inner');\n            }\n          }\n        },\n        1000 * 60 * time,\n      );\n    }\n  }\n\n  public async instanceInfo(instanceNames?: string[]): Promise<any> {\n    if (instanceNames && instanceNames.length > 0) {\n      const inexistentInstances = instanceNames ? instanceNames.filter((instance) => !this.waInstances[instance]) : [];\n\n      if (inexistentInstances.length > 0) {\n        throw new NotFoundException(\n          `Instance${inexistentInstances.length > 1 ? 's' : ''} \"${inexistentInstances.join(', ')}\" not found`,\n        );\n      }\n    }\n\n    const clientName = this.configService.get<Database>('DATABASE').CONNECTION.CLIENT_NAME;\n\n    const where =\n      instanceNames && instanceNames.length > 0\n        ? {\n            name: {\n              in: instanceNames,\n            },\n            clientName,\n          }\n        : { clientName };\n\n    const instances = await this.prismaRepository.instance.findMany({\n      where,\n      include: {\n        Chatwoot: true,\n        Proxy: true,\n        Rabbitmq: true,\n        Sqs: true,\n        Websocket: true,\n        Setting: true,\n        _count: {\n          select: {\n            Message: true,\n            Contact: true,\n            Chat: true,\n          },\n        },\n      },\n    });\n\n    return instances;\n  }\n\n  public async instanceInfoById(instanceId?: string, number?: string) {\n    let instanceName: string;\n    if (instanceId) {\n      instanceName = await this.prismaRepository.instance.findFirst({ where: { id: instanceId } }).then((r) => r?.name);\n      if (!instanceName) {\n        throw new NotFoundException(`Instance \"${instanceId}\" not found`);\n      }\n    } else if (number) {\n      instanceName = await this.prismaRepository.instance.findFirst({ where: { number } }).then((r) => r?.name);\n      if (!instanceName) {\n        throw new NotFoundException(`Instance \"${number}\" not found`);\n      }\n    }\n\n    if (!instanceName) {\n      throw new NotFoundException(`Instance \"${instanceId}\" not found`);\n    }\n\n    if (instanceName && !this.waInstances[instanceName]) {\n      throw new NotFoundException(`Instance \"${instanceName}\" not found`);\n    }\n\n    const instanceNames = instanceName ? [instanceName] : null;\n\n    return this.instanceInfo(instanceNames);\n  }\n\n  public async cleaningUp(instanceName: string) {\n    let instanceDbId: string;\n    if (this.db.SAVE_DATA.INSTANCE) {\n      const findInstance = await this.prismaRepository.instance.findFirst({\n        where: { name: instanceName },\n      });\n\n      if (findInstance) {\n        const instance = await this.prismaRepository.instance.update({\n          where: { name: instanceName },\n          data: { connectionStatus: 'close' },\n        });\n\n        rmSync(join(INSTANCE_DIR, instance.id), { recursive: true, force: true });\n\n        instanceDbId = instance.id;\n        await this.prismaRepository.session.deleteMany({ where: { sessionId: instance.id } });\n      }\n    }\n\n    if (this.redis.REDIS.ENABLED && this.redis.REDIS.SAVE_INSTANCES) {\n      await this.cache.delete(instanceName);\n      if (instanceDbId) {\n        await this.cache.delete(instanceDbId);\n      }\n    }\n\n    if (this.providerSession?.ENABLED) {\n      await this.providerFiles.removeSession(instanceName);\n    }\n  }\n\n  public async cleaningStoreData(instanceName: string) {\n    if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED) {\n      execSync(`rm -rf ${join(STORE_DIR, 'chatwoot', instanceName + '*')}`);\n    }\n\n    const instance = await this.prismaRepository.instance.findFirst({\n      where: { name: instanceName },\n    });\n\n    if (!instance) return;\n\n    rmSync(join(INSTANCE_DIR, instance.id), { recursive: true, force: true });\n\n    await this.prismaRepository.session.deleteMany({ where: { sessionId: instance.id } });\n\n    await this.prismaRepository.chat.deleteMany({ where: { instanceId: instance.id } });\n    await this.prismaRepository.contact.deleteMany({ where: { instanceId: instance.id } });\n    await this.prismaRepository.messageUpdate.deleteMany({ where: { instanceId: instance.id } });\n    await this.prismaRepository.message.deleteMany({ where: { instanceId: instance.id } });\n\n    await this.prismaRepository.webhook.deleteMany({ where: { instanceId: instance.id } });\n    await this.prismaRepository.chatwoot.deleteMany({ where: { instanceId: instance.id } });\n    await this.prismaRepository.proxy.deleteMany({ where: { instanceId: instance.id } });\n    await this.prismaRepository.rabbitmq.deleteMany({ where: { instanceId: instance.id } });\n    await this.prismaRepository.sqs.deleteMany({ where: { instanceId: instance.id } });\n    await this.prismaRepository.integrationSession.deleteMany({ where: { instanceId: instance.id } });\n    await this.prismaRepository.typebot.deleteMany({ where: { instanceId: instance.id } });\n    await this.prismaRepository.websocket.deleteMany({ where: { instanceId: instance.id } });\n    await this.prismaRepository.setting.deleteMany({ where: { instanceId: instance.id } });\n    await this.prismaRepository.label.deleteMany({ where: { instanceId: instance.id } });\n\n    await this.prismaRepository.instance.delete({ where: { name: instanceName } });\n  }\n\n  public async loadInstance() {\n    try {\n      if (this.providerSession?.ENABLED) {\n        await this.loadInstancesFromProvider();\n      } else if (this.db.SAVE_DATA.INSTANCE) {\n        await this.loadInstancesFromDatabasePostgres();\n      } else if (this.redis.REDIS.ENABLED && this.redis.REDIS.SAVE_INSTANCES) {\n        await this.loadInstancesFromRedis();\n      }\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  public async saveInstance(data: any) {\n    try {\n      const clientName = await this.configService.get<Database>('DATABASE').CONNECTION.CLIENT_NAME;\n      await this.prismaRepository.instance.create({\n        data: {\n          id: data.instanceId,\n          name: data.instanceName,\n          ownerJid: data.ownerJid,\n          profileName: data.profileName,\n          profilePicUrl: data.profilePicUrl,\n          connectionStatus:\n            data.integration && data.integration === Integration.WHATSAPP_BAILEYS ? 'close' : (data.status ?? 'open'),\n          number: data.number,\n          integration: data.integration || Integration.WHATSAPP_BAILEYS,\n          token: data.hash,\n          clientName: clientName,\n          businessId: data.businessId,\n        },\n      });\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  public deleteInstance(instanceName: string) {\n    try {\n      this.eventEmitter.emit('remove.instance', instanceName, 'inner');\n    } catch (error) {\n      this.logger.error(error);\n    }\n  }\n\n  private async setInstance(instanceData: InstanceDto) {\n    const instance = channelController.init(instanceData, {\n      configService: this.configService,\n      eventEmitter: this.eventEmitter,\n      prismaRepository: this.prismaRepository,\n      cache: this.cache,\n      chatwootCache: this.chatwootCache,\n      baileysCache: this.baileysCache,\n      providerFiles: this.providerFiles,\n    });\n\n    if (!instance) return;\n\n    instance.setInstance({\n      instanceId: instanceData.instanceId,\n      instanceName: instanceData.instanceName,\n      integration: instanceData.integration,\n      token: instanceData.token,\n      number: instanceData.number,\n      businessId: instanceData.businessId,\n    });\n\n    await instance.connectToWhatsapp();\n\n    this.waInstances[instanceData.instanceName] = instance;\n  }\n\n  private async loadInstancesFromRedis() {\n    const keys = await this.cache.keys();\n\n    if (keys?.length > 0) {\n      await Promise.all(\n        keys.map(async (k) => {\n          const instanceData = await this.prismaRepository.instance.findUnique({\n            where: { id: k.split(':')[1] },\n          });\n\n          if (!instanceData) {\n            return;\n          }\n\n          const instance = {\n            instanceId: k.split(':')[1],\n            instanceName: k.split(':')[2],\n            integration: instanceData.integration,\n            token: instanceData.token,\n            number: instanceData.number,\n            businessId: instanceData.businessId,\n          };\n\n          this.setInstance(instance);\n        }),\n      );\n    }\n  }\n\n  private async loadInstancesFromDatabasePostgres() {\n    const clientName = await this.configService.get<Database>('DATABASE').CONNECTION.CLIENT_NAME;\n\n    const instances = await this.prismaRepository.instance.findMany({\n      where: { clientName: clientName },\n    });\n\n    if (instances.length === 0) {\n      return;\n    }\n\n    await Promise.all(\n      instances.map(async (instance) => {\n        this.setInstance({\n          instanceId: instance.id,\n          instanceName: instance.name,\n          integration: instance.integration,\n          token: instance.token,\n          number: instance.number,\n          businessId: instance.businessId,\n        });\n      }),\n    );\n  }\n\n  private async loadInstancesFromProvider() {\n    const [instances] = await this.providerFiles.allInstances();\n\n    if (!instances?.data) {\n      return;\n    }\n\n    await Promise.all(\n      instances?.data?.map(async (instanceId: string) => {\n        const instance = await this.prismaRepository.instance.findUnique({\n          where: { id: instanceId },\n        });\n\n        this.setInstance({\n          instanceId: instance.id,\n          instanceName: instance.name,\n          integration: instance.integration,\n          token: instance.token,\n          businessId: instance.businessId,\n        });\n      }),\n    );\n  }\n\n  private removeInstance() {\n    this.eventEmitter.on('remove.instance', async (instanceName: string) => {\n      try {\n        await this.waInstances[instanceName]?.sendDataWebhook(Events.REMOVE_INSTANCE, null);\n\n        this.cleaningUp(instanceName);\n        this.cleaningStoreData(instanceName);\n      } finally {\n        this.logger.warn(`Instance \"${instanceName}\" - REMOVED`);\n      }\n\n      try {\n        delete this.waInstances[instanceName];\n      } catch (error) {\n        this.logger.error(error);\n      }\n    });\n    this.eventEmitter.on('logout.instance', async (instanceName: string) => {\n      try {\n        await this.waInstances[instanceName]?.sendDataWebhook(Events.LOGOUT_INSTANCE, null);\n\n        if (this.configService.get<Chatwoot>('CHATWOOT').ENABLED) {\n          this.waInstances[instanceName]?.clearCacheChatwoot();\n        }\n\n        this.cleaningUp(instanceName);\n      } finally {\n        this.logger.warn(`Instance \"${instanceName}\" - LOGOUT`);\n      }\n    });\n  }\n\n  private noConnection() {\n    this.eventEmitter.on('no.connection', async (instanceName) => {\n      try {\n        await this.waInstances[instanceName]?.client?.logout('Log out instance: ' + instanceName);\n\n        this.waInstances[instanceName]?.client?.ws?.close();\n\n        this.waInstances[instanceName].instance.qrcode = { count: 0 };\n        this.waInstances[instanceName].stateConnection.state = 'close';\n      } catch (error) {\n        this.logger.error({\n          localError: 'noConnection',\n          warn: 'Error deleting instance from memory.',\n          error,\n        });\n      } finally {\n        this.logger.warn(`Instance \"${instanceName}\" - NOT CONNECTION`);\n      }\n    });\n  }\n}\n","import { InstanceDto } from '@api/dto/instance.dto';\nimport { ProxyDto } from '@api/dto/proxy.dto';\nimport { Logger } from '@config/logger.config';\nimport { Proxy } from '@prisma/client';\n\nimport { WAMonitoringService } from './monitor.service';\n\nexport class ProxyService {\n  constructor(private readonly waMonitor: WAMonitoringService) {}\n\n  private readonly logger = new Logger('ProxyService');\n\n  public create(instance: InstanceDto, data: ProxyDto) {\n    this.waMonitor.waInstances[instance.instanceName].setProxy(data);\n\n    return { proxy: { ...instance, proxy: data } };\n  }\n\n  public async find(instance: InstanceDto): Promise<Proxy> {\n    try {\n      const result = await this.waMonitor.waInstances[instance.instanceName].findProxy();\n\n      if (Object.keys(result).length === 0) {\n        throw new Error('Proxy not found');\n      }\n\n      return result;\n    } catch (error) {\n      return null;\n    }\n  }\n}\n","import { InstanceDto } from '@api/dto/instance.dto';\nimport { SettingsDto } from '@api/dto/settings.dto';\nimport { Logger } from '@config/logger.config';\n\nimport { WAMonitoringService } from './monitor.service';\n\nexport class SettingsService {\n  constructor(private readonly waMonitor: WAMonitoringService) {}\n\n  private readonly logger = new Logger('SettingsService');\n\n  public async create(instance: InstanceDto, data: SettingsDto) {\n    await this.waMonitor.waInstances[instance.instanceName].setSettings(data);\n\n    return { settings: { ...instance, settings: data } };\n  }\n\n  public async find(instance: InstanceDto): Promise<SettingsDto> {\n    try {\n      const result = await this.waMonitor.waInstances[instance.instanceName].findSettings();\n\n      if (Object.keys(result).length === 0) {\n        throw new Error('Settings not found');\n      }\n\n      return result;\n    } catch (error) {\n      return null;\n    }\n  }\n}\n","import { InstanceDto } from '@api/dto/instance.dto';\nimport { TemplateDto } from '@api/dto/template.dto';\nimport { PrismaRepository } from '@api/repository/repository.service';\nimport { ConfigService, WaBusiness } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport axios from 'axios';\n\nimport { WAMonitoringService } from './monitor.service';\n\nexport class TemplateService {\n  constructor(\n    private readonly waMonitor: WAMonitoringService,\n    public readonly prismaRepository: PrismaRepository,\n    private readonly configService: ConfigService,\n  ) {}\n\n  private readonly logger = new Logger('TemplateService');\n\n  private businessId: string;\n  private token: string;\n\n  public async find(instance: InstanceDto) {\n    const getInstance = await this.waMonitor.waInstances[instance.instanceName].instance;\n\n    if (!getInstance) {\n      throw new Error('Instance not found');\n    }\n\n    this.businessId = getInstance.businessId;\n    this.token = getInstance.token;\n\n    const response = await this.requestTemplate({}, 'GET');\n\n    if (!response) {\n      throw new Error('Error to create template');\n    }\n\n    return response.data;\n  }\n\n  public async create(instance: InstanceDto, data: TemplateDto) {\n    try {\n      const getInstance = await this.waMonitor.waInstances[instance.instanceName].instance;\n\n      if (!getInstance) {\n        throw new Error('Instance not found');\n      }\n\n      this.businessId = getInstance.businessId;\n      this.token = getInstance.token;\n\n      const postData = {\n        name: data.name,\n        category: data.category,\n        allow_category_change: data.allowCategoryChange,\n        language: data.language,\n        components: data.components,\n      };\n\n      const response = await this.requestTemplate(postData, 'POST');\n\n      if (!response || response.error) {\n        throw new Error('Error to create template');\n      }\n\n      const template = await this.prismaRepository.template.create({\n        data: {\n          templateId: response.id,\n          name: data.name,\n          template: response,\n          webhookUrl: data.webhookUrl,\n          instanceId: getInstance.id,\n        },\n      });\n\n      return template;\n    } catch (error) {\n      this.logger.error(error);\n      throw new Error('Error to create template');\n    }\n  }\n\n  private async requestTemplate(data: any, method: string) {\n    try {\n      let urlServer = this.configService.get<WaBusiness>('WA_BUSINESS').URL;\n      const version = this.configService.get<WaBusiness>('WA_BUSINESS').VERSION;\n      urlServer = `${urlServer}/${version}/${this.businessId}/message_templates`;\n      const headers = { 'Content-Type': 'application/json', Authorization: `Bearer ${this.token}` };\n      if (method === 'GET') {\n        const result = await axios.get(urlServer, { headers });\n        return result.data;\n      } else if (method === 'POST') {\n        const result = await axios.post(urlServer, data, { headers });\n        return result.data;\n      }\n    } catch (e) {\n      this.logger.error(e.response.data);\n      return e.response.data.error;\n    }\n  }\n}\n","import { CacheEngine } from '@cache/cacheengine';\nimport { Chatwoot, configService, ProviderSession } from '@config/env.config';\nimport { eventEmitter } from '@config/event.config';\nimport { Logger } from '@config/logger.config';\n\nimport { CallController } from './controllers/call.controller';\nimport { ChatController } from './controllers/chat.controller';\nimport { GroupController } from './controllers/group.controller';\nimport { InstanceController } from './controllers/instance.controller';\nimport { LabelController } from './controllers/label.controller';\nimport { ProxyController } from './controllers/proxy.controller';\nimport { SendMessageController } from './controllers/sendMessage.controller';\nimport { SettingsController } from './controllers/settings.controller';\nimport { TemplateController } from './controllers/template.controller';\nimport { ChannelController } from './integrations/channel/channel.controller';\nimport { EvolutionController } from './integrations/channel/evolution/evolution.controller';\nimport { MetaController } from './integrations/channel/meta/meta.controller';\nimport { BaileysController } from './integrations/channel/whatsapp/baileys.controller';\nimport { ChatbotController } from './integrations/chatbot/chatbot.controller';\nimport { ChatwootController } from './integrations/chatbot/chatwoot/controllers/chatwoot.controller';\nimport { ChatwootService } from './integrations/chatbot/chatwoot/services/chatwoot.service';\nimport { DifyController } from './integrations/chatbot/dify/controllers/dify.controller';\nimport { DifyService } from './integrations/chatbot/dify/services/dify.service';\nimport { EvolutionBotController } from './integrations/chatbot/evolutionBot/controllers/evolutionBot.controller';\nimport { EvolutionBotService } from './integrations/chatbot/evolutionBot/services/evolutionBot.service';\nimport { FlowiseController } from './integrations/chatbot/flowise/controllers/flowise.controller';\nimport { FlowiseService } from './integrations/chatbot/flowise/services/flowise.service';\nimport { OpenaiController } from './integrations/chatbot/openai/controllers/openai.controller';\nimport { OpenaiService } from './integrations/chatbot/openai/services/openai.service';\nimport { TypebotController } from './integrations/chatbot/typebot/controllers/typebot.controller';\nimport { TypebotService } from './integrations/chatbot/typebot/services/typebot.service';\nimport { EventManager } from './integrations/event/event.manager';\nimport { S3Controller } from './integrations/storage/s3/controllers/s3.controller';\nimport { S3Service } from './integrations/storage/s3/services/s3.service';\nimport { ProviderFiles } from './provider/sessions';\nimport { PrismaRepository } from './repository/repository.service';\nimport { CacheService } from './services/cache.service';\nimport { WAMonitoringService } from './services/monitor.service';\nimport { ProxyService } from './services/proxy.service';\nimport { SettingsService } from './services/settings.service';\nimport { TemplateService } from './services/template.service';\n\nconst logger = new Logger('WA MODULE');\n\nlet chatwootCache: CacheService = null;\nif (configService.get<Chatwoot>('CHATWOOT').ENABLED) {\n  chatwootCache = new CacheService(new CacheEngine(configService, ChatwootService.name).getEngine());\n}\n\nexport const cache = new CacheService(new CacheEngine(configService, 'instance').getEngine());\nconst baileysCache = new CacheService(new CacheEngine(configService, 'baileys').getEngine());\n\nlet providerFiles: ProviderFiles = null;\nif (configService.get<ProviderSession>('PROVIDER').ENABLED) {\n  providerFiles = new ProviderFiles(configService);\n}\n\nexport const prismaRepository = new PrismaRepository(configService);\n\nexport const waMonitor = new WAMonitoringService(\n  eventEmitter,\n  configService,\n  prismaRepository,\n  providerFiles,\n  cache,\n  chatwootCache,\n  baileysCache,\n);\n\nconst s3Service = new S3Service(prismaRepository);\nexport const s3Controller = new S3Controller(s3Service);\n\nconst templateService = new TemplateService(waMonitor, prismaRepository, configService);\nexport const templateController = new TemplateController(templateService);\n\nconst proxyService = new ProxyService(waMonitor);\nexport const proxyController = new ProxyController(proxyService, waMonitor);\n\nconst chatwootService = new ChatwootService(waMonitor, configService, prismaRepository, chatwootCache);\nexport const chatwootController = new ChatwootController(chatwootService, configService, prismaRepository);\n\nconst settingsService = new SettingsService(waMonitor);\nexport const settingsController = new SettingsController(settingsService);\n\nexport const instanceController = new InstanceController(\n  waMonitor,\n  configService,\n  prismaRepository,\n  eventEmitter,\n  chatwootService,\n  settingsService,\n  proxyController,\n  cache,\n  chatwootCache,\n  baileysCache,\n  providerFiles,\n);\nexport const sendMessageController = new SendMessageController(waMonitor);\nexport const callController = new CallController(waMonitor);\nexport const chatController = new ChatController(waMonitor);\nexport const groupController = new GroupController(waMonitor);\nexport const labelController = new LabelController(waMonitor);\n\nexport const eventManager = new EventManager(prismaRepository, waMonitor);\nexport const chatbotController = new ChatbotController(prismaRepository, waMonitor);\nexport const channelController = new ChannelController(prismaRepository, waMonitor);\n\n// channels\nexport const evolutionController = new EvolutionController(prismaRepository, waMonitor);\nexport const metaController = new MetaController(prismaRepository, waMonitor);\nexport const baileysController = new BaileysController(waMonitor);\n// chatbots\nconst typebotService = new TypebotService(waMonitor, configService, prismaRepository);\nexport const typebotController = new TypebotController(typebotService, prismaRepository, waMonitor);\n\nconst openaiService = new OpenaiService(waMonitor, configService, prismaRepository);\nexport const openaiController = new OpenaiController(openaiService, prismaRepository, waMonitor);\n\nconst difyService = new DifyService(waMonitor, configService, prismaRepository);\nexport const difyController = new DifyController(difyService, prismaRepository, waMonitor);\n\nconst evolutionBotService = new EvolutionBotService(waMonitor, configService, prismaRepository);\nexport const evolutionBotController = new EvolutionBotController(evolutionBotService, prismaRepository, waMonitor);\n\nconst flowiseService = new FlowiseService(waMonitor, configService, prismaRepository);\nexport const flowiseController = new FlowiseController(flowiseService, prismaRepository, waMonitor);\n\nlogger.info('Module - ON');\n","import { InstanceDto } from '@api/dto/instance.dto';\nimport { prismaRepository } from '@api/server.module';\nimport { Auth, configService, Database } from '@config/env.config';\nimport { Logger } from '@config/logger.config';\nimport { ForbiddenException, UnauthorizedException } from '@exceptions';\nimport { NextFunction, Request, Response } from 'express';\n\nconst logger = new Logger('GUARD');\n\nasync function apikey(req: Request, _: Response, next: NextFunction) {\n  const env = configService.get<Auth>('AUTHENTICATION').API_KEY;\n  const key = req.get('apikey');\n  const db = configService.get<Database>('DATABASE');\n\n  if (!key) {\n    throw new UnauthorizedException();\n  }\n\n  if (env.KEY === key) {\n    return next();\n  }\n\n  if ((req.originalUrl.includes('/instance/create') || req.originalUrl.includes('/instance/fetchInstances')) && !key) {\n    throw new ForbiddenException('Missing global api key', 'The global api key must be set');\n  }\n  const param = req.params as unknown as InstanceDto;\n\n  try {\n    if (param?.instanceName) {\n      const instance = await prismaRepository.instance.findUnique({\n        where: { name: param.instanceName },\n      });\n      if (instance.token === key) {\n        return next();\n      }\n    } else {\n      if (req.originalUrl.includes('/instance/fetchInstances') && db.SAVE_DATA.INSTANCE) {\n        const instanceByKey = await prismaRepository.instance.findFirst({\n          where: { token: key },\n        });\n        if (instanceByKey) {\n          return next();\n        }\n      }\n    }\n  } catch (error) {\n    logger.error(error);\n  }\n\n  throw new UnauthorizedException();\n}\n\nexport const authGuard = { apikey };\n","import { InstanceDto } from '@api/dto/instance.dto';\nimport { cache, prismaRepository, waMonitor } from '@api/server.module';\nimport { CacheConf, configService } from '@config/env.config';\nimport { BadRequestException, ForbiddenException, InternalServerErrorException, NotFoundException } from '@exceptions';\nimport { NextFunction, Request, Response } from 'express';\n\nasync function getInstance(instanceName: string) {\n  try {\n    const cacheConf = configService.get<CacheConf>('CACHE');\n\n    const exists = !!waMonitor.waInstances[instanceName];\n\n    if (cacheConf.REDIS.ENABLED && cacheConf.REDIS.SAVE_INSTANCES) {\n      const keyExists = await cache.has(instanceName);\n\n      return exists || keyExists;\n    }\n\n    return exists || (await prismaRepository.instance.findMany({ where: { name: instanceName } })).length > 0;\n  } catch (error) {\n    throw new InternalServerErrorException(error?.toString());\n  }\n}\n\nexport async function instanceExistsGuard(req: Request, _: Response, next: NextFunction) {\n  if (req.originalUrl.includes('/instance/create') || req.originalUrl.includes('/instance/fetchInstances')) {\n    return next();\n  }\n\n  const param = req.params as unknown as InstanceDto;\n  if (!param?.instanceName) {\n    throw new BadRequestException('\"instanceName\" not provided.');\n  }\n\n  if (!(await getInstance(param.instanceName))) {\n    throw new NotFoundException(`The \"${param.instanceName}\" instance does not exist`);\n  }\n\n  next();\n}\n\nexport async function instanceLoggedGuard(req: Request, _: Response, next: NextFunction) {\n  if (req.originalUrl.includes('/instance/create')) {\n    const instance = req.body as InstanceDto;\n    if (await getInstance(instance.instanceName)) {\n      throw new ForbiddenException(`This name \"${instance.instanceName}\" is already in use.`);\n    }\n\n    if (waMonitor.waInstances[instance.instanceName]) {\n      delete waMonitor.waInstances[instance.instanceName];\n    }\n  }\n\n  next();\n}\n","import { sendTelemetry } from '@utils/sendTelemetry';\nimport { NextFunction, Request, Response } from 'express';\n\nclass Telemetry {\n  public collectTelemetry(req: Request, res: Response, next: NextFunction): void {\n    sendTelemetry(req.path);\n\n    next();\n  }\n}\n\nexport default Telemetry;\n","import { Router } from 'express';\n\nimport { EvolutionRouter } from './evolution/evolution.router';\nimport { MetaRouter } from './meta/meta.router';\nimport { BaileysRouter } from './whatsapp/baileys.router';\n\nexport class ChannelRouter {\n  public readonly router: Router;\n\n  constructor(configService: any, ...guards: any[]) {\n    this.router = Router();\n\n    this.router.use('/', new EvolutionRouter(configService).router);\n    this.router.use('/', new MetaRouter(configService).router);\n    this.router.use('/baileys', new BaileysRouter(...guards).router);\n  }\n}\n","import { RouterBroker } from '@api/abstract/abstract.router';\nimport { evolutionController } from '@api/server.module';\nimport { ConfigService } from '@config/env.config';\nimport { Router } from 'express';\n\nexport class EvolutionRouter extends RouterBroker {\n  constructor(readonly configService: ConfigService) {\n    super();\n    this.router.post(this.routerPath('webhook/evolution', false), async (req, res) => {\n      const { body } = req;\n      const response = await evolutionController.receiveWebhook(body);\n\n      return res.status(200).json(response);\n    });\n  }\n\n  public readonly router: Router = Router();\n}\n","import { RouterBroker } from '@api/abstract/abstract.router';\nimport { metaController } from '@api/server.module';\nimport { ConfigService, WaBusiness } from '@config/env.config';\nimport { Router } from 'express';\n\nexport class MetaRouter extends RouterBroker {\n  constructor(readonly configService: ConfigService) {\n    super();\n    this.router\n      .get(this.routerPath('webhook/meta', false), async (req, res) => {\n        if (req.query['hub.verify_token'] === configService.get<WaBusiness>('WA_BUSINESS').TOKEN_WEBHOOK)\n          res.send(req.query['hub.challenge']);\n        else res.send('Error, wrong validation token');\n      })\n      .post(this.routerPath('webhook/meta', false), async (req, res) => {\n        const { body } = req;\n        const response = await metaController.receiveWebhook(body);\n\n        return res.status(200).json(response);\n      });\n  }\n\n  public readonly router: Router = Router();\n}\n","import { Constructor } from '@api/integrations/integration.dto';\n\nexport class ChatwootDto {\n  enabled?: boolean;\n  accountId?: string;\n  token?: string;\n  url?: string;\n  nameInbox?: string;\n  signMsg?: boolean;\n  signDelimiter?: string;\n  number?: string;\n  reopenConversation?: boolean;\n  conversationPending?: boolean;\n  mergeBrazilContacts?: boolean;\n  importContacts?: boolean;\n  importMessages?: boolean;\n  daysLimitImportMessages?: number;\n  autoCreate?: boolean;\n  organization?: string;\n  logo?: string;\n  ignoreJids?: string[];\n}\n\nexport function ChatwootInstanceMixin<TBase extends Constructor>(Base: TBase) {\n  return class extends Base {\n    chatwootAccountId?: string;\n    chatwootToken?: string;\n    chatwootUrl?: string;\n    chatwootSignMsg?: boolean;\n    chatwootReopenConversation?: boolean;\n    chatwootConversationPending?: boolean;\n    chatwootMergeBrazilContacts?: boolean;\n    chatwootImportContacts?: boolean;\n    chatwootImportMessages?: boolean;\n    chatwootDaysLimitImportMessages?: number;\n    chatwootNameInbox?: string;\n    chatwootOrganization?: string;\n    chatwootLogo?: string;\n    chatwootAutoCreate?: boolean;\n  };\n}\n","import { Constructor } from '@api/integrations/integration.dto';\nimport { JsonValue } from '@prisma/client/runtime/library';\n\nexport class EventDto {\n  webhook?: {\n    enabled?: boolean;\n    events?: string[];\n    url?: string;\n    headers?: JsonValue;\n    byEvents?: boolean;\n    base64?: boolean;\n  };\n\n  websocket?: {\n    enabled?: boolean;\n    events?: string[];\n  };\n\n  sqs?: {\n    enabled?: boolean;\n    events?: string[];\n  };\n\n  rabbitmq?: {\n    enabled?: boolean;\n    events?: string[];\n  };\n\n  pusher?: {\n    enabled?: boolean;\n    appId?: string;\n    key?: string;\n    secret?: string;\n    cluster?: string;\n    useTLS?: boolean;\n    events?: string[];\n  };\n}\n\nexport function EventInstanceMixin<TBase extends Constructor>(Base: TBase) {\n  return class extends Base {\n    webhook?: {\n      enabled?: boolean;\n      events?: string[];\n      headers?: JsonValue;\n      url?: string;\n      byEvents?: boolean;\n      base64?: boolean;\n    };\n\n    websocket?: {\n      enabled?: boolean;\n      events?: string[];\n    };\n\n    sqs?: {\n      enabled?: boolean;\n      events?: string[];\n    };\n\n    rabbitmq?: {\n      enabled?: boolean;\n      events?: string[];\n    };\n\n    pusher?: {\n      enabled?: boolean;\n      appId?: string;\n      key?: string;\n      secret?: string;\n      cluster?: string;\n      useTLS?: boolean;\n      events?: string[];\n    };\n  };\n}\n","import { ChatwootInstanceMixin } from '@api/integrations/chatbot/chatwoot/dto/chatwoot.dto';\nimport { EventInstanceMixin } from '@api/integrations/event/event.dto';\n\nexport type Constructor<T = {}> = new (...args: any[]) => T;\n\nexport class IntegrationDto extends EventInstanceMixin(ChatwootInstanceMixin(class {})) {}\n","import { IntegrationDto } from '@api/integrations/integration.dto';\nimport { JsonValue } from '@prisma/client/runtime/library';\nimport { WAPresence } from 'baileys';\n\nexport class InstanceDto extends IntegrationDto {\n  instanceName: string;\n  instanceId?: string;\n  qrcode?: boolean;\n  businessId?: string;\n  number?: string;\n  integration?: string;\n  token?: string;\n  status?: string;\n  ownerJid?: string;\n  profileName?: string;\n  profilePicUrl?: string;\n  // settings\n  rejectCall?: boolean;\n  msgCall?: string;\n  groupsIgnore?: boolean;\n  alwaysOnline?: boolean;\n  readMessages?: boolean;\n  readStatus?: boolean;\n  syncFullHistory?: boolean;\n  wavoipToken?: string;\n  // proxy\n  proxyHost?: string;\n  proxyPort?: string;\n  proxyProtocol?: string;\n  proxyUsername?: string;\n  proxyPassword?: string;\n  webhook?: {\n    enabled?: boolean;\n    events?: string[];\n    headers?: JsonValue;\n    url?: string;\n    byEvents?: boolean;\n    base64?: boolean;\n  };\n  chatwootAccountId?: string;\n  chatwootConversationPending?: boolean;\n  chatwootAutoCreate?: boolean;\n  chatwootDaysLimitImportMessages?: number;\n  chatwootImportContacts?: boolean;\n  chatwootImportMessages?: boolean;\n  chatwootLogo?: string;\n  chatwootMergeBrazilContacts?: boolean;\n  chatwootNameInbox?: string;\n  chatwootOrganization?: string;\n  chatwootReopenConversation?: boolean;\n  chatwootSignMsg?: boolean;\n  chatwootToken?: string;\n  chatwootUrl?: string;\n}\n\nexport class SetPresenceDto {\n  presence: WAPresence;\n}\n","import { Integration } from '@api/types/wa.types';\nimport { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const instanceSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    // Instance\n    instanceName: { type: 'string' },\n    token: { type: 'string' },\n    number: { type: 'string', pattern: '^\\\\d+[\\\\.@\\\\w-]+' },\n    businessId: { type: 'string' },\n    qrcode: { type: 'boolean' },\n    Integration: {\n      type: 'string',\n      enum: Object.values(Integration),\n    },\n    // Settings\n    rejectCall: { type: 'boolean' },\n    msgCall: { type: 'string' },\n    groupsIgnore: { type: 'boolean' },\n    alwaysOnline: { type: 'boolean' },\n    readMessages: { type: 'boolean' },\n    readStatus: { type: 'boolean' },\n    syncFullHistory: { type: 'boolean' },\n    wavoipToken: { type: 'string' },\n    // Proxy\n    proxyHost: { type: 'string' },\n    proxyPort: { type: 'string' },\n    proxyProtocol: { type: 'string' },\n    proxyUsername: { type: 'string' },\n    proxyPassword: { type: 'string' },\n    // Webhook\n    webhookUrl: { type: 'string' },\n    webhookByEvents: { type: 'boolean' },\n    webhookBase64: { type: 'boolean' },\n    webhookEvents: {\n      type: 'array',\n      minItems: 0,\n      items: {\n        type: 'string',\n        enum: [\n          'APPLICATION_STARTUP',\n          'QRCODE_UPDATED',\n          'MESSAGES_SET',\n          'MESSAGES_UPSERT',\n          'MESSAGES_EDITED',\n          'MESSAGES_UPDATE',\n          'MESSAGES_DELETE',\n          'SEND_MESSAGE',\n          'CONTACTS_SET',\n          'CONTACTS_UPSERT',\n          'CONTACTS_UPDATE',\n          'PRESENCE_UPDATE',\n          'CHATS_SET',\n          'CHATS_UPSERT',\n          'CHATS_UPDATE',\n          'CHATS_DELETE',\n          'GROUPS_UPSERT',\n          'GROUP_UPDATE',\n          'GROUP_PARTICIPANTS_UPDATE',\n          'CONNECTION_UPDATE',\n          'LABELS_EDIT',\n          'LABELS_ASSOCIATION',\n          'CALL',\n          'TYPEBOT_START',\n          'TYPEBOT_CHANGE_STATUS',\n        ],\n      },\n    },\n    // RabbitMQ\n    rabbitmqEnabled: { type: 'boolean' },\n    rabbitmqEvents: {\n      type: 'array',\n      minItems: 0,\n      items: {\n        type: 'string',\n        enum: [\n          'APPLICATION_STARTUP',\n          'QRCODE_UPDATED',\n          'MESSAGES_SET',\n          'MESSAGES_UPSERT',\n          'MESSAGES_EDITED',\n          'MESSAGES_UPDATE',\n          'MESSAGES_DELETE',\n          'SEND_MESSAGE',\n          'CONTACTS_SET',\n          'CONTACTS_UPSERT',\n          'CONTACTS_UPDATE',\n          'PRESENCE_UPDATE',\n          'CHATS_SET',\n          'CHATS_UPSERT',\n          'CHATS_UPDATE',\n          'CHATS_DELETE',\n          'GROUPS_UPSERT',\n          'GROUP_UPDATE',\n          'GROUP_PARTICIPANTS_UPDATE',\n          'CONNECTION_UPDATE',\n          'LABELS_EDIT',\n          'LABELS_ASSOCIATION',\n          'CALL',\n          'TYPEBOT_START',\n          'TYPEBOT_CHANGE_STATUS',\n        ],\n      },\n    },\n    // SQS\n    sqsEnabled: { type: 'boolean' },\n    sqsEvents: {\n      type: 'array',\n      minItems: 0,\n      items: {\n        type: 'string',\n        enum: [\n          'APPLICATION_STARTUP',\n          'QRCODE_UPDATED',\n          'MESSAGES_SET',\n          'MESSAGES_UPSERT',\n          'MESSAGES_EDITED',\n          'MESSAGES_UPDATE',\n          'MESSAGES_DELETE',\n          'SEND_MESSAGE',\n          'CONTACTS_SET',\n          'CONTACTS_UPSERT',\n          'CONTACTS_UPDATE',\n          'PRESENCE_UPDATE',\n          'CHATS_SET',\n          'CHATS_UPSERT',\n          'CHATS_UPDATE',\n          'CHATS_DELETE',\n          'GROUPS_UPSERT',\n          'GROUP_UPDATE',\n          'GROUP_PARTICIPANTS_UPDATE',\n          'CONNECTION_UPDATE',\n          'LABELS_EDIT',\n          'LABELS_ASSOCIATION',\n          'CALL',\n          'TYPEBOT_START',\n          'TYPEBOT_CHANGE_STATUS',\n        ],\n      },\n    },\n    // Chatwoot\n    chatwootAccountId: { type: 'string' },\n    chatwootToken: { type: 'string' },\n    chatwootUrl: { type: 'string' },\n    chatwootSignMsg: { type: 'boolean' },\n    chatwootReopenConversation: { type: 'boolean' },\n    chatwootConversationPending: { type: 'boolean' },\n    chatwootImportContacts: { type: 'boolean' },\n    chatwootNameInbox: { type: 'string' },\n    chatwootMergeBrazilContacts: { type: 'boolean' },\n    chatwootImportMessages: { type: 'boolean' },\n    chatwootDaysLimitImportMessages: { type: 'number' },\n  },\n  ...isNotEmpty('instanceName'),\n};\n\nexport const presenceOnlySchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    presence: {\n      type: 'string',\n      enum: ['unavailable', 'available', 'composing', 'recording', 'paused'],\n    },\n  },\n  required: ['presence'],\n};\n","import { RouterBroker } from '@api/abstract/abstract.router';\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { HttpStatus } from '@api/routes/index.router';\nimport { baileysController } from '@api/server.module';\nimport { instanceSchema } from '@validate/instance.schema';\nimport { RequestHandler, Router } from 'express';\n\nexport class BaileysRouter extends RouterBroker {\n  constructor(...guards: RequestHandler[]) {\n    super();\n    this.router\n      .post(this.routerPath('onWhatsapp'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => baileysController.onWhatsapp(instance, req.body),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('profilePictureUrl'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => baileysController.profilePictureUrl(instance, req.body),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('assertSessions'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => baileysController.assertSessions(instance, req.body),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('createParticipantNodes'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => baileysController.createParticipantNodes(instance, req.body),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('getUSyncDevices'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => baileysController.getUSyncDevices(instance, req.body),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('generateMessageTag'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => baileysController.generateMessageTag(instance),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('sendNode'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => baileysController.sendNode(instance, req.body),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('signalRepositoryDecryptMessage'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => baileysController.signalRepositoryDecryptMessage(instance, req.body),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('getAuthState'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => baileysController.getAuthState(instance),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      });\n  }\n\n  public readonly router: Router = Router();\n}\n","import { JSONSchema7, JSONSchema7Definition } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nconst numberDefinition: JSONSchema7Definition = {\n  type: 'string',\n  description: 'Invalid format',\n};\n\nexport const whatsappNumberSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    numbers: {\n      type: 'array',\n      minItems: 1,\n      uniqueItems: true,\n      items: {\n        type: 'string',\n        description: '\"numbers\" must be an array of numeric strings',\n      },\n    },\n  },\n};\n\nexport const readMessageSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    readMessages: {\n      type: 'array',\n      minItems: 1,\n      uniqueItems: true,\n      items: {\n        properties: {\n          id: { type: 'string' },\n          fromMe: { type: 'boolean', enum: [true, false] },\n          remoteJid: { type: 'string' },\n        },\n        required: ['id', 'fromMe', 'remoteJid'],\n        ...isNotEmpty('id', 'remoteJid'),\n      },\n    },\n  },\n  required: ['readMessages'],\n};\n\nexport const archiveChatSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    chat: { type: 'string' },\n    lastMessage: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'object',\n          properties: {\n            id: { type: 'string' },\n            remoteJid: { type: 'string' },\n            fromMe: { type: 'boolean', enum: [true, false] },\n          },\n          required: ['id', 'fromMe', 'remoteJid'],\n          ...isNotEmpty('id', 'remoteJid'),\n        },\n        messageTimestamp: { type: 'integer', minLength: 1 },\n      },\n      required: ['key'],\n      ...isNotEmpty('messageTimestamp'),\n    },\n    archive: { type: 'boolean', enum: [true, false] },\n  },\n  required: ['archive'],\n};\n\nexport const markChatUnreadSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    chat: { type: 'string' },\n    lastMessage: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'object',\n          properties: {\n            id: { type: 'string' },\n            remoteJid: { type: 'string' },\n            fromMe: { type: 'boolean', enum: [true, false] },\n          },\n          required: ['id', 'fromMe', 'remoteJid'],\n          ...isNotEmpty('id', 'remoteJid'),\n        },\n        messageTimestamp: { type: 'integer', minLength: 1 },\n      },\n      required: ['key'],\n      ...isNotEmpty('messageTimestamp'),\n    },\n  },\n  required: ['lastMessage'],\n};\n\nexport const deleteMessageSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    id: { type: 'string' },\n    fromMe: { type: 'boolean', enum: [true, false] },\n    remoteJid: { type: 'string' },\n    participant: { type: 'string' },\n  },\n  required: ['id', 'fromMe', 'remoteJid'],\n  ...isNotEmpty('id', 'remoteJid', 'participant'),\n};\n\nexport const profilePictureSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    number: { type: 'string' },\n    picture: { type: 'string' },\n  },\n};\n\nexport const updateMessageSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    number: { type: 'string' },\n    text: { type: 'string' },\n    key: {\n      type: 'object',\n      properties: {\n        id: { type: 'string' },\n        remoteJid: { type: 'string' },\n        fromMe: { type: 'boolean', enum: [true, false] },\n      },\n      required: ['id', 'fromMe', 'remoteJid'],\n      ...isNotEmpty('id', 'remoteJid'),\n    },\n  },\n  ...isNotEmpty('number', 'text', 'key'),\n};\n\nexport const presenceSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    number: { ...numberDefinition },\n    delay: { type: 'number' },\n    presence: {\n      type: 'string',\n      enum: ['unavailable', 'available', 'composing', 'recording', 'paused'],\n    },\n  },\n  required: ['number', 'presence', 'delay'],\n};\n\nexport const blockUserSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    number: { type: 'string' },\n    status: { type: 'string', enum: ['block', 'unblock'] },\n  },\n  required: ['number', 'status'],\n  ...isNotEmpty('number', 'status'),\n};\n\nexport const contactValidateSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    where: {\n      type: 'object',\n      properties: {\n        _id: { type: 'string', minLength: 1 },\n        pushName: { type: 'string', minLength: 1 },\n        id: { type: 'string', minLength: 1 },\n      },\n      ...isNotEmpty('_id', 'id', 'pushName'),\n    },\n  },\n};\n\nexport const messageValidateSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    where: {\n      type: 'object',\n      properties: {\n        _id: { type: 'string', minLength: 1 },\n        key: {\n          type: 'object',\n          if: {\n            propertyNames: {\n              enum: ['fromMe', 'remoteJid', 'id'],\n            },\n          },\n          then: {\n            properties: {\n              remoteJid: {\n                type: 'string',\n                minLength: 1,\n                description: 'The property cannot be empty',\n              },\n              id: {\n                type: 'string',\n                minLength: 1,\n                description: 'The property cannot be empty',\n              },\n              fromMe: { type: 'boolean', enum: [true, false] },\n            },\n          },\n        },\n        message: { type: 'object' },\n      },\n      ...isNotEmpty('_id'),\n    },\n    limit: { type: 'integer' },\n  },\n};\n\nexport const messageUpSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    where: {\n      type: 'object',\n      properties: {\n        _id: { type: 'string' },\n        remoteJid: { type: 'string' },\n        id: { type: 'string' },\n        fromMe: { type: 'boolean', enum: [true, false] },\n        participant: { type: 'string' },\n        status: {\n          type: 'string',\n          enum: ['ERROR', 'PENDING', 'SERVER_ACK', 'DELIVERY_ACK', 'READ', 'PLAYED'],\n        },\n      },\n      ...isNotEmpty('_id', 'remoteJid', 'id', 'status'),\n    },\n    limit: { type: 'integer' },\n  },\n};\n\nexport const privacySettingsSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    readreceipts: { type: 'string', enum: ['all', 'none'] },\n    profile: {\n      type: 'string',\n      enum: ['all', 'contacts', 'contact_blacklist', 'none'],\n    },\n    status: {\n      type: 'string',\n      enum: ['all', 'contacts', 'contact_blacklist', 'none'],\n    },\n    online: { type: 'string', enum: ['all', 'match_last_seen'] },\n    last: { type: 'string', enum: ['all', 'contacts', 'contact_blacklist', 'none'] },\n    groupadd: {\n      type: 'string',\n      enum: ['all', 'contacts', 'contact_blacklist', 'none'],\n    },\n  },\n  required: ['readreceipts', 'profile', 'status', 'online', 'last', 'groupadd'],\n  ...isNotEmpty('readreceipts', 'profile', 'status', 'online', 'last', 'groupadd'),\n};\n\nexport const profileNameSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    name: { type: 'string' },\n  },\n  ...isNotEmpty('name'),\n};\n\nexport const profileStatusSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    status: { type: 'string' },\n  },\n  ...isNotEmpty('status'),\n};\n\nexport const profileSchema: JSONSchema7 = {\n  type: 'object',\n  properties: {\n    wuid: { type: 'string' },\n    name: { type: 'string' },\n    picture: { type: 'string' },\n    status: { type: 'string' },\n    isBusiness: { type: 'boolean' },\n  },\n};\n","import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const createGroupSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    subject: { type: 'string' },\n    description: { type: 'string' },\n    profilePicture: { type: 'string' },\n    promoteParticipants: { type: 'boolean', enum: [true, false] },\n    participants: {\n      type: 'array',\n      minItems: 1,\n      uniqueItems: true,\n      items: {\n        type: 'string',\n        minLength: 10,\n        pattern: '\\\\d+',\n        description: '\"participants\" must be an array of numeric strings',\n      },\n    },\n  },\n  required: ['subject', 'participants'],\n  ...isNotEmpty('subject', 'description', 'profilePicture'),\n};\n\nexport const groupJidSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    groupJid: { type: 'string', pattern: '^[\\\\d-]+@g.us$' },\n  },\n  required: ['groupJid'],\n  ...isNotEmpty('groupJid'),\n};\n\nexport const getParticipantsSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    getParticipants: { type: 'string', enum: ['true', 'false'] },\n  },\n  required: ['getParticipants'],\n  ...isNotEmpty('getParticipants'),\n};\n\nexport const groupSendInviteSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    groupJid: { type: 'string' },\n    description: { type: 'string' },\n    numbers: {\n      type: 'array',\n      minItems: 1,\n      uniqueItems: true,\n      items: {\n        type: 'string',\n        minLength: 10,\n        pattern: '\\\\d+',\n        description: '\"numbers\" must be an array of numeric strings',\n      },\n    },\n  },\n  required: ['groupJid', 'description', 'numbers'],\n  ...isNotEmpty('groupJid', 'description', 'numbers'),\n};\n\nexport const groupInviteSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    inviteCode: { type: 'string', pattern: '^[a-zA-Z0-9]{22}$' },\n  },\n  required: ['inviteCode'],\n  ...isNotEmpty('inviteCode'),\n};\n\nexport const AcceptGroupInviteSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    inviteCode: { type: 'string', pattern: '^[a-zA-Z0-9]{22}$' },\n  },\n  required: ['inviteCode'],\n  ...isNotEmpty('inviteCode'),\n};\n\nexport const updateParticipantsSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    groupJid: { type: 'string' },\n    action: {\n      type: 'string',\n      enum: ['add', 'remove', 'promote', 'demote'],\n    },\n    participants: {\n      type: 'array',\n      minItems: 1,\n      uniqueItems: true,\n      items: {\n        type: 'string',\n        minLength: 10,\n        pattern: '\\\\d+',\n        description: '\"participants\" must be an array of numeric strings',\n      },\n    },\n  },\n  required: ['groupJid', 'action', 'participants'],\n  ...isNotEmpty('groupJid', 'action'),\n};\n\nexport const updateSettingsSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    groupJid: { type: 'string' },\n    action: {\n      type: 'string',\n      enum: ['announcement', 'not_announcement', 'locked', 'unlocked'],\n    },\n  },\n  required: ['groupJid', 'action'],\n  ...isNotEmpty('groupJid', 'action'),\n};\n\nexport const toggleEphemeralSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    groupJid: { type: 'string' },\n    expiration: {\n      type: 'number',\n      enum: [0, 86400, 604800, 7776000],\n    },\n  },\n  required: ['groupJid', 'expiration'],\n  ...isNotEmpty('groupJid', 'expiration'),\n};\n\nexport const updateGroupPictureSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    groupJid: { type: 'string' },\n    image: { type: 'string' },\n  },\n  required: ['groupJid', 'image'],\n  ...isNotEmpty('groupJid', 'image'),\n};\n\nexport const updateGroupSubjectSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    groupJid: { type: 'string' },\n    subject: { type: 'string' },\n  },\n  required: ['groupJid', 'subject'],\n  ...isNotEmpty('groupJid', 'subject'),\n};\n\nexport const updateGroupDescriptionSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    groupJid: { type: 'string' },\n    description: { type: 'string' },\n  },\n  required: ['groupJid', 'description'],\n  ...isNotEmpty('groupJid', 'description'),\n};\n","import { JSONSchema7, JSONSchema7Definition } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nconst numberDefinition: JSONSchema7Definition = {\n  type: 'string',\n  description: 'Invalid format',\n};\n\nexport const handleLabelSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    number: { ...numberDefinition },\n    labelId: { type: 'string' },\n    action: { type: 'string', enum: ['add', 'remove'] },\n  },\n  required: ['number', 'labelId', 'action'],\n  ...isNotEmpty('number', 'labelId', 'action'),\n};\n","import { JSONSchema7, JSONSchema7Definition } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nconst numberDefinition: JSONSchema7Definition = {\n  type: 'string',\n  description: 'Invalid format',\n};\n\nexport const templateMessageSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    number: { ...numberDefinition },\n    name: { type: 'string' },\n    language: { type: 'string' },\n    components: { type: 'array' },\n    webhookUrl: { type: 'string' },\n  },\n  required: ['name', 'language'],\n};\n\nconst quotedOptionsSchema: JSONSchema7 = {\n  properties: {\n    key: {\n      type: 'object',\n      properties: {\n        id: { type: 'string' },\n        remoteJid: { type: 'string' },\n        fromMe: { type: 'boolean', enum: [true, false] },\n      },\n      required: ['id'],\n      ...isNotEmpty('id'),\n    },\n    message: { type: 'object' },\n  },\n};\n\nexport const offerCallSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    number: { ...numberDefinition },\n    isVideo: { type: 'boolean', enum: [true, false] },\n    callDuration: { type: 'integer', minimum: 1, maximum: 15 },\n  },\n  required: ['number', 'callDuration'],\n};\n\nexport const textMessageSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    number: { ...numberDefinition },\n    text: { type: 'string' },\n    linkPreview: { type: 'boolean' },\n    delay: {\n      type: 'integer',\n      description: 'Enter a value in milliseconds',\n    },\n    quoted: { ...quotedOptionsSchema },\n    everyOne: { type: 'boolean', enum: [true, false] },\n    mentioned: {\n      type: 'array',\n      minItems: 1,\n      uniqueItems: true,\n      items: {\n        type: 'string',\n        pattern: '^\\\\d+',\n        description: '\"mentioned\" must be an array of numeric strings',\n      },\n    },\n  },\n  required: ['number', 'text'],\n};\n\nexport const mediaMessageSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    number: { ...numberDefinition },\n    mediatype: { type: 'string', enum: ['image', 'document', 'video', 'audio'] },\n    mimetype: { type: 'string' },\n    media: { type: 'string' },\n    fileName: { type: 'string' },\n    caption: { type: 'string' },\n    delay: {\n      type: 'integer',\n      description: 'Enter a value in milliseconds',\n    },\n    quoted: { ...quotedOptionsSchema },\n    everyOne: { type: 'boolean', enum: [true, false] },\n    mentioned: {\n      type: 'array',\n      minItems: 1,\n      uniqueItems: true,\n      items: {\n        type: 'string',\n        pattern: '^\\\\d+',\n        description: '\"mentioned\" must be an array of numeric strings',\n      },\n    },\n  },\n  required: ['number', 'mediatype'],\n};\n\nexport const ptvMessageSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    number: { ...numberDefinition },\n    video: { type: 'string' },\n    delay: {\n      type: 'integer',\n      description: 'Enter a value in milliseconds',\n    },\n    quoted: { ...quotedOptionsSchema },\n    everyOne: { type: 'boolean', enum: [true, false] },\n    mentioned: {\n      type: 'array',\n      minItems: 1,\n      uniqueItems: true,\n      items: {\n        type: 'string',\n        pattern: '^\\\\d+',\n        description: '\"mentioned\" must be an array of numeric strings',\n      },\n    },\n  },\n  required: ['number'],\n};\n\nexport const audioMessageSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    number: { ...numberDefinition },\n    audio: { type: 'string' },\n    delay: {\n      type: 'integer',\n      description: 'Enter a value in milliseconds',\n    },\n    quoted: { ...quotedOptionsSchema },\n    everyOne: { type: 'boolean', enum: [true, false] },\n    mentioned: {\n      type: 'array',\n      minItems: 1,\n      uniqueItems: true,\n      items: {\n        type: 'string',\n        pattern: '^\\\\d+',\n        description: '\"mentioned\" must be an array of numeric strings',\n      },\n    },\n  },\n  required: ['number'],\n};\n\nexport const statusMessageSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    type: { type: 'string', enum: ['text', 'image', 'audio', 'video'] },\n    content: { type: 'string' },\n    caption: { type: 'string' },\n    backgroundColor: { type: 'string' },\n    font: { type: 'integer', minimum: 0, maximum: 5 },\n    statusJidList: {\n      type: 'array',\n      minItems: 1,\n      uniqueItems: true,\n      items: {\n        type: 'string',\n        pattern: '^\\\\d+',\n        description: '\"statusJidList\" must be an array of numeric strings',\n      },\n    },\n    allContacts: { type: 'boolean', enum: [true, false] },\n  },\n  required: ['type'],\n};\n\nexport const stickerMessageSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    number: { ...numberDefinition },\n    sticker: { type: 'string' },\n    delay: {\n      type: 'integer',\n      description: 'Enter a value in milliseconds',\n    },\n    quoted: { ...quotedOptionsSchema },\n    everyOne: { type: 'boolean', enum: [true, false] },\n    mentioned: {\n      type: 'array',\n      minItems: 1,\n      uniqueItems: true,\n      items: {\n        type: 'string',\n        pattern: '^\\\\d+',\n        description: '\"mentioned\" must be an array of numeric strings',\n      },\n    },\n  },\n  required: ['number'],\n};\n\nexport const locationMessageSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    number: { ...numberDefinition },\n    latitude: { type: 'number' },\n    longitude: { type: 'number' },\n    name: { type: 'string' },\n    address: { type: 'string' },\n    delay: {\n      type: 'integer',\n      description: 'Enter a value in milliseconds',\n    },\n    quoted: { ...quotedOptionsSchema },\n    everyOne: { type: 'boolean', enum: [true, false] },\n    mentioned: {\n      type: 'array',\n      minItems: 1,\n      uniqueItems: true,\n      items: {\n        type: 'string',\n        pattern: '^\\\\d+',\n        description: '\"mentioned\" must be an array of numeric strings',\n      },\n    },\n  },\n  required: ['number', 'latitude', 'longitude', 'name', 'address'],\n};\n\nexport const contactMessageSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    number: { ...numberDefinition },\n    contact: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          fullName: { type: 'string' },\n          wuid: {\n            type: 'string',\n            minLength: 10,\n            pattern: '\\\\d+',\n            description: '\"wuid\" must be a numeric string',\n          },\n          phoneNumber: { type: 'string', minLength: 10 },\n          organization: { type: 'string' },\n          email: { type: 'string' },\n          url: { type: 'string' },\n        },\n        required: ['fullName', 'phoneNumber'],\n        ...isNotEmpty('fullName'),\n      },\n      minItems: 1,\n      uniqueItems: true,\n    },\n  },\n  required: ['number', 'contact'],\n};\n\nexport const reactionMessageSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    key: {\n      type: 'object',\n      properties: {\n        id: { type: 'string' },\n        remoteJid: { type: 'string' },\n        fromMe: { type: 'boolean', enum: [true, false] },\n      },\n      required: ['id', 'remoteJid', 'fromMe'],\n      ...isNotEmpty('id', 'remoteJid'),\n    },\n    reaction: { type: 'string' },\n  },\n  required: ['key', 'reaction'],\n};\n\nexport const pollMessageSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    number: { ...numberDefinition },\n    name: { type: 'string' },\n    selectableCount: { type: 'integer', minimum: 0, maximum: 10 },\n    values: {\n      type: 'array',\n      minItems: 2,\n      maxItems: 10,\n      uniqueItems: true,\n      items: {\n        type: 'string',\n      },\n    },\n    delay: {\n      type: 'integer',\n      description: 'Enter a value in milliseconds',\n    },\n    quoted: { ...quotedOptionsSchema },\n    everyOne: { type: 'boolean', enum: [true, false] },\n    mentioned: {\n      type: 'array',\n      minItems: 1,\n      uniqueItems: true,\n      items: {\n        type: 'string',\n        pattern: '^\\\\d+',\n        description: '\"mentioned\" must be an array of numeric strings',\n      },\n    },\n  },\n  required: ['number', 'name', 'selectableCount', 'values'],\n};\n\nexport const listMessageSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    number: { ...numberDefinition },\n    title: { type: 'string' },\n    description: { type: 'string' },\n    footerText: { type: 'string' },\n    buttonText: { type: 'string' },\n    sections: {\n      type: 'array',\n      minItems: 1,\n      uniqueItems: true,\n      items: {\n        type: 'object',\n        properties: {\n          title: { type: 'string' },\n          rows: {\n            type: 'array',\n            minItems: 1,\n            uniqueItems: true,\n            items: {\n              type: 'object',\n              properties: {\n                title: { type: 'string' },\n                description: { type: 'string' },\n                rowId: { type: 'string' },\n              },\n              required: ['title', 'rowId'],\n              ...isNotEmpty('title', 'description', 'rowId'),\n            },\n          },\n        },\n        required: ['title', 'rows'],\n        ...isNotEmpty('title'),\n      },\n    },\n    delay: {\n      type: 'integer',\n      description: 'Enter a value in milliseconds',\n    },\n    quoted: { ...quotedOptionsSchema },\n    everyOne: { type: 'boolean', enum: [true, false] },\n    mentioned: {\n      type: 'array',\n      minItems: 1,\n      uniqueItems: true,\n      items: {\n        type: 'string',\n        pattern: '^\\\\d+',\n        description: '\"mentioned\" must be an array of numeric strings',\n      },\n    },\n  },\n  required: ['number', 'title', 'footerText', 'buttonText', 'sections'],\n};\n\nexport const buttonsMessageSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    number: { ...numberDefinition },\n    thumbnailUrl: { type: 'string' },\n    title: { type: 'string' },\n    description: { type: 'string' },\n    footer: { type: 'string' },\n    buttons: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          type: {\n            type: 'string',\n            enum: ['reply', 'copy', 'url', 'call', 'pix'],\n          },\n          displayText: { type: 'string' },\n          id: { type: 'string' },\n          url: { type: 'string' },\n          phoneNumber: { type: 'string' },\n          currency: { type: 'string' },\n          name: { type: 'string' },\n          keyType: { type: 'string', enum: ['phone', 'email', 'cpf', 'cnpj', 'random'] },\n          key: { type: 'string' },\n        },\n        required: ['type'],\n        ...isNotEmpty('id', 'url', 'phoneNumber'),\n      },\n    },\n    delay: {\n      type: 'integer',\n      description: 'Enter a value in milliseconds',\n    },\n    quoted: { ...quotedOptionsSchema },\n    everyOne: { type: 'boolean', enum: [true, false] },\n    mentioned: {\n      type: 'array',\n      minItems: 1,\n      uniqueItems: true,\n      items: {\n        type: 'string',\n        pattern: '^\\\\d+',\n        description: '\"mentioned\" must be an array of numeric strings',\n      },\n    },\n  },\n  required: ['number'],\n};\n","import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const proxySchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    enabled: { type: 'boolean', enum: [true, false] },\n    host: { type: 'string' },\n    port: { type: 'string' },\n    protocol: { type: 'string' },\n    username: { type: 'string' },\n    password: { type: 'string' },\n  },\n  required: ['enabled', 'host', 'port', 'protocol'],\n  ...isNotEmpty('enabled', 'host', 'port', 'protocol'),\n};\n","import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const settingsSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    rejectCall: { type: 'boolean' },\n    msgCall: { type: 'string' },\n    groupsIgnore: { type: 'boolean' },\n    alwaysOnline: { type: 'boolean' },\n    readMessages: { type: 'boolean' },\n    readStatus: { type: 'boolean' },\n    syncFullHistory: { type: 'boolean' },\n    wavoipToken: { type: 'string' },\n  },\n  required: ['rejectCall', 'groupsIgnore', 'alwaysOnline', 'readMessages', 'readStatus', 'syncFullHistory'],\n  ...isNotEmpty('rejectCall', 'groupsIgnore', 'alwaysOnline', 'readMessages', 'readStatus', 'syncFullHistory'),\n};\n","import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const templateSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    name: { type: 'string' },\n    category: { type: 'string', enum: ['AUTHENTICATION', 'MARKETING', 'UTILITY'] },\n    allowCategoryChange: { type: 'boolean' },\n    language: { type: 'string' },\n    components: { type: 'array' },\n    webhookUrl: { type: 'string' },\n  },\n  required: ['name', 'category', 'language', 'components'],\n  ...isNotEmpty('name', 'category', 'language', 'components'),\n};\n","import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const chatwootSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    enabled: { type: 'boolean', enum: [true, false] },\n    accountId: { type: 'string' },\n    token: { type: 'string' },\n    url: { type: 'string' },\n    signMsg: { type: 'boolean', enum: [true, false] },\n    signDelimiter: { type: ['string', 'null'] },\n    nameInbox: { type: ['string', 'null'] },\n    reopenConversation: { type: 'boolean', enum: [true, false] },\n    conversationPending: { type: 'boolean', enum: [true, false] },\n    autoCreate: { type: 'boolean', enum: [true, false] },\n    importContacts: { type: 'boolean', enum: [true, false] },\n    mergeBrazilContacts: { type: 'boolean', enum: [true, false] },\n    importMessages: { type: 'boolean', enum: [true, false] },\n    daysLimitImportMessages: { type: 'number' },\n    ignoreJids: { type: 'array', items: { type: 'string' } },\n  },\n  required: ['enabled', 'accountId', 'token', 'url', 'signMsg', 'reopenConversation', 'conversationPending'],\n  ...isNotEmpty('enabled', 'accountId', 'token', 'url', 'signMsg', 'reopenConversation', 'conversationPending'),\n};\n","import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const difySchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    enabled: { type: 'boolean' },\n    description: { type: 'string' },\n    botType: { type: 'string', enum: ['chatBot', 'textGenerator', 'agent', 'workflow'] },\n    apiUrl: { type: 'string' },\n    apiKey: { type: 'string' },\n    triggerType: { type: 'string', enum: ['all', 'keyword', 'none', 'advanced'] },\n    triggerOperator: { type: 'string', enum: ['equals', 'contains', 'startsWith', 'endsWith', 'regex'] },\n    triggerValue: { type: 'string' },\n    expire: { type: 'integer' },\n    keywordFinish: { type: 'string' },\n    delayMessage: { type: 'integer' },\n    unknownMessage: { type: 'string' },\n    listeningFromMe: { type: 'boolean' },\n    stopBotFromMe: { type: 'boolean' },\n    keepOpen: { type: 'boolean' },\n    debounceTime: { type: 'integer' },\n    ignoreJids: { type: 'array', items: { type: 'string' } },\n    splitMessages: { type: 'boolean' },\n    timePerChar: { type: 'integer' },\n  },\n  required: ['enabled', 'botType', 'triggerType'],\n  ...isNotEmpty('enabled', 'botType', 'triggerType'),\n};\n\nexport const difyStatusSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    remoteJid: { type: 'string' },\n    status: { type: 'string', enum: ['opened', 'closed', 'paused', 'delete'] },\n  },\n  required: ['remoteJid', 'status'],\n  ...isNotEmpty('remoteJid', 'status'),\n};\n\nexport const difySettingSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    expire: { type: 'integer' },\n    keywordFinish: { type: 'string' },\n    delayMessage: { type: 'integer' },\n    unknownMessage: { type: 'string' },\n    listeningFromMe: { type: 'boolean' },\n    stopBotFromMe: { type: 'boolean' },\n    keepOpen: { type: 'boolean' },\n    debounceTime: { type: 'integer' },\n    ignoreJids: { type: 'array', items: { type: 'string' } },\n    difyIdFallback: { type: 'string' },\n    splitMessages: { type: 'boolean' },\n    timePerChar: { type: 'integer' },\n  },\n  required: [\n    'expire',\n    'keywordFinish',\n    'delayMessage',\n    'unknownMessage',\n    'listeningFromMe',\n    'stopBotFromMe',\n    'keepOpen',\n    'debounceTime',\n    'ignoreJids',\n    'splitMessages',\n    'timePerChar',\n  ],\n  ...isNotEmpty(\n    'expire',\n    'keywordFinish',\n    'delayMessage',\n    'unknownMessage',\n    'listeningFromMe',\n    'stopBotFromMe',\n    'keepOpen',\n    'debounceTime',\n    'ignoreJids',\n    'splitMessages',\n    'timePerChar',\n  ),\n};\n\nexport const difyIgnoreJidSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    remoteJid: { type: 'string' },\n    action: { type: 'string', enum: ['add', 'remove'] },\n  },\n  required: ['remoteJid', 'action'],\n  ...isNotEmpty('remoteJid', 'action'),\n};\n","import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const evolutionBotSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    enabled: { type: 'boolean' },\n    description: { type: 'string' },\n    apiUrl: { type: 'string' },\n    apiKey: { type: 'string' },\n    triggerType: { type: 'string', enum: ['all', 'keyword', 'none', 'advanced'] },\n    triggerOperator: { type: 'string', enum: ['equals', 'contains', 'startsWith', 'endsWith', 'regex'] },\n    triggerValue: { type: 'string' },\n    expire: { type: 'integer' },\n    keywordFinish: { type: 'string' },\n    delayMessage: { type: 'integer' },\n    unknownMessage: { type: 'string' },\n    listeningFromMe: { type: 'boolean' },\n    stopBotFromMe: { type: 'boolean' },\n    keepOpen: { type: 'boolean' },\n    debounceTime: { type: 'integer' },\n    ignoreJids: { type: 'array', items: { type: 'string' } },\n    splitMessages: { type: 'boolean' },\n    timePerChar: { type: 'integer' },\n  },\n  required: ['enabled', 'apiUrl', 'triggerType'],\n  ...isNotEmpty('enabled', 'apiUrl', 'triggerType'),\n};\n\nexport const evolutionBotStatusSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    remoteJid: { type: 'string' },\n    status: { type: 'string', enum: ['opened', 'closed', 'paused', 'delete'] },\n  },\n  required: ['remoteJid', 'status'],\n  ...isNotEmpty('remoteJid', 'status'),\n};\n\nexport const evolutionBotSettingSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    expire: { type: 'integer' },\n    keywordFinish: { type: 'string' },\n    delayMessage: { type: 'integer' },\n    unknownMessage: { type: 'string' },\n    listeningFromMe: { type: 'boolean' },\n    stopBotFromMe: { type: 'boolean' },\n    keepOpen: { type: 'boolean' },\n    debounceTime: { type: 'integer' },\n    ignoreJids: { type: 'array', items: { type: 'string' } },\n    botIdFallback: { type: 'string' },\n    splitMessages: { type: 'boolean' },\n    timePerChar: { type: 'integer' },\n  },\n  required: [\n    'expire',\n    'keywordFinish',\n    'delayMessage',\n    'unknownMessage',\n    'listeningFromMe',\n    'stopBotFromMe',\n    'keepOpen',\n    'debounceTime',\n    'ignoreJids',\n    'splitMessages',\n    'timePerChar',\n  ],\n  ...isNotEmpty(\n    'expire',\n    'keywordFinish',\n    'delayMessage',\n    'unknownMessage',\n    'listeningFromMe',\n    'stopBotFromMe',\n    'keepOpen',\n    'debounceTime',\n    'ignoreJids',\n    'splitMessages',\n    'timePerChar',\n  ),\n};\n\nexport const evolutionBotIgnoreJidSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    remoteJid: { type: 'string' },\n    action: { type: 'string', enum: ['add', 'remove'] },\n  },\n  required: ['remoteJid', 'action'],\n  ...isNotEmpty('remoteJid', 'action'),\n};\n","import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const flowiseSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    enabled: { type: 'boolean' },\n    description: { type: 'string' },\n    apiUrl: { type: 'string' },\n    apiKey: { type: 'string' },\n    triggerType: { type: 'string', enum: ['all', 'keyword', 'none', 'advanced'] },\n    triggerOperator: { type: 'string', enum: ['equals', 'contains', 'startsWith', 'endsWith', 'regex'] },\n    triggerValue: { type: 'string' },\n    expire: { type: 'integer' },\n    keywordFinish: { type: 'string' },\n    delayMessage: { type: 'integer' },\n    unknownMessage: { type: 'string' },\n    listeningFromMe: { type: 'boolean' },\n    stopBotFromMe: { type: 'boolean' },\n    keepOpen: { type: 'boolean' },\n    debounceTime: { type: 'integer' },\n    ignoreJids: { type: 'array', items: { type: 'string' } },\n  },\n  required: ['enabled', 'apiUrl', 'triggerType'],\n  ...isNotEmpty('enabled', 'apiUrl', 'triggerType'),\n};\n\nexport const flowiseStatusSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    remoteJid: { type: 'string' },\n    status: { type: 'string', enum: ['opened', 'closed', 'paused', 'delete'] },\n  },\n  required: ['remoteJid', 'status'],\n  ...isNotEmpty('remoteJid', 'status'),\n};\n\nexport const flowiseSettingSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    expire: { type: 'integer' },\n    keywordFinish: { type: 'string' },\n    delayMessage: { type: 'integer' },\n    unknownMessage: { type: 'string' },\n    listeningFromMe: { type: 'boolean' },\n    stopBotFromMe: { type: 'boolean' },\n    keepOpen: { type: 'boolean' },\n    debounceTime: { type: 'integer' },\n    ignoreJids: { type: 'array', items: { type: 'string' } },\n    botIdFallback: { type: 'string' },\n  },\n  required: [\n    'expire',\n    'keywordFinish',\n    'delayMessage',\n    'unknownMessage',\n    'listeningFromMe',\n    'stopBotFromMe',\n    'keepOpen',\n    'debounceTime',\n    'ignoreJids',\n  ],\n  ...isNotEmpty(\n    'expire',\n    'keywordFinish',\n    'delayMessage',\n    'unknownMessage',\n    'listeningFromMe',\n    'stopBotFromMe',\n    'keepOpen',\n    'debounceTime',\n    'ignoreJids',\n  ),\n};\n\nexport const flowiseIgnoreJidSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    remoteJid: { type: 'string' },\n    action: { type: 'string', enum: ['add', 'remove'] },\n  },\n  required: ['remoteJid', 'action'],\n  ...isNotEmpty('remoteJid', 'action'),\n};\n","import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const openaiSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    enabled: { type: 'boolean' },\n    description: { type: 'string' },\n    openaiCredsId: { type: 'string' },\n    botType: { type: 'string', enum: ['assistant', 'chatCompletion'] },\n    assistantId: { type: 'string' },\n    functionUrl: { type: 'string' },\n    model: { type: 'string' },\n    systemMessages: { type: 'array', items: { type: 'string' } },\n    assistantMessages: { type: 'array', items: { type: 'string' } },\n    userMessages: { type: 'array', items: { type: 'string' } },\n    maxTokens: { type: 'integer' },\n    triggerType: { type: 'string', enum: ['all', 'keyword', 'none', 'advanced'] },\n    triggerOperator: { type: 'string', enum: ['equals', 'contains', 'startsWith', 'endsWith', 'regex'] },\n    triggerValue: { type: 'string' },\n    expire: { type: 'integer' },\n    keywordFinish: { type: 'string' },\n    delayMessage: { type: 'integer' },\n    unknownMessage: { type: 'string' },\n    listeningFromMe: { type: 'boolean' },\n    stopBotFromMe: { type: 'boolean' },\n    keepOpen: { type: 'boolean' },\n    debounceTime: { type: 'integer' },\n    ignoreJids: { type: 'array', items: { type: 'string' } },\n  },\n  required: ['enabled', 'openaiCredsId', 'botType', 'triggerType'],\n  ...isNotEmpty('enabled', 'openaiCredsId', 'botType', 'triggerType'),\n};\n\nexport const openaiCredsSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    name: { type: 'string' },\n    apiKey: { type: 'string' },\n  },\n  required: ['name', 'apiKey'],\n  ...isNotEmpty('name', 'apiKey'),\n};\n\nexport const openaiStatusSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    remoteJid: { type: 'string' },\n    status: { type: 'string', enum: ['opened', 'closed', 'paused', 'delete'] },\n  },\n  required: ['remoteJid', 'status'],\n  ...isNotEmpty('remoteJid', 'status'),\n};\n\nexport const openaiSettingSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    openaiCredsId: { type: 'string' },\n    expire: { type: 'integer' },\n    keywordFinish: { type: 'string' },\n    delayMessage: { type: 'integer' },\n    unknownMessage: { type: 'string' },\n    listeningFromMe: { type: 'boolean' },\n    stopBotFromMe: { type: 'boolean' },\n    keepOpen: { type: 'boolean' },\n    debounceTime: { type: 'integer' },\n    speechToText: { type: 'boolean' },\n    ignoreJids: { type: 'array', items: { type: 'string' } },\n    openaiIdFallback: { type: 'string' },\n  },\n  required: [\n    'openaiCredsId',\n    'expire',\n    'keywordFinish',\n    'delayMessage',\n    'unknownMessage',\n    'listeningFromMe',\n    'stopBotFromMe',\n    'keepOpen',\n    'debounceTime',\n    'ignoreJids',\n  ],\n  ...isNotEmpty(\n    'openaiCredsId',\n    'expire',\n    'keywordFinish',\n    'delayMessage',\n    'unknownMessage',\n    'listeningFromMe',\n    'stopBotFromMe',\n    'keepOpen',\n    'debounceTime',\n    'ignoreJids',\n  ),\n};\n\nexport const openaiIgnoreJidSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    remoteJid: { type: 'string' },\n    action: { type: 'string', enum: ['add', 'remove'] },\n  },\n  required: ['remoteJid', 'action'],\n  ...isNotEmpty('remoteJid', 'action'),\n};\n","import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const typebotSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    enabled: { type: 'boolean' },\n    description: { type: 'string' },\n    url: { type: 'string' },\n    typebot: { type: 'string' },\n    triggerType: { type: 'string', enum: ['all', 'keyword', 'none', 'advanced'] },\n    triggerOperator: { type: 'string', enum: ['equals', 'contains', 'startsWith', 'endsWith', 'regex'] },\n    triggerValue: { type: 'string' },\n    expire: { type: 'integer' },\n    keywordFinish: { type: 'string' },\n    delayMessage: { type: 'integer' },\n    unknownMessage: { type: 'string' },\n    listeningFromMe: { type: 'boolean' },\n    stopBotFromMe: { type: 'boolean' },\n    ignoreJids: { type: 'array', items: { type: 'string' } },\n  },\n  required: ['enabled', 'url', 'typebot', 'triggerType'],\n  ...isNotEmpty('enabled', 'url', 'typebot', 'triggerType'),\n};\n\nexport const typebotStatusSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    remoteJid: { type: 'string' },\n    status: { type: 'string', enum: ['opened', 'closed', 'paused', 'delete'] },\n  },\n  required: ['remoteJid', 'status'],\n  ...isNotEmpty('remoteJid', 'status'),\n};\n\nexport const typebotStartSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    remoteJid: { type: 'string' },\n    url: { type: 'string' },\n    typebot: { type: 'string' },\n  },\n  required: ['remoteJid', 'url', 'typebot'],\n  ...isNotEmpty('remoteJid', 'url', 'typebot'),\n};\n\nexport const typebotSettingSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    expire: { type: 'integer' },\n    keywordFinish: { type: 'string' },\n    delayMessage: { type: 'integer' },\n    unknownMessage: { type: 'string' },\n    listeningFromMe: { type: 'boolean' },\n    stopBotFromMe: { type: 'boolean' },\n    keepOpen: { type: 'boolean' },\n    debounceTime: { type: 'integer' },\n    typebotIdFallback: { type: 'string' },\n    ignoreJids: { type: 'array', items: { type: 'string' } },\n  },\n  required: ['expire', 'keywordFinish', 'delayMessage', 'unknownMessage', 'listeningFromMe', 'stopBotFromMe'],\n  ...isNotEmpty('expire', 'keywordFinish', 'delayMessage', 'unknownMessage', 'listeningFromMe', 'stopBotFromMe'),\n};\n\nexport const typebotIgnoreJidSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    remoteJid: { type: 'string' },\n    action: { type: 'string', enum: ['add', 'remove'] },\n  },\n  required: ['remoteJid', 'action'],\n  ...isNotEmpty('remoteJid', 'action'),\n};\n","import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nimport { EventController } from '../event.controller';\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\nexport const pusherSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    pusher: {\n      type: 'object',\n      properties: {\n        enabled: { type: 'boolean' },\n        appId: { type: 'string' },\n        key: { type: 'string' },\n        secret: { type: 'string' },\n        cluster: { type: 'string' },\n        useTLS: { type: 'boolean' },\n        events: {\n          type: 'array',\n          minItems: 0,\n          items: {\n            type: 'string',\n            enum: EventController.events,\n          },\n        },\n      },\n      required: ['enabled', 'appId', 'key', 'secret', 'cluster', 'useTLS'],\n      ...isNotEmpty('enabled', 'appId', 'key', 'secret', 'cluster', 'useTLS'),\n    },\n  },\n  required: ['pusher'],\n};\n","import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nimport { EventController } from '../event.controller';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const webhookSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    webhook: {\n      type: 'object',\n      properties: {\n        enabled: { type: 'boolean' },\n        url: { type: 'string' },\n        headers: { type: 'object' },\n        byEvents: { type: 'boolean' },\n        base64: { type: 'boolean' },\n        events: {\n          type: 'array',\n          minItems: 0,\n          items: {\n            type: 'string',\n            enum: EventController.events,\n          },\n        },\n      },\n      required: ['enabled', 'url'],\n      ...isNotEmpty('enabled', 'url'),\n    },\n  },\n  required: ['webhook'],\n};\n","import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nimport { EventController } from './event.controller';\n\nexport * from '@api/integrations/event/pusher/pusher.schema';\nexport * from '@api/integrations/event/webhook/webhook.schema';\n\nexport const eventSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    websocket: {\n      $ref: '#/$defs/event',\n    },\n    rabbitmq: {\n      $ref: '#/$defs/event',\n    },\n    sqs: {\n      $ref: '#/$defs/event',\n    },\n  },\n  $defs: {\n    event: {\n      type: 'object',\n      properties: {\n        enabled: { type: 'boolean', enum: [true, false] },\n        events: {\n          type: 'array',\n          minItems: 0,\n          items: {\n            type: 'string',\n            enum: EventController.events,\n          },\n        },\n      },\n      required: ['enabled'],\n    },\n  },\n};\n","import { RouterBroker } from '@api/abstract/abstract.router';\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { ChatwootDto } from '@api/integrations/chatbot/chatwoot/dto/chatwoot.dto';\nimport { HttpStatus } from '@api/routes/index.router';\nimport { chatwootController } from '@api/server.module';\nimport { chatwootSchema, instanceSchema } from '@validate/validate.schema';\nimport { RequestHandler, Router } from 'express';\n\nexport class ChatwootRouter extends RouterBroker {\n  constructor(...guards: RequestHandler[]) {\n    super();\n    this.router\n      .post(this.routerPath('set'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<ChatwootDto>({\n          request: req,\n          schema: chatwootSchema,\n          ClassRef: ChatwootDto,\n          execute: (instance, data) => chatwootController.createChatwoot(instance, data),\n        });\n\n        res.status(HttpStatus.CREATED).json(response);\n      })\n      .get(this.routerPath('find'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => chatwootController.findChatwoot(instance),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('webhook'), async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance, data) => chatwootController.receiveWebhook(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      });\n  }\n\n  public readonly router: Router = Router();\n}\n","export class Session {\n  remoteJid?: string;\n  sessionId?: string;\n  status?: string;\n  createdAt?: number;\n  updateAt?: number;\n}\n\nexport class IgnoreJidDto {\n  remoteJid?: string;\n  action?: string;\n}\n","import { $Enums, TriggerOperator, TriggerType } from '@prisma/client';\n\nexport class DifyDto {\n  enabled?: boolean;\n  description?: string;\n  botType?: $Enums.DifyBotType;\n  apiUrl?: string;\n  apiKey?: string;\n  expire?: number;\n  keywordFinish?: string;\n  delayMessage?: number;\n  unknownMessage?: string;\n  listeningFromMe?: boolean;\n  stopBotFromMe?: boolean;\n  keepOpen?: boolean;\n  debounceTime?: number;\n  triggerType?: TriggerType;\n  triggerOperator?: TriggerOperator;\n  triggerValue?: string;\n  ignoreJids?: any;\n  splitMessages?: boolean;\n  timePerChar?: number;\n}\n\nexport class DifySettingDto {\n  expire?: number;\n  keywordFinish?: string;\n  delayMessage?: number;\n  unknownMessage?: string;\n  listeningFromMe?: boolean;\n  stopBotFromMe?: boolean;\n  keepOpen?: boolean;\n  debounceTime?: number;\n  difyIdFallback?: string;\n  ignoreJids?: any;\n  splitMessages?: boolean;\n  timePerChar?: number;\n}\n","import { RouterBroker } from '@api/abstract/abstract.router';\nimport { IgnoreJidDto } from '@api/dto/chatbot.dto';\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { DifyDto, DifySettingDto } from '@api/integrations/chatbot/dify/dto/dify.dto';\nimport { HttpStatus } from '@api/routes/index.router';\nimport { difyController } from '@api/server.module';\nimport {\n  difyIgnoreJidSchema,\n  difySchema,\n  difySettingSchema,\n  difyStatusSchema,\n  instanceSchema,\n} from '@validate/validate.schema';\nimport { RequestHandler, Router } from 'express';\n\nexport class DifyRouter extends RouterBroker {\n  constructor(...guards: RequestHandler[]) {\n    super();\n    this.router\n      .post(this.routerPath('create'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<DifyDto>({\n          request: req,\n          schema: difySchema,\n          ClassRef: DifyDto,\n          execute: (instance, data) => difyController.createBot(instance, data),\n        });\n\n        res.status(HttpStatus.CREATED).json(response);\n      })\n      .get(this.routerPath('find'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => difyController.findBot(instance),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .get(this.routerPath('fetch/:difyId'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => difyController.fetchBot(instance, req.params.difyId),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .put(this.routerPath('update/:difyId'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<DifyDto>({\n          request: req,\n          schema: difySchema,\n          ClassRef: DifyDto,\n          execute: (instance, data) => difyController.updateBot(instance, req.params.difyId, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .delete(this.routerPath('delete/:difyId'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => difyController.deleteBot(instance, req.params.difyId),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('settings'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<DifySettingDto>({\n          request: req,\n          schema: difySettingSchema,\n          ClassRef: DifySettingDto,\n          execute: (instance, data) => difyController.settings(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .get(this.routerPath('fetchSettings'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => difyController.fetchSettings(instance),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('changeStatus'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: difyStatusSchema,\n          ClassRef: InstanceDto,\n          execute: (instance, data) => difyController.changeStatus(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .get(this.routerPath('fetchSessions/:difyId'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => difyController.fetchSessions(instance, req.params.difyId),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('ignoreJid'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<IgnoreJidDto>({\n          request: req,\n          schema: difyIgnoreJidSchema,\n          ClassRef: IgnoreJidDto,\n          execute: (instance, data) => difyController.ignoreJid(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      });\n  }\n\n  public readonly router: Router = Router();\n}\n","import { TriggerOperator, TriggerType } from '@prisma/client';\n\nexport class OpenaiCredsDto {\n  name: string;\n  apiKey: string;\n}\n\nexport class OpenaiDto {\n  enabled?: boolean;\n  description?: string;\n  openaiCredsId: string;\n  botType?: string;\n  assistantId?: string;\n  functionUrl?: string;\n  model?: string;\n  systemMessages?: string[];\n  assistantMessages?: string[];\n  userMessages?: string[];\n  maxTokens?: number;\n  expire?: number;\n  keywordFinish?: string;\n  delayMessage?: number;\n  unknownMessage?: string;\n  listeningFromMe?: boolean;\n  stopBotFromMe?: boolean;\n  keepOpen?: boolean;\n  debounceTime?: number;\n  triggerType?: TriggerType;\n  triggerOperator?: TriggerOperator;\n  triggerValue?: string;\n  ignoreJids?: any;\n  splitMessages?: boolean;\n  timePerChar?: number;\n}\n\nexport class OpenaiSettingDto {\n  openaiCredsId?: string;\n  expire?: number;\n  keywordFinish?: string;\n  delayMessage?: number;\n  unknownMessage?: string;\n  listeningFromMe?: boolean;\n  stopBotFromMe?: boolean;\n  keepOpen?: boolean;\n  debounceTime?: number;\n  openaiIdFallback?: string;\n  ignoreJids?: any;\n  speechToText?: boolean;\n  splitMessages?: boolean;\n  timePerChar?: number;\n}\n","import { RouterBroker } from '@api/abstract/abstract.router';\nimport { IgnoreJidDto } from '@api/dto/chatbot.dto';\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { OpenaiCredsDto, OpenaiDto, OpenaiSettingDto } from '@api/integrations/chatbot/openai/dto/openai.dto';\nimport { HttpStatus } from '@api/routes/index.router';\nimport { openaiController } from '@api/server.module';\nimport {\n  instanceSchema,\n  openaiCredsSchema,\n  openaiIgnoreJidSchema,\n  openaiSchema,\n  openaiSettingSchema,\n  openaiStatusSchema,\n} from '@validate/validate.schema';\nimport { RequestHandler, Router } from 'express';\n\nexport class OpenaiRouter extends RouterBroker {\n  constructor(...guards: RequestHandler[]) {\n    super();\n    this.router\n      .post(this.routerPath('creds'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<OpenaiCredsDto>({\n          request: req,\n          schema: openaiCredsSchema,\n          ClassRef: OpenaiCredsDto,\n          execute: (instance, data) => openaiController.createOpenaiCreds(instance, data),\n        });\n\n        res.status(HttpStatus.CREATED).json(response);\n      })\n      .get(this.routerPath('creds'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => openaiController.findOpenaiCreds(instance),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .delete(this.routerPath('creds/:openaiCredsId'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => openaiController.deleteCreds(instance, req.params.openaiCredsId),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('create'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<OpenaiDto>({\n          request: req,\n          schema: openaiSchema,\n          ClassRef: OpenaiDto,\n          execute: (instance, data) => openaiController.createBot(instance, data),\n        });\n\n        res.status(HttpStatus.CREATED).json(response);\n      })\n      .get(this.routerPath('find'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => openaiController.findBot(instance),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .get(this.routerPath('fetch/:openaiBotId'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => openaiController.fetchBot(instance, req.params.openaiBotId),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .put(this.routerPath('update/:openaiBotId'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<OpenaiDto>({\n          request: req,\n          schema: openaiSchema,\n          ClassRef: OpenaiDto,\n          execute: (instance, data) => openaiController.updateBot(instance, req.params.openaiBotId, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .delete(this.routerPath('delete/:openaiBotId'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => openaiController.deleteBot(instance, req.params.openaiBotId),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('settings'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<OpenaiSettingDto>({\n          request: req,\n          schema: openaiSettingSchema,\n          ClassRef: OpenaiSettingDto,\n          execute: (instance, data) => openaiController.settings(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .get(this.routerPath('fetchSettings'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => openaiController.fetchSettings(instance),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('changeStatus'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: openaiStatusSchema,\n          ClassRef: InstanceDto,\n          execute: (instance, data) => openaiController.changeStatus(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .get(this.routerPath('fetchSessions/:openaiBotId'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => openaiController.fetchSessions(instance, req.params.openaiBotId),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('ignoreJid'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<IgnoreJidDto>({\n          request: req,\n          schema: openaiIgnoreJidSchema,\n          ClassRef: IgnoreJidDto,\n          execute: (instance, data) => openaiController.ignoreJid(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .get(this.routerPath('getModels'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => openaiController.getModels(instance),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      });\n  }\n\n  public readonly router: Router = Router();\n}\n","import { TriggerOperator, TriggerType } from '@prisma/client';\n\nexport class PrefilledVariables {\n  remoteJid?: string;\n  pushName?: string;\n  messageType?: string;\n  additionalData?: { [key: string]: any };\n}\n\nexport class TypebotDto {\n  enabled?: boolean;\n  description?: string;\n  url: string;\n  typebot?: string;\n  expire?: number;\n  keywordFinish?: string;\n  delayMessage?: number;\n  unknownMessage?: string;\n  listeningFromMe?: boolean;\n  stopBotFromMe?: boolean;\n  keepOpen?: boolean;\n  debounceTime?: number;\n  triggerType?: TriggerType;\n  triggerOperator?: TriggerOperator;\n  triggerValue?: string;\n  ignoreJids?: any;\n}\n\nexport class TypebotSettingDto {\n  expire?: number;\n  keywordFinish?: string;\n  delayMessage?: number;\n  unknownMessage?: string;\n  listeningFromMe?: boolean;\n  stopBotFromMe?: boolean;\n  keepOpen?: boolean;\n  debounceTime?: number;\n  typebotIdFallback?: string;\n  ignoreJids?: any;\n}\n","import { RouterBroker } from '@api/abstract/abstract.router';\nimport { IgnoreJidDto } from '@api/dto/chatbot.dto';\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { TypebotDto, TypebotSettingDto } from '@api/integrations/chatbot/typebot/dto/typebot.dto';\nimport { HttpStatus } from '@api/routes/index.router';\nimport { typebotController } from '@api/server.module';\nimport {\n  instanceSchema,\n  typebotIgnoreJidSchema,\n  typebotSchema,\n  typebotSettingSchema,\n  typebotStartSchema,\n  typebotStatusSchema,\n} from '@validate/validate.schema';\nimport { RequestHandler, Router } from 'express';\n\nexport class TypebotRouter extends RouterBroker {\n  constructor(...guards: RequestHandler[]) {\n    super();\n    this.router\n      .post(this.routerPath('create'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<TypebotDto>({\n          request: req,\n          schema: typebotSchema,\n          ClassRef: TypebotDto,\n          execute: (instance, data) => typebotController.createBot(instance, data),\n        });\n\n        res.status(HttpStatus.CREATED).json(response);\n      })\n      .get(this.routerPath('find'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => typebotController.findBot(instance),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .get(this.routerPath('fetch/:typebotId'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => typebotController.fetchBot(instance, req.params.typebotId),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .put(this.routerPath('update/:typebotId'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<TypebotDto>({\n          request: req,\n          schema: typebotSchema,\n          ClassRef: TypebotDto,\n          execute: (instance, data) => typebotController.updateBot(instance, req.params.typebotId, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .delete(this.routerPath('delete/:typebotId'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => typebotController.deleteBot(instance, req.params.typebotId),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('settings'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<TypebotSettingDto>({\n          request: req,\n          schema: typebotSettingSchema,\n          ClassRef: TypebotSettingDto,\n          execute: (instance, data) => typebotController.settings(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .get(this.routerPath('fetchSettings'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => typebotController.fetchSettings(instance),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('start'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: typebotStartSchema,\n          ClassRef: InstanceDto,\n          execute: (instance, data) => typebotController.startBot(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('changeStatus'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: typebotStatusSchema,\n          ClassRef: InstanceDto,\n          execute: (instance, data) => typebotController.changeStatus(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .get(this.routerPath('fetchSessions/:typebotId'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => typebotController.fetchSessions(instance, req.params.typebotId),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('ignoreJid'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<IgnoreJidDto>({\n          request: req,\n          schema: typebotIgnoreJidSchema,\n          ClassRef: IgnoreJidDto,\n          execute: (instance, data) => typebotController.ignoreJid(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      });\n  }\n\n  public readonly router: Router = Router();\n}\n","import { ChatwootRouter } from '@api/integrations/chatbot/chatwoot/routes/chatwoot.router';\nimport { DifyRouter } from '@api/integrations/chatbot/dify/routes/dify.router';\nimport { OpenaiRouter } from '@api/integrations/chatbot/openai/routes/openai.router';\nimport { TypebotRouter } from '@api/integrations/chatbot/typebot/routes/typebot.router';\nimport { Router } from 'express';\n\nimport { EvolutionBotRouter } from './evolutionBot/routes/evolutionBot.router';\nimport { FlowiseRouter } from './flowise/routes/flowise.router';\n\nexport class ChatbotRouter {\n  public readonly router: Router;\n\n  constructor(...guards: any[]) {\n    this.router = Router();\n\n    this.router.use('/evolutionBot', new EvolutionBotRouter(...guards).router);\n    this.router.use('/chatwoot', new ChatwootRouter(...guards).router);\n    this.router.use('/typebot', new TypebotRouter(...guards).router);\n    this.router.use('/openai', new OpenaiRouter(...guards).router);\n    this.router.use('/dify', new DifyRouter(...guards).router);\n    this.router.use('/flowise', new FlowiseRouter(...guards).router);\n  }\n}\n","import { RouterBroker } from '@api/abstract/abstract.router';\nimport { IgnoreJidDto } from '@api/dto/chatbot.dto';\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { HttpStatus } from '@api/routes/index.router';\nimport { evolutionBotController } from '@api/server.module';\nimport { instanceSchema } from '@validate/instance.schema';\nimport { RequestHandler, Router } from 'express';\n\nimport { EvolutionBotDto, EvolutionBotSettingDto } from '../dto/evolutionBot.dto';\nimport {\n  evolutionBotIgnoreJidSchema,\n  evolutionBotSchema,\n  evolutionBotSettingSchema,\n  evolutionBotStatusSchema,\n} from '../validate/evolutionBot.schema';\n\nexport class EvolutionBotRouter extends RouterBroker {\n  constructor(...guards: RequestHandler[]) {\n    super();\n    this.router\n      .post(this.routerPath('create'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<EvolutionBotDto>({\n          request: req,\n          schema: evolutionBotSchema,\n          ClassRef: EvolutionBotDto,\n          execute: (instance, data) => evolutionBotController.createBot(instance, data),\n        });\n\n        res.status(HttpStatus.CREATED).json(response);\n      })\n      .get(this.routerPath('find'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => evolutionBotController.findBot(instance),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .get(this.routerPath('fetch/:evolutionBotId'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => evolutionBotController.fetchBot(instance, req.params.evolutionBotId),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .put(this.routerPath('update/:evolutionBotId'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<EvolutionBotDto>({\n          request: req,\n          schema: evolutionBotSchema,\n          ClassRef: EvolutionBotDto,\n          execute: (instance, data) => evolutionBotController.updateBot(instance, req.params.evolutionBotId, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .delete(this.routerPath('delete/:evolutionBotId'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => evolutionBotController.deleteBot(instance, req.params.evolutionBotId),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('settings'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<EvolutionBotSettingDto>({\n          request: req,\n          schema: evolutionBotSettingSchema,\n          ClassRef: EvolutionBotSettingDto,\n          execute: (instance, data) => evolutionBotController.settings(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .get(this.routerPath('fetchSettings'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => evolutionBotController.fetchSettings(instance),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('changeStatus'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: evolutionBotStatusSchema,\n          ClassRef: InstanceDto,\n          execute: (instance, data) => evolutionBotController.changeStatus(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .get(this.routerPath('fetchSessions/:evolutionBotId'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => evolutionBotController.fetchSessions(instance, req.params.evolutionBotId),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('ignoreJid'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<IgnoreJidDto>({\n          request: req,\n          schema: evolutionBotIgnoreJidSchema,\n          ClassRef: IgnoreJidDto,\n          execute: (instance, data) => evolutionBotController.ignoreJid(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      });\n  }\n\n  public readonly router: Router = Router();\n}\n","import { TriggerOperator, TriggerType } from '@prisma/client';\n\nexport class EvolutionBotDto {\n  enabled?: boolean;\n  description?: string;\n  apiUrl?: string;\n  apiKey?: string;\n  expire?: number;\n  keywordFinish?: string;\n  delayMessage?: number;\n  unknownMessage?: string;\n  listeningFromMe?: boolean;\n  stopBotFromMe?: boolean;\n  keepOpen?: boolean;\n  debounceTime?: number;\n  triggerType?: TriggerType;\n  triggerOperator?: TriggerOperator;\n  triggerValue?: string;\n  ignoreJids?: any;\n  splitMessages?: boolean;\n  timePerChar?: number;\n}\n\nexport class EvolutionBotSettingDto {\n  expire?: number;\n  keywordFinish?: string;\n  delayMessage?: number;\n  unknownMessage?: string;\n  listeningFromMe?: boolean;\n  stopBotFromMe?: boolean;\n  keepOpen?: boolean;\n  debounceTime?: number;\n  botIdFallback?: string;\n  ignoreJids?: any;\n  splitMessages?: boolean;\n  timePerChar?: number;\n}\n","import { RouterBroker } from '@api/abstract/abstract.router';\nimport { IgnoreJidDto } from '@api/dto/chatbot.dto';\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { HttpStatus } from '@api/routes/index.router';\nimport { flowiseController } from '@api/server.module';\nimport { instanceSchema } from '@validate/instance.schema';\nimport { RequestHandler, Router } from 'express';\n\nimport { FlowiseDto, FlowiseSettingDto } from '../dto/flowise.dto';\nimport {\n  flowiseIgnoreJidSchema,\n  flowiseSchema,\n  flowiseSettingSchema,\n  flowiseStatusSchema,\n} from '../validate/flowise.schema';\n\nexport class FlowiseRouter extends RouterBroker {\n  constructor(...guards: RequestHandler[]) {\n    super();\n    this.router\n      .post(this.routerPath('create'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<FlowiseDto>({\n          request: req,\n          schema: flowiseSchema,\n          ClassRef: FlowiseDto,\n          execute: (instance, data) => flowiseController.createBot(instance, data),\n        });\n\n        res.status(HttpStatus.CREATED).json(response);\n      })\n      .get(this.routerPath('find'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => flowiseController.findBot(instance),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .get(this.routerPath('fetch/:flowiseId'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => flowiseController.fetchBot(instance, req.params.flowiseId),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .put(this.routerPath('update/:flowiseId'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<FlowiseDto>({\n          request: req,\n          schema: flowiseSchema,\n          ClassRef: FlowiseDto,\n          execute: (instance, data) => flowiseController.updateBot(instance, req.params.flowiseId, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .delete(this.routerPath('delete/:flowiseId'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => flowiseController.deleteBot(instance, req.params.flowiseId),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('settings'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<FlowiseSettingDto>({\n          request: req,\n          schema: flowiseSettingSchema,\n          ClassRef: FlowiseSettingDto,\n          execute: (instance, data) => flowiseController.settings(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .get(this.routerPath('fetchSettings'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => flowiseController.fetchSettings(instance),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('changeStatus'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: flowiseStatusSchema,\n          ClassRef: InstanceDto,\n          execute: (instance, data) => flowiseController.changeStatus(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .get(this.routerPath('fetchSessions/:flowiseId'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => flowiseController.fetchSessions(instance, req.params.flowiseId),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('ignoreJid'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<IgnoreJidDto>({\n          request: req,\n          schema: flowiseIgnoreJidSchema,\n          ClassRef: IgnoreJidDto,\n          execute: (instance, data) => flowiseController.ignoreJid(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      });\n  }\n\n  public readonly router: Router = Router();\n}\n","import { TriggerOperator, TriggerType } from '@prisma/client';\n\nexport class FlowiseDto {\n  enabled?: boolean;\n  description?: string;\n  apiUrl?: string;\n  apiKey?: string;\n  expire?: number;\n  keywordFinish?: string;\n  delayMessage?: number;\n  unknownMessage?: string;\n  listeningFromMe?: boolean;\n  stopBotFromMe?: boolean;\n  keepOpen?: boolean;\n  debounceTime?: number;\n  triggerType?: TriggerType;\n  triggerOperator?: TriggerOperator;\n  triggerValue?: string;\n  ignoreJids?: any;\n  splitMessages?: boolean;\n  timePerChar?: number;\n}\n\nexport class FlowiseSettingDto {\n  expire?: number;\n  keywordFinish?: string;\n  delayMessage?: number;\n  unknownMessage?: string;\n  listeningFromMe?: boolean;\n  stopBotFromMe?: boolean;\n  keepOpen?: boolean;\n  debounceTime?: number;\n  flowiseIdFallback?: string;\n  ignoreJids?: any;\n  splitMessages?: boolean;\n  timePerChar?: number;\n}\n","import { RouterBroker } from '@api/abstract/abstract.router';\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { EventDto } from '@api/integrations/event/event.dto';\nimport { HttpStatus } from '@api/routes/index.router';\nimport { eventManager } from '@api/server.module';\nimport { instanceSchema, pusherSchema } from '@validate/validate.schema';\nimport { RequestHandler, Router } from 'express';\nexport class PusherRouter extends RouterBroker {\n  constructor(...guards: RequestHandler[]) {\n    super();\n    this.router\n      .post(this.routerPath('set'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<EventDto>({\n          request: req,\n          schema: pusherSchema,\n          ClassRef: EventDto,\n          execute: (instance, data) => eventManager.pusher.set(instance.instanceName, data),\n        });\n        res.status(HttpStatus.CREATED).json(response);\n      })\n      .get(this.routerPath('find'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => eventManager.pusher.get(instance.instanceName),\n        });\n        res.status(HttpStatus.OK).json(response);\n      });\n  }\n  public readonly router: Router = Router();\n}\n","import { RouterBroker } from '@api/abstract/abstract.router';\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { EventDto } from '@api/integrations/event/event.dto';\nimport { HttpStatus } from '@api/routes/index.router';\nimport { eventManager } from '@api/server.module';\nimport { eventSchema, instanceSchema } from '@validate/validate.schema';\nimport { RequestHandler, Router } from 'express';\n\nexport class RabbitmqRouter extends RouterBroker {\n  constructor(...guards: RequestHandler[]) {\n    super();\n    this.router\n      .post(this.routerPath('set'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<EventDto>({\n          request: req,\n          schema: eventSchema,\n          ClassRef: EventDto,\n          execute: (instance, data) => eventManager.rabbitmq.set(instance.instanceName, data),\n        });\n\n        res.status(HttpStatus.CREATED).json(response);\n      })\n      .get(this.routerPath('find'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => eventManager.rabbitmq.get(instance.instanceName),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      });\n  }\n\n  public readonly router: Router = Router();\n}\n","import { RouterBroker } from '@api/abstract/abstract.router';\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { EventDto } from '@api/integrations/event/event.dto';\nimport { HttpStatus } from '@api/routes/index.router';\nimport { eventManager } from '@api/server.module';\nimport { eventSchema, instanceSchema } from '@validate/validate.schema';\nimport { RequestHandler, Router } from 'express';\n\nexport class SqsRouter extends RouterBroker {\n  constructor(...guards: RequestHandler[]) {\n    super();\n    this.router\n      .post(this.routerPath('set'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<EventDto>({\n          request: req,\n          schema: eventSchema,\n          ClassRef: EventDto,\n          execute: (instance, data) => eventManager.sqs.set(instance.instanceName, data),\n        });\n\n        res.status(HttpStatus.CREATED).json(response);\n      })\n      .get(this.routerPath('find'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => eventManager.sqs.get(instance.instanceName),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      });\n  }\n\n  public readonly router: Router = Router();\n}\n","import { RouterBroker } from '@api/abstract/abstract.router';\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { EventDto } from '@api/integrations/event/event.dto';\nimport { HttpStatus } from '@api/routes/index.router';\nimport { eventManager } from '@api/server.module';\nimport { ConfigService } from '@config/env.config';\nimport { instanceSchema, webhookSchema } from '@validate/validate.schema';\nimport { RequestHandler, Router } from 'express';\n\nexport class WebhookRouter extends RouterBroker {\n  constructor(\n    readonly configService: ConfigService,\n    ...guards: RequestHandler[]\n  ) {\n    super();\n    this.router\n      .post(this.routerPath('set'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<EventDto>({\n          request: req,\n          schema: webhookSchema,\n          ClassRef: EventDto,\n          execute: (instance, data) => eventManager.webhook.set(instance.instanceName, data),\n        });\n\n        res.status(HttpStatus.CREATED).json(response);\n      })\n      .get(this.routerPath('find'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => eventManager.webhook.get(instance.instanceName),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      });\n  }\n\n  public readonly router: Router = Router();\n}\n","import { RouterBroker } from '@api/abstract/abstract.router';\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { EventDto } from '@api/integrations/event/event.dto';\nimport { HttpStatus } from '@api/routes/index.router';\nimport { eventManager } from '@api/server.module';\nimport { eventSchema, instanceSchema } from '@validate/validate.schema';\nimport { RequestHandler, Router } from 'express';\n\nexport class WebsocketRouter extends RouterBroker {\n  constructor(...guards: RequestHandler[]) {\n    super();\n    this.router\n      .post(this.routerPath('set'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<EventDto>({\n          request: req,\n          schema: eventSchema,\n          ClassRef: EventDto,\n          execute: (instance, data) => eventManager.websocket.set(instance.instanceName, data),\n        });\n\n        res.status(HttpStatus.CREATED).json(response);\n      })\n      .get(this.routerPath('find'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => eventManager.websocket.get(instance.instanceName),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      });\n  }\n\n  public readonly router: Router = Router();\n}\n","import { PusherRouter } from '@api/integrations/event/pusher/pusher.router';\nimport { RabbitmqRouter } from '@api/integrations/event/rabbitmq/rabbitmq.router';\nimport { SqsRouter } from '@api/integrations/event/sqs/sqs.router';\nimport { WebhookRouter } from '@api/integrations/event/webhook/webhook.router';\nimport { WebsocketRouter } from '@api/integrations/event/websocket/websocket.router';\nimport { Router } from 'express';\n\nexport class EventRouter {\n  public readonly router: Router;\n\n  constructor(configService: any, ...guards: any[]) {\n    this.router = Router();\n\n    this.router.use('/webhook', new WebhookRouter(configService, ...guards).router);\n    this.router.use('/websocket', new WebsocketRouter(...guards).router);\n    this.router.use('/rabbitmq', new RabbitmqRouter(...guards).router);\n    this.router.use('/pusher', new PusherRouter(...guards).router);\n    this.router.use('/sqs', new SqsRouter(...guards).router);\n  }\n}\n","export class MediaDto {\n  id?: string;\n  type?: string;\n  messageId?: number;\n  expiry?: number;\n}\n","import { JSONSchema7 } from 'json-schema';\nimport { v4 } from 'uuid';\n\nconst isNotEmpty = (...propertyNames: string[]): JSONSchema7 => {\n  const properties = {};\n  propertyNames.forEach(\n    (property) =>\n      (properties[property] = {\n        minLength: 1,\n        description: `The \"${property}\" cannot be empty`,\n      }),\n  );\n  return {\n    if: {\n      propertyNames: {\n        enum: [...propertyNames],\n      },\n    },\n    then: { properties },\n  };\n};\n\nexport const s3Schema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    id: { type: 'string' },\n    type: { type: 'string' },\n    messageId: { type: 'integer' },\n  },\n  ...isNotEmpty('id', 'type', 'messageId'),\n};\n\nexport const s3UrlSchema: JSONSchema7 = {\n  $id: v4(),\n  type: 'object',\n  properties: {\n    id: { type: 'string', pattern: '\\\\d+', minLength: 1 },\n    expiry: { type: 'string', pattern: '\\\\d+', minLength: 1 },\n  },\n  ...isNotEmpty('id'),\n  required: ['id'],\n};\n","import { RouterBroker } from '@api/abstract/abstract.router';\nimport { MediaDto } from '@api/integrations/storage/s3/dto/media.dto';\nimport { s3Schema, s3UrlSchema } from '@api/integrations/storage/s3/validate/s3.schema';\nimport { HttpStatus } from '@api/routes/index.router';\nimport { s3Controller } from '@api/server.module';\nimport { RequestHandler, Router } from 'express';\n\nexport class S3Router extends RouterBroker {\n  constructor(...guards: RequestHandler[]) {\n    super();\n    this.router\n      .post(this.routerPath('getMedia'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<MediaDto>({\n          request: req,\n          schema: s3Schema,\n          ClassRef: MediaDto,\n          execute: (instance, data) => s3Controller.getMedia(instance, data),\n        });\n\n        res.status(HttpStatus.CREATED).json(response);\n      })\n      .post(this.routerPath('getMediaUrl'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<MediaDto>({\n          request: req,\n          schema: s3UrlSchema,\n          ClassRef: MediaDto,\n          execute: (instance, data) => s3Controller.getMediaUrl(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      });\n  }\n\n  public readonly router: Router = Router();\n}\n","import { S3Router } from '@api/integrations/storage/s3/routes/s3.router';\nimport { Router } from 'express';\n\nexport class StorageRouter {\n  public readonly router: Router;\n\n  constructor(...guards: any[]) {\n    this.router = Router();\n\n    this.router.use('/s3', new S3Router(...guards).router);\n  }\n}\n","import { authGuard } from '@api/guards/auth.guard';\nimport { instanceExistsGuard, instanceLoggedGuard } from '@api/guards/instance.guard';\nimport Telemetry from '@api/guards/telemetry.guard';\nimport { ChannelRouter } from '@api/integrations/channel/channel.router';\nimport { ChatbotRouter } from '@api/integrations/chatbot/chatbot.router';\nimport { EventRouter } from '@api/integrations/event/event.router';\nimport { StorageRouter } from '@api/integrations/storage/storage.router';\nimport { configService } from '@config/env.config';\nimport { Router } from 'express';\nimport fs from 'fs';\nimport mimeTypes from 'mime-types';\nimport path from 'path';\n\nimport { CallRouter } from './call.router';\nimport { ChatRouter } from './chat.router';\nimport { GroupRouter } from './group.router';\nimport { InstanceRouter } from './instance.router';\nimport { LabelRouter } from './label.router';\nimport { ProxyRouter } from './proxy.router';\nimport { MessageRouter } from './sendMessage.router';\nimport { SettingsRouter } from './settings.router';\nimport { TemplateRouter } from './template.router';\nimport { ViewsRouter } from './view.router';\n\nenum HttpStatus {\n  OK = 200,\n  CREATED = 201,\n  NOT_FOUND = 404,\n  FORBIDDEN = 403,\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  INTERNAL_SERVER_ERROR = 500,\n}\n\nconst router: Router = Router();\nconst serverConfig = configService.get('SERVER');\nconst guards = [instanceExistsGuard, instanceLoggedGuard, authGuard['apikey']];\n\nconst telemetry = new Telemetry();\n\nconst packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));\n\nif (!serverConfig.DISABLE_MANAGER) router.use('/manager', new ViewsRouter().router);\n\nrouter.get('/assets/*', (req, res) => {\n  const fileName = req.params[0];\n  const basePath = path.join(process.cwd(), 'manager', 'dist');\n\n  const filePath = path.join(basePath, 'assets/', fileName);\n\n  if (fs.existsSync(filePath)) {\n    res.set('Content-Type', mimeTypes.lookup(filePath) || 'text/css');\n    res.send(fs.readFileSync(filePath));\n  } else {\n    res.status(404).send('File not found');\n  }\n});\n\nrouter\n  .use((req, res, next) => telemetry.collectTelemetry(req, res, next))\n\n  .get('/', (req, res) => {\n    res.status(HttpStatus.OK).json({\n      status: HttpStatus.OK,\n      message: 'Welcome to the Evolution API, it is working!',\n      version: packageJson.version,\n      clientName: process.env.DATABASE_CONNECTION_CLIENT_NAME,\n      manager: !serverConfig.DISABLE_MANAGER ? `${req.protocol}://${req.get('host')}/manager` : undefined,\n      documentation: `https://doc.evolution-api.com`,\n    });\n  })\n  .post('/verify-creds', authGuard['apikey'], async (req, res) => {\n    return res.status(HttpStatus.OK).json({\n      status: HttpStatus.OK,\n      message: 'Credentials are valid',\n      facebookAppId: process.env.FACEBOOK_APP_ID,\n      facebookConfigId: process.env.FACEBOOK_CONFIG_ID,\n      facebookUserToken: process.env.FACEBOOK_USER_TOKEN,\n    });\n  })\n  .use('/instance', new InstanceRouter(configService, ...guards).router)\n  .use('/message', new MessageRouter(...guards).router)\n  .use('/call', new CallRouter(...guards).router)\n  .use('/chat', new ChatRouter(...guards).router)\n  .use('/group', new GroupRouter(...guards).router)\n  .use('/template', new TemplateRouter(configService, ...guards).router)\n  .use('/settings', new SettingsRouter(...guards).router)\n  .use('/proxy', new ProxyRouter(...guards).router)\n  .use('/label', new LabelRouter(...guards).router)\n  .use('', new ChannelRouter(configService, ...guards).router)\n  .use('', new EventRouter(configService, ...guards).router)\n  .use('', new ChatbotRouter(...guards).router)\n  .use('', new StorageRouter(...guards).router);\n\nexport { HttpStatus, router };\n","export class Metadata {\n  number: string;\n}\n\nexport class OfferCallDto extends Metadata {\n  isVideo?: boolean;\n  callDuration?: number;\n}\n","import { RouterBroker } from '@api/abstract/abstract.router';\nimport { OfferCallDto } from '@api/dto/call.dto';\nimport { callController } from '@api/server.module';\nimport { offerCallSchema } from '@validate/validate.schema';\nimport { RequestHandler, Router } from 'express';\n\nimport { HttpStatus } from './index.router';\n\nexport class CallRouter extends RouterBroker {\n  constructor(...guards: RequestHandler[]) {\n    super();\n    this.router.post(this.routerPath('offer'), ...guards, async (req, res) => {\n      const response = await this.dataValidate<OfferCallDto>({\n        request: req,\n        schema: offerCallSchema,\n        ClassRef: OfferCallDto,\n        execute: (instance, data) => callController.offerCall(instance, data),\n      });\n\n      return res.status(HttpStatus.CREATED).json(response);\n    });\n  }\n\n  public readonly router: Router = Router();\n}\n","import { RouterBroker } from '@api/abstract/abstract.router';\nimport {\n  ArchiveChatDto,\n  BlockUserDto,\n  DeleteMessage,\n  getBase64FromMediaMessageDto,\n  MarkChatUnreadDto,\n  NumberDto,\n  PrivacySettingDto,\n  ProfileNameDto,\n  ProfilePictureDto,\n  ProfileStatusDto,\n  ReadMessageDto,\n  SendPresenceDto,\n  UpdateMessageDto,\n  WhatsAppNumberDto,\n} from '@api/dto/chat.dto';\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { Query } from '@api/repository/repository.service';\nimport { chatController } from '@api/server.module';\nimport { Contact, Message, MessageUpdate } from '@prisma/client';\nimport {\n  archiveChatSchema,\n  blockUserSchema,\n  contactValidateSchema,\n  deleteMessageSchema,\n  markChatUnreadSchema,\n  messageUpSchema,\n  messageValidateSchema,\n  presenceSchema,\n  privacySettingsSchema,\n  profileNameSchema,\n  profilePictureSchema,\n  profileSchema,\n  profileStatusSchema,\n  readMessageSchema,\n  updateMessageSchema,\n  whatsappNumberSchema,\n} from '@validate/validate.schema';\nimport { RequestHandler, Router } from 'express';\n\nimport { HttpStatus } from './index.router';\n\nexport class ChatRouter extends RouterBroker {\n  constructor(...guards: RequestHandler[]) {\n    super();\n    this.router\n      .post(this.routerPath('whatsappNumbers'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<WhatsAppNumberDto>({\n          request: req,\n          schema: whatsappNumberSchema,\n          ClassRef: WhatsAppNumberDto,\n          execute: (instance, data) => chatController.whatsappNumber(instance, data),\n        });\n\n        return res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('markMessageAsRead'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<ReadMessageDto>({\n          request: req,\n          schema: readMessageSchema,\n          ClassRef: ReadMessageDto,\n          execute: (instance, data) => chatController.readMessage(instance, data),\n        });\n\n        return res.status(HttpStatus.CREATED).json(response);\n      })\n      .post(this.routerPath('archiveChat'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<ArchiveChatDto>({\n          request: req,\n          schema: archiveChatSchema,\n          ClassRef: ArchiveChatDto,\n          execute: (instance, data) => chatController.archiveChat(instance, data),\n        });\n\n        return res.status(HttpStatus.CREATED).json(response);\n      })\n      .post(this.routerPath('markChatUnread'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<MarkChatUnreadDto>({\n          request: req,\n          schema: markChatUnreadSchema,\n          ClassRef: MarkChatUnreadDto,\n          execute: (instance, data) => chatController.markChatUnread(instance, data),\n        });\n\n        return res.status(HttpStatus.CREATED).json(response);\n      })\n      .delete(this.routerPath('deleteMessageForEveryone'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<DeleteMessage>({\n          request: req,\n          schema: deleteMessageSchema,\n          ClassRef: DeleteMessage,\n          execute: (instance, data) => chatController.deleteMessage(instance, data),\n        });\n\n        return res.status(HttpStatus.CREATED).json(response);\n      })\n      .post(this.routerPath('fetchProfilePictureUrl'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<NumberDto>({\n          request: req,\n          schema: profilePictureSchema,\n          ClassRef: NumberDto,\n          execute: (instance, data) => chatController.fetchProfilePicture(instance, data),\n        });\n\n        return res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('getBase64FromMediaMessage'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<getBase64FromMediaMessageDto>({\n          request: req,\n          schema: null,\n          ClassRef: getBase64FromMediaMessageDto,\n          execute: (instance, data) => chatController.getBase64FromMediaMessage(instance, data),\n        });\n\n        return res.status(HttpStatus.CREATED).json(response);\n      })\n      // TODO: corrigir updateMessage para medias tambem\n      .post(this.routerPath('updateMessage'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<UpdateMessageDto>({\n          request: req,\n          schema: updateMessageSchema,\n          ClassRef: UpdateMessageDto,\n          execute: (instance, data) => chatController.updateMessage(instance, data),\n        });\n\n        return res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('sendPresence'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<null>({\n          request: req,\n          schema: presenceSchema,\n          ClassRef: SendPresenceDto,\n          execute: (instance, data) => chatController.sendPresence(instance, data),\n        });\n\n        return res.status(HttpStatus.CREATED).json(response);\n      })\n      .post(this.routerPath('updateBlockStatus'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<BlockUserDto>({\n          request: req,\n          schema: blockUserSchema,\n          ClassRef: BlockUserDto,\n          execute: (instance, data) => chatController.blockUser(instance, data),\n        });\n\n        return res.status(HttpStatus.CREATED).json(response);\n      })\n      .post(this.routerPath('findContacts'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<Query<Contact>>({\n          request: req,\n          schema: contactValidateSchema,\n          ClassRef: Query<Contact>,\n          execute: (instance, data) => chatController.fetchContacts(instance, data),\n        });\n\n        return res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('findMessages'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<Query<Message>>({\n          request: req,\n          schema: messageValidateSchema,\n          ClassRef: Query<Message>,\n          execute: (instance, data) => chatController.fetchMessages(instance, data),\n        });\n\n        return res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('findStatusMessage'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<Query<MessageUpdate>>({\n          request: req,\n          schema: messageUpSchema,\n          ClassRef: Query<MessageUpdate>,\n          execute: (instance, data) => chatController.fetchStatusMessage(instance, data),\n        });\n\n        return res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('findChats'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<Query<Contact>>({\n          request: req,\n          schema: contactValidateSchema,\n          ClassRef: Query<Contact>,\n          execute: (instance, data) => chatController.fetchChats(instance, data),\n        });\n\n        return res.status(HttpStatus.OK).json(response);\n      })\n      // Profile routes\n      .post(this.routerPath('fetchBusinessProfile'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<ProfilePictureDto>({\n          request: req,\n          schema: profilePictureSchema,\n          ClassRef: ProfilePictureDto,\n          execute: (instance, data) => chatController.fetchBusinessProfile(instance, data),\n        });\n\n        return res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('fetchProfile'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<NumberDto>({\n          request: req,\n          schema: profileSchema,\n          ClassRef: NumberDto,\n          execute: (instance, data) => chatController.fetchProfile(instance, data),\n        });\n\n        return res.status(HttpStatus.OK).json(response);\n      })\n\n      .post(this.routerPath('updateProfileName'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<ProfileNameDto>({\n          request: req,\n          schema: profileNameSchema,\n          ClassRef: ProfileNameDto,\n          execute: (instance, data) => chatController.updateProfileName(instance, data),\n        });\n\n        return res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('updateProfileStatus'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<ProfileStatusDto>({\n          request: req,\n          schema: profileStatusSchema,\n          ClassRef: ProfileStatusDto,\n          execute: (instance, data) => chatController.updateProfileStatus(instance, data),\n        });\n\n        return res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('updateProfilePicture'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<ProfilePictureDto>({\n          request: req,\n          schema: profilePictureSchema,\n          ClassRef: ProfilePictureDto,\n          execute: (instance, data) => chatController.updateProfilePicture(instance, data),\n        });\n\n        return res.status(HttpStatus.OK).json(response);\n      })\n      .delete(this.routerPath('removeProfilePicture'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<ProfilePictureDto>({\n          request: req,\n          schema: profilePictureSchema,\n          ClassRef: ProfilePictureDto,\n          execute: (instance) => chatController.removeProfilePicture(instance),\n        });\n\n        return res.status(HttpStatus.OK).json(response);\n      })\n      .get(this.routerPath('fetchPrivacySettings'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: null,\n          ClassRef: InstanceDto,\n          execute: (instance) => chatController.fetchPrivacySettings(instance),\n        });\n\n        return res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('updatePrivacySettings'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<PrivacySettingDto>({\n          request: req,\n          schema: privacySettingsSchema,\n          ClassRef: PrivacySettingDto,\n          execute: (instance, data) => chatController.updatePrivacySettings(instance, data),\n        });\n\n        return res.status(HttpStatus.CREATED).json(response);\n      });\n  }\n\n  public readonly router: Router = Router();\n}\n","export class CreateGroupDto {\n  subject: string;\n  participants: string[];\n  description?: string;\n  promoteParticipants?: boolean;\n}\n\nexport class GroupPictureDto {\n  groupJid: string;\n  image: string;\n}\n\nexport class GroupSubjectDto {\n  groupJid: string;\n  subject: string;\n}\n\nexport class GroupDescriptionDto {\n  groupJid: string;\n  description: string;\n}\n\nexport class GroupJid {\n  groupJid: string;\n}\n\nexport class GetParticipant {\n  getParticipants: string;\n}\n\nexport class GroupInvite {\n  inviteCode: string;\n}\n\nexport class AcceptGroupInvite {\n  inviteCode: string;\n}\n\nexport class GroupSendInvite {\n  groupJid: string;\n  description: string;\n  numbers: string[];\n}\n\nexport class GroupUpdateParticipantDto extends GroupJid {\n  action: 'add' | 'remove' | 'promote' | 'demote';\n  participants: string[];\n}\n\nexport class GroupUpdateSettingDto extends GroupJid {\n  action: 'announcement' | 'not_announcement' | 'unlocked' | 'locked';\n}\n\nexport class GroupToggleEphemeralDto extends GroupJid {\n  expiration: 0 | 86400 | 604800 | 7776000;\n}\n","import { RouterBroker } from '@api/abstract/abstract.router';\nimport {\n  AcceptGroupInvite,\n  CreateGroupDto,\n  GetParticipant,\n  GroupDescriptionDto,\n  GroupInvite,\n  GroupJid,\n  GroupPictureDto,\n  GroupSendInvite,\n  GroupSubjectDto,\n  GroupToggleEphemeralDto,\n  GroupUpdateParticipantDto,\n  GroupUpdateSettingDto,\n} from '@api/dto/group.dto';\nimport { groupController } from '@api/server.module';\nimport {\n  AcceptGroupInviteSchema,\n  createGroupSchema,\n  getParticipantsSchema,\n  groupInviteSchema,\n  groupJidSchema,\n  groupSendInviteSchema,\n  toggleEphemeralSchema,\n  updateGroupDescriptionSchema,\n  updateGroupPictureSchema,\n  updateGroupSubjectSchema,\n  updateParticipantsSchema,\n  updateSettingsSchema,\n} from '@validate/validate.schema';\nimport { RequestHandler, Router } from 'express';\n\nimport { HttpStatus } from './index.router';\n\nexport class GroupRouter extends RouterBroker {\n  constructor(...guards: RequestHandler[]) {\n    super();\n    this.router\n      .post(this.routerPath('create'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<CreateGroupDto>({\n          request: req,\n          schema: createGroupSchema,\n          ClassRef: CreateGroupDto,\n          execute: (instance, data) => groupController.createGroup(instance, data),\n        });\n\n        res.status(HttpStatus.CREATED).json(response);\n      })\n      .post(this.routerPath('updateGroupSubject'), ...guards, async (req, res) => {\n        const response = await this.groupValidate<GroupSubjectDto>({\n          request: req,\n          schema: updateGroupSubjectSchema,\n          ClassRef: GroupSubjectDto,\n          execute: (instance, data) => groupController.updateGroupSubject(instance, data),\n        });\n\n        res.status(HttpStatus.CREATED).json(response);\n      })\n      .post(this.routerPath('updateGroupPicture'), ...guards, async (req, res) => {\n        const response = await this.groupValidate<GroupPictureDto>({\n          request: req,\n          schema: updateGroupPictureSchema,\n          ClassRef: GroupPictureDto,\n          execute: (instance, data) => groupController.updateGroupPicture(instance, data),\n        });\n\n        res.status(HttpStatus.CREATED).json(response);\n      })\n      .post(this.routerPath('updateGroupDescription'), ...guards, async (req, res) => {\n        const response = await this.groupValidate<GroupDescriptionDto>({\n          request: req,\n          schema: updateGroupDescriptionSchema,\n          ClassRef: GroupDescriptionDto,\n          execute: (instance, data) => groupController.updateGroupDescription(instance, data),\n        });\n\n        res.status(HttpStatus.CREATED).json(response);\n      })\n      .get(this.routerPath('findGroupInfos'), ...guards, async (req, res) => {\n        const response = await this.groupValidate<GroupJid>({\n          request: req,\n          schema: groupJidSchema,\n          ClassRef: GroupJid,\n          execute: (instance, data) => groupController.findGroupInfo(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .get(this.routerPath('fetchAllGroups'), ...guards, async (req, res) => {\n        const response = await this.getParticipantsValidate<GetParticipant>({\n          request: req,\n          schema: getParticipantsSchema,\n          ClassRef: GetParticipant,\n          execute: (instance, data) => groupController.fetchAllGroups(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .get(this.routerPath('participants'), ...guards, async (req, res) => {\n        const response = await this.groupValidate<GroupJid>({\n          request: req,\n          schema: groupJidSchema,\n          ClassRef: GroupJid,\n          execute: (instance, data) => groupController.findParticipants(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .get(this.routerPath('inviteCode'), ...guards, async (req, res) => {\n        const response = await this.groupValidate<GroupJid>({\n          request: req,\n          schema: groupJidSchema,\n          ClassRef: GroupJid,\n          execute: (instance, data) => groupController.inviteCode(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .get(this.routerPath('inviteInfo'), ...guards, async (req, res) => {\n        const response = await this.inviteCodeValidate<GroupInvite>({\n          request: req,\n          schema: groupInviteSchema,\n          ClassRef: GroupInvite,\n          execute: (instance, data) => groupController.inviteInfo(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .get(this.routerPath('acceptInviteCode'), ...guards, async (req, res) => {\n        const response = await this.inviteCodeValidate<AcceptGroupInvite>({\n          request: req,\n          schema: AcceptGroupInviteSchema,\n          ClassRef: AcceptGroupInvite,\n          execute: (instance, data) => groupController.acceptInviteCode(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('sendInvite'), ...guards, async (req, res) => {\n        const response = await this.groupNoValidate<GroupSendInvite>({\n          request: req,\n          schema: groupSendInviteSchema,\n          ClassRef: GroupSendInvite,\n          execute: (instance, data) => groupController.sendInvite(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('revokeInviteCode'), ...guards, async (req, res) => {\n        const response = await this.groupValidate<GroupJid>({\n          request: req,\n          schema: groupJidSchema,\n          ClassRef: GroupJid,\n          execute: (instance, data) => groupController.revokeInviteCode(instance, data),\n        });\n\n        res.status(HttpStatus.CREATED).json(response);\n      })\n      .post(this.routerPath('updateParticipant'), ...guards, async (req, res) => {\n        const response = await this.groupValidate<GroupUpdateParticipantDto>({\n          request: req,\n          schema: updateParticipantsSchema,\n          ClassRef: GroupUpdateParticipantDto,\n          execute: (instance, data) => groupController.updateGParticipate(instance, data),\n        });\n\n        res.status(HttpStatus.CREATED).json(response);\n      })\n      .post(this.routerPath('updateSetting'), ...guards, async (req, res) => {\n        const response = await this.groupValidate<GroupUpdateSettingDto>({\n          request: req,\n          schema: updateSettingsSchema,\n          ClassRef: GroupUpdateSettingDto,\n          execute: (instance, data) => groupController.updateGSetting(instance, data),\n        });\n\n        res.status(HttpStatus.CREATED).json(response);\n      })\n      .post(this.routerPath('toggleEphemeral'), ...guards, async (req, res) => {\n        const response = await this.groupValidate<GroupToggleEphemeralDto>({\n          request: req,\n          schema: toggleEphemeralSchema,\n          ClassRef: GroupToggleEphemeralDto,\n          execute: (instance, data) => groupController.toggleEphemeral(instance, data),\n        });\n\n        res.status(HttpStatus.CREATED).json(response);\n      })\n      .delete(this.routerPath('leaveGroup'), ...guards, async (req, res) => {\n        const response = await this.groupValidate<GroupJid>({\n          request: req,\n          schema: {},\n          ClassRef: GroupJid,\n          execute: (instance, data) => groupController.leaveGroup(instance, data),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      });\n  }\n\n  public readonly router: Router = Router();\n}\n","import { RouterBroker } from '@api/abstract/abstract.router';\nimport { InstanceDto, SetPresenceDto } from '@api/dto/instance.dto';\nimport { instanceController } from '@api/server.module';\nimport { ConfigService } from '@config/env.config';\nimport { instanceSchema, presenceOnlySchema } from '@validate/validate.schema';\nimport { RequestHandler, Router } from 'express';\n\nimport { HttpStatus } from './index.router';\n\nexport class InstanceRouter extends RouterBroker {\n  constructor(\n    readonly configService: ConfigService,\n    ...guards: RequestHandler[]\n  ) {\n    super();\n    this.router\n      .post('/create', ...guards, async (req, res) => {\n        console.log('create instance', req.body);\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => instanceController.createInstance(instance),\n        });\n\n        return res.status(HttpStatus.CREATED).json(response);\n      })\n      .post(this.routerPath('restart'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: null,\n          ClassRef: InstanceDto,\n          execute: (instance) => instanceController.restartInstance(instance),\n        });\n\n        return res.status(HttpStatus.OK).json(response);\n      })\n      .get(this.routerPath('connect'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: null,\n          ClassRef: InstanceDto,\n          execute: (instance) => instanceController.connectToWhatsapp(instance),\n        });\n\n        return res.status(HttpStatus.OK).json(response);\n      })\n      .get(this.routerPath('connectionState'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: null,\n          ClassRef: InstanceDto,\n          execute: (instance) => instanceController.connectionState(instance),\n        });\n\n        return res.status(HttpStatus.OK).json(response);\n      })\n      .get(this.routerPath('fetchInstances', false), ...guards, async (req, res) => {\n        const key = req.get('apikey');\n\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: null,\n          ClassRef: InstanceDto,\n          execute: (instance) => instanceController.fetchInstances(instance, key),\n        });\n\n        return res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('setPresence'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<null>({\n          request: req,\n          schema: presenceOnlySchema,\n          ClassRef: SetPresenceDto,\n          execute: (instance, data) => instanceController.setPresence(instance, data),\n        });\n\n        return res.status(HttpStatus.CREATED).json(response);\n      })\n      .delete(this.routerPath('logout'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: null,\n          ClassRef: InstanceDto,\n          execute: (instance) => instanceController.logout(instance),\n        });\n\n        return res.status(HttpStatus.OK).json(response);\n      })\n      .delete(this.routerPath('delete'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: null,\n          ClassRef: InstanceDto,\n          execute: (instance) => instanceController.deleteInstance(instance),\n        });\n\n        return res.status(HttpStatus.OK).json(response);\n      });\n  }\n\n  public readonly router: Router = Router();\n}\n","export class LabelDto {\n  id?: string;\n  name: string;\n  color: string;\n  predefinedId?: string;\n}\n\nexport class HandleLabelDto {\n  number: string;\n  labelId: string;\n  action: 'add' | 'remove';\n}\n","import { RouterBroker } from '@api/abstract/abstract.router';\nimport { HandleLabelDto, LabelDto } from '@api/dto/label.dto';\nimport { labelController } from '@api/server.module';\nimport { handleLabelSchema } from '@validate/validate.schema';\nimport { RequestHandler, Router } from 'express';\n\nimport { HttpStatus } from './index.router';\n\nexport class LabelRouter extends RouterBroker {\n  constructor(...guards: RequestHandler[]) {\n    super();\n    this.router\n      .get(this.routerPath('findLabels'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<LabelDto>({\n          request: req,\n          schema: null,\n          ClassRef: LabelDto,\n          execute: (instance) => labelController.fetchLabels(instance),\n        });\n\n        return res.status(HttpStatus.OK).json(response);\n      })\n      .post(this.routerPath('handleLabel'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<HandleLabelDto>({\n          request: req,\n          schema: handleLabelSchema,\n          ClassRef: HandleLabelDto,\n          execute: (instance, data) => labelController.handleLabel(instance, data),\n        });\n\n        return res.status(HttpStatus.OK).json(response);\n      });\n  }\n\n  public readonly router: Router = Router();\n}\n","import { proto, WAPresence } from 'baileys';\n\nexport class Quoted {\n  key: proto.IMessageKey;\n  message: proto.IMessage;\n}\n\nexport class Options {\n  delay?: number;\n  presence?: WAPresence;\n  quoted?: Quoted;\n  linkPreview?: boolean;\n  encoding?: boolean;\n  mentionsEveryOne?: boolean;\n  mentioned?: string[];\n  webhookUrl?: string;\n}\n\nexport class MediaMessage {\n  mediatype: MediaType;\n  mimetype?: string;\n  caption?: string;\n  // for document\n  fileName?: string;\n  // url or base64\n  media: string;\n}\n\nexport class StatusMessage {\n  type: string;\n  content: string;\n  statusJidList?: string[];\n  allContacts?: boolean;\n  caption?: string;\n  backgroundColor?: string;\n  font?: number;\n}\n\nexport class Metadata {\n  number: string;\n  delay?: number;\n  quoted?: Quoted;\n  linkPreview?: boolean;\n  mentionsEveryOne?: boolean;\n  mentioned?: string[];\n  encoding?: boolean;\n}\n\nexport class SendTextDto extends Metadata {\n  text: string;\n}\nexport class SendPresence extends Metadata {\n  text: string;\n}\n\nexport class SendStatusDto extends Metadata {\n  type: string;\n  content: string;\n  statusJidList?: string[];\n  allContacts?: boolean;\n  caption?: string;\n  backgroundColor?: string;\n  font?: number;\n}\n\nexport class SendPollDto extends Metadata {\n  name: string;\n  selectableCount: number;\n  values: string[];\n  messageSecret?: Uint8Array;\n}\n\nexport type MediaType = 'image' | 'document' | 'video' | 'audio' | 'ptv';\n\nexport class SendMediaDto extends Metadata {\n  mediatype: MediaType;\n  mimetype?: string;\n  caption?: string;\n  // for document\n  fileName?: string;\n  // url or base64\n  media: string;\n}\n\nexport class SendPtvDto extends Metadata {\n  video: string;\n}\n\nexport class SendStickerDto extends Metadata {\n  sticker: string;\n}\n\nexport class SendAudioDto extends Metadata {\n  audio: string;\n}\n\nexport type TypeButton = 'reply' | 'copy' | 'url' | 'call' | 'pix';\n\nexport type KeyType = 'phone' | 'email' | 'cpf' | 'cnpj' | 'random';\n\nexport class Button {\n  type: TypeButton;\n  displayText?: string;\n  id?: string;\n  url?: string;\n  copyCode?: string;\n  phoneNumber?: string;\n  currency?: string;\n  name?: string;\n  keyType?: KeyType;\n  key?: string;\n}\n\nexport class SendButtonsDto extends Metadata {\n  thumbnailUrl?: string;\n  title: string;\n  description?: string;\n  footer?: string;\n  buttons: Button[];\n}\n\nexport class SendLocationDto extends Metadata {\n  latitude: number;\n  longitude: number;\n  name?: string;\n  address?: string;\n}\n\nclass Row {\n  title: string;\n  description: string;\n  rowId: string;\n}\nclass Section {\n  title: string;\n  rows: Row[];\n}\nexport class SendListDto extends Metadata {\n  title: string;\n  description?: string;\n  footerText?: string;\n  buttonText: string;\n  sections: Section[];\n}\n\nexport class ContactMessage {\n  fullName: string;\n  wuid: string;\n  phoneNumber: string;\n  organization?: string;\n  email?: string;\n  url?: string;\n}\n\nexport class SendTemplateDto extends Metadata {\n  name: string;\n  language: string;\n  components: any;\n  webhookUrl?: string;\n}\nexport class SendContactDto extends Metadata {\n  contact: ContactMessage[];\n}\n\nexport class SendReactionDto {\n  key: proto.IMessageKey;\n  reaction: string;\n}\n","import { RouterBroker } from '@api/abstract/abstract.router';\nimport {\n  SendAudioDto,\n  SendButtonsDto,\n  SendContactDto,\n  SendListDto,\n  SendLocationDto,\n  SendMediaDto,\n  SendPollDto,\n  SendPtvDto,\n  SendReactionDto,\n  SendStatusDto,\n  SendStickerDto,\n  SendTemplateDto,\n  SendTextDto,\n} from '@api/dto/sendMessage.dto';\nimport { sendMessageController } from '@api/server.module';\nimport {\n  audioMessageSchema,\n  buttonsMessageSchema,\n  contactMessageSchema,\n  listMessageSchema,\n  locationMessageSchema,\n  mediaMessageSchema,\n  pollMessageSchema,\n  ptvMessageSchema,\n  reactionMessageSchema,\n  statusMessageSchema,\n  stickerMessageSchema,\n  templateMessageSchema,\n  textMessageSchema,\n} from '@validate/validate.schema';\nimport { RequestHandler, Router } from 'express';\nimport multer from 'multer';\n\nimport { HttpStatus } from './index.router';\n\nconst upload = multer({ storage: multer.memoryStorage() });\n\nexport class MessageRouter extends RouterBroker {\n  constructor(...guards: RequestHandler[]) {\n    super();\n    this.router\n      .post(this.routerPath('sendTemplate'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<SendTemplateDto>({\n          request: req,\n          schema: templateMessageSchema,\n          ClassRef: SendTemplateDto,\n          execute: (instance, data) => sendMessageController.sendTemplate(instance, data),\n        });\n\n        return res.status(HttpStatus.CREATED).json(response);\n      })\n      .post(this.routerPath('sendText'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<SendTextDto>({\n          request: req,\n          schema: textMessageSchema,\n          ClassRef: SendTextDto,\n          execute: (instance, data) => sendMessageController.sendText(instance, data),\n        });\n\n        return res.status(HttpStatus.CREATED).json(response);\n      })\n      .post(this.routerPath('sendMedia'), ...guards, upload.single('file'), async (req, res) => {\n        const bodyData = req.body;\n\n        const response = await this.dataValidate<SendMediaDto>({\n          request: req,\n          schema: mediaMessageSchema,\n          ClassRef: SendMediaDto,\n          execute: (instance) => sendMessageController.sendMedia(instance, bodyData, req.file as any),\n        });\n\n        return res.status(HttpStatus.CREATED).json(response);\n      })\n      .post(this.routerPath('sendPtv'), ...guards, upload.single('file'), async (req, res) => {\n        const bodyData = req.body;\n\n        const response = await this.dataValidate<SendPtvDto>({\n          request: req,\n          schema: ptvMessageSchema,\n          ClassRef: SendPtvDto,\n          execute: (instance) => sendMessageController.sendPtv(instance, bodyData, req.file as any),\n        });\n\n        return res.status(HttpStatus.CREATED).json(response);\n      })\n      .post(this.routerPath('sendWhatsAppAudio'), ...guards, upload.single('file'), async (req, res) => {\n        const bodyData = req.body;\n\n        const response = await this.dataValidate<SendAudioDto>({\n          request: req,\n          schema: audioMessageSchema,\n          ClassRef: SendMediaDto,\n          execute: (instance) => sendMessageController.sendWhatsAppAudio(instance, bodyData, req.file as any),\n        });\n\n        return res.status(HttpStatus.CREATED).json(response);\n      })\n      // TODO: Revisar funcionamento do envio de Status\n      .post(this.routerPath('sendStatus'), ...guards, upload.single('file'), async (req, res) => {\n        const bodyData = req.body;\n\n        const response = await this.dataValidate<SendStatusDto>({\n          request: req,\n          schema: statusMessageSchema,\n          ClassRef: SendStatusDto,\n          execute: (instance) => sendMessageController.sendStatus(instance, bodyData, req.file as any),\n        });\n\n        return res.status(HttpStatus.CREATED).json(response);\n      })\n      .post(this.routerPath('sendSticker'), ...guards, upload.single('file'), async (req, res) => {\n        const bodyData = req.body;\n\n        const response = await this.dataValidate<SendStickerDto>({\n          request: req,\n          schema: stickerMessageSchema,\n          ClassRef: SendStickerDto,\n          execute: (instance) => sendMessageController.sendSticker(instance, bodyData, req.file as any),\n        });\n\n        return res.status(HttpStatus.CREATED).json(response);\n      })\n      .post(this.routerPath('sendLocation'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<SendLocationDto>({\n          request: req,\n          schema: locationMessageSchema,\n          ClassRef: SendLocationDto,\n          execute: (instance, data) => sendMessageController.sendLocation(instance, data),\n        });\n\n        return res.status(HttpStatus.CREATED).json(response);\n      })\n      .post(this.routerPath('sendContact'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<SendContactDto>({\n          request: req,\n          schema: contactMessageSchema,\n          ClassRef: SendContactDto,\n          execute: (instance, data) => sendMessageController.sendContact(instance, data),\n        });\n\n        return res.status(HttpStatus.CREATED).json(response);\n      })\n      .post(this.routerPath('sendReaction'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<SendReactionDto>({\n          request: req,\n          schema: reactionMessageSchema,\n          ClassRef: SendReactionDto,\n          execute: (instance, data) => sendMessageController.sendReaction(instance, data),\n        });\n\n        return res.status(HttpStatus.CREATED).json(response);\n      })\n      .post(this.routerPath('sendPoll'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<SendPollDto>({\n          request: req,\n          schema: pollMessageSchema,\n          ClassRef: SendPollDto,\n          execute: (instance, data) => sendMessageController.sendPoll(instance, data),\n        });\n\n        return res.status(HttpStatus.CREATED).json(response);\n      })\n      .post(this.routerPath('sendList'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<SendListDto>({\n          request: req,\n          schema: listMessageSchema,\n          ClassRef: SendListDto,\n          execute: (instance, data) => sendMessageController.sendList(instance, data),\n        });\n\n        return res.status(HttpStatus.CREATED).json(response);\n      })\n      .post(this.routerPath('sendButtons'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<SendButtonsDto>({\n          request: req,\n          schema: buttonsMessageSchema,\n          ClassRef: SendButtonsDto,\n          execute: (instance, data) => sendMessageController.sendButtons(instance, data),\n        });\n\n        return res.status(HttpStatus.CREATED).json(response);\n      });\n  }\n\n  public readonly router: Router = Router();\n}\n","export class SettingsDto {\n  rejectCall?: boolean;\n  msgCall?: string;\n  groupsIgnore?: boolean;\n  alwaysOnline?: boolean;\n  readMessages?: boolean;\n  readStatus?: boolean;\n  syncFullHistory?: boolean;\n  wavoipToken?: string;\n}\n","import { RouterBroker } from '@api/abstract/abstract.router';\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { SettingsDto } from '@api/dto/settings.dto';\nimport { settingsController } from '@api/server.module';\nimport { settingsSchema } from '@validate/validate.schema';\nimport { RequestHandler, Router } from 'express';\n\nimport { HttpStatus } from './index.router';\n\nexport class SettingsRouter extends RouterBroker {\n  constructor(...guards: RequestHandler[]) {\n    super();\n    this.router\n      .post(this.routerPath('set'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<SettingsDto>({\n          request: req,\n          schema: settingsSchema,\n          ClassRef: SettingsDto,\n          execute: (instance, data) => settingsController.createSettings(instance, data),\n        });\n\n        res.status(HttpStatus.CREATED).json(response);\n      })\n      .get(this.routerPath('find'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: null,\n          ClassRef: InstanceDto,\n          execute: (instance) => settingsController.findSettings(instance),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      });\n  }\n\n  public readonly router: Router = Router();\n}\n","export class TemplateDto {\n  name: string;\n  category: string;\n  allowCategoryChange: boolean;\n  language: string;\n  components: any;\n  webhookUrl?: string;\n}\n","import { RouterBroker } from '@api/abstract/abstract.router';\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { TemplateDto } from '@api/dto/template.dto';\nimport { templateController } from '@api/server.module';\nimport { ConfigService } from '@config/env.config';\nimport { instanceSchema, templateSchema } from '@validate/validate.schema';\nimport { RequestHandler, Router } from 'express';\n\nimport { HttpStatus } from './index.router';\n\nexport class TemplateRouter extends RouterBroker {\n  constructor(\n    readonly configService: ConfigService,\n    ...guards: RequestHandler[]\n  ) {\n    super();\n    this.router\n      .post(this.routerPath('create'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<TemplateDto>({\n          request: req,\n          schema: templateSchema,\n          ClassRef: TemplateDto,\n          execute: (instance, data) => templateController.createTemplate(instance, data),\n        });\n\n        res.status(HttpStatus.CREATED).json(response);\n      })\n      .get(this.routerPath('find'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => templateController.findTemplate(instance),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      });\n  }\n\n  public readonly router: Router = Router();\n}\n","import { RouterBroker } from '@api/abstract/abstract.router';\nimport express, { Router } from 'express';\nimport path from 'path';\n\nexport class ViewsRouter extends RouterBroker {\n  public readonly router: Router;\n\n  constructor() {\n    super();\n    this.router = Router();\n\n    const basePath = path.join(process.cwd(), 'manager', 'dist');\n    const indexPath = path.join(basePath, 'index.html');\n\n    this.router.use(express.static(basePath));\n\n    this.router.get('*', (req, res) => {\n      res.sendFile(indexPath);\n    });\n  }\n}\n","import { HttpStatus } from '@api/routes/index.router';\n\nexport class BadRequestException {\n  constructor(...objectError: any[]) {\n    throw {\n      status: HttpStatus.BAD_REQUEST,\n      error: 'Bad Request',\n      message: objectError.length > 0 ? objectError : undefined,\n    };\n  }\n}\n","import { HttpStatus } from '@api/routes/index.router';\n\nexport class UnauthorizedException {\n  constructor(...objectError: any[]) {\n    throw {\n      status: HttpStatus.UNAUTHORIZED,\n      error: 'Unauthorized',\n      message: objectError.length > 0 ? objectError : 'Unauthorized',\n    };\n  }\n}\n","import { HttpStatus } from '@api/routes/index.router';\n\nexport class ForbiddenException {\n  constructor(...objectError: any[]) {\n    throw {\n      status: HttpStatus.FORBIDDEN,\n      error: 'Forbidden',\n      message: objectError.length > 0 ? objectError : undefined,\n    };\n  }\n}\n","import { HttpStatus } from '@api/routes/index.router';\n\nexport class NotFoundException {\n  constructor(...objectError: any[]) {\n    throw {\n      status: HttpStatus.NOT_FOUND,\n      error: 'Not Found',\n      message: objectError.length > 0 ? objectError : undefined,\n    };\n  }\n}\n","import { HttpStatus } from '@api/routes/index.router';\n\nexport class InternalServerErrorException {\n  constructor(...objectError: any[]) {\n    throw {\n      status: HttpStatus.INTERNAL_SERVER_ERROR,\n      error: 'Internal Server Error',\n      message: objectError.length > 0 ? objectError : undefined,\n    };\n  }\n}\n","export class ProxyDto {\n  enabled?: boolean;\n  host: string;\n  port: string;\n  protocol: string;\n  username?: string;\n  password?: string;\n}\n","import { RouterBroker } from '@api/abstract/abstract.router';\nimport { InstanceDto } from '@api/dto/instance.dto';\nimport { ProxyDto } from '@api/dto/proxy.dto';\nimport { proxyController } from '@api/server.module';\nimport { instanceSchema, proxySchema } from '@validate/validate.schema';\nimport { RequestHandler, Router } from 'express';\n\nimport { HttpStatus } from './index.router';\n\nexport class ProxyRouter extends RouterBroker {\n  constructor(...guards: RequestHandler[]) {\n    super();\n    this.router\n      .post(this.routerPath('set'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<ProxyDto>({\n          request: req,\n          schema: proxySchema,\n          ClassRef: ProxyDto,\n          execute: (instance, data) => proxyController.createProxy(instance, data),\n        });\n\n        res.status(HttpStatus.CREATED).json(response);\n      })\n      .get(this.routerPath('find'), ...guards, async (req, res) => {\n        const response = await this.dataValidate<InstanceDto>({\n          request: req,\n          schema: instanceSchema,\n          ClassRef: InstanceDto,\n          execute: (instance) => proxyController.findProxy(instance),\n        });\n\n        res.status(HttpStatus.OK).json(response);\n      });\n  }\n\n  public readonly router: Router = Router();\n}\n"],"mappings":"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","names":["dayjs","fs","isBooleanString","dotenv","ConfigService","key","configService","packageJson","fs","formatDateLog","timestamp","dayjs","Color","Level","Type","Background","Logger","context","configService","value","type","types","level","typeValue","Color","packageJson","formatDateLog","BufferJSON","NodeCache","_LocalCache","configService","module","Logger","key","value","ttl","appendCriteria","keys","filter","field","data","error","json","hash","LocalCache","BufferJSON","createClient","Redis","Logger","configService","e","redisClient","RedisCache","configService","module","Logger","redisClient","key","error","field","data","BufferJSON","value","ttl","json","appendCriteria","keys","match","logger","Logger","CacheEngine","configService","module","cacheConf","RedisCache","LocalCache","EventEmitter2","maxListeners","eventEmitter","CallController","waMonitor","instanceName","data","ChatController","waMonitor","instanceName","data","query","GroupController","waMonitor","instance","create","update","groupJid","getPaticipants","inviteCode","data","TypeMediaMessage","MessageSubtype","Integration","delay","isArray","isURL","crypto","rnds8Pool","poolPtr","rng","byteToHex","i","unsafeStringify","arr","offset","crypto","native_default","v4","options","buf","offset","native_default","rnds","rng","i","unsafeStringify","v4_default","InstanceController","waMonitor","configService","prismaRepository","eventEmitter","chatwootService","settingsService","proxyService","cache","chatwootCache","baileysCache","providerFiles","Logger","instanceData","instance","channelController","BadRequestException","instanceId","v4_default","hash","eventManager","settings","webhookWaBusiness","accessTokenWaBusiness","Integration","getQrcode","delay","isURL","urlServer","error","isArray","instanceName","number","state","key","instancesByKey","names","UnauthorizedException","instanceNames","data","InternalServerErrorException","waInstances","LabelController","waMonitor","instanceName","data","HttpsProxyAgent","makeProxyAgent","proxy","host","password","port","protocol","username","proxyUrl","axios","logger","Logger","ProxyController","proxyService","waMonitor","instance","data","NotFoundException","BadRequestException","proxy","serverIp","makeProxyAgent","error","isBase64","isURL","SendMessageController","waMonitor","instanceName","data","file","BadRequestException","SettingsController","settingsService","instance","data","TemplateController","templateService","instance","data","MinIo","join","logger","Logger","BUCKET","ConfigService","minioClient","bucketName","bucketExists","bucket","setBucketPolicy","policy","createBucket","error","uploadFile","fileName","file","size","metadata","objectName","getObjectUrl","expiry","BadRequestException","postgresql","Pool","Postgres","Logger","connectionString","uri","configService","postgresClient","ChatwootImport","Logger","instance","repositoryMessagesCache","messagesRaw","actualValue","contactsRaw","provider","pgClient","postgresClient","totalContactsImported","contacts","contactsChunk","labelSql","labelId","sqlLabel","sqlInsert","bindInsert","contact","bindName","bindPhoneNumber","bindIdentifier","sqlTags","tagId","sqlTag","sqlInsertLabel","bindTaggableId","error","sourceIds","existingSourceIdsSet","formattedSourceIds","sourceId","result","row","chatwootService","inbox","chatwootUser","totalMessagesImported","messagesOrdered","a","b","aKey","bKey","aMessageTimestamp","bMessageTimestamp","allMessagesMappedByPhoneNumber","phoneNumbersWithTimestamp","messages","phoneNumber","existingSourceIds","message","batchSize","messagesChunk","messagesByPhoneNumber","fksByNumber","sqlInsertMsg","bindInsertMsg","fksChatwoot","contentMessage","bindContent","bindConversationId","bindMessageType","bindSenderType","bindSenderId","bindSourceId","bindmessageTimestamp","providerData","event","bindValues","sqlFromChatwoot","phoneNumberTimestamp","bindStr","fksFromChatwoot","item","acc","key","phoneNumberPlus","limit","msg","configService","types","arr","chunkSize","remoteJid","messageId","chatwootImport","ChatwootClient","chatwootRequest","fs","i18next","path","languages","translationsPath","path","configService","ConfigService","resources","language","languagePath","fs","__require","i18next","i18n_default","axios","fs","packageJson","sendTelemetry","route","telemetry","url","axios","dayjs","FormData","Jimp","Long","mimeTypes","path","Readable","ChatwootService","waMonitor","configService","prismaRepository","cache","Logger","postgresClient","instance","cacheKey","provider","ChatwootClient","data","urlServer","id","client","contact","inboxName","webhookUrl","qrcode","number","organization","logo","findInbox","checkDuplicate","inbox","inboxId","contactId","conversation","contentMsg","phoneNumber","isGroup","name","avatar_url","jid","nameInbox","tagData","tagId","taggingsCount","query","chatwootRequest","contacts","phoneNumbers","searchableFields","phone","savedNumber","contact_with9","field","numbers","withoutNine","withNine","filterPayload","fieldsToSearch","index1","index2","queryOperator","body","conversationId","conversationExists","error","chatId","nameContact","filterInbox","group","picture_url","findParticipant","waProfilePictureFile","chatwootProfilePictureFile","pictureNeedsUpdate","nameNeedsUpdate","v","contactConversations","findByName","content","messageType","privateMessage","attachments","messageBody","sourceId","quotedMsg","replyToIds","sourceReplyId","message","fileStream","fileName","messageAlreadySaved","chatwootImport","config","waInstance","media","caption","options","parsedMedia","mimeType","parts","type","sendTelemetry","i18n_default","resolve","keyToDelete","messageReceived","senderName","key","cwBotContact","command","state","msgLogout","formatText","formattedDelimiter","textToConcat","attachment","messageSent","lastMessage","updateMessage","chatwootMessageIds","keyId","msg","inReplyTo","inReplyToExternalId","types","typeKey","result","latitude","longitude","locationName","locationAddress","vCardData","contactInfo","line","value","formattedContact","numberCount","listTitle","listDescription","listFooter","formattedList","section","sectionIndex","row","rowIndex","responseTitle","responseDescription","responseRowId","event","ignoreJids","ignoreGroups","ignoreContacts","originalMessage","bodyMessage","quotedId","isMedia","adsMessage","reactionMessage","getConversation","downloadBase64","nameFile","originalFilename","parsedFile","fileData","participantName","rawPhoneNumber","phoneMatch","formattedPhoneNumber","send","imgBuffer","extension","img","processedBuffer","truncStr","str","len","title","description","editedText","contactInboxSourceId","url","msgStatus","msgConnection","erroQRcode","msgQrCode","remoteJid","uri","messagesRaw","contactsRaw","totalMessagesImported","limitContacts","recentContacts","contactIdentifiers","identifier","contactsWithProfilePicture","acc","chatwootConfig","prepareMessage","sqlMessages","ids","filteredMessages","m","axios","Readable","DifyService","waMonitor","configService","prismaRepository","Logger","instance","data","error","content","str","session","settings","dify","remoteJid","pushName","endpoint","payload","contentSplit","Integration","response","message","conversationId","answer","stream","reader","chunk","events","line","eventString","event","linkRegex","textBuffer","lastIndex","match","getMediaType","url","extension","imageExtensions","audioExtensions","videoExtensions","documentExtensions","fullMatch","exclMark","altText","mediaType","beforeText","splitMessages","timePerChar","minDelay","maxDelay","multipleMessages","index","delay","resolve","remainingText","sendTelemetry","now","sessionUpdatedAt","diff","axios","downloadMediaMessage","FormData","OpenAI","P","OpenaiService","waMonitor","configService","prismaRepository","Logger","instance","openaiBot","remoteJid","content","messagesSystem","message","messagesAssistant","messagesUser","messageData","contentSplit","url","messages","Integration","completions","pushName","fromMe","threadId","sendTelemetry","runAssistant","response","session","settings","linkRegex","textBuffer","lastIndex","match","getMediaType","extension","imageExtensions","audioExtensions","videoExtensions","documentExtensions","fullMatch","exclMark","altText","mediaType","beforeText","splitMessages","timePerChar","minDelay","maxDelay","multipleMessages","index","delay","resolve","remainingText","data","creds","error","str","runId","functionUrl","getRun","toolCalls","toolCall","id","functionName","functionArgument","output","now","sessionUpdatedAt","diff","msg","updateMediaMessage","audio","lang","formData","getTypeMessage","msg","mediaId","configService","types","messageType","key","getMessageContent","typeKey","result","getConversationMessage","axios","TypebotService","waMonitor","configService","prismaRepository","Logger","instance","data","id","version","url","reqData","request","session","error","settings","remoteJid","messages","input","clientSideActions","processMessages","applyFormatting","err","findItemAndGetSecondsToWait","array","targetId","item","element","text","child","line","index","formats","formattedText","message","richText","listJson","titleMatch","descriptionMatch","buttonTextMatch","footerTextMatch","menuContent","sections","section","sectionTitle","rows","sectionData","row","buttonJson","thumbnailUrlMatch","footerMatch","buttonTypes","type","pattern","match","content","button","sendTelemetry","wait","resolve","items","msg","findTypebot","expire","typebot","keywordFinish","delayMessage","unknownMessage","listeningFromMe","stopBotFromMe","keepOpen","prefilledVariables","now","sessionUpdatedAt","diff","getConversationMessage","urlTypebot","Prisma","formatMXOrARNumber","jid","countryCode","formatBRNumber","regexp","match","joker","ddd","createJid","number","isArray","ChannelStartupService","_ChannelStartupService","configService","eventEmitter","prismaRepository","chatwootCache","Logger","ChatwootService","waMonitor","TypebotService","OpenaiService","DifyService","instance","name","v4_default","id","integration","number","token","data","ignoreJidsArray","event","NotFoundException","local","serverUrl","tzoffset","now","expose","instanceApikey","eventManager","jid","countryCode","regexp","match","joker","ddd","query","remoteJid","createJid","where","message","cleanedMessage","mediaUrl","keyFilters","timestampFilter","count","messages","Prisma","results","isArray","contact","lastMessage","axios","isBase64","isURL","FormData","mimeTypes","join","EvolutionStartupService","ChannelStartupService","configService","eventEmitter","prismaRepository","cache","chatwootCache","instance","number","createJid","data","error","InternalServerErrorException","received","messageRaw","v4_default","isAudio","openAiDefaultSettings","chatbotController","chatwootSentMessage","contactRaw","chat","chatRaw","message","options","file","isIntegration","quoted","webhookUrl","msg","resolve","audioFile","messageId","isBase64","isURL","key","findMessage","base64","fileBuffer","buffer","mediaType","mimetype","fileName","size","fullName","join","uploadFile","mediaUrl","getObjectUrl","BadRequestException","mediaMessage","arrayMatch","prepareMedia","mimeTypes","mediaData","audio","hash","formData","FormData","response","axios","status","axios","arrayUnique","isURL","FormData","createReadStream","mimeTypes","join","BusinessStartupService","ChannelStartupService","configService","eventEmitter","prismaRepository","cache","chatwootCache","baileysCache","providerFiles","message","params","urlServer","version","headers","e","number","createJid","data","content","error","InternalServerErrorException","id","result","received","vcard","contact","type","messageType","database","settings","messageRaw","pushName","key","buffer","mediaType","mimetype","contentDisposition","fileName","match","size","fullName","uploadFile","createdMessage","mediaUrl","getObjectUrl","openAiDefaultSettings","audioMessage","chatbotController","chatwootSentMessage","contactRaw","item","findMessage","convertMessage","options","isIntegration","quoted","webhookUrl","linkPreview","msg","messageSent","isImage","formattedText","section","row","status","BadRequestException","mediaMessage","formData","fileStream","arrayMatch","prepareMedia","file","mediaData","audio","hash","embeddedMedia","btnItems","btn","button","sectionsItems","list","sendData","OnWhatsAppDto","jid","exists","number","name","getBase64FromMediaMessageDto","WhatsAppNumberDto","NumberDto","ProfileNameDto","ProfileStatusDto","ProfilePictureDto","ReadMessageDto","ArchiveChatDto","MarkChatUnreadDto","PrivacySettingDto","DeleteMessage","OptionsMessage","Metadata","SendPresenceDto","UpdateMessageDto","BlockUserDto","BufferJSON","CacheService","cache","Logger","key","field","data","error","value","ttl","json","appendCriteria","ffmpegPath","cuid","dayjs","getAvailableNumbers","remoteJid","numbersAvailable","number","domain","numberWithDigit","numberWithoutDigit","prefix","saveOnWhatsappCache","data","configService","upsertsQuery","item","prismaRepository","getOnWhatsappCache","remoteJids","results","remoteJidsWithoutPlus","join","ROOT_DIR","INSTANCE_DIR","SRC_DIR","AUTH_DIR","STORE_DIR","BufferJSON","initAuthCreds","proto","fs","path","keyExists","sessionId","prismaRepository","saveKey","keyJson","exists","getAuthKey","auth","deleteAuthKey","useMultiFileAuthStatePrisma","cache","localFolder","INSTANCE_DIR","writeData","data","key","dataString","readData","rawData","removeData","creds","type","ids","id","value","tasks","category","BufferJSON","initAuthCreds","proto","isNotEmpty","AuthStateProvider","providerFiles","Logger","instance","error","writeData","data","key","json","response","readData","removeData","creds","type","ids","id","value","tasks","category","initAuthCreds","proto","useMultiFileAuthStateRedisDb","instanceName","cache","logger","Logger","writeData","data","key","error","readData","removeData","creds","type","ids","id","value","tasks","category","axios","makeWASocket","BufferJSON","delay","DisconnectReason","downloadMediaMessage","fetchLatestBaileysVersion","generateWAMessageFromContent","getAggregateVotesInPollMessage","getContentType","getDevice","isJidBroadcast","isJidGroup","isJidNewsletter","isJidUser","makeCacheableSignalKeyStore","prepareWAMessageMedia","proto","spawn","isArray","isBase64","isURL","randomBytes","ffmpeg","FormData","readFileSync","Long","mimeTypes","NodeCache","cron","release","join","P","qrcode","qrcodeTerminal","sharp","PassThrough","Readable","io","baileys_connection_state","useVoiceCallsBaileys","wavoip_token","baileys_sock","status","logger","socket","error","jid","callback","response","type","timeoutMs","jids","force","message","extraAttrs","useCache","ignoreZeroDevices","stanza","ciphertext","update","connection","packet","groupMetadataCache","CacheService","CacheEngine","configService","getVideoDuration","input","MediaInfoFactory","mediainfo","fileSize","readChunk","size","offset","fs","fd","buffer","result","duration","t","Readable","chunks","chunk","data","BaileysStartupService","ChannelStartupService","eventEmitter","prismaRepository","cache","chatwootCache","baileysCache","providerFiles","NodeCache","chats","existingChatIds","existingChatIdSet","chat","chatsToInsert","chatsRaw","contacts","contactsRaw","contact","usersContacts","c","saveOnWhatsappCache","chatwootImport","updatedContacts","update","instance","findParticipant","error","updateTransactions","messages","isLatest","progress","syncType","proto","timestampLimitToImport","daysLimitToImport","date","message","chatsRepository","messagesRaw","messagesRepository","Long","msg","type","requestId","settings","received","text","messageId","editedMessage","oldMessage","existingChat","messageRaw","isMedia","chatwootSentMessage","openAiDefaultSettings","status","media","mediaType","fileName","mimetype","mimeTypes","fullName","join","uploadFile","mediaUrl","getObjectUrl","downloadMediaMessage","P","chatbotController","contactRaw","args","readChatToUpdate","key","pollUpdates","pollCreation","getAggregateVotesInPollMessage","findMessage","chatToInsert","remoteJid","groupMetadata","groupMetadataUpdate","group","isJidGroup","participantsUpdate","label","savedLabel","l","labelName","labelData","database","instanceId","chatId","labelId","groupJid","cacheConf","meta","AuthStateProvider","profileName","creds","BufferJSON","qr","connection","lastDisconnect","DisconnectReason","optsQrcode","delay","qrcode","base64","qrcodeTerminal","statusCode","profilePic","formattedWuid","formattedName","full","webMessageInfo","messageSecretBase64","db","useMultiFileAuthStateRedisDb","useMultiFileAuthStatePrisma","number","session","browserOptions","browser","release","version","log","fetchLatestBaileysVersion","options","proxyUrls","axios","rand","proxyUrl","makeProxyAgent","socketConfig","makeCacheableSignalKeyStore","jid","isGroupJid","isBroadcast","isJidBroadcast","isNewsletter","isJidNewsletter","makeWASocket","useVoiceCallsBaileys","packet","payload","InternalServerErrorException","events","call","remotesJidMap","event","createJid","profilePictureUrl","instanceName","onWhatsapp","BadRequestException","info","picture","business","instanceNames","waMonitor","isVideo","callDuration","sender","mentions","linkPreview","quoted","ephemeralExpiration","option","randomBytes","m","generateWAMessageFromContent","id","isJidUser","value","isArray","jidList","batchSize","batches","_","i","msgId","firstMessage","firstBatch","batch","isIntegration","isWA","remainingDelay","messageSent","NotFoundException","participant","mention","convert","file","mediaData","mediaMessage","prepareMedia","prepareWAMessageMedia","isURL","arrayMatch","config","mediaInput","mediaBuffer","readFileSync","image","imageBuffer","isBase64","base64Data","timestamp","url","response","sharp","gifPlayback","generate","audio","inputStream","audioBuffer","PassThrough","resolve","reject","ffmpegProcess","spawn","ffmpegPath","outputChunks","stderrData","code","outputBuffer","err","formData","FormData","inputAudioStream","outputAudioStream","ffmpeg","length","characters","button","toString","obj","hasReplyButtons","btn","hasPixButton","hasOtherButtons","v4_default","buttons","vcard","jids","OnWhatsAppDto","groups","numbersToVerify","cachedNumbers","getOnWhatsappCache","filteredNumbers","cached","verify","users","user","numberVerified","numberWithDigit","numberWithoutDigit","v","prefix","numberJid","keys","read","where","lastMessage","last_message","del","isLogicalDeleted","existingKey","messageUpdate","getBuffer","convertToMp4","subtype","MessageSubtype","TypeMediaMessage","typeMessage","getContentType","ext","privacy","profile","name","pic","whatsappContact","create","participants","reply","getParticipants","fetch","inviteUrl","numbers","p","parsedParticipants","contentType","contentMsg","getDevice","quotedMessage","chatwootConfig","prepare","cron","unreadMessages","cuid","timeoutMs","force","extraAttrs","node","stanza","useCache","ignoreZeroDevices","ciphertext","ciphertextBuffer","ChannelController","prismaRepository","waMonitor","prisma","instanceData","data","Integration","BadRequestException","BusinessStartupService","EvolutionStartupService","BaileysStartupService","EvolutionController","ChannelController","prismaRepository","waMonitor","Logger","data","numberId","instance","axios","MetaController","ChannelController","prismaRepository","waMonitor","Logger","data","template","webhookUrl","axios","entry","numberId","instance","BaileysController","waMonitor","instanceName","body","normalizeString","str","advancedOperatorsSearch","data","query","filters","acc","filter","operator","values","value","normalizedItem","val","subVal","normalizedSubVal","findBotByTrigger","botRepository","content","instanceId","findTriggerAll","findTriggerAdvanced","advanced","advancedOperatorsSearch","findTriggerEquals","findRegex","findTriggerRegex","regex","findStartsWith","findTriggerStartsWith","startsWith","findEndsWith","findTriggerEndsWith","endsWith","findContains","findTriggerContains","contains","ChatbotController","prismaRepository","waMonitor","Logger","prisma","instance","remoteJid","msg","pushName","isIntegration","emitData","evolutionBotController","typebotController","openaiController","difyController","flowiseController","userMessageDebounce","content","debounceTime","callback","myQuestion","ignoreJids","ignoreGroups","ignoreContacts","session","botRepository","findBot","findBotByTrigger","isURL","ChatwootController","chatwootService","configService","prismaRepository","instance","data","BadRequestException","result","urlServer","chatwootCache","CacheService","CacheEngine","ChatwootService","waMonitor","DifyController","ChatbotController","difyService","prismaRepository","waMonitor","Logger","configService","instance","data","BadRequestException","instanceId","defaultSettingCheck","error","bots","botId","bot","settings","updateSettings","newSetttings","remoteJid","status","session","ignoreJids","jid","msg","content","getConversationMessage","findBot","fallback","expire","keywordFinish","delayMessage","unknownMessage","listeningFromMe","stopBotFromMe","keepOpen","debounceTime","splitMessages","timePerChar","key","debouncedContent","EvolutionBotController","ChatbotController","evolutionBotService","prismaRepository","waMonitor","Logger","instance","data","instanceId","defaultSettingCheck","error","bots","botId","bot","settings","updateSettings","newSetttings","remoteJid","status","session","ignoreJids","jid","msg","content","getConversationMessage","findBot","fallback","expire","keywordFinish","delayMessage","unknownMessage","listeningFromMe","stopBotFromMe","keepOpen","debounceTime","splitMessages","timePerChar","key","debouncedContent","axios","EvolutionBotService","waMonitor","configService","prismaRepository","Logger","instance","data","error","content","session","bot","remoteJid","pushName","payload","contentSplit","Integration","headers","response","settings","message","linkRegex","textBuffer","lastIndex","match","getMediaType","url","extension","imageExtensions","audioExtensions","videoExtensions","documentExtensions","fullMatch","exclMark","altText","mediaType","beforeText","splitMessages","timePerChar","minDelay","maxDelay","multipleMessages","index","delay","resolve","remainingText","sendTelemetry","now","sessionUpdatedAt","diff","FlowiseController","ChatbotController","flowiseService","prismaRepository","waMonitor","Logger","instance","data","instanceId","defaultSettingCheck","error","bots","botId","bot","settings","updateSettings","newSetttings","remoteJid","status","session","ignoreJids","jid","msg","content","getConversationMessage","findBot","fallback","expire","keywordFinish","delayMessage","unknownMessage","listeningFromMe","stopBotFromMe","keepOpen","debounceTime","splitMessages","timePerChar","key","debouncedContent","axios","FlowiseService","waMonitor","configService","prismaRepository","Logger","instance","data","error","content","bot","remoteJid","pushName","payload","contentSplit","Integration","headers","endpoint","response","session","settings","message","linkRegex","textBuffer","lastIndex","match","getMediaType","url","extension","imageExtensions","audioExtensions","videoExtensions","documentExtensions","fullMatch","exclMark","altText","mediaType","beforeText","splitMessages","timePerChar","minDelay","maxDelay","multipleMessages","index","delay","resolve","remainingText","sendTelemetry","now","sessionUpdatedAt","diff","OpenAI","OpenaiController","ChatbotController","openaiService","prismaRepository","waMonitor","Logger","configService","instance","data","BadRequestException","instanceId","error","openaiCredsId","creds","defaultSettings","apiKey","OpenAI","defaultSettingCheck","whereDuplication","bots","botId","bot","settings","updateSettings","newSetttings","remoteJid","status","session","openaiBot","ignoreJids","jid","msg","pushName","content","getConversationMessage","findBot","fallback","expire","keywordFinish","delayMessage","unknownMessage","listeningFromMe","stopBotFromMe","keepOpen","debounceTime","splitMessages","timePerChar","key","debouncedContent","axios","TypebotController","ChatbotController","typebotService","prismaRepository","waMonitor","Logger","configService","instance","data","BadRequestException","instanceId","defaultSettingCheck","error","bots","botId","bot","typebot","settings","updateSettings","newSetttings","instanceData","remoteJid","url","startSession","variables","expire","keywordFinish","delayMessage","unknownMessage","listeningFromMe","stopBotFromMe","keepOpen","debounceTime","ignoreJids","prefilledVariables","variable","findBot","id","version","reqData","request","axios","status","session","typebotData","jid","msg","content","getConversationMessage","fallback","key","debouncedContent","Pusher","_EventController","prismaRepository","waMonitor","integrationStatus","integrationName","prisma","name","status","instanceName","data","EventController","PusherController","EventController","prismaRepository","waMonitor","configService","Logger","APP_ID","KEY","SECRET","CLUSTER","USE_TLS","Pusher","instance","instanceName","data","origin","event","serverUrl","dateTime","sender","apiKey","local","integration","we","enabledLog","eventName","pusherData","payload","payloadSize","pusherLocalEvents","pusher","error","amqp","RabbitmqController","EventController","prismaRepository","waMonitor","configService","Logger","resolve","reject","uri","rabbitmqExchangeName","error","connection","channelError","channel","exchangeName","instanceName","origin","event","data","serverUrl","dateTime","sender","apiKey","integration","instanceRabbitmq","rabbitmqLocal","rabbitmqGlobal","rabbitmqEvents","prefixKey","we","logEnabled","message","retry","eventName","queueName","logData","events","SQS","SqsController","EventController","prismaRepository","waMonitor","configService","Logger","resolve","awsConfig","SQS","sqs","instanceName","origin","event","data","serverUrl","dateTime","sender","apiKey","integration","instanceSqs","sqsLocal","we","eventFormatted","queueName","sqsConfig","sqsUrl","message","params","err","logData","events","eventsArray","queueUrl","deleteErr","axios","isURL","WebhookController","EventController","prismaRepository","waMonitor","Logger","instanceName","data","isURL","BadRequestException","origin","event","serverUrl","dateTime","sender","apiKey","local","integration","instance","webhookConfig","configService","webhookLocal","webhookHeaders","we","transformedWe","enabledLog","webhookData","baseURL","logData","httpService","axios","error","globalURL","maxRetries","delaySeconds","attempts","resolve","SocketIO","WebsocketController","EventController","prismaRepository","waMonitor","configService","Logger","httpServer","SocketIO","socket","data","error","cors","instanceName","origin","event","serverUrl","dateTime","sender","apiKey","integration","configEv","logEnabled","message","instance","err","EventManager","prismaRepository","waMonitor","WebsocketController","WebhookController","RabbitmqController","SqsController","PusherController","prisma","websocket","webhook","rabbitmq","sqs","pusher","httpServer","eventData","instanceName","data","S3Controller","s3Service","instance","data","S3Service","prismaRepository","Logger","instance","query","where","media","error","BadRequestException","data","getObjectUrl","axios","execSync","ProviderFiles","configService","Logger","url","error","pid","instance","response","key","data","PrismaClient","Query","PrismaRepository","configService","Logger","execSync","rmSync","join","WAMonitoringService","eventEmitter","configService","prismaRepository","providerFiles","cache","chatwootCache","baileysCache","Logger","instance","time","Integration","instanceNames","inexistentInstances","NotFoundException","clientName","where","instanceId","number","instanceName","r","instanceDbId","INSTANCE_DIR","STORE_DIR","error","data","instanceData","channelController","keys","k","instances","ProxyService","waMonitor","Logger","instance","data","result","SettingsService","waMonitor","Logger","instance","data","result","axios","TemplateService","waMonitor","prismaRepository","configService","Logger","instance","getInstance","response","data","postData","error","method","urlServer","version","headers","e","logger","Logger","chatwootCache","configService","CacheService","CacheEngine","ChatwootService","cache","baileysCache","providerFiles","ProviderFiles","prismaRepository","PrismaRepository","waMonitor","WAMonitoringService","eventEmitter","s3Service","S3Service","s3Controller","S3Controller","templateService","TemplateService","templateController","TemplateController","proxyService","ProxyService","proxyController","ProxyController","chatwootService","chatwootController","ChatwootController","settingsService","SettingsService","settingsController","SettingsController","instanceController","InstanceController","sendMessageController","SendMessageController","callController","CallController","chatController","ChatController","groupController","GroupController","labelController","LabelController","eventManager","EventManager","chatbotController","ChatbotController","channelController","ChannelController","evolutionController","EvolutionController","metaController","MetaController","baileysController","BaileysController","typebotService","TypebotService","typebotController","TypebotController","openaiService","OpenaiService","openaiController","OpenaiController","difyService","DifyService","difyController","DifyController","evolutionBotService","EvolutionBotService","evolutionBotController","EvolutionBotController","flowiseService","FlowiseService","flowiseController","FlowiseController","logger","Logger","apikey","req","_","next","env","configService","key","db","UnauthorizedException","ForbiddenException","param","prismaRepository","error","authGuard","getInstance","instanceName","cacheConf","configService","exists","waMonitor","keyExists","cache","prismaRepository","error","InternalServerErrorException","instanceExistsGuard","req","_","next","param","BadRequestException","NotFoundException","instanceLoggedGuard","instance","ForbiddenException","Telemetry","req","res","next","sendTelemetry","telemetry_guard_default","Router","Router","EvolutionRouter","RouterBroker","configService","req","res","body","response","evolutionController","Router","MetaRouter","RouterBroker","configService","req","res","body","response","metaController","ChatwootDto","ChatwootInstanceMixin","Base","EventDto","EventInstanceMixin","Base","IntegrationDto","EventInstanceMixin","ChatwootInstanceMixin","InstanceDto","IntegrationDto","SetPresenceDto","isNotEmpty","propertyNames","properties","property","instanceSchema","v4_default","Integration","presenceOnlySchema","Router","BaileysRouter","RouterBroker","guards","req","res","response","instanceSchema","InstanceDto","instance","baileysController","ChannelRouter","configService","guards","Router","EvolutionRouter","MetaRouter","BaileysRouter","isNotEmpty","propertyNames","properties","property","numberDefinition","whatsappNumberSchema","v4_default","readMessageSchema","archiveChatSchema","markChatUnreadSchema","deleteMessageSchema","profilePictureSchema","updateMessageSchema","presenceSchema","blockUserSchema","contactValidateSchema","messageValidateSchema","messageUpSchema","privacySettingsSchema","profileNameSchema","profileStatusSchema","profileSchema","isNotEmpty","propertyNames","properties","property","createGroupSchema","v4_default","groupJidSchema","getParticipantsSchema","groupSendInviteSchema","groupInviteSchema","AcceptGroupInviteSchema","updateParticipantsSchema","updateSettingsSchema","toggleEphemeralSchema","updateGroupPictureSchema","updateGroupSubjectSchema","updateGroupDescriptionSchema","isNotEmpty","propertyNames","properties","property","numberDefinition","handleLabelSchema","v4_default","isNotEmpty","propertyNames","properties","property","numberDefinition","templateMessageSchema","v4_default","quotedOptionsSchema","offerCallSchema","textMessageSchema","mediaMessageSchema","ptvMessageSchema","audioMessageSchema","statusMessageSchema","stickerMessageSchema","locationMessageSchema","contactMessageSchema","reactionMessageSchema","pollMessageSchema","listMessageSchema","buttonsMessageSchema","isNotEmpty","propertyNames","properties","property","proxySchema","v4_default","isNotEmpty","propertyNames","properties","property","settingsSchema","v4_default","isNotEmpty","propertyNames","properties","property","templateSchema","v4_default","isNotEmpty","propertyNames","properties","property","chatwootSchema","v4_default","isNotEmpty","propertyNames","properties","property","difySchema","v4_default","difyStatusSchema","difySettingSchema","difyIgnoreJidSchema","isNotEmpty","propertyNames","properties","property","evolutionBotSchema","v4_default","evolutionBotStatusSchema","evolutionBotSettingSchema","evolutionBotIgnoreJidSchema","isNotEmpty","propertyNames","properties","property","flowiseSchema","v4_default","flowiseStatusSchema","flowiseSettingSchema","flowiseIgnoreJidSchema","isNotEmpty","propertyNames","properties","property","openaiSchema","v4_default","openaiCredsSchema","openaiStatusSchema","openaiSettingSchema","openaiIgnoreJidSchema","isNotEmpty","propertyNames","properties","property","typebotSchema","v4_default","typebotStatusSchema","typebotStartSchema","typebotSettingSchema","typebotIgnoreJidSchema","isNotEmpty","propertyNames","properties","property","pusherSchema","v4_default","EventController","isNotEmpty","propertyNames","properties","property","webhookSchema","v4_default","EventController","eventSchema","v4_default","EventController","Router","ChatwootRouter","RouterBroker","guards","req","res","response","chatwootSchema","ChatwootDto","instance","data","chatwootController","instanceSchema","InstanceDto","IgnoreJidDto","DifyDto","DifySettingDto","Router","DifyRouter","RouterBroker","guards","req","res","response","difySchema","DifyDto","instance","data","difyController","instanceSchema","InstanceDto","difySettingSchema","DifySettingDto","difyStatusSchema","difyIgnoreJidSchema","IgnoreJidDto","OpenaiCredsDto","OpenaiDto","OpenaiSettingDto","Router","OpenaiRouter","RouterBroker","guards","req","res","response","openaiCredsSchema","OpenaiCredsDto","instance","data","openaiController","instanceSchema","InstanceDto","openaiSchema","OpenaiDto","openaiSettingSchema","OpenaiSettingDto","openaiStatusSchema","openaiIgnoreJidSchema","IgnoreJidDto","TypebotDto","TypebotSettingDto","Router","TypebotRouter","RouterBroker","guards","req","res","response","typebotSchema","TypebotDto","instance","data","typebotController","instanceSchema","InstanceDto","typebotSettingSchema","TypebotSettingDto","typebotStartSchema","typebotStatusSchema","typebotIgnoreJidSchema","IgnoreJidDto","Router","Router","EvolutionBotDto","EvolutionBotSettingDto","EvolutionBotRouter","RouterBroker","guards","Router","req","res","response","evolutionBotSchema","EvolutionBotDto","instance","data","evolutionBotController","instanceSchema","InstanceDto","evolutionBotSettingSchema","EvolutionBotSettingDto","evolutionBotStatusSchema","evolutionBotIgnoreJidSchema","IgnoreJidDto","Router","FlowiseDto","FlowiseSettingDto","FlowiseRouter","RouterBroker","guards","Router","req","res","response","flowiseSchema","FlowiseDto","instance","data","flowiseController","instanceSchema","InstanceDto","flowiseSettingSchema","FlowiseSettingDto","flowiseStatusSchema","flowiseIgnoreJidSchema","IgnoreJidDto","ChatbotRouter","guards","Router","EvolutionBotRouter","ChatwootRouter","TypebotRouter","OpenaiRouter","DifyRouter","FlowiseRouter","Router","PusherRouter","RouterBroker","guards","req","res","response","pusherSchema","EventDto","instance","data","eventManager","instanceSchema","InstanceDto","Router","RabbitmqRouter","RouterBroker","guards","req","res","response","eventSchema","EventDto","instance","data","eventManager","instanceSchema","InstanceDto","Router","SqsRouter","RouterBroker","guards","req","res","response","eventSchema","EventDto","instance","data","eventManager","instanceSchema","InstanceDto","Router","WebhookRouter","RouterBroker","configService","guards","req","res","response","webhookSchema","EventDto","instance","data","eventManager","instanceSchema","InstanceDto","Router","WebsocketRouter","RouterBroker","guards","req","res","response","eventSchema","EventDto","instance","data","eventManager","instanceSchema","InstanceDto","Router","EventRouter","configService","guards","WebhookRouter","WebsocketRouter","RabbitmqRouter","PusherRouter","SqsRouter","MediaDto","isNotEmpty","propertyNames","properties","property","s3Schema","v4_default","s3UrlSchema","Router","S3Router","RouterBroker","guards","req","res","response","s3Schema","MediaDto","instance","data","s3Controller","s3UrlSchema","Router","StorageRouter","guards","S3Router","Router","fs","mimeTypes","path","Metadata","OfferCallDto","Router","CallRouter","RouterBroker","guards","Router","req","res","response","offerCallSchema","OfferCallDto","instance","data","callController","Router","ChatRouter","RouterBroker","guards","Router","req","res","response","whatsappNumberSchema","WhatsAppNumberDto","instance","data","chatController","readMessageSchema","ReadMessageDto","archiveChatSchema","ArchiveChatDto","markChatUnreadSchema","MarkChatUnreadDto","deleteMessageSchema","DeleteMessage","profilePictureSchema","NumberDto","getBase64FromMediaMessageDto","updateMessageSchema","UpdateMessageDto","presenceSchema","SendPresenceDto","blockUserSchema","BlockUserDto","contactValidateSchema","Query","messageValidateSchema","messageUpSchema","ProfilePictureDto","profileSchema","profileNameSchema","ProfileNameDto","profileStatusSchema","ProfileStatusDto","InstanceDto","privacySettingsSchema","PrivacySettingDto","CreateGroupDto","GroupPictureDto","GroupSubjectDto","GroupDescriptionDto","GroupJid","GetParticipant","GroupInvite","AcceptGroupInvite","GroupSendInvite","GroupUpdateParticipantDto","GroupUpdateSettingDto","GroupToggleEphemeralDto","Router","GroupRouter","RouterBroker","guards","Router","req","res","response","createGroupSchema","CreateGroupDto","instance","data","groupController","updateGroupSubjectSchema","GroupSubjectDto","updateGroupPictureSchema","GroupPictureDto","updateGroupDescriptionSchema","GroupDescriptionDto","groupJidSchema","GroupJid","getParticipantsSchema","GetParticipant","groupInviteSchema","GroupInvite","AcceptGroupInviteSchema","AcceptGroupInvite","groupSendInviteSchema","GroupSendInvite","updateParticipantsSchema","GroupUpdateParticipantDto","updateSettingsSchema","GroupUpdateSettingDto","toggleEphemeralSchema","GroupToggleEphemeralDto","Router","InstanceRouter","RouterBroker","configService","guards","Router","req","res","response","instanceSchema","InstanceDto","instance","instanceController","key","presenceOnlySchema","SetPresenceDto","data","LabelDto","HandleLabelDto","Router","LabelRouter","RouterBroker","guards","Router","req","res","response","LabelDto","instance","labelController","handleLabelSchema","HandleLabelDto","data","Metadata","SendTextDto","SendStatusDto","Metadata","SendPollDto","SendMediaDto","SendPtvDto","SendStickerDto","SendButtonsDto","Metadata","SendLocationDto","SendListDto","Metadata","SendTemplateDto","Metadata","SendContactDto","SendReactionDto","Router","multer","upload","multer","MessageRouter","RouterBroker","guards","Router","req","res","response","templateMessageSchema","SendTemplateDto","instance","data","sendMessageController","textMessageSchema","SendTextDto","bodyData","mediaMessageSchema","SendMediaDto","ptvMessageSchema","SendPtvDto","audioMessageSchema","statusMessageSchema","SendStatusDto","stickerMessageSchema","SendStickerDto","locationMessageSchema","SendLocationDto","contactMessageSchema","SendContactDto","reactionMessageSchema","SendReactionDto","pollMessageSchema","SendPollDto","listMessageSchema","SendListDto","buttonsMessageSchema","SendButtonsDto","SettingsDto","Router","SettingsRouter","RouterBroker","guards","Router","req","res","response","settingsSchema","SettingsDto","instance","data","settingsController","InstanceDto","TemplateDto","Router","TemplateRouter","RouterBroker","configService","guards","Router","req","res","response","templateSchema","TemplateDto","instance","data","templateController","instanceSchema","InstanceDto","express","Router","path","ViewsRouter","RouterBroker","basePath","indexPath","req","res","router","Router","serverConfig","configService","guards","instanceExistsGuard","instanceLoggedGuard","authGuard","telemetry","telemetry_guard_default","packageJson","fs","ViewsRouter","req","res","fileName","basePath","path","filePath","mimeTypes","next","InstanceRouter","MessageRouter","CallRouter","ChatRouter","GroupRouter","TemplateRouter","SettingsRouter","ProxyRouter","LabelRouter","ChannelRouter","EventRouter","ChatbotRouter","StorageRouter","BadRequestException","objectError","UnauthorizedException","objectError","ForbiddenException","objectError","NotFoundException","objectError","InternalServerErrorException","objectError","validate","logger","Logger","RouterBroker","path","param","route","args","request","schema","ClassRef","execute","ref","body","instance","v","message","stack","BadRequestException","property","groupJid","inviteCode","getParticipants","ProxyDto","Router","ProxyRouter","RouterBroker","guards","Router","req","res","response","proxySchema","ProxyDto","instance","data","proxyController","instanceSchema","InstanceDto"]}