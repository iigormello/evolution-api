{"version":3,"sources":["../../../src/api/abstract/abstract.repository.ts","../../../src/config/path.config.ts"],"sourcesContent":["import { ConfigService, Database } from '@config/env.config';\nimport { ROOT_DIR } from '@config/path.config';\nimport { existsSync, mkdirSync, writeFileSync } from 'fs';\nimport { join } from 'path';\n\nexport type IInsert = { insertCount: number };\n\nexport interface IRepository {\n  insert(data: any, instanceName: string, saveDb?: boolean): Promise<IInsert>;\n  update(data: any, instanceName: string, saveDb?: boolean): Promise<IInsert>;\n  find(query: any): Promise<any>;\n  delete(query: any, force?: boolean): Promise<any>;\n\n  dbSettings: Database;\n  readonly storePath: string;\n}\n\ntype WriteStore<U> = {\n  path: string;\n  fileName: string;\n  data: U;\n};\n\nexport abstract class Repository implements IRepository {\n  constructor(configService: ConfigService) {\n    this.dbSettings = configService.get<Database>('DATABASE');\n  }\n\n  dbSettings: Database;\n  readonly storePath = join(ROOT_DIR, 'store');\n\n  public writeStore = <T = any>(create: WriteStore<T>) => {\n    if (!existsSync(create.path)) {\n      mkdirSync(create.path, { recursive: true });\n    }\n    try {\n      writeFileSync(join(create.path, create.fileName + '.json'), JSON.stringify({ ...create.data }), {\n        encoding: 'utf-8',\n      });\n\n      return { message: 'create - success' };\n    } finally {\n      create.data = undefined;\n    }\n  };\n\n  // eslint-disable-next-line\n    public insert(data: any, instanceName: string, saveDb = false): Promise<IInsert> {\n    throw new Error('Method not implemented.');\n  }\n\n  // eslint-disable-next-line\n    public update(data: any, instanceName: string, saveDb = false): Promise<IInsert> {\n    throw new Error('Method not implemented.');\n  }\n\n  // eslint-disable-next-line\n    public find(query: any): Promise<any> {\n    throw new Error('Method not implemented.');\n  }\n\n  // eslint-disable-next-line\n    delete(query: any, force?: boolean): Promise<any> {\n    throw new Error('Method not implemented.');\n  }\n}\n","import { join } from 'path';\n\nexport const ROOT_DIR = process.cwd();\nexport const INSTANCE_DIR = join(ROOT_DIR, 'instances');\nexport const SRC_DIR = join(ROOT_DIR, 'src');\nexport const AUTH_DIR = join(ROOT_DIR, 'store', 'auth');\nexport const STORE_DIR = join(ROOT_DIR, 'store');\n"],"mappings":"4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,gBAAAE,IAAA,eAAAC,EAAAH,GCAA,IAAAI,EAAqB,gBAERC,EAAW,QAAQ,IAAI,EACvBC,KAAe,QAAKD,EAAU,WAAW,EACzCE,KAAU,QAAKF,EAAU,KAAK,EAC9BG,KAAW,QAAKH,EAAU,QAAS,MAAM,EACzCI,KAAY,QAAKJ,EAAU,OAAO,EDJ/C,IAAAK,EAAqD,cACrDC,EAAqB,gBAoBCC,EAAf,KAAiD,CACtD,YAAYC,EAA8B,CAK1C,KAAS,aAAY,QAAKC,EAAU,OAAO,EAE3C,KAAO,WAAuBC,GAA0B,IACjD,cAAWA,EAAO,IAAI,MACzB,aAAUA,EAAO,KAAM,CAAE,UAAW,EAAK,CAAC,EAE5C,GAAI,CACF,6BAAc,QAAKA,EAAO,KAAMA,EAAO,SAAW,OAAO,EAAG,KAAK,UAAU,CAAE,GAAGA,EAAO,IAAK,CAAC,EAAG,CAC9F,SAAU,OACZ,CAAC,EAEM,CAAE,QAAS,kBAAmB,CACvC,QAAE,CACAA,EAAO,KAAO,MAChB,CACF,EAnBE,KAAK,WAAaF,EAAc,IAAc,UAAU,CAC1D,CAqBS,OAAOG,EAAWC,EAAsBC,EAAS,GAAyB,CACjF,MAAM,IAAI,MAAM,yBAAyB,CAC3C,CAGS,OAAOF,EAAWC,EAAsBC,EAAS,GAAyB,CACjF,MAAM,IAAI,MAAM,yBAAyB,CAC3C,CAGS,KAAKC,EAA0B,CACtC,MAAM,IAAI,MAAM,yBAAyB,CAC3C,CAGE,OAAOA,EAAYC,EAA+B,CAClD,MAAM,IAAI,MAAM,yBAAyB,CAC3C,CACF","names":["abstract_repository_exports","__export","Repository","__toCommonJS","import_path","ROOT_DIR","INSTANCE_DIR","SRC_DIR","AUTH_DIR","STORE_DIR","import_fs","import_path","Repository","configService","ROOT_DIR","create","data","instanceName","saveDb","query","force"]}